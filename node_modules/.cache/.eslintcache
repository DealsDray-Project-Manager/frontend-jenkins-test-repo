[{"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\index.jsx":"1","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\serviceWorker.js":"2","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\App.jsx":"3","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\Store.js":"4","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\routes\\routes.jsx":"5","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\index.js":"6","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\index.js":"7","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\contexts\\PrexoAuthContext.js":"8","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\contexts\\SettingsContext.js":"9","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\reducers\\RootReducer.js":"10","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\ecommerce.js":"11","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\axios.js":"12","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\reducers\\NavigationReducer.js":"13","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\icons\\GoogleIcon.jsx":"14","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\reducers\\EcommerceReducer.js":"15","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\AuditRouter.js":"16","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Change-password\\change-password-router.js":"17","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\reducers\\NotificationReducer.js":"18","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\mock.js":"19","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\settings.js":"20","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\actions\\EcommerceActions.js":"21","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\actions\\NavigationAction.js":"22","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\actions\\NotificationActions.js":"23","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Change-password\\change -password.jsx":"24","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\report-data-display.jsx":"25","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Audit-requests.jsx":"26","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\start-segrigation.jsx":"27","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Assigned-other-tray\\assigned-other-tray.jsx":"28","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Loadable\\Loadable.jsx":"29","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Assigned-other-tray\\view-item.jsx":"30","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Dashboard\\dashboard.jsx":"31","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\navigations.js":"32","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\initThemes.js":"33","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Settings.js":"34","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Settings.js":"35","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\themeColors.js":"36","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\themeOptions.js":"37","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Dashboard\\card.jsx":"38","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLoading\\MatxLoading.jsx":"39","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Report\\amazon-data.jsx":"40","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bqc-all-api-report.jsx":"41","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bqc-user-report.jsx":"42","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bot-user-rport.jsx":"43","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bqc-api-data.jsx":"44","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Report\\charging-user-report.jsx":"45","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Typography.js":"46","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\auth\\authRoles.js":"47","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\components.js":"48","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\hooks\\useAuth.js":"49","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\reducers\\ScrumBoardReducer.js":"50","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\index.js":"51","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\notification.js":"52","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\scrumBoard.js":"53","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\list.js":"54","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\todos.js":"55","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\chat.js":"56","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\inbox.js":"57","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\users.js":"58","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\icons\\FacebookIcon.jsx":"59","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\EchartTheme.jsx":"60","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\actions\\ScrumBoardActions.js":"61","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\MatxTheme.jsx":"62","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLogo\\MatxLogo.jsx":"63","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\cards\\SimpleCard.jsx":"64","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxProgressBar\\MatxProgressBar.jsx":"65","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\MatxLayout.jsx":"66","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\ConfirmationDialog\\ConfirmationDialog.jsx":"67","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\charts\\EchartCreator.jsx":"68","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\charts\\RechartCreator.jsx":"69","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\AddToCartButton\\AddToCartButton.jsx":"70","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\ChatHead\\ChatHead.jsx":"71","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxListItem1\\MatxListItem1.jsx":"72","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\RectangleAvatar\\RectangleAvatar.jsx":"73","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\ChatAvatar\\ChatAvatar.jsx":"74","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxSnackbar\\MatxSnackbar.jsx":"75","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\chat-box-2\\Chatbox.jsx":"76","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxSidenav\\MatxSidenavContent.jsx":"77","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxSidenav\\MatxSidenavContainer.jsx":"78","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxSidenav\\MatxSidenav.jsx":"79","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxHorizontalNav\\MatxHorizontalNav.jsx":"80","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxVerticalNav\\MatxVerticalNavExpansionPanel.jsx":"81","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxVerticalNav\\MatxVerticalNav.jsx":"82","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxSearchBox\\MatxSearchBox.jsx":"83","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxSuspense\\MatxSuspense.jsx":"84","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxMenu\\MatxMenu.jsx":"85","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxToolbarMenu\\MatxToolbarMenu.jsx":"86","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxDivider\\MatxDivider.jsx":"87","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Breadcrumb\\Breadcrumb.jsx":"88","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\calendarEvents.js":"89","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\invoice.js":"90","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\auth.js":"91","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\Login\\loginRouter.js":"92","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Charging-components\\ChargingRoutes.js":"93","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bqc-components\\BqcRoutes.js":"94","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\SortingRoutes.js":"95","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\BotRoutes.js":"96","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\WarehouseRouter.js":"97","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Mis-routers.js":"98","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\sup-admin-routers.js":"99","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout2\\Layout2.jsx":"100","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout1\\Layout1.jsx":"101","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\ScrumBoardRoutes.js":"102","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\Drag&Drop\\DragAndDropRoute.js":"103","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\PageLayoutRoutees.js":"104","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\data-table\\dataTableRoutes.js":"105","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\EcommerceRoutes.js":"106","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\sessions\\SessionRoutes.js":"107","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\calendar\\CalendarRoutes.js":"108","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\DashboardRoutes.js":"109","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\InboxRoutes.js":"110","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\MaterialRoutes.js":"111","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\invoice\\InvoioceRoutes.js":"112","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\PricingRoutes.js":"113","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\TodoRoutes.js":"114","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\pagesRoutes.js":"115","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\Login\\login.jsx":"116","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\map\\MapRoutes.js":"117","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\hooks\\useSettings.js":"118","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Charging-components\\Tray\\charging-out.jsx":"119","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\Tray-merge\\start-merge.jsx":"120","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\Tray\\view-item-tray.jsx":"121","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bqc-components\\Tray\\bqc-out.jsx":"122","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\Tray\\assigned-all-tray.jsx":"123","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\Bag\\bot-tray-transcation.jsx":"124","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Track\\item-track.jsx":"125","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Ready-for-rdl\\wht-tray.jsx":"126","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Merge\\Wht-merge\\wht-tray.jsx":"127","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\close-tray.jsx":"128","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Remove-invalid-item-from-bag\\view-item.jsx":"129","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Remove-invalid-item-from-bag\\bag.jsx":"130","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Track-item\\track-item.jsx":"131","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\search.jsx":"132","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\utils\\constant.js":"133","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\utils\\utils.js":"134","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Ready-for-charging\\bqc-tray.jsx":"135","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Ready-for-charging\\view-item.jsx":"136","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Ready-for-charging\\view-wht-tray.jsx":"137","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\list\\ListRoute.js":"138","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\FormsRoutes.js":"139","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\CRUD\\CrudRoutes.js":"140","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\chat-box\\ChatRoutes.js":"141","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\ChartsRoute.js":"142","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-tray\\history.jsx":"143","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-tray\\add-bulk-tray.jsx":"144","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-tray\\tray-audit.jsx":"145","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-tray\\view-tray.jsx":"146","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bag\\add-bulk-bag.jsx":"147","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Sidenav.jsx":"148","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\sessions\\NotFound.jsx":"149","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\SidenavTheme\\SidenavTheme.jsx":"150","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\SecondarySidebar\\SecondarySidebar.jsx":"151","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout2\\layout2.style.js":"152","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\auth\\AuthGuard.jsx":"153","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Topbar.jsx":"154","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Footer\\Footer.jsx":"155","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Topbar.jsx":"156","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Navbar.jsx":"157","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\Drag&Drop\\AppDragAndDrop.jsx":"158","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\AppScrumBoard.jsx":"159","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\data-table\\ExpandableMuiDataTable.jsx":"160","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\Checkout.jsx":"161","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\calendar\\MatxCalendar.jsx":"162","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\InventoryManagement.jsx":"163","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\AppInbox.jsx":"164","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\Pricing4.jsx":"165","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\invoice\\InvoiceDetails.jsx":"166","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\Pricing3.jsx":"167","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\Pricing2.jsx":"168","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\Pricing1.jsx":"169","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\user-profile\\UserProfile.jsx":"170","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\sessions\\register\\FirebaseRegister.jsx":"171","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\expansion-panel\\AppExpansionPanel.jsx":"172","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\TodoEditor.jsx":"173","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\map\\AppMap.jsx":"174","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerViewer.jsx":"175","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\Bot-user-report.jsx":"176","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\AmazonDetails.jsx":"177","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\BqcUserReport.jsx":"178","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\Bqc-api-data-summery.jsx":"179","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\BqcReport.jsx":"180","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\ChargingDetails.jsx":"181","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\CRUD\\CrudTable.jsx":"182","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\list\\AppList.jsx":"183","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\chat-box\\AppChat.jsx":"184","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-form\\CustomerForm.jsx":"185","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\apex-charts\\ApexCharts.jsx":"186","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\AppRechart.jsx":"187","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\SecondarySidebar\\SecondarySidebarContent.jsx":"188","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\SecondarySidebar\\SecondarySidebarToggle.jsx":"189","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sidenav\\Sidenav.jsx":"190","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\SecondarySidenavTheme\\SecondarySidenavTheme.jsx":"191","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Brand\\Brand.jsx":"192","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\InboxService.js":"193","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\TodoService.js":"194","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\invoice\\InvoiceEditor.jsx":"195","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\invoice\\InvoiceViewer.jsx":"196","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\InboxSidenav.jsx":"197","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\InboxTopbar.jsx":"198","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\InboxMessagList.jsx":"199","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\calendar\\EventEditorDialog.jsx":"200","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\SimplePricing4.jsx":"201","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\SimplePricing2.jsx":"202","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\SimplePricing3.jsx":"203","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\SimplePricing1.jsx":"204","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\InventoryDashboard.jsx":"205","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\RecentUpdates.jsx":"206","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\TagDialog.jsx":"207","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\map\\MarkerMap.jsx":"208","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\map\\BasicMap.jsx":"209","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerLogs.jsx":"210","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerInvoice.jsx":"211","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerDetails.jsx":"212","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-form\\ContactPersonForm.jsx":"213","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-form\\OtherDetailsForm.jsx":"214","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-form\\AddressForm.jsx":"215","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\SimpleRadialBar.jsx":"216","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\SimpleRadarChart.jsx":"217","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\SimpleTreeMap.jsx":"218","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\TwoSimplePieChart.jsx":"219","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\SimpleScatterChart.jsx":"220","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\LineBarAreaComposedChart.jsx":"221","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\SimpleBarChart.jsx":"222","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\StackedAreaChart.jsx":"223","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\SimpleLineChart.jsx":"224","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\apex-charts\\AdvanceLineChart2.jsx":"225","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\apex-charts\\AdvanceAreaChart.jsx":"226","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\apex-charts\\AdvanceLineChart.jsx":"227","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\ShoppingCart\\ShoppingCart.jsx":"228","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxCustomizer\\MatxCustomizer.jsx":"229","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\invoice\\InvoiceService.js":"230","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\calendar\\CalendarService.js":"231","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\InboxComposeDialog.jsx":"232","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\RecentUpdateCard.jsx":"233","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\InventoryDoughnutChart.jsx":"234","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxCustomizer\\BadgeSelected.jsx":"235","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerActions.jsx":"236","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerInfo.jsx":"237","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerBillings.jsx":"238","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerEmailSender.jsx":"239","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\Country.js":"240","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\TopSellingTable.jsx":"241","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\InventoryLineChart.jsx":"242","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\StatCard5.jsx":"243","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\chat-box\\ChatService.js":"244","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\list\\ListService.js":"245","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\CRUD\\TableService.js":"246","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\apex-charts\\HeatmapChart.jsx":"247","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\apex-charts\\PeiChart.jsx":"248","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\chat-box\\ChatSidenav.jsx":"249","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\chat-box\\ChatContainer.jsx":"250","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\list\\ListTopbar.jsx":"251","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\list\\ListView.jsx":"252","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\list\\GridView.jsx":"253","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\CRUD\\MemberEditorDialog.jsx":"254","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\expansion-panel\\CustomizedExpansionPanel.jsx":"255","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\expansion-panel\\DetailedExpansionPanel.jsx":"256","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\expansion-panel\\ControlledAccordion.jsx":"257","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\expansion-panel\\SimpleExpansionPanel.jsx":"258","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\user-profile\\UserProfileSidenav.jsx":"259","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\calendar\\CalendarHeader.jsx":"260","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\user-profile\\UserProfileContent.jsx":"261","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\PaymentDialog.jsx":"262","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\Drag&Drop\\SimpleListDnD.jsx":"263","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\Drag&Drop\\SimpleHorizontalList.jsx":"264","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\Drag&Drop\\TwoListDnD.jsx":"265","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\NotificationBar2\\NotificationBar2.jsx":"266","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-tray\\add-tray.jsx":"267","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\PropertyListingForm.jsx":"268","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\WizardForm.jsx":"269","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\UploadForm.jsx":"270","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\BasicForm.jsx":"271","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\echarts\\AppEchart.jsx":"272","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\invoice-form\\InvoiceForm.jsx":"273","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\order-form\\OrderForm.jsx":"274","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\chat-box\\EmptyMessage.jsx":"275","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\user-profile\\ProfileBarChart.jsx":"276","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\user-profile\\DummyChart.jsx":"277","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\invoice-form\\InvoiceFormService.js":"278","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\VerticalStepper.jsx":"279","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\HorizontalStepper.jsx":"280","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\forms\\SimpleForm.jsx":"281","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\order-form\\InvoiceCustomer.jsx":"282","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\order-form\\InvoiceOverview.jsx":"283","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\invoice-form\\InvoiceItemTable.jsx":"284","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\echarts\\ComparisonChart.jsx":"285","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\echarts\\AreaChart.jsx":"286","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\echarts\\Doughnut.jsx":"287","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\echarts\\LineChart.jsx":"288","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\NotificationBar2\\NotificationCard.jsx":"289","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\CustomerList.jsx":"290","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\products\\ProductForm.jsx":"291","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\products\\ProductList.jsx":"292","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\products\\ProductViewer.jsx":"293","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\user-list\\UserList4.jsx":"294","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\user-list\\UserList3.jsx":"295","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\user-list\\UserList2.jsx":"296","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\user-list\\UserList1.jsx":"297","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\AppTodo.jsx":"298","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\orders\\OrderList.jsx":"299","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\faq\\Faq2.jsx":"300","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\faq\\Faq1.jsx":"301","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\invoice\\InvoiceList.jsx":"302","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\AppProgress.jsx":"303","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\auto-complete\\AppAutoComplete.jsx":"304","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\AppSnackbar.jsx":"305","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\forms\\AppForm.jsx":"306","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\switch\\AppSwitch.jsx":"307","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\AppDialog.jsx":"308","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\radio\\AppRadio.jsx":"309","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\slider\\AppSlider.jsx":"310","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\Analytics3.jsx":"311","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\checkbox\\AppCheckbox.jsx":"312","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\menu\\AppMenu.jsx":"313","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\sup-admin-dshboard.jsx":"314","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\Analytics.jsx":"315","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\icons\\AppIcon.jsx":"316","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\buttons\\AppButton.jsx":"317","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\Shop.jsx":"318","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\Cart.jsx":"319","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\data-table\\SimpleMuiTable.jsx":"320","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\LeftSidebarCard.jsx":"321","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\sessions\\ForgotPassword.jsx":"322","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\Board.jsx":"323","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\tables\\AppTable.jsx":"324","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bag\\view-bag.jsx":"325","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bag\\bag-audit.jsx":"326","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\sessions\\login\\FirebaseLogin.jsx":"327","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-location\\view-location.jsx":"328","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-brands\\bulk-add-brand.jsx":"329","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Dashboard\\dashboard.jsx":"330","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-warehouse\\view-warehouse.jsx":"331","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-brands\\view-brands.jsx":"332","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-products\\view-products.jsx":"333","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-users\\view-users.jsx":"334","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-users\\user-history.jsx":"335","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-products\\add-bulk-products.jsx":"336","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Merge\\Mmt-merge\\mmt-tray.jsx":"337","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Merge\\Mmt-merge\\view-item.jsx":"338","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Uic-manage\\uic-generated.jsx":"339","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Uic-manage\\uic-downloaded.jsx":"340","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Uic-manage\\uic-not-generated.jsx":"341","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Uic-manage\\all.jsx":"342","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Recon-sheet\\not-delivered-orders.jsx":"343","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Recon-sheet\\delivered-orders.jsx":"344","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Delivery\\delivery.jsx":"345","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Delivery\\badDelivery.jsx":"346","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Delivery\\bulk-import-delivery.jsx":"347","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Order\\view-bad-order.jsx":"348","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Order\\bulk-import-order.jsx":"349","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\wht-assignment.jsx":"350","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\assign-for-sorting.jsx":"351","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\bot-tray.jsx":"352","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\view-clubed-item.jsx":"353","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-audit\\view-wht-tray.jsx":"354","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bot\\uic-gen.jsx":"355","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bot\\view-bot-tray.jsx":"356","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bqc\\view-wht-tray.jsx":"357","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-charging\\view-wht-tray.jsx":"358","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\user-list\\ProfileCard1.jsx":"359","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\TodoList.jsx":"360","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\TransitionSnackbar.jsx":"361","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\ConsecutiveSnackbar.jsx":"362","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\DirectionSnackbar.jsx":"363","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\StackedSnackbar.jsx":"364","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\PositionedSnackbar.jsx":"365","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\CustomizedSnackbar.jsx":"366","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\LongLengthSnackbar.jsx":"367","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\SimpleSnackbar.jsx":"368","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\ModifiedAreaChart.jsx":"369","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\UpgradeCard.jsx":"370","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\tables\\SimpleTable.jsx":"371","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\tables\\PaginationTable.jsx":"372","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\ShopSidenav.jsx":"373","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\ScrumBoardContainer.jsx":"374","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\ShopContainer.jsx":"375","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\Doughnut.jsx":"376","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\StatCards2.jsx":"377","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\menu\\MaxHeightMenu.jsx":"378","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\Campaigns.jsx":"379","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\menu\\CustomizedMenu.jsx":"380","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\menu\\SelectedMenu.jsx":"381","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\StatCard3.jsx":"382","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\menu\\SimpleMenu.jsx":"383","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\RowCards.jsx":"384","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\StatCards.jsx":"385","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\checkbox\\FormGroupCheckbox.jsx":"386","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bag\\add-bag.jsx":"387","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\checkbox\\LabelledCheckbox.jsx":"388","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\checkbox\\PlacingCheckboxLabel.jsx":"389","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-charging\\user-dailog.jsx":"390","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bqc\\user-dailog.jsx":"391","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bot\\assign-dialog.jsx":"392","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-audit\\user-dailog.jsx":"393","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\assign-dailog.jsx":"394","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-products\\add-products.jsx":"395","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-users\\new-users.jsx":"396","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-products\\edit-product.jsx":"397","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-brands\\add-brand.jsx":"398","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-warehouse\\add-warehouse.jsx":"399","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Dashboard\\card.jsx":"400","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-location\\add-location.jsx":"401","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\checkbox\\SimpleCheckbox.jsx":"402","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\AdvanceLineChart2.jsx":"403","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\AdvanceLineChart.jsx":"404","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\AdvanceAreaChart.jsx":"405","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\slider\\VerticalSlider.jsx":"406","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\slider\\InputSlider.jsx":"407","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\slider\\RangeSlider.jsx":"408","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\HeatmapChart.jsx":"409","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\slider\\DiscreteSlider.jsx":"410","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\TodoItem.jsx":"411","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\GridProductCard.jsx":"412","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\ListProductCard.jsx":"413","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\BoardList.jsx":"414","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\CardEditorDialog.jsx":"415","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\slider\\ContinuousSlider.jsx":"416","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\radio\\PlacingRadioLabel.jsx":"417","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\radio\\StandaloneRadio.jsx":"418","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\radio\\SimpleRadio.jsx":"419","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\ConfirmationDialog.jsx":"420","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\ResponsiveDialog.jsx":"421","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\OptimalSizeDialog.jsx":"422","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\CustomizedDialog.jsx":"423","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\FullScreenDialog.jsx":"424","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\FormDialog.jsx":"425","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\switch\\CustomizedSwitch.jsx":"426","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\DialogTransition.jsx":"427","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\SimpleDialog.jsx":"428","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\SimpleAlerts.jsx":"429","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\switch\\LabelledSwitch.jsx":"430","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\switch\\PlacingSwitchLabel.jsx":"431","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\switch\\FormGroupSwitch.jsx":"432","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\forms\\StepperForm.jsx":"433","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\switch\\SijmpleSwitch.jsx":"434","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\auto-complete\\BadgeAutocomplete.jsx":"435","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\auto-complete\\AsyncAutocomplete.jsx":"436","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\auto-complete\\AutocompleteCombo.jsx":"437","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\ScrumBoardCard.jsx":"438","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\user-list\\ProfileCard2.jsx":"439","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\ScrumBoardLabelBar.jsx":"440","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Order\\order.jsx":"441","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Dashboard\\dashboard.jsx":"442","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\handel-view-tray-item.jsx":"443","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\wht-tray-release.jsx":"444","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Report\\pmt-report.jsx":"445","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\other-tray-return-from-audit.jsx":"446","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Report\\mmt-report.jsx":"447","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Report\\Bot-report\\from-sku-summery-view-item.jsx":"448","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Report\\Bot-report\\sku-summery.jsx":"449","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Report\\Bot-report\\tray.jsx":"450","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Audit-request\\tray.jsx":"451","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Audit-request\\request-approve.jsx":"452","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-bqc\\close.jsx":"453","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-bqc\\view-item.jsx":"454","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-bqc\\tray.jsx":"455","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Bqc-request\\tray.jsx":"456","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Bqc-request\\approve.jsx":"457","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-charging\\close.jsx":"458","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-charging\\view-item.jsx":"459","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\In-charging\\tray.jsx":"460","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-charging\\tray.jsx":"461","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Charging-request\\requests.jsx":"462","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Charging-request\\approve.jsx":"463","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\In-sorting\\tray.jsx":"464","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\In-use-wht\\tray.jsx":"465","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\wht-tray\\wht-tray-item.jsx":"466","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\wht-tray\\tray.jsx":"467","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Merge\\Return-from-merge\\close.jsx":"468","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Merge\\Merge-request\\approve-request.jsx":"469","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Merge\\Merge-request\\tray.jsx":"470","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Sorting\\Sorting-requests\\detailed-view.jsx":"471","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Sorting\\Return-from-sorting\\close.jsx":"472","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Merge\\Return-from-merge\\tray.jsx":"473","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Sorting\\Return-from-sorting\\tray.jsx":"474","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Sorting\\Sorting-requests\\tray.jsx":"475","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Sorting\\Sorting-requests\\ex-vs-act.jsx":"476","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bot\\bot-to-release\\view-tray-item.jsx":"477","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bot\\bot-to-release\\bot-tray.jsx":"478","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Pmt-mmt\\issued-pmt-mmt\\view-item.jsx":"479","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Pmt-mmt\\issued-pmt-mmt\\issue-pmt-mmt.jsx":"480","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Pmt-mmt\\tray-close-request\\tray-requests.jsx":"481","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\view-tray-item.jsx":"482","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-scan.jsx":"483","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\close.jsx":"484","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\summer.jsx":"485","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\bag-close-requests.jsx":"486","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-issue-request\\bag-issue-request.jsx":"487","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-issue-request\\ex-vs-act.jsx":"488","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Dashboard\\dashboard.jsx":"489","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\Bag\\view-assigned-all-bag.jsx":"490","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\Dashboard\\dashboard.jsx":"491","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\Tray-merge\\tray.jsx":"492","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bqc-components\\Tray\\tray.jsx":"493","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bqc-components\\Tray\\item-segrgation.jsx":"494","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\Sorting-request\\tray.jsx":"495","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\Dashboard\\dashboard.jsx":"496","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\Sorting-request\\start-sorting.jsx":"497","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bqc-components\\Dashboard\\dashboard.jsx":"498","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Charging-components\\Tray\\tray.jsx":"499","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Charging-components\\Tray\\charging-in.jsx":"500","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Charging-components\\Dashboard\\dashboard.jsx":"501","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Dashboard\\card.jsx":"502","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Audit-request\\trayAssignMent.jsx":"503","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\assign-tray.jsx":"504","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Dashboard\\card.jsx":"505","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\Dashboard\\card.jsx":"506","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\Dashboard\\card.jsx":"507","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bqc-components\\Dashboard\\card.jsx":"508","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Charging-components\\Dashboard\\card.jsx":"509","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Ready-for-audit\\action.jsx":"510","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Report\\sales-bin.jsx":"511","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Ready-for-audit\\wht-tray-view.jsx":"512"},{"size":917,"mtime":1676658201033,"results":"513","hashOfConfig":"514"},{"size":5907,"mtime":1676034427099,"results":"515","hashOfConfig":"514"},{"size":743,"mtime":1676034426410,"results":"516","hashOfConfig":"514"},{"size":541,"mtime":1676034426733,"results":"517","hashOfConfig":"514"},{"size":3652,"mtime":1676105788004,"results":"518","hashOfConfig":"514"},{"size":314,"mtime":1676034427095,"results":"519","hashOfConfig":"514"},{"size":2273,"mtime":1676034426677,"results":"520","hashOfConfig":"514"},{"size":3651,"mtime":1676034426726,"results":"521","hashOfConfig":"514"},{"size":912,"mtime":1676034426727,"results":"522","hashOfConfig":"514"},{"size":478,"mtime":1676034426743,"results":"523","hashOfConfig":"514"},{"size":15443,"mtime":1676034427084,"results":"524","hashOfConfig":"514"},{"size":1686,"mtime":1676660429707,"results":"525","hashOfConfig":"514"},{"size":450,"mtime":1676034426739,"results":"526","hashOfConfig":"514"},{"size":562,"mtime":1676034426676,"results":"527","hashOfConfig":"514"},{"size":1822,"mtime":1676034426739,"results":"528","hashOfConfig":"514"},{"size":1321,"mtime":1676034426438,"results":"529","hashOfConfig":"514"},{"size":337,"mtime":1676034426464,"results":"530","hashOfConfig":"514"},{"size":747,"mtime":1676034426740,"results":"531","hashOfConfig":"514"},{"size":141,"mtime":1676034427096,"results":"532","hashOfConfig":"514"},{"size":947,"mtime":1676034426502,"results":"533","hashOfConfig":"514"},{"size":2626,"mtime":1676034426735,"results":"534","hashOfConfig":"514"},{"size":932,"mtime":1676034426736,"results":"535","hashOfConfig":"514"},{"size":1233,"mtime":1676034426737,"results":"536","hashOfConfig":"514"},{"size":8822,"mtime":1676034426464,"results":"537","hashOfConfig":"514"},{"size":24661,"mtime":1676658074962,"results":"538","hashOfConfig":"514"},{"size":6394,"mtime":1676658074853,"results":"539","hashOfConfig":"514"},{"size":13636,"mtime":1676658074979,"results":"540","hashOfConfig":"514"},{"size":7318,"mtime":1676034426422,"results":"541","hashOfConfig":"514"},{"size":256,"mtime":1676034426479,"results":"542","hashOfConfig":"514"},{"size":4639,"mtime":1676034426423,"results":"543","hashOfConfig":"514"},{"size":728,"mtime":1676034426441,"results":"544","hashOfConfig":"514"},{"size":25036,"mtime":1676658200995,"results":"545","hashOfConfig":"514"},{"size":413,"mtime":1676034426528,"results":"546","hashOfConfig":"514"},{"size":460,"mtime":1676034426494,"results":"547","hashOfConfig":"514"},{"size":485,"mtime":1676034426489,"results":"548","hashOfConfig":"514"},{"size":8835,"mtime":1676034426530,"results":"549","hashOfConfig":"514"},{"size":361,"mtime":1676034426531,"results":"550","hashOfConfig":"514"},{"size":3311,"mtime":1676034426440,"results":"551","hashOfConfig":"514"},{"size":828,"mtime":1676034426505,"results":"552","hashOfConfig":"514"},{"size":2531,"mtime":1676658074906,"results":"553","hashOfConfig":"514"},{"size":34085,"mtime":1676034426428,"results":"554","hashOfConfig":"514"},{"size":2916,"mtime":1676034426431,"results":"555","hashOfConfig":"514"},{"size":2523,"mtime":1676658074916,"results":"556","hashOfConfig":"514"},{"size":178946,"mtime":1676658074942,"results":"557","hashOfConfig":"514"},{"size":3607,"mtime":1676034426433,"results":"558","hashOfConfig":"514"},{"size":5740,"mtime":1676034426600,"results":"559","hashOfConfig":"514"},{"size":802,"mtime":1676034426414,"results":"560","hashOfConfig":"514"},{"size":3235,"mtime":1676034426528,"results":"561","hashOfConfig":"514"},{"size":282,"mtime":1676034426729,"results":"562","hashOfConfig":"514"},{"size":2884,"mtime":1676105545852,"results":"563","hashOfConfig":"514"},{"size":184,"mtime":1676034426499,"results":"564","hashOfConfig":"514"},{"size":1954,"mtime":1676034427089,"results":"565","hashOfConfig":"514"},{"size":24198,"mtime":1676034427091,"results":"566","hashOfConfig":"514"},{"size":3254,"mtime":1676034427088,"results":"567","hashOfConfig":"514"},{"size":4929,"mtime":1676034427092,"results":"568","hashOfConfig":"514"},{"size":9962,"mtime":1676034427083,"results":"569","hashOfConfig":"514"},{"size":21903,"mtime":1676034427085,"results":"570","hashOfConfig":"514"},{"size":41153,"mtime":1676034427094,"results":"571","hashOfConfig":"514"},{"size":487,"mtime":1676034426675,"results":"572","hashOfConfig":"514"},{"size":2013,"mtime":1676034426522,"results":"573","hashOfConfig":"514"},{"size":6396,"mtime":1676034426738,"results":"574","hashOfConfig":"514"},{"size":461,"mtime":1676034426523,"results":"575","hashOfConfig":"514"},{"size":2979,"mtime":1676034426507,"results":"576","hashOfConfig":"514"},{"size":742,"mtime":1676034426671,"results":"577","hashOfConfig":"514"},{"size":1335,"mtime":1676034426510,"results":"578","hashOfConfig":"514"},{"size":441,"mtime":1676034426499,"results":"579","hashOfConfig":"514"},{"size":2425,"mtime":1676034426475,"results":"580","hashOfConfig":"514"},{"size":747,"mtime":1676034426672,"results":"581","hashOfConfig":"514"},{"size":336,"mtime":1676034426673,"results":"582","hashOfConfig":"514"},{"size":2367,"mtime":1676357295042,"results":"583","hashOfConfig":"514"},{"size":1413,"mtime":1676034426473,"results":"584","hashOfConfig":"514"},{"size":1816,"mtime":1676034426503,"results":"585","hashOfConfig":"514"},{"size":1141,"mtime":1676034426586,"results":"586","hashOfConfig":"514"},{"size":825,"mtime":1676034426472,"results":"587","hashOfConfig":"514"},{"size":1030,"mtime":1676034426520,"results":"588","hashOfConfig":"514"},{"size":13330,"mtime":1676034426674,"results":"589","hashOfConfig":"514"},{"size":310,"mtime":1676034426517,"results":"590","hashOfConfig":"514"},{"size":324,"mtime":1676034426513,"results":"591","hashOfConfig":"514"},{"size":1205,"mtime":1676212570815,"results":"592","hashOfConfig":"514"},{"size":1868,"mtime":1676034426487,"results":"593","hashOfConfig":"514"},{"size":5241,"mtime":1676034426535,"results":"594","hashOfConfig":"514"},{"size":7976,"mtime":1676034426534,"results":"595","hashOfConfig":"514"},{"size":2032,"mtime":1676034426511,"results":"596","hashOfConfig":"514"},{"size":256,"mtime":1676034426521,"results":"597","hashOfConfig":"514"},{"size":2134,"mtime":1676034426508,"results":"598","hashOfConfig":"514"},{"size":1256,"mtime":1676034426533,"results":"599","hashOfConfig":"514"},{"size":877,"mtime":1676034426486,"results":"600","hashOfConfig":"514"},{"size":2586,"mtime":1676034426462,"results":"601","hashOfConfig":"514"},{"size":2403,"mtime":1676034427082,"results":"602","hashOfConfig":"514"},{"size":5402,"mtime":1676034427087,"results":"603","hashOfConfig":"514"},{"size":3683,"mtime":1676034427081,"results":"604","hashOfConfig":"514"},{"size":272,"mtime":1676034426412,"results":"605","hashOfConfig":"514"},{"size":808,"mtime":1676034426465,"results":"606","hashOfConfig":"514"},{"size":766,"mtime":1676034426453,"results":"607","hashOfConfig":"514"},{"size":995,"mtime":1676034426596,"results":"608","hashOfConfig":"514"},{"size":904,"mtime":1676034426444,"results":"609","hashOfConfig":"514"},{"size":10866,"mtime":1676368692615,"results":"610","hashOfConfig":"514"},{"size":5103,"mtime":1676658200679,"results":"611","hashOfConfig":"514"},{"size":4503,"mtime":1676034426722,"results":"612","hashOfConfig":"514"},{"size":3858,"mtime":1676034426492,"results":"613","hashOfConfig":"514"},{"size":5592,"mtime":1676034426489,"results":"614","hashOfConfig":"514"},{"size":455,"mtime":1676034427051,"results":"615","hashOfConfig":"514"},{"size":332,"mtime":1676034426754,"results":"616","hashOfConfig":"514"},{"size":521,"mtime":1676034426976,"results":"617","hashOfConfig":"514"},{"size":539,"mtime":1676034426827,"results":"618","hashOfConfig":"514"},{"size":572,"mtime":1676034426832,"results":"619","hashOfConfig":"514"},{"size":956,"mtime":1676034427056,"results":"620","hashOfConfig":"514"},{"size":310,"mtime":1676034426758,"results":"621","hashOfConfig":"514"},{"size":871,"mtime":1676034426798,"results":"622","hashOfConfig":"514"},{"size":287,"mtime":1676034426863,"results":"623","hashOfConfig":"514"},{"size":2377,"mtime":1676034426889,"results":"624","hashOfConfig":"514"},{"size":623,"mtime":1676034426873,"results":"625","hashOfConfig":"514"},{"size":735,"mtime":1676034427036,"results":"626","hashOfConfig":"514"},{"size":433,"mtime":1676034427075,"results":"627","hashOfConfig":"514"},{"size":2255,"mtime":1676034427017,"results":"628","hashOfConfig":"514"},{"size":10152,"mtime":1676034426411,"results":"629","hashOfConfig":"514"},{"size":277,"mtime":1676034426883,"results":"630","hashOfConfig":"514"},{"size":183,"mtime":1676034426730,"results":"631","hashOfConfig":"514"},{"size":39882,"mtime":1676034426471,"results":"632","hashOfConfig":"514"},{"size":12765,"mtime":1676034426597,"results":"633","hashOfConfig":"514"},{"size":5298,"mtime":1676034426450,"results":"634","hashOfConfig":"514"},{"size":31112,"mtime":1676658075026,"results":"635","hashOfConfig":"514"},{"size":5965,"mtime":1676034426449,"results":"636","hashOfConfig":"514"},{"size":56100,"mtime":1676658075008,"results":"637","hashOfConfig":"514"},{"size":24992,"mtime":1676034426575,"results":"638","hashOfConfig":"514"},{"size":8011,"mtime":1676034426717,"results":"639","hashOfConfig":"514"},{"size":16290,"mtime":1676034426556,"results":"640","hashOfConfig":"514"},{"size":14951,"mtime":1676034426660,"results":"641","hashOfConfig":"514"},{"size":6139,"mtime":1676034426719,"results":"642","hashOfConfig":"514"},{"size":5729,"mtime":1676034426718,"results":"643","hashOfConfig":"514"},{"size":23783,"mtime":1676034426721,"results":"644","hashOfConfig":"514"},{"size":4723,"mtime":1676658075131,"results":"645","hashOfConfig":"514"},{"size":178,"mtime":1676034426746,"results":"646","hashOfConfig":"514"},{"size":5030,"mtime":1676034426747,"results":"647","hashOfConfig":"514"},{"size":8309,"mtime":1676034426713,"results":"648","hashOfConfig":"514"},{"size":4529,"mtime":1676034426714,"results":"649","hashOfConfig":"514"},{"size":8123,"mtime":1676034426716,"results":"650","hashOfConfig":"514"},{"size":286,"mtime":1676034426877,"results":"651","hashOfConfig":"514"},{"size":1308,"mtime":1676034426843,"results":"652","hashOfConfig":"514"},{"size":293,"mtime":1676034426749,"results":"653","hashOfConfig":"514"},{"size":283,"mtime":1676034426790,"results":"654","hashOfConfig":"514"},{"size":633,"mtime":1676034426763,"results":"655","hashOfConfig":"514"},{"size":4375,"mtime":1676034426704,"results":"656","hashOfConfig":"514"},{"size":47526,"mtime":1676034426702,"results":"657","hashOfConfig":"514"},{"size":5729,"mtime":1676034426705,"results":"658","hashOfConfig":"514"},{"size":11138,"mtime":1676034426706,"results":"659","hashOfConfig":"514"},{"size":37806,"mtime":1676034426681,"results":"660","hashOfConfig":"514"},{"size":3137,"mtime":1676034426490,"results":"661","hashOfConfig":"514"},{"size":1225,"mtime":1676034427056,"results":"662","hashOfConfig":"514"},{"size":462,"mtime":1676034426526,"results":"663","hashOfConfig":"514"},{"size":872,"mtime":1676034426587,"results":"664","hashOfConfig":"514"},{"size":3356,"mtime":1676034426498,"results":"665","hashOfConfig":"514"},{"size":3508,"mtime":1676034426413,"results":"666","hashOfConfig":"514"},{"size":6227,"mtime":1676655343056,"results":"667","hashOfConfig":"514"},{"size":1815,"mtime":1676034426477,"results":"668","hashOfConfig":"514"},{"size":4819,"mtime":1676034426497,"results":"669","hashOfConfig":"514"},{"size":899,"mtime":1676034426493,"results":"670","hashOfConfig":"514"},{"size":1520,"mtime":1676034426753,"results":"671","hashOfConfig":"514"},{"size":5658,"mtime":1676034427042,"results":"672","hashOfConfig":"514"},{"size":3180,"mtime":1676034426824,"results":"673","hashOfConfig":"514"},{"size":10824,"mtime":1676034426829,"results":"674","hashOfConfig":"514"},{"size":5750,"mtime":1676034426760,"results":"675","hashOfConfig":"514"},{"size":1391,"mtime":1676034426800,"results":"676","hashOfConfig":"514"},{"size":3126,"mtime":1676034426858,"results":"677","hashOfConfig":"514"},{"size":9214,"mtime":1676034427036,"results":"678","hashOfConfig":"514"},{"size":1331,"mtime":1676034426867,"results":"679","hashOfConfig":"514"},{"size":681,"mtime":1676034427035,"results":"680","hashOfConfig":"514"},{"size":13097,"mtime":1676034427033,"results":"681","hashOfConfig":"514"},{"size":5520,"mtime":1676034427033,"results":"682","hashOfConfig":"514"},{"size":2008,"mtime":1676034426982,"results":"683","hashOfConfig":"514"},{"size":9105,"mtime":1676034427061,"results":"684","hashOfConfig":"514"},{"size":1736,"mtime":1676034426918,"results":"685","hashOfConfig":"514"},{"size":16861,"mtime":1676034427065,"results":"686","hashOfConfig":"514"},{"size":949,"mtime":1676034426882,"results":"687","hashOfConfig":"514"},{"size":1961,"mtime":1676034427012,"results":"688","hashOfConfig":"514"},{"size":2523,"mtime":1676034426685,"results":"689","hashOfConfig":"514"},{"size":2626,"mtime":1676034426684,"results":"690","hashOfConfig":"514"},{"size":2916,"mtime":1676034426689,"results":"691","hashOfConfig":"514"},{"size":177109,"mtime":1676658075122,"results":"692","hashOfConfig":"514"},{"size":33758,"mtime":1676034426688,"results":"693","hashOfConfig":"514"},{"size":3607,"mtime":1676034426689,"results":"694","hashOfConfig":"514"},{"size":7830,"mtime":1676034426750,"results":"695","hashOfConfig":"514"},{"size":2396,"mtime":1676034426876,"results":"696","hashOfConfig":"514"},{"size":5412,"mtime":1676034426788,"results":"697","hashOfConfig":"514"},{"size":14158,"mtime":1676034426993,"results":"698","hashOfConfig":"514"},{"size":6560,"mtime":1676034426767,"results":"699","hashOfConfig":"514"},{"size":2693,"mtime":1676034426778,"results":"700","hashOfConfig":"514"},{"size":2485,"mtime":1676034426588,"results":"701","hashOfConfig":"514"},{"size":1539,"mtime":1676034426589,"results":"702","hashOfConfig":"514"},{"size":1924,"mtime":1676034426591,"results":"703","hashOfConfig":"514"},{"size":258,"mtime":1676034426524,"results":"704","hashOfConfig":"514"},{"size":1265,"mtime":1676034426461,"results":"705","hashOfConfig":"514"},{"size":504,"mtime":1676034426864,"results":"706","hashOfConfig":"514"},{"size":902,"mtime":1676034427077,"results":"707","hashOfConfig":"514"},{"size":21005,"mtime":1676034426869,"results":"708","hashOfConfig":"514"},{"size":8766,"mtime":1676034426873,"results":"709","hashOfConfig":"514"},{"size":2823,"mtime":1676034426865,"results":"710","hashOfConfig":"514"},{"size":1788,"mtime":1676034426866,"results":"711","hashOfConfig":"514"},{"size":6221,"mtime":1676034426861,"results":"712","hashOfConfig":"514"},{"size":6533,"mtime":1676034426760,"results":"713","hashOfConfig":"514"},{"size":9760,"mtime":1676034427041,"results":"714","hashOfConfig":"514"},{"size":7927,"mtime":1676034427039,"results":"715","hashOfConfig":"514"},{"size":7928,"mtime":1676034427040,"results":"716","hashOfConfig":"514"},{"size":7922,"mtime":1676034427038,"results":"717","hashOfConfig":"514"},{"size":5746,"mtime":1676034426810,"results":"718","hashOfConfig":"514"},{"size":2449,"mtime":1676034426814,"results":"719","hashOfConfig":"514"},{"size":4028,"mtime":1676034427065,"results":"720","hashOfConfig":"514"},{"size":876,"mtime":1676034426885,"results":"721","hashOfConfig":"514"},{"size":585,"mtime":1676034426883,"results":"722","hashOfConfig":"514"},{"size":3361,"mtime":1676034427011,"results":"723","hashOfConfig":"514"},{"size":4475,"mtime":1676034427009,"results":"724","hashOfConfig":"514"},{"size":947,"mtime":1676034427005,"results":"725","hashOfConfig":"514"},{"size":9402,"mtime":1676034426991,"results":"726","hashOfConfig":"514"},{"size":3919,"mtime":1676034426994,"results":"727","hashOfConfig":"514"},{"size":12279,"mtime":1676034426990,"results":"728","hashOfConfig":"514"},{"size":1947,"mtime":1676034426782,"results":"729","hashOfConfig":"514"},{"size":1477,"mtime":1676034426781,"results":"730","hashOfConfig":"514"},{"size":5539,"mtime":1676034426784,"results":"731","hashOfConfig":"514"},{"size":1579,"mtime":1676034426786,"results":"732","hashOfConfig":"514"},{"size":1302,"mtime":1676034426783,"results":"733","hashOfConfig":"514"},{"size":2558,"mtime":1676034426779,"results":"734","hashOfConfig":"514"},{"size":2241,"mtime":1676034426780,"results":"735","hashOfConfig":"514"},{"size":2790,"mtime":1676034426786,"results":"736","hashOfConfig":"514"},{"size":2494,"mtime":1676034426781,"results":"737","hashOfConfig":"514"},{"size":2262,"mtime":1676034426766,"results":"738","hashOfConfig":"514"},{"size":2073,"mtime":1676034426764,"results":"739","hashOfConfig":"514"},{"size":2179,"mtime":1676034426765,"results":"740","hashOfConfig":"514"},{"size":8762,"mtime":1676034426590,"results":"741","hashOfConfig":"514"},{"size":11857,"mtime":1676034426483,"results":"742","hashOfConfig":"514"},{"size":516,"mtime":1676034426872,"results":"743","hashOfConfig":"514"},{"size":437,"mtime":1676034426759,"results":"744","hashOfConfig":"514"},{"size":3805,"mtime":1676034426859,"results":"745","hashOfConfig":"514"},{"size":1628,"mtime":1676034426813,"results":"746","hashOfConfig":"514"},{"size":964,"mtime":1676034426810,"results":"747","hashOfConfig":"514"},{"size":261,"mtime":1676034426480,"results":"748","hashOfConfig":"514"},{"size":2044,"mtime":1676034426997,"results":"749","hashOfConfig":"514"},{"size":3094,"mtime":1676034427008,"results":"750","hashOfConfig":"514"},{"size":2369,"mtime":1676034426997,"results":"751","hashOfConfig":"514"},{"size":2542,"mtime":1676034427007,"results":"752","hashOfConfig":"514"},{"size":10249,"mtime":1676034426831,"results":"753","hashOfConfig":"514"},{"size":6661,"mtime":1676034426821,"results":"754","hashOfConfig":"514"},{"size":1961,"mtime":1676034426811,"results":"755","hashOfConfig":"514"},{"size":2339,"mtime":1676034426818,"results":"756","hashOfConfig":"514"},{"size":837,"mtime":1676034426791,"results":"757","hashOfConfig":"514"},{"size":106,"mtime":1676034426878,"results":"758","hashOfConfig":"514"},{"size":466,"mtime":1676034426752,"results":"759","hashOfConfig":"514"},{"size":2552,"mtime":1676034426767,"results":"760","hashOfConfig":"514"},{"size":1276,"mtime":1676034426768,"results":"761","hashOfConfig":"514"},{"size":3554,"mtime":1676034426792,"results":"762","hashOfConfig":"514"},{"size":7257,"mtime":1676034426789,"results":"763","hashOfConfig":"514"},{"size":2482,"mtime":1676034426879,"results":"764","hashOfConfig":"514"},{"size":6178,"mtime":1676034426880,"results":"765","hashOfConfig":"514"},{"size":5053,"mtime":1676034426877,"results":"766","hashOfConfig":"514"},{"size":6884,"mtime":1676034426751,"results":"767","hashOfConfig":"514"},{"size":4490,"mtime":1676034426921,"results":"768","hashOfConfig":"514"},{"size":3108,"mtime":1676034426922,"results":"769","hashOfConfig":"514"},{"size":4605,"mtime":1676034426919,"results":"770","hashOfConfig":"514"},{"size":2659,"mtime":1676034426923,"results":"771","hashOfConfig":"514"},{"size":4486,"mtime":1676034426986,"results":"772","hashOfConfig":"514"},{"size":3160,"mtime":1676034426758,"results":"773","hashOfConfig":"514"},{"size":17472,"mtime":1676034426984,"results":"774","hashOfConfig":"514"},{"size":5169,"mtime":1676034426837,"results":"775","hashOfConfig":"514"},{"size":4263,"mtime":1676034426756,"results":"776","hashOfConfig":"514"},{"size":3993,"mtime":1676034426755,"results":"777","hashOfConfig":"514"},{"size":7044,"mtime":1676034426757,"results":"778","hashOfConfig":"514"},{"size":3590,"mtime":1676034426583,"results":"779","hashOfConfig":"514"},{"size":22049,"mtime":1676658075152,"results":"780","hashOfConfig":"514"},{"size":9936,"mtime":1676034426845,"results":"781","hashOfConfig":"514"},{"size":775,"mtime":1676034426850,"results":"782","hashOfConfig":"514"},{"size":13357,"mtime":1676034426846,"results":"783","hashOfConfig":"514"},{"size":1122,"mtime":1676034426842,"results":"784","hashOfConfig":"514"},{"size":2522,"mtime":1676034426771,"results":"785","hashOfConfig":"514"},{"size":25362,"mtime":1676034426852,"results":"786","hashOfConfig":"514"},{"size":2418,"mtime":1676034426857,"results":"787","hashOfConfig":"514"},{"size":698,"mtime":1676034426792,"results":"788","hashOfConfig":"514"},{"size":1885,"mtime":1676034426980,"results":"789","hashOfConfig":"514"},{"size":1429,"mtime":1676034426979,"results":"790","hashOfConfig":"514"},{"size":500,"mtime":1676034426853,"results":"791","hashOfConfig":"514"},{"size":3701,"mtime":1676034426848,"results":"792","hashOfConfig":"514"},{"size":3967,"mtime":1676034426844,"results":"793","hashOfConfig":"514"},{"size":8439,"mtime":1676034426926,"results":"794","hashOfConfig":"514"},{"size":2473,"mtime":1676034426855,"results":"795","hashOfConfig":"514"},{"size":11453,"mtime":1676034426856,"results":"796","hashOfConfig":"514"},{"size":9288,"mtime":1676034426854,"results":"797","hashOfConfig":"514"},{"size":2270,"mtime":1676034426772,"results":"798","hashOfConfig":"514"},{"size":980,"mtime":1676034426772,"results":"799","hashOfConfig":"514"},{"size":3337,"mtime":1676034426775,"results":"800","hashOfConfig":"514"},{"size":2586,"mtime":1676034426776,"results":"801","hashOfConfig":"514"},{"size":2914,"mtime":1676034426584,"results":"802","hashOfConfig":"514"},{"size":7494,"mtime":1676034426988,"results":"803","hashOfConfig":"514"},{"size":15202,"mtime":1676034427019,"results":"804","hashOfConfig":"514"},{"size":9300,"mtime":1676034427020,"results":"805","hashOfConfig":"514"},{"size":6476,"mtime":1676034427021,"results":"806","hashOfConfig":"514"},{"size":5737,"mtime":1676034427031,"results":"807","hashOfConfig":"514"},{"size":5993,"mtime":1676034427031,"results":"808","hashOfConfig":"514"},{"size":4102,"mtime":1676034427029,"results":"809","hashOfConfig":"514"},{"size":6993,"mtime":1676034427027,"results":"810","hashOfConfig":"514"},{"size":2285,"mtime":1676034427063,"results":"811","hashOfConfig":"514"},{"size":10163,"mtime":1676034427015,"results":"812","hashOfConfig":"514"},{"size":11661,"mtime":1676034427014,"results":"813","hashOfConfig":"514"},{"size":6946,"mtime":1676034427013,"results":"814","hashOfConfig":"514"},{"size":5977,"mtime":1676034426871,"results":"815","hashOfConfig":"514"},{"size":3087,"mtime":1676034426886,"results":"816","hashOfConfig":"514"},{"size":1483,"mtime":1676034426892,"results":"817","hashOfConfig":"514"},{"size":2448,"mtime":1676034426955,"results":"818","hashOfConfig":"514"},{"size":1156,"mtime":1676034426925,"results":"819","hashOfConfig":"514"},{"size":1808,"mtime":1676034426962,"results":"820","hashOfConfig":"514"},{"size":2553,"mtime":1676034426907,"results":"821","hashOfConfig":"514"},{"size":1393,"mtime":1676034426939,"results":"822","hashOfConfig":"514"},{"size":1752,"mtime":1676034426945,"results":"823","hashOfConfig":"514"},{"size":22864,"mtime":1676034426794,"results":"824","hashOfConfig":"514"},{"size":1647,"mtime":1676034426900,"results":"825","hashOfConfig":"514"},{"size":1539,"mtime":1676034426932,"results":"826","hashOfConfig":"514"},{"size":792,"mtime":1676034426823,"results":"827","hashOfConfig":"514"},{"size":4032,"mtime":1676034426793,"results":"828","hashOfConfig":"514"},{"size":20479,"mtime":1676034426931,"results":"829","hashOfConfig":"514"},{"size":7525,"mtime":1676034426898,"results":"830","hashOfConfig":"514"},{"size":7588,"mtime":1676034426838,"results":"831","hashOfConfig":"514"},{"size":7515,"mtime":1676034426828,"results":"832","hashOfConfig":"514"},{"size":2703,"mtime":1676034426825,"results":"833","hashOfConfig":"514"},{"size":7885,"mtime":1676034426975,"results":"834","hashOfConfig":"514"},{"size":3910,"mtime":1676034427055,"results":"835","hashOfConfig":"514"},{"size":5617,"mtime":1676034427043,"results":"836","hashOfConfig":"514"},{"size":1179,"mtime":1676034426971,"results":"837","hashOfConfig":"514"},{"size":10869,"mtime":1676034426683,"results":"838","hashOfConfig":"514"},{"size":5588,"mtime":1676034426682,"results":"839","hashOfConfig":"514"},{"size":11865,"mtime":1676034427059,"results":"840","hashOfConfig":"514"},{"size":8417,"mtime":1676034426695,"results":"841","hashOfConfig":"514"},{"size":18281,"mtime":1676034426692,"results":"842","hashOfConfig":"514"},{"size":728,"mtime":1676034426679,"results":"843","hashOfConfig":"514"},{"size":8337,"mtime":1676034426712,"results":"844","hashOfConfig":"514"},{"size":9305,"mtime":1676034426693,"results":"845","hashOfConfig":"514"},{"size":12695,"mtime":1676658075138,"results":"846","hashOfConfig":"514"},{"size":11691,"mtime":1676034426710,"results":"847","hashOfConfig":"514"},{"size":5896,"mtime":1676034426708,"results":"848","hashOfConfig":"514"},{"size":25528,"mtime":1676034426697,"results":"849","hashOfConfig":"514"},{"size":14631,"mtime":1676034426554,"results":"850","hashOfConfig":"514"},{"size":4515,"mtime":1676034426555,"results":"851","hashOfConfig":"514"},{"size":24747,"mtime":1676034426579,"results":"852","hashOfConfig":"514"},{"size":24849,"mtime":1676034426578,"results":"853","hashOfConfig":"514"},{"size":27032,"mtime":1676034426580,"results":"854","hashOfConfig":"514"},{"size":26967,"mtime":1676034426577,"results":"855","hashOfConfig":"514"},{"size":16111,"mtime":1676368390289,"results":"856","hashOfConfig":"514"},{"size":17436,"mtime":1676034426564,"results":"857","hashOfConfig":"514"},{"size":13407,"mtime":1676034426552,"results":"858","hashOfConfig":"514"},{"size":13370,"mtime":1676034426549,"results":"859","hashOfConfig":"514"},{"size":58718,"mtime":1676034426551,"results":"860","hashOfConfig":"514"},{"size":17162,"mtime":1676034426562,"results":"861","hashOfConfig":"514"},{"size":112285,"mtime":1676034426559,"results":"862","hashOfConfig":"514"},{"size":22007,"mtime":1676034426574,"results":"863","hashOfConfig":"514"},{"size":10237,"mtime":1676034426570,"results":"864","hashOfConfig":"514"},{"size":10762,"mtime":1676034426572,"results":"865","hashOfConfig":"514"},{"size":5928,"mtime":1676034426573,"results":"866","hashOfConfig":"514"},{"size":9644,"mtime":1676034426538,"results":"867","hashOfConfig":"514"},{"size":15231,"mtime":1676034426539,"results":"868","hashOfConfig":"514"},{"size":10083,"mtime":1676034426540,"results":"869","hashOfConfig":"514"},{"size":9849,"mtime":1676034426543,"results":"870","hashOfConfig":"514"},{"size":9557,"mtime":1676034426546,"results":"871","hashOfConfig":"514"},{"size":3773,"mtime":1676034427025,"results":"872","hashOfConfig":"514"},{"size":14040,"mtime":1676034427074,"results":"873","hashOfConfig":"514"},{"size":1383,"mtime":1676034426961,"results":"874","hashOfConfig":"514"},{"size":3017,"mtime":1676034426956,"results":"875","hashOfConfig":"514"},{"size":1650,"mtime":1676034426957,"results":"876","hashOfConfig":"514"},{"size":939,"mtime":1676034426960,"results":"877","hashOfConfig":"514"},{"size":2151,"mtime":1676034426959,"results":"878","hashOfConfig":"514"},{"size":2699,"mtime":1676034426957,"results":"879","hashOfConfig":"514"},{"size":1344,"mtime":1676034426958,"results":"880","hashOfConfig":"514"},{"size":1793,"mtime":1676034426959,"results":"881","hashOfConfig":"514"},{"size":2341,"mtime":1676034426812,"results":"882","hashOfConfig":"514"},{"size":1634,"mtime":1676034426822,"results":"883","hashOfConfig":"514"},{"size":3381,"mtime":1676034426974,"results":"884","hashOfConfig":"514"},{"size":5114,"mtime":1676034426972,"results":"885","hashOfConfig":"514"},{"size":10344,"mtime":1676034426841,"results":"886","hashOfConfig":"514"},{"size":8597,"mtime":1676034427048,"results":"887","hashOfConfig":"514"},{"size":5260,"mtime":1676034426839,"results":"888","hashOfConfig":"514"},{"size":3337,"mtime":1676034426805,"results":"889","hashOfConfig":"514"},{"size":3223,"mtime":1676034426820,"results":"890","hashOfConfig":"514"},{"size":1717,"mtime":1676034426934,"results":"891","hashOfConfig":"514"},{"size":2622,"mtime":1676034426804,"results":"892","hashOfConfig":"514"},{"size":2684,"mtime":1676034426933,"results":"893","hashOfConfig":"514"},{"size":2199,"mtime":1676034426936,"results":"894","hashOfConfig":"514"},{"size":2326,"mtime":1676034426816,"results":"895","hashOfConfig":"514"},{"size":1084,"mtime":1676034426938,"results":"896","hashOfConfig":"514"},{"size":3980,"mtime":1676034426815,"results":"897","hashOfConfig":"514"},{"size":4056,"mtime":1676034426819,"results":"898","hashOfConfig":"514"},{"size":3997,"mtime":1676034426902,"results":"899","hashOfConfig":"514"},{"size":13164,"mtime":1676034426680,"results":"900","hashOfConfig":"514"},{"size":3722,"mtime":1676034426903,"results":"901","hashOfConfig":"514"},{"size":1804,"mtime":1676034426904,"results":"902","hashOfConfig":"514"},{"size":3205,"mtime":1676034426544,"results":"903","hashOfConfig":"514"},{"size":3194,"mtime":1676034426543,"results":"904","hashOfConfig":"514"},{"size":3356,"mtime":1676034426539,"results":"905","hashOfConfig":"514"},{"size":3161,"mtime":1676658075044,"results":"906","hashOfConfig":"514"},{"size":3653,"mtime":1676034426567,"results":"907","hashOfConfig":"514"},{"size":10937,"mtime":1676034426697,"results":"908","hashOfConfig":"514"},{"size":15115,"mtime":1676658200920,"results":"909","hashOfConfig":"514"},{"size":4423,"mtime":1676034426700,"results":"910","hashOfConfig":"514"},{"size":5644,"mtime":1676034426691,"results":"911","hashOfConfig":"514"},{"size":11309,"mtime":1676034426711,"results":"912","hashOfConfig":"514"},{"size":4684,"mtime":1676034426678,"results":"913","hashOfConfig":"514"},{"size":9725,"mtime":1676034426694,"results":"914","hashOfConfig":"514"},{"size":2201,"mtime":1676034426905,"results":"915","hashOfConfig":"514"},{"size":2262,"mtime":1676034426804,"results":"916","hashOfConfig":"514"},{"size":2179,"mtime":1676034426802,"results":"917","hashOfConfig":"514"},{"size":2073,"mtime":1676034426801,"results":"918","hashOfConfig":"514"},{"size":1499,"mtime":1676034426952,"results":"919","hashOfConfig":"514"},{"size":1917,"mtime":1676034426950,"results":"920","hashOfConfig":"514"},{"size":792,"mtime":1676034426950,"results":"921","hashOfConfig":"514"},{"size":2588,"mtime":1676034426808,"results":"922","hashOfConfig":"514"},{"size":2559,"mtime":1676034426949,"results":"923","hashOfConfig":"514"},{"size":4489,"mtime":1676034427066,"results":"924","hashOfConfig":"514"},{"size":2878,"mtime":1676034426835,"results":"925","hashOfConfig":"514"},{"size":4382,"mtime":1676034426836,"results":"926","hashOfConfig":"514"},{"size":12189,"mtime":1676034427044,"results":"927","hashOfConfig":"514"},{"size":27925,"mtime":1676034427045,"results":"928","hashOfConfig":"514"},{"size":1247,"mtime":1676034426946,"results":"929","hashOfConfig":"514"},{"size":1625,"mtime":1676034426940,"results":"930","hashOfConfig":"514"},{"size":2186,"mtime":1676034426943,"results":"931","hashOfConfig":"514"},{"size":3666,"mtime":1676034426941,"results":"932","hashOfConfig":"514"},{"size":5053,"mtime":1676034426909,"results":"933","hashOfConfig":"514"},{"size":2102,"mtime":1676034426914,"results":"934","hashOfConfig":"514"},{"size":4361,"mtime":1676034426914,"results":"935","hashOfConfig":"514"},{"size":4090,"mtime":1676034426910,"results":"936","hashOfConfig":"514"},{"size":2976,"mtime":1676034426913,"results":"937","hashOfConfig":"514"},{"size":2174,"mtime":1676034426912,"results":"938","hashOfConfig":"514"},{"size":4635,"mtime":1676034426963,"results":"939","hashOfConfig":"514"},{"size":2215,"mtime":1676034426911,"results":"940","hashOfConfig":"514"},{"size":3508,"mtime":1676034426916,"results":"941","hashOfConfig":"514"},{"size":1937,"mtime":1676034426915,"results":"942","hashOfConfig":"514"},{"size":1706,"mtime":1676034426966,"results":"943","hashOfConfig":"514"},{"size":1788,"mtime":1676034426968,"results":"944","hashOfConfig":"514"},{"size":2025,"mtime":1676034426965,"results":"945","hashOfConfig":"514"},{"size":5189,"mtime":1676034426928,"results":"946","hashOfConfig":"514"},{"size":1604,"mtime":1676034426969,"results":"947","hashOfConfig":"514"},{"size":7653,"mtime":1676034426896,"results":"948","hashOfConfig":"514"},{"size":2686,"mtime":1676034426894,"results":"949","hashOfConfig":"514"},{"size":4237,"mtime":1676034426895,"results":"950","hashOfConfig":"514"},{"size":4380,"mtime":1676034427046,"results":"951","hashOfConfig":"514"},{"size":4337,"mtime":1676034427026,"results":"952","hashOfConfig":"514"},{"size":478,"mtime":1676034427050,"results":"953","hashOfConfig":"514"},{"size":18194,"mtime":1676658200840,"results":"954","hashOfConfig":"514"},{"size":780,"mtime":1676034426548,"results":"955","hashOfConfig":"514"},{"size":5360,"mtime":1676034426661,"results":"956","hashOfConfig":"514"},{"size":6394,"mtime":1676034426663,"results":"957","hashOfConfig":"514"},{"size":10237,"mtime":1676034426634,"results":"958","hashOfConfig":"514"},{"size":13946,"mtime":1676034426662,"results":"959","hashOfConfig":"514"},{"size":10198,"mtime":1676034426633,"results":"960","hashOfConfig":"514"},{"size":6091,"mtime":1676034426630,"results":"961","hashOfConfig":"514"},{"size":5976,"mtime":1676034426631,"results":"962","hashOfConfig":"514"},{"size":7079,"mtime":1676034426632,"results":"963","hashOfConfig":"514"},{"size":6097,"mtime":1676034426647,"results":"964","hashOfConfig":"514"},{"size":16306,"mtime":1676034426646,"results":"965","hashOfConfig":"514"},{"size":14173,"mtime":1676034426664,"results":"966","hashOfConfig":"514"},{"size":5930,"mtime":1676034426665,"results":"967","hashOfConfig":"514"},{"size":11917,"mtime":1676034426665,"results":"968","hashOfConfig":"514"},{"size":6124,"mtime":1676034426651,"results":"969","hashOfConfig":"514"},{"size":13370,"mtime":1676034426650,"results":"970","hashOfConfig":"514"},{"size":14268,"mtime":1676034426667,"results":"971","hashOfConfig":"514"},{"size":7075,"mtime":1676034426669,"results":"972","hashOfConfig":"514"},{"size":6586,"mtime":1676034426656,"results":"973","hashOfConfig":"514"},{"size":12184,"mtime":1676034426668,"results":"974","hashOfConfig":"514"},{"size":6103,"mtime":1676034426653,"results":"975","hashOfConfig":"514"},{"size":9921,"mtime":1676034426653,"results":"976","hashOfConfig":"514"},{"size":6584,"mtime":1676034426657,"results":"977","hashOfConfig":"514"},{"size":6500,"mtime":1676034426658,"results":"978","hashOfConfig":"514"},{"size":4854,"mtime":1676034426671,"results":"979","hashOfConfig":"514"},{"size":7315,"mtime":1676034426670,"results":"980","hashOfConfig":"514"},{"size":17838,"mtime":1676368390334,"results":"981","hashOfConfig":"514"},{"size":10259,"mtime":1676368390312,"results":"982","hashOfConfig":"514"},{"size":6201,"mtime":1676034426620,"results":"983","hashOfConfig":"514"},{"size":11144,"mtime":1676034426639,"results":"984","hashOfConfig":"514"},{"size":14160,"mtime":1676034426637,"results":"985","hashOfConfig":"514"},{"size":10617,"mtime":1676658075067,"results":"986","hashOfConfig":"514"},{"size":11659,"mtime":1676034426638,"results":"987","hashOfConfig":"514"},{"size":7523,"mtime":1676034426642,"results":"988","hashOfConfig":"514"},{"size":9712,"mtime":1676034426641,"results":"989","hashOfConfig":"514"},{"size":3663,"mtime":1676034426613,"results":"990","hashOfConfig":"514"},{"size":7664,"mtime":1676034426612,"results":"991","hashOfConfig":"514"},{"size":4517,"mtime":1676034426626,"results":"992","hashOfConfig":"514"},{"size":6117,"mtime":1676034426624,"results":"993","hashOfConfig":"514"},{"size":23394,"mtime":1676034426628,"results":"994","hashOfConfig":"514"},{"size":4517,"mtime":1676034426607,"results":"995","hashOfConfig":"514"},{"size":21657,"mtime":1676034426611,"results":"996","hashOfConfig":"514"},{"size":22300,"mtime":1676034426604,"results":"997","hashOfConfig":"514"},{"size":4884,"mtime":1676034426606,"results":"998","hashOfConfig":"514"},{"size":13163,"mtime":1676034426603,"results":"999","hashOfConfig":"514"},{"size":5730,"mtime":1676034426609,"results":"1000","hashOfConfig":"514"},{"size":33393,"mtime":1676034426610,"results":"1001","hashOfConfig":"514"},{"size":728,"mtime":1676034426617,"results":"1002","hashOfConfig":"514"},{"size":5868,"mtime":1676034426444,"results":"1003","hashOfConfig":"514"},{"size":728,"mtime":1676034426446,"results":"1004","hashOfConfig":"514"},{"size":6299,"mtime":1676034426597,"results":"1005","hashOfConfig":"514"},{"size":7316,"mtime":1676034426460,"results":"1006","hashOfConfig":"514"},{"size":24303,"mtime":1676658075038,"results":"1007","hashOfConfig":"514"},{"size":6556,"mtime":1676034426595,"results":"1008","hashOfConfig":"514"},{"size":728,"mtime":1676034426593,"results":"1009","hashOfConfig":"514"},{"size":16246,"mtime":1676034426594,"results":"1010","hashOfConfig":"514"},{"size":728,"mtime":1676655351325,"results":"1011","hashOfConfig":"514"},{"size":6896,"mtime":1676034426472,"results":"1012","hashOfConfig":"514"},{"size":13452,"mtime":1676034426469,"results":"1013","hashOfConfig":"514"},{"size":728,"mtime":1676034426468,"results":"1014","hashOfConfig":"514"},{"size":5777,"mtime":1676658200597,"results":"1015","hashOfConfig":"514"},{"size":8046,"mtime":1676034426648,"results":"1016","hashOfConfig":"514"},{"size":6308,"mtime":1676034426660,"results":"1017","hashOfConfig":"514"},{"size":6731,"mtime":1676368390297,"results":"1018","hashOfConfig":"514"},{"size":3208,"mtime":1676034426446,"results":"1019","hashOfConfig":"514"},{"size":3299,"mtime":1676034426592,"results":"1020","hashOfConfig":"514"},{"size":3010,"mtime":1676633784217,"results":"1021","hashOfConfig":"514"},{"size":3148,"mtime":1676034426467,"results":"1022","hashOfConfig":"514"},{"size":18795,"mtime":1676658075107,"results":"1023","hashOfConfig":"514"},{"size":7780,"mtime":1676368390351,"results":"1024","hashOfConfig":"514"},{"size":7760,"mtime":1676368390361,"results":"1025","hashOfConfig":"514"},{"filePath":"1026","messages":"1027","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1b3ruql",{"filePath":"1028","messages":"1029","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1031","messages":"1032","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1033","messages":"1034","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1035","messages":"1036","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1037","usedDeprecatedRules":"1030"},{"filePath":"1038","messages":"1039","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1040","messages":"1041","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1042","messages":"1043","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1044","usedDeprecatedRules":"1030"},{"filePath":"1045","messages":"1046","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1047","messages":"1048","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1049","messages":"1050","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1051","messages":"1052","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1053","messages":"1054","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1055","messages":"1056","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1057","messages":"1058","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1059","messages":"1060","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1061","messages":"1062","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1063","messages":"1064","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1065","messages":"1066","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1067","messages":"1068","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1069","messages":"1070","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1071","messages":"1072","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1073","messages":"1074","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1075","messages":"1076","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1077","usedDeprecatedRules":"1030"},{"filePath":"1078","messages":"1079","errorCount":0,"fatalErrorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1080","messages":"1081","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1082","messages":"1083","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1084","messages":"1085","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1086","usedDeprecatedRules":"1030"},{"filePath":"1087","messages":"1088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1089","messages":"1090","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1091","usedDeprecatedRules":"1030"},{"filePath":"1092","messages":"1093","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1094","messages":"1095","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1096","messages":"1097","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1098","messages":"1099","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1100","messages":"1101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1102","messages":"1103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1104","messages":"1105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1106","messages":"1107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1108","messages":"1109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1110","messages":"1111","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1112","messages":"1113","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1114","usedDeprecatedRules":"1030"},{"filePath":"1115","messages":"1116","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1117","usedDeprecatedRules":"1030"},{"filePath":"1118","messages":"1119","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1120","messages":"1121","errorCount":0,"fatalErrorCount":0,"warningCount":209,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1122","messages":"1123","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1124","usedDeprecatedRules":"1030"},{"filePath":"1125","messages":"1126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1127","messages":"1128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1129","messages":"1130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1131","messages":"1132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1133","messages":"1134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1135","messages":"1136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1137","messages":"1138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1139","messages":"1140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1141","messages":"1142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1143","messages":"1144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1145","messages":"1146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1147","messages":"1148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1149","messages":"1150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1151","messages":"1152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1153","messages":"1154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1155","messages":"1156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1157","messages":"1158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1159","messages":"1160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1161","messages":"1162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1163","messages":"1164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1165","messages":"1166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1167","messages":"1168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1169","messages":"1170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1171","messages":"1172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1173","messages":"1174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1175","messages":"1176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1177","messages":"1178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1179","messages":"1180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1181","messages":"1182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1183","messages":"1184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1185","messages":"1186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1187","messages":"1188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1189","messages":"1190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1191","messages":"1192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1193","messages":"1194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1195","messages":"1196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1197","messages":"1198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1199","messages":"1200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1201","messages":"1202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1203","messages":"1204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1205","messages":"1206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1207","messages":"1208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1209","messages":"1210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1211","messages":"1212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1213","messages":"1214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1215","messages":"1216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1217","messages":"1218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1219","messages":"1220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1221","messages":"1222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1223","messages":"1224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1225","messages":"1226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1227","messages":"1228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1229","messages":"1230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1231","messages":"1232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1233","messages":"1234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1235","messages":"1236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1237","messages":"1238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1239","messages":"1240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1241","messages":"1242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1243","messages":"1244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1245","messages":"1246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1247","messages":"1248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1249","messages":"1250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1251","messages":"1252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1253","messages":"1254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1255","messages":"1256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1257","messages":"1258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1259","messages":"1260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1261","messages":"1262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1263","messages":"1264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1265","messages":"1266","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1267","usedDeprecatedRules":"1030"},{"filePath":"1268","messages":"1269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1270","messages":"1271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1272","messages":"1273","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1274","usedDeprecatedRules":"1030"},{"filePath":"1275","messages":"1276","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1277","usedDeprecatedRules":"1030"},{"filePath":"1278","messages":"1279","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1280","usedDeprecatedRules":"1030"},{"filePath":"1281","messages":"1282","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1283","messages":"1284","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1285","usedDeprecatedRules":"1030"},{"filePath":"1286","messages":"1287","errorCount":0,"fatalErrorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1288","messages":"1289","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1290","usedDeprecatedRules":"1030"},{"filePath":"1291","messages":"1292","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1293","usedDeprecatedRules":"1030"},{"filePath":"1294","messages":"1295","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1296","usedDeprecatedRules":"1030"},{"filePath":"1297","messages":"1298","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1299","usedDeprecatedRules":"1030"},{"filePath":"1300","messages":"1301","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1302","usedDeprecatedRules":"1030"},{"filePath":"1303","messages":"1304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1305","messages":"1306","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1307","usedDeprecatedRules":"1030"},{"filePath":"1308","messages":"1309","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1310","messages":"1311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1312","messages":"1313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1314","messages":"1315","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1316","usedDeprecatedRules":"1030"},{"filePath":"1317","messages":"1318","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1319","usedDeprecatedRules":"1030"},{"filePath":"1320","messages":"1321","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1322","usedDeprecatedRules":"1030"},{"filePath":"1323","messages":"1324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1325","messages":"1326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1327","messages":"1328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1329","messages":"1330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1331","messages":"1332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1333","messages":"1334","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1335","usedDeprecatedRules":"1030"},{"filePath":"1336","messages":"1337","errorCount":0,"fatalErrorCount":0,"warningCount":85,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1338","usedDeprecatedRules":"1030"},{"filePath":"1339","messages":"1340","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1341","usedDeprecatedRules":"1030"},{"filePath":"1342","messages":"1343","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1344","usedDeprecatedRules":"1030"},{"filePath":"1345","messages":"1346","errorCount":0,"fatalErrorCount":0,"warningCount":74,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1347","usedDeprecatedRules":"1030"},{"filePath":"1348","messages":"1349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1350","messages":"1351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1352","messages":"1353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1354","messages":"1355","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1356","usedDeprecatedRules":"1030"},{"filePath":"1357","messages":"1358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1359","messages":"1360","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1361","usedDeprecatedRules":"1030"},{"filePath":"1362","messages":"1363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1364","messages":"1365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1366","messages":"1367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1368","messages":"1369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1370","messages":"1371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1372","messages":"1373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1374","messages":"1375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1376","messages":"1377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1378","messages":"1379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1380","messages":"1381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1382","messages":"1383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1384","messages":"1385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1386","messages":"1387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1388","messages":"1389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1390","messages":"1391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1392","messages":"1393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1394","messages":"1395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1396","messages":"1397","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1398","usedDeprecatedRules":"1030"},{"filePath":"1399","messages":"1400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1401","messages":"1402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1403","messages":"1404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1405","messages":"1406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1407","messages":"1408","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1409","usedDeprecatedRules":"1030"},{"filePath":"1410","messages":"1411","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1412","usedDeprecatedRules":"1030"},{"filePath":"1413","messages":"1414","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1117","usedDeprecatedRules":"1030"},{"filePath":"1415","messages":"1416","errorCount":0,"fatalErrorCount":0,"warningCount":209,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1417","messages":"1418","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1419","usedDeprecatedRules":"1030"},{"filePath":"1420","messages":"1421","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1124","usedDeprecatedRules":"1030"},{"filePath":"1422","messages":"1423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1424","messages":"1425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1426","messages":"1427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1428","messages":"1429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1430","messages":"1431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1432","messages":"1433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1434","messages":"1435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1436","messages":"1437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1438","messages":"1439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1440","messages":"1441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1442","messages":"1443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1444","messages":"1445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1446","messages":"1447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1448","messages":"1449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1450","messages":"1451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1452","messages":"1453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1454","messages":"1455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1456","messages":"1457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1458","messages":"1459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1460","messages":"1461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1462","messages":"1463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1464","messages":"1465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1466","messages":"1467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1468","messages":"1469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1470","messages":"1471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1472","messages":"1473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1474","messages":"1475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1476","messages":"1477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1478","messages":"1479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1480","messages":"1481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1482","messages":"1483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1484","messages":"1485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1486","messages":"1487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1488","messages":"1489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1490","messages":"1491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1492","messages":"1493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1494","messages":"1495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1496","messages":"1497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1498","messages":"1499","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1500","messages":"1501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1502","messages":"1503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1504","messages":"1505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1506","messages":"1507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1508","messages":"1509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1510","messages":"1511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1512","messages":"1513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1514","messages":"1515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1516","messages":"1517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1518","messages":"1519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1520","messages":"1521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1522","messages":"1523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1524","messages":"1525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1526","messages":"1527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1528","messages":"1529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1530","messages":"1531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1532","messages":"1533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1534","messages":"1535","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1536","messages":"1537","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1538","messages":"1539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1540","messages":"1541","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1542","messages":"1543","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1544","messages":"1545","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1546","messages":"1547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1548","messages":"1549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1550","messages":"1551","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1552","messages":"1553","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1554","messages":"1555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1556","messages":"1557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1558","messages":"1559","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1560","messages":"1561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1562","messages":"1563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1564","messages":"1565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1566","messages":"1567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1568","messages":"1569","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1570","messages":"1571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1572","messages":"1573","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1574","messages":"1575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1576","messages":"1577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1578","messages":"1579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1580","messages":"1581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1582","messages":"1583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1584","messages":"1585","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1586","messages":"1587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1588","messages":"1589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1590","messages":"1591","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1592","messages":"1593","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1594","messages":"1595","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1596","messages":"1597","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1598","messages":"1599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1600","messages":"1601","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1602","messages":"1603","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1604","messages":"1605","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1606","messages":"1607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1608","messages":"1609","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1610","messages":"1611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1612","messages":"1613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1614","messages":"1615","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1616","messages":"1617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1618","messages":"1619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1620","messages":"1621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1622","messages":"1623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1624","messages":"1625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1626","messages":"1627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1628","messages":"1629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1630","messages":"1631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1632","messages":"1633","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1634","messages":"1635","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1636","messages":"1637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1638","messages":"1639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1640","messages":"1641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1642","messages":"1643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1644","messages":"1645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1646","messages":"1647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1648","messages":"1649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1650","messages":"1651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1652","messages":"1653","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1654","messages":"1655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1656","messages":"1657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1658","messages":"1659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1660","messages":"1661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1662","messages":"1663","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1664","messages":"1665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1666","messages":"1667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1668","messages":"1669","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1670","messages":"1671","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1672","messages":"1673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1674","messages":"1675","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1676","messages":"1677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1678","messages":"1679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1680","messages":"1681","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1682","messages":"1683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1684","messages":"1685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1686","messages":"1687","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1688","usedDeprecatedRules":"1030"},{"filePath":"1689","messages":"1690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1691","messages":"1692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1693","messages":"1694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1695","messages":"1696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1697","messages":"1698","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1699","messages":"1700","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1701","messages":"1702","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1703","messages":"1704","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1705","messages":"1706","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1707","messages":"1708","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1709","messages":"1710","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1711","usedDeprecatedRules":"1030"},{"filePath":"1712","messages":"1713","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1714","usedDeprecatedRules":"1030"},{"filePath":"1715","messages":"1716","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1717","usedDeprecatedRules":"1030"},{"filePath":"1718","messages":"1719","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1720","usedDeprecatedRules":"1030"},{"filePath":"1721","messages":"1722","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1723","usedDeprecatedRules":"1030"},{"filePath":"1724","messages":"1725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1726","messages":"1727","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1728","usedDeprecatedRules":"1030"},{"filePath":"1729","messages":"1730","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1731","usedDeprecatedRules":"1030"},{"filePath":"1732","messages":"1733","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1734","messages":"1735","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1736","usedDeprecatedRules":"1030"},{"filePath":"1737","messages":"1738","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1739","usedDeprecatedRules":"1030"},{"filePath":"1740","messages":"1741","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1742","usedDeprecatedRules":"1030"},{"filePath":"1743","messages":"1744","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1745","usedDeprecatedRules":"1030"},{"filePath":"1746","messages":"1747","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1748","usedDeprecatedRules":"1030"},{"filePath":"1749","messages":"1750","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1751","usedDeprecatedRules":"1030"},{"filePath":"1752","messages":"1753","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1754","usedDeprecatedRules":"1030"},{"filePath":"1755","messages":"1756","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1757","usedDeprecatedRules":"1030"},{"filePath":"1758","messages":"1759","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1760","usedDeprecatedRules":"1030"},{"filePath":"1761","messages":"1762","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1763","usedDeprecatedRules":"1030"},{"filePath":"1764","messages":"1765","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1766","usedDeprecatedRules":"1030"},{"filePath":"1767","messages":"1768","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1769","usedDeprecatedRules":"1030"},{"filePath":"1770","messages":"1771","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1772","usedDeprecatedRules":"1030"},{"filePath":"1773","messages":"1774","errorCount":0,"fatalErrorCount":0,"warningCount":86,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1775","usedDeprecatedRules":"1030"},{"filePath":"1776","messages":"1777","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1778","usedDeprecatedRules":"1030"},{"filePath":"1779","messages":"1780","errorCount":0,"fatalErrorCount":0,"warningCount":154,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1781","usedDeprecatedRules":"1030"},{"filePath":"1782","messages":"1783","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1784","usedDeprecatedRules":"1030"},{"filePath":"1785","messages":"1786","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1787","usedDeprecatedRules":"1030"},{"filePath":"1788","messages":"1789","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1790","usedDeprecatedRules":"1030"},{"filePath":"1791","messages":"1792","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1793","usedDeprecatedRules":"1030"},{"filePath":"1794","messages":"1795","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1796","usedDeprecatedRules":"1030"},{"filePath":"1797","messages":"1798","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1799","usedDeprecatedRules":"1030"},{"filePath":"1800","messages":"1801","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1802","usedDeprecatedRules":"1030"},{"filePath":"1803","messages":"1804","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1805","usedDeprecatedRules":"1030"},{"filePath":"1806","messages":"1807","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1808","usedDeprecatedRules":"1030"},{"filePath":"1809","messages":"1810","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1811","messages":"1812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1813","messages":"1814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1815","messages":"1816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1817","messages":"1818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1819","messages":"1820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1821","messages":"1822","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1823","messages":"1824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1825","messages":"1826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1827","messages":"1828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1829","messages":"1830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1831","messages":"1832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1833","messages":"1834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1835","messages":"1836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1837","messages":"1838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1839","messages":"1840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1841","messages":"1842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1843","messages":"1844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1845","messages":"1846","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1847","messages":"1848","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1849","messages":"1850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1851","messages":"1852","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1853","messages":"1854","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1855","messages":"1856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1857","messages":"1858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1859","messages":"1860","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1861","messages":"1862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1863","messages":"1864","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1865","messages":"1866","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1867","usedDeprecatedRules":"1030"},{"filePath":"1868","messages":"1869","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1870","messages":"1871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1872","messages":"1873","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1874","usedDeprecatedRules":"1030"},{"filePath":"1875","messages":"1876","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1877","usedDeprecatedRules":"1030"},{"filePath":"1878","messages":"1879","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1880","usedDeprecatedRules":"1030"},{"filePath":"1881","messages":"1882","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1883","messages":"1884","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1885","usedDeprecatedRules":"1030"},{"filePath":"1886","messages":"1887","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1888","usedDeprecatedRules":"1030"},{"filePath":"1889","messages":"1890","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1891","messages":"1892","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1893","usedDeprecatedRules":"1030"},{"filePath":"1894","messages":"1895","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1896","usedDeprecatedRules":"1030"},{"filePath":"1897","messages":"1898","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1899","usedDeprecatedRules":"1030"},{"filePath":"1900","messages":"1901","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1902","usedDeprecatedRules":"1030"},{"filePath":"1903","messages":"1904","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1905","usedDeprecatedRules":"1030"},{"filePath":"1906","messages":"1907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1908","messages":"1909","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1910","messages":"1911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1912","messages":"1913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1914","messages":"1915","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1916","messages":"1917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1918","messages":"1919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1920","messages":"1921","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1922","messages":"1923","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1924","messages":"1925","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1926","messages":"1927","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1928","messages":"1929","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1930","messages":"1931","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1932","messages":"1933","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1934","messages":"1935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1936","messages":"1937","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1938","messages":"1939","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1940","messages":"1941","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1942","messages":"1943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1944","messages":"1945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1946","messages":"1947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1948","messages":"1949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1950","messages":"1951","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1952","messages":"1953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1954","messages":"1955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1956","messages":"1957","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1958","messages":"1959","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1960","messages":"1961","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1962","messages":"1963","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1964","messages":"1965","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1966","messages":"1967","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1968","messages":"1969","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1970","messages":"1971","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1972","messages":"1973","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1974","messages":"1975","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1976","messages":"1977","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1978","messages":"1979","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1980","messages":"1981","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1982","messages":"1983","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"1984","messages":"1985","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1986","messages":"1987","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1988","usedDeprecatedRules":"1030"},{"filePath":"1989","messages":"1990","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1991","usedDeprecatedRules":"1030"},{"filePath":"1992","messages":"1993","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1994","usedDeprecatedRules":"1030"},{"filePath":"1995","messages":"1996","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1997","usedDeprecatedRules":"1030"},{"filePath":"1998","messages":"1999","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2000","usedDeprecatedRules":"1030"},{"filePath":"2001","messages":"2002","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2003","usedDeprecatedRules":"1030"},{"filePath":"2004","messages":"2005","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2006","usedDeprecatedRules":"1030"},{"filePath":"2007","messages":"2008","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2009","usedDeprecatedRules":"1030"},{"filePath":"2010","messages":"2011","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"2012","messages":"2013","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2014","usedDeprecatedRules":"1030"},{"filePath":"2015","messages":"2016","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2017","usedDeprecatedRules":"1030"},{"filePath":"2018","messages":"2019","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2020","usedDeprecatedRules":"1030"},{"filePath":"2021","messages":"2022","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2023","usedDeprecatedRules":"1030"},{"filePath":"2024","messages":"2025","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2026","usedDeprecatedRules":"1030"},{"filePath":"2027","messages":"2028","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2029","usedDeprecatedRules":"1030"},{"filePath":"2030","messages":"2031","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2032","usedDeprecatedRules":"1030"},{"filePath":"2033","messages":"2034","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2035","usedDeprecatedRules":"1030"},{"filePath":"2036","messages":"2037","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2038","usedDeprecatedRules":"1030"},{"filePath":"2039","messages":"2040","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2041","usedDeprecatedRules":"1030"},{"filePath":"2042","messages":"2043","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2044","usedDeprecatedRules":"1030"},{"filePath":"2045","messages":"2046","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2047","usedDeprecatedRules":"1030"},{"filePath":"2048","messages":"2049","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2050","usedDeprecatedRules":"1030"},{"filePath":"2051","messages":"2052","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2053","usedDeprecatedRules":"1030"},{"filePath":"2054","messages":"2055","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2056","usedDeprecatedRules":"1030"},{"filePath":"2057","messages":"2058","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2059","usedDeprecatedRules":"1030"},{"filePath":"2060","messages":"2061","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2062","usedDeprecatedRules":"1030"},{"filePath":"2063","messages":"2064","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2065","usedDeprecatedRules":"1030"},{"filePath":"2066","messages":"2067","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2068","usedDeprecatedRules":"1030"},{"filePath":"2069","messages":"2070","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2071","usedDeprecatedRules":"1030"},{"filePath":"2072","messages":"2073","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2074","usedDeprecatedRules":"1030"},{"filePath":"2075","messages":"2076","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2077","usedDeprecatedRules":"1030"},{"filePath":"2078","messages":"2079","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"2080","messages":"2081","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2082","usedDeprecatedRules":"1030"},{"filePath":"2083","messages":"2084","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2085","usedDeprecatedRules":"1030"},{"filePath":"2086","messages":"2087","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2088","usedDeprecatedRules":"1030"},{"filePath":"2089","messages":"2090","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2091","usedDeprecatedRules":"1030"},{"filePath":"2092","messages":"2093","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2094","usedDeprecatedRules":"1030"},{"filePath":"2095","messages":"2096","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2097","usedDeprecatedRules":"1030"},{"filePath":"2098","messages":"2099","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2100","usedDeprecatedRules":"1030"},{"filePath":"2101","messages":"2102","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2103","usedDeprecatedRules":"1030"},{"filePath":"2104","messages":"2105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2097","usedDeprecatedRules":"1030"},{"filePath":"2106","messages":"2107","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2108","usedDeprecatedRules":"1030"},{"filePath":"2109","messages":"2110","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2111","usedDeprecatedRules":"1030"},{"filePath":"2112","messages":"2113","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2114","usedDeprecatedRules":"1030"},{"filePath":"2115","messages":"2116","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2117","usedDeprecatedRules":"1030"},{"filePath":"2118","messages":"2119","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2120","usedDeprecatedRules":"1030"},{"filePath":"2121","messages":"2122","errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2123","usedDeprecatedRules":"1030"},{"filePath":"2124","messages":"2125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"2126","messages":"2127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2128","usedDeprecatedRules":"1030"},{"filePath":"2129","messages":"2130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"2131","messages":"2132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2133","usedDeprecatedRules":"1030"},{"filePath":"2134","messages":"2135","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2136","usedDeprecatedRules":"1030"},{"filePath":"2137","messages":"2138","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"2139","messages":"2140","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2141","usedDeprecatedRules":"1030"},{"filePath":"2142","messages":"2143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"2144","messages":"2145","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2146","usedDeprecatedRules":"1030"},{"filePath":"2147","messages":"2148","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2149","usedDeprecatedRules":"1030"},{"filePath":"2150","messages":"2151","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2152","usedDeprecatedRules":"1030"},{"filePath":"2153","messages":"2154","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2155","usedDeprecatedRules":"1030"},{"filePath":"2156","messages":"2157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"2158","messages":"2159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2160","messages":"2161","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2162","usedDeprecatedRules":"1030"},{"filePath":"2163","messages":"2164","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2165","usedDeprecatedRules":"1030"},{"filePath":"2166","messages":"2167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"2168","messages":"2169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"2170","messages":"2171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"2172","messages":"2173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"2174","messages":"2175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"1030"},{"filePath":"2176","messages":"2177","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"2178","messages":"2179","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2180","usedDeprecatedRules":"1030"},{"filePath":"2181","messages":"2182","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2183","usedDeprecatedRules":"1030"},"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\index.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\serviceWorker.js",[],["2184","2185"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\App.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\Store.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\routes\\routes.jsx",["2186"],"import AuthGuard from 'app/auth/AuthGuard'\r\nimport NotFound from 'app/views/sessions/NotFound'\r\nimport chartsRoute from 'app/views/charts/ChartsRoute'\r\nimport chatRoutes from 'app/views/chat-box/ChatRoutes'\r\nimport crudRoute from 'app/views/CRUD/CrudRoutes'\r\nimport formsRoutes from 'app/views/forms/FormsRoutes'\r\nimport ListRoute from 'app/views/list/ListRoute'\r\nimport mapRoutes from 'app/views/map/MapRoutes'\r\nimport pagesRoutes from 'app/views/pages/pagesRoutes'\r\nimport todoRoutes from 'app/views/todo/TodoRoutes'\r\nimport inboxRoute from 'app/views/inbox/InboxRoutes'\r\nimport pricingRoutes from 'app/views/pricing/PricingRoutes'\r\nimport invoiceRoutes from 'app/views/invoice/InvoioceRoutes'\r\nimport calendarRoutes from 'app/views/calendar/CalendarRoutes'\r\nimport ecommerceRoutes from 'app/views/ecommerce/EcommerceRoutes'\r\nimport dataTableRoutes from 'app/views/data-table/dataTableRoutes'\r\nimport materialRoutes from 'app/views/material-kit/MaterialRoutes'\r\nimport dragAndDropRoute from 'app/views/Drag&Drop/DragAndDropRoute'\r\nimport scrumBoardRoutes from 'app/views/scrum-board/ScrumBoardRoutes'\r\nimport pageLayoutRoutes from 'app/views/page-layouts/PageLayoutRoutees'\r\nimport { dashboardRoutes } from 'app/views/dashboard/DashboardRoutes'\r\nimport sessionRoutes from 'app/views/sessions/SessionRoutes'\r\nimport MatxLayout from '../components/MatxLayout/MatxLayout'\r\nimport { Navigate } from 'react-router-dom'\r\n/**************************************************** */\r\nimport SuperAdminRoutes from '../components/sup-admin-components/sup-admin-routers'\r\nimport MisRoutes from '../components/Mis-components/Mis-routers'\r\nimport WarehouseRoutes from '../components/Warehouse-components/WarehouseRouter'\r\nimport BotRoutes from '../components/Bot-components/BotRoutes'\r\nimport SortingRoutes from \"../components/Sorting-agent-components/SortingRoutes\"\r\nimport ChargingRoutes from \"../components/Charging-components/ChargingRoutes\"\r\nimport BqcRoutes from \"../components/Bqc-components/BqcRoutes\"\r\nimport Login from \"../Login/loginRouter\"\r\nimport ChangePasswordRouter from 'app/components/Change-password/change-password-router'\r\nimport AuditRouter from \"app/components/Audit-components/AuditRouter\"\r\n\r\nexport const AllPages = () => {\r\n    const all_routes = [\r\n        {\r\n            element: (\r\n                <AuthGuard>\r\n                    <MatxLayout />\r\n                </AuthGuard>\r\n            ),\r\n            children: [\r\n                ...dashboardRoutes,\r\n                ...calendarRoutes,\r\n                ...chartsRoute,\r\n                ...chatRoutes,\r\n                ...crudRoute,\r\n                ...dataTableRoutes,\r\n                ...dragAndDropRoute,\r\n                ...ecommerceRoutes,\r\n                ...formsRoutes,\r\n                ...invoiceRoutes,\r\n                ...ListRoute,\r\n                ...mapRoutes,\r\n                ...materialRoutes,\r\n                ...inboxRoute,\r\n                ...pageLayoutRoutes,\r\n                ...pagesRoutes,\r\n                ...pricingRoutes,\r\n                ...scrumBoardRoutes,\r\n                ...todoRoutes,\r\n                ...SuperAdminRoutes,\r\n                ...MisRoutes,\r\n                ...WarehouseRoutes,\r\n                ...BotRoutes,\r\n                ...SortingRoutes,\r\n                ...ChargingRoutes,\r\n                ...BqcRoutes,\r\n                ...AuditRouter\r\n            ],\r\n        },\r\n        ...Login,\r\n        ...ChangePasswordRouter,\r\n        {\r\n            path: '/',\r\n            element: <Navigate to=\"/login\" />,\r\n        },\r\n        {\r\n            path: '*',\r\n            element: <NotFound />,\r\n        },\r\n    ]\r\n\r\n    return all_routes\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\index.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\index.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\contexts\\PrexoAuthContext.js",["2187","2188","2189"],"import React, { createContext, useEffect, useReducer, useState } from 'react'\r\nimport firebase from 'firebase/compat/app'\r\nimport 'firebase/compat/auth'\r\n// import { firebaseConfig } from 'config.js'\r\nimport { MatxLoading } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosSuperAdminPrexo } from '../../axios'\r\n// if (!firebase.apps.length) {\r\n//     firebase.initializeApp(firebaseConfig)\r\n// }\r\nconst initialAuthState = {\r\n    isAuthenticated: false,\r\n    isInitialised: false,\r\n    user: null,\r\n}\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'AUTH_STATE_CHANGED': {\r\n            const { isAuthenticated, user } = action.payload\r\n\r\n            return {\r\n                ...state,\r\n                isAuthenticated,\r\n                isInitialised: true,\r\n                user,\r\n            }\r\n        }\r\n        default: {\r\n            return { ...state }\r\n        }\r\n    }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n    ...initialAuthState,\r\n    LoginPrxo: () => Promise.resolve(),\r\n    logout: () => Promise.resolve(),\r\n})\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const navigate = useNavigate()\r\n    const [state, dispatch] = useReducer(reducer, initialAuthState)\r\n    const LoginPrxo = async (username, password) => {\r\n        let res = await axiosSuperAdminPrexo.post('/login', {\r\n            user_name: username,\r\n            password: password,\r\n        })\r\n        if (res.status == 200) {\r\n            dispatch({\r\n                type: 'AUTH_STATE_CHANGED',\r\n                payload: {\r\n                    isAuthenticated: true,\r\n                    user: {\r\n                        id: res.data.data.data._id,\r\n                        name: res.data.data.data.name,\r\n                        avatar: res.data.data.data.profile,\r\n                        email: res.data.data.data.email,\r\n                        role: res.data.data.data.user_type,\r\n                    },\r\n                },\r\n            })\r\n        }\r\n        return res\r\n    }\r\n    const logout = () => {\r\n        localStorage.removeItem('prexo-authentication')\r\n        dispatch({\r\n            type: 'AUTH_STATE_CHANGED',\r\n            payload: {\r\n                isAuthenticated: true,\r\n                user: null,\r\n            },\r\n        })\r\n        navigate('/')\r\n    }\r\n    useEffect(() => {\r\n        let userExists = localStorage.getItem('prexo-authentication')\r\n        if (userExists) {\r\n            let user = jwt_decode(userExists)\r\n            dispatch({\r\n                type: 'AUTH_STATE_CHANGED',\r\n                payload: {\r\n                    isAuthenticated: true,\r\n                    user: {\r\n                        id: user.adminId,\r\n                        name: user.name,\r\n                        avatar: user.profile,\r\n                        email: user.email,\r\n                        role: user.user_type,\r\n                    },\r\n                },\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: 'AUTH_STATE_CHANGED',\r\n                payload: {\r\n                    isAuthenticated: true,\r\n                    user: null,\r\n                },\r\n            })\r\n        }\r\n        return\r\n    }, [dispatch])\r\n    if (!state.isInitialised) {\r\n        return <MatxLoading />\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                ...state,\r\n                LoginPrxo,\r\n                logout,\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthContext\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\contexts\\SettingsContext.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\reducers\\RootReducer.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\ecommerce.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\axios.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\reducers\\NavigationReducer.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\icons\\GoogleIcon.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\reducers\\EcommerceReducer.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\AuditRouter.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Change-password\\change-password-router.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\reducers\\NotificationReducer.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\mock.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\settings.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\actions\\EcommerceActions.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\actions\\NavigationAction.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\actions\\NotificationActions.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Change-password\\change -password.jsx",["2190","2191","2192","2193","2194","2195","2196","2197","2198","2199","2200","2201"],"import { Card, Grid, Button, CircularProgress, IconButton } from '@mui/material'\r\nimport { Box, styled, useTheme } from '@mui/system'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport useAuth from 'app/hooks/useAuth'\r\nimport { Paragraph } from 'app/components/Typography'\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport InputAdornment from '@mui/material/InputAdornment'\r\nimport { axiosSuperAdminPrexo } from '../../../axios'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({\r\n    justifyContent: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(JustifyBox)(() => ({\r\n    height: '100%',\r\n    padding: '32px',\r\n    background: 'rgba(0, 0, 0, 0.01)',\r\n}))\r\n\r\nconst IMG = styled('img')(() => ({\r\n    width: '100%',\r\n}))\r\n\r\nconst RegisterRoot = styled(JustifyBox)(({ theme }) => ({\r\n    background: '#1A2038',\r\n    minHeight: '100vh !important',\r\n    '& .card': {\r\n        maxWidth: 650,\r\n        borderRadius: 12,\r\n        margin: '1rem',\r\n    },\r\n    '& .buttonProgress': {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    },\r\n    '& .socialButton': {\r\n        width: '100%',\r\n        '& img': {\r\n            margin: '0 8px',\r\n        },\r\n    },\r\n    '& .labelLink': {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'underline',\r\n    },\r\n}))\r\n\r\nconst Login = () => {\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [state, setState] = useState({})\r\n    const [message, setMessage] = useState('')\r\n    const [showPassword, setShowPassword] = useState(false)\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        setState({\r\n            ...state,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    let { old_password, new_password } = state\r\n    const { palette } = useTheme()\r\n    const textError = palette.error.main\r\n    // PASSWORD SHOW AND HIDE\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword((showPassword) => !showPassword)\r\n    }\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault()\r\n    }\r\n\r\n    const handleFormSubmit = async (data) => {\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { adminId, user_type } = jwt_decode(token)\r\n                state._id = adminId\r\n                let response = await axiosSuperAdminPrexo.post(\r\n                    '/changePassword',\r\n                    state\r\n                )\r\n                if (response.status == 200) {\r\n                    alert(response.data.message)\r\n                    if (user_type == 'MIS') {\r\n                        navigate('/mis/dashboard')\r\n                    } else if (user_type == 'Warehouse') {\r\n                        navigate('/warehouse/dashboard')\r\n                    } else if (user_type == 'Bag Opening') {\r\n                        navigate('/bot/dashboard')\r\n                    } else if (user_type == 'Charging') {\r\n                        navigate('/charging/dashboard')\r\n                    } else if (user_type == 'BQC') {\r\n                        navigate('/bqc/dashboard')\r\n                    } else if (user_type == 'Sorting Agent') {\r\n                        navigate('/sorting/dashboard')\r\n                    }\r\n                } else if (response.status == 202) {\r\n                    alert(response.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <RegisterRoot>\r\n            <Card className=\"card\">\r\n                <Grid container>\r\n                    <Grid item lg={5} md={5} sm={5} xs={12}>\r\n                        <ContentBox>\r\n                            <IMG\r\n                                src=\"/assets/images/illustrations/posting_photo.svg\"\r\n                                alt=\"\"\r\n                            />\r\n                        </ContentBox>\r\n                    </Grid>\r\n                    <Grid item lg={7} md={7} sm={7} xs={12}>\r\n                        <Box p={4} height=\"100%\">\r\n                            <ValidatorForm onSubmit={handleFormSubmit}>\r\n                                <TextValidator\r\n                                    sx={{ mb: 3, width: '100%' }}\r\n                                    variant=\"outlined\"\r\n                                    size=\"large\"\r\n                                    label=\"Old Password\"\r\n                                    onChange={handleChange}\r\n                                    type=\"text\"\r\n                                    name=\"old_password\"\r\n                                    value={old_password || ''}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                />\r\n                                <TextValidator\r\n                                    sx={{ mb: '16px', width: '100%' }}\r\n                                    label=\"New Password\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"large\"\r\n                                    onChange={handleChange}\r\n                                    name=\"new_password\"\r\n                                    type={showPassword ? 'text' : 'password'}\r\n                                    value={new_password || ''}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={\r\n                                                        handleClickShowPassword\r\n                                                    }\r\n                                                    onMouseDown={\r\n                                                        handleMouseDownPassword\r\n                                                    }\r\n                                                    edge=\"end\"\r\n                                                >\r\n                                                    {showPassword ? (\r\n                                                        <VisibilityOff />\r\n                                                    ) : (\r\n                                                        <Visibility />\r\n                                                    )}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                                {message && (\r\n                                    <Paragraph sx={{ color: textError }}>\r\n                                        {message}\r\n                                    </Paragraph>\r\n                                )}\r\n                                <FlexBox display=\"flex\" alignItems=\"center\">\r\n                                    <Box position=\"relative\">\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            disabled={loading}\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            Submit\r\n                                        </Button>\r\n                                        {loading && (\r\n                                            <CircularProgress\r\n                                                size={24}\r\n                                                className=\"buttonProgress\"\r\n                                            />\r\n                                        )}\r\n                                    </Box>\r\n                                </FlexBox>\r\n                            </ValidatorForm>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n        </RegisterRoot>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\report-data-display.jsx",["2202","2203","2204","2205","2206","2207","2208","2209","2210","2211","2212","2213","2214","2215","2216","2217","2218","2219","2220","2221","2222","2223","2224","2225","2226","2227","2228","2229","2230","2231","2232","2233","2234","2235","2236","2237","2238","2239","2240","2241","2242","2243","2244","2245","2246","2247"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Audit-requests.jsx",["2248","2249"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\start-segrigation.jsx",["2250","2251","2252","2253","2254","2255","2256"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Assigned-other-tray\\assigned-other-tray.jsx",["2257","2258","2259"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosAuditAgent } from '../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [trayData, setTrayData] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { user_name } = jwt_decode(token)\r\n                    let res = await axiosAuditAgent.post(\r\n                        '/getAssignedOtherTray/' + user_name\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTrayData(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/audit/assigned-tray/view-item/' + id)\r\n    }\r\n    const handelClose = async (e, id) => {\r\n        e.preventDefault()\r\n        try {\r\n            let res = await axiosAuditAgent.post('/trayClose/' + id)\r\n            if (res.status == 200) {\r\n                alert(res.data.message)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: false,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta?.rowData[2],\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'assigned_date',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    handelViewTray(e, value)\r\n                                }}\r\n                                style={{ backgroundColor: 'primery' }}\r\n                            >\r\n                                View\r\n                            </Button>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    if (window.confirm('You want to Close?')) {\r\n                                        handelClose(e, value)\r\n                                    }\r\n                                }}\r\n                                style={{ backgroundColor: 'red' }}\r\n                            >\r\n                                Close\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Assigned Tray', path: '/' }]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Loadable\\Loadable.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Assigned-other-tray\\view-item.jsx",["2260"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport { axiosAuditAgent } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [trayItem, setTrayItem] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosAuditAgent.post(\r\n                    '/view-items/' + trayId\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayItem(response.data.data.items)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand_name',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model_name',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tracking_id',\r\n            label: 'Tracking Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_id',\r\n            label: 'BOT Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'bot_agent',\r\n            label: 'BOT Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assigned Tray', path: '/' },\r\n                        { name: 'Tray-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayItem}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Dashboard\\dashboard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\navigations.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\initThemes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Settings.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Settings.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\themeColors.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\themeOptions.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Dashboard\\card.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLoading\\MatxLoading.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Report\\amazon-data.jsx",["2261","2262","2263","2264"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bqc-all-api-report.jsx",["2265","2266","2267"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst BqcSowftwareReportPage = ({ BqcSowftwareReport }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>BQC Report</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    <TableRow key={BqcSowftwareReport?.uic}>\r\n                        <TableCell sx={{ pl: 2 }}>UIC</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.uic}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.tray_id}>\r\n                        <TableCell sx={{ pl: 2 }}>Tray ID</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.tray_id}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.date}>\r\n                        <TableCell sx={{ pl: 2 }}>Date</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.date}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.testing_duration}>\r\n                        <TableCell sx={{ pl: 2 }}>Testing Duration</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.testing_duration}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.erasure_technician}>\r\n                        <TableCell sx={{ pl: 2 }}>Technician</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.erasure_technician}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.final_grade}>\r\n                        <TableCell sx={{ pl: 2 }}>Final Grade</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.final_grade}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.hardware_test_summary}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Hardware Test Summary\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.hardware_test_summary}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mandatory_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Mandatory Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mandatory_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Mobile Name</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.mobile_name}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.market_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Market Name</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.market_name}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.device_color_one}>\r\n                        <TableCell sx={{ pl: 2 }}>Device Color</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.device_color_one}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.bq_batterychargerange}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Bq Battery Charge Range\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.bq_batterychargerange}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_imei}>\r\n                        <TableCell sx={{ pl: 2 }}>Mobile IMEI</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.mobile_imei}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_imei2}>\r\n                        <TableCell sx={{ pl: 2 }}>Mobile IMEI 2</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mobile_imei2}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?._ro_imei_check}>\r\n                        <TableCell sx={{ pl: 2 }}>Ro IMEI Check</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?._ro_imei_check}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.chargingjack}>\r\n                        <TableCell sx={{ pl: 2 }}>Charging Jack</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.chargingjack}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.crackedlens}>\r\n                        <TableCell sx={{ pl: 2 }}>Cracked Lens</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.crackedlens}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.fingerprint}>\r\n                        <TableCell sx={{ pl: 2 }}>Finger Print</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.fingerprint}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.flashlight}>\r\n                        <TableCell sx={{ pl: 2 }}>Flash Light</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.flashlight}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.homekey}>\r\n                        <TableCell sx={{ pl: 2 }}>Home Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.homekey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_batterybulging}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Battery Bulging</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_batterybulging}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_bentondevicebody}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Benton device Body\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_bentondevicebody}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_crackdevicebody}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Crack Device Body\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_crackdevicebody}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_dentdevicebody}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Dentdevice Body</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_dentdevicebody}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_headphonejack_3_5mm}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Headphone Jack 3.5 mm\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_headphonejack_3_5mm}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_missingparts}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Missing Parts</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_missingparts}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_scratchchromeside}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Scratch Chrome Side\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_scratchchromeside}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_scratchesbackpanel}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Scratches Back Panel\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_scratchesbackpanel}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_scratchesdisplay}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Scratches Display\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_scratchesdisplay}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_screencracked}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Screen Cracked</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_screencracked}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_screen_type}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Screen Type</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_screen_type}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.powerkey}>\r\n                        <TableCell sx={{ pl: 2 }}> Power Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.powerkey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.simtray}>\r\n                        <TableCell sx={{ pl: 2 }}>SIM Tray</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.simtray}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.silentkey}>\r\n                        <TableCell sx={{ pl: 2 }}>Silent Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.silentkey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.volumekey}>\r\n                        <TableCell sx={{ pl: 2 }}>Volume Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.volumekey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.carrier_signal_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Carrier Signel Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.carrier_signal_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.carrier_signal_sim_2_test}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Carrier Signel Sim 2 Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.carrier_signal_sim_2_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.wi_fi_test}>\r\n                        <TableCell sx={{ pl: 2 }}>WI-Fi Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.wi_fi_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.bluetooth_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Bluetooth Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.bluetooth_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Microphone Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.speaker_microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Speaker Microphone Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.speaker_microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.front_microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Front Microphone Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.front_microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.headset_microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Headset Microphone Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.headset_microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.speaker_microphone_front_test}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Speaker Microphone Front Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.speaker_microphone_front_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.receiver_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Received Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.receiver_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.headset_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Headset Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.headset_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.front_camera_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Front Camera Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.front_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.video_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Video Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.video_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.auto_focus_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Auto Focus Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.auto_focus_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.camera_flash_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Camera Flash Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.camera_flash_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.front_camera_flash_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Front Camera Flash Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.front_camera_flash_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.device_color}>\r\n                        <TableCell sx={{ pl: 2 }}>Device Color</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.device_color}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.battery_charging_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Battery Charging Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.battery_charging_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.touch_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Touch Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.touch_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.proximity_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Proximity Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.proximity_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.compass_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Compass Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.compass_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.light_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Light Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.light_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.vibration_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Vibration Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.vibration_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.home_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Home Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.home_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.volume_keys_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Volume Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.volume_keys_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.screen_lock_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Screen Lock Key Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.screen_lock_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.back_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>back Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.back_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.recent_menu_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Recent Menu Key Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.recent_menu_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.screen_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Screen Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.screen_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.live_call_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Live Call Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.live_call_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.live_call_sim_2_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Live Call Sim 2 Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.live_call_sim_2_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.screen_damage_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Screen Damage Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.screen_damage_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.assisted_front_camera_test}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Assisted Front Camera Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.assisted_front_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.fingerprint_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Fingerprint Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.fingerprint_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.multi_touch_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Multi Touch Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.multi_touch_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n\r\n                    <TableRow key={BqcSowftwareReport?.face_id_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Face ID Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.face_id_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.auto_rotation_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Auto Rotation Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.auto_rotation_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.infrared_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Infrared Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.infrared_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.fm_radio_test}>\r\n                        <TableCell sx={{ pl: 2 }}>FM Radio Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.fm_radio_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.product_version}>\r\n                        <TableCell sx={{ pl: 2 }}>Product Version</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.product_version}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.product_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Product Name</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.product_name}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.operating_system_version}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Operating System Version\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.operating_system_version}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.system_manufacturer}>\r\n                        <TableCell sx={{ pl: 2 }}>System Manufacture</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.system_manufacturer}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.system_model}>\r\n                        <TableCell sx={{ pl: 2 }}>System Model</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.system_model}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_internal_model}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Mobile Internal Model\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mobile_internal_model}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.system_serial}>\r\n                        <TableCell sx={{ pl: 2 }}>System Serial</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.system_serial}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.operating_system_name}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Operating System Name\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.operating_system_name}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.total_memory}>\r\n                        <TableCell sx={{ pl: 2 }}>Total Memory</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.total_memory}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.business_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Business Name</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.business_name}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.business_location}>\r\n                        <TableCell sx={{ pl: 2 }}>Business Location</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.business_location}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.report_id}>\r\n                        <TableCell sx={{ pl: 2 }}>Report Id</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.report_id}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.rooted}>\r\n                        <TableCell sx={{ pl: 2 }}>Rooted</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.rooted}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.frp}>\r\n                        <TableCell sx={{ pl: 2 }}>FRP</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.frp}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.frp_status}>\r\n                        <TableCell sx={{ pl: 2 }}>FRP Status</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.frp_status}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={\r\n                            BqcSowftwareReport?.blancco_data_blancco_hardware_report_system_mdm_status\r\n                        }\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Blancco Data Blancco Hardware Report System MDM\r\n                            Status\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {\r\n                                BqcSowftwareReport?.blancco_data_blancco_hardware_report_system_mdm_status\r\n                            }\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={\r\n                            BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                        }\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Blancco Data Blancco Hardware Report Hardware Tests\r\n                            Auto Fingerprint\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {\r\n                                BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                            }\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.disk_capacity}>\r\n                        <TableCell sx={{ pl: 2 }}>Disk Capacity</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.disk_capacity}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.agps_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Agps Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.agps_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.assisted_camera_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Assisted Camera Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.assisted_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.silent_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Silent Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.silent_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.speaker_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Speaker Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.speaker_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?._ro_ril_miui_imei0}>\r\n                        <TableCell sx={{ pl: 2 }}>RO Ril Miui IMEI 0</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?._ro_ril_miui_imei0}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.back_camera_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Back Camera Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.back_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BqcSowftwareReportPage\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bqc-user-report.jsx",["2268","2269","2270"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst BqcUserReportPage = ({ BqcUserReport }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>BQC User Report</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    <TableRow key={BqcUserReport?.bqc_status}>\r\n                        <TableCell sx={{ pl: 2 }}>Status</TableCell>\r\n                        <TableCell>{BqcUserReport?.bqc_status}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcUserReport?.blancoo_qc_status}>\r\n                        <TableCell sx={{ pl: 2 }}>Blancco QC Status</TableCell>\r\n                        <TableCell>\r\n                            {BqcUserReport?.blancoo_qc_status}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcUserReport?.bqc_incomplete_reason}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            BQC Incomplete Reason\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcUserReport?.bqc_incomplete_reason}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcUserReport?.technical_issue}>\r\n                        <TableCell sx={{ pl: 2 }}>Technical Issue</TableCell>\r\n                        <TableCell>{BqcUserReport?.technical_issue}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcUserReport?.other}>\r\n                        <TableCell sx={{ pl: 2 }}>BQC User Remark</TableCell>\r\n                        <TableCell>{BqcUserReport?.other}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcUserReport?.factory_reset_status}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Factory reset status\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcUserReport?.factory_reset_status}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BqcUserReportPage\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bot-user-rport.jsx",["2271","2272","2273"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bqc-api-data.jsx",["2274","2275","2276","2277","2278","2279","2280","2281","2282","2283","2284","2285","2286","2287","2288","2289","2290","2291","2292","2293","2294","2295","2296","2297","2298","2299","2300","2301","2302","2303","2304","2305","2306","2307","2308","2309","2310","2311","2312","2313","2314","2315","2316","2317","2318","2319","2320","2321","2322","2323","2324","2325","2326","2327","2328","2329","2330","2331","2332","2333","2334","2335","2336","2337","2338","2339","2340","2341","2342","2343","2344","2345","2346","2347","2348","2349","2350","2351","2352","2353","2354","2355","2356","2357","2358","2359","2360","2361","2362","2363","2364","2365","2366","2367","2368","2369","2370","2371","2372","2373","2374","2375","2376","2377","2378","2379","2380","2381","2382","2383","2384","2385","2386","2387","2388","2389","2390","2391","2392","2393","2394","2395","2396","2397","2398","2399","2400","2401","2402","2403","2404","2405","2406","2407","2408","2409","2410","2411","2412","2413","2414","2415","2416","2417","2418","2419","2420","2421","2422","2423","2424","2425","2426","2427","2428","2429","2430","2431","2432","2433","2434","2435","2436","2437","2438","2439","2440","2441","2442","2443","2444","2445","2446","2447","2448","2449","2450","2451","2452","2453","2454","2455","2456","2457","2458","2459","2460","2461","2462","2463","2464","2465","2466","2467","2468","2469","2470","2471","2472","2473","2474","2475","2476","2477","2478","2479","2480","2481","2482"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Audit-components\\Audit-request\\Report\\charging-user-report.jsx",["2483","2484","2485"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst CustomerBillings = ({ Charging,ChargeDoneDate }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>Charging User Report</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    <TableRow key={Charging?.battery_status}>\r\n                        <TableCell sx={{ pl: 2 }}>Battery Status</TableCell>\r\n                        <TableCell>{Charging?.battery_status}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.charge_percentage}>\r\n                        <TableCell sx={{ pl: 2 }}>Charge Percentage</TableCell>\r\n                        <TableCell>{Charging?.charge_percentage}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.body_condition}>\r\n                        <TableCell sx={{ pl: 2 }}>Body Condition</TableCell>\r\n                        <TableCell>{Charging?.body_condition}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.display_condition}>\r\n                        <TableCell sx={{ pl: 2 }}>Display Condition</TableCell>\r\n                        <TableCell>{Charging?.display_condition}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.lock_status}>\r\n                        <TableCell sx={{ pl: 2 }}>Lock Status</TableCell>\r\n                        <TableCell>{Charging?.lock_status}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.charging_jack_type}>\r\n                        <TableCell sx={{ pl: 2 }}>Charging Jack Type</TableCell>\r\n                        <TableCell>{Charging?.charging_jack_type}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.boady_part_missing}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Any Body Part Missing\r\n                        </TableCell>\r\n                        <TableCell>{Charging?.boady_part_missing}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.part_name}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Missing Body Part Name\r\n                        </TableCell>\r\n                        <TableCell>{Charging?.part_name}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={ChargeDoneDate}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                           Last Charge Done Date\r\n                        </TableCell>\r\n                        <TableCell>{  new Date(ChargeDoneDate).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    })}</TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CustomerBillings\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Typography.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\auth\\authRoles.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\components.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\hooks\\useAuth.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\reducers\\ScrumBoardReducer.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\index.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\notification.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\scrumBoard.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\list.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\todos.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\chat.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\inbox.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\users.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\icons\\FacebookIcon.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\EchartTheme.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\redux\\actions\\ScrumBoardActions.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\MatxTheme.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLogo\\MatxLogo.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\cards\\SimpleCard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxProgressBar\\MatxProgressBar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\MatxLayout.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\ConfirmationDialog\\ConfirmationDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\charts\\EchartCreator.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\charts\\RechartCreator.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\AddToCartButton\\AddToCartButton.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\ChatHead\\ChatHead.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxListItem1\\MatxListItem1.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\RectangleAvatar\\RectangleAvatar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\ChatAvatar\\ChatAvatar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxSnackbar\\MatxSnackbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\chat-box-2\\Chatbox.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxSidenav\\MatxSidenavContent.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxSidenav\\MatxSidenavContainer.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxSidenav\\MatxSidenav.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxHorizontalNav\\MatxHorizontalNav.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxVerticalNav\\MatxVerticalNavExpansionPanel.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxVerticalNav\\MatxVerticalNav.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxSearchBox\\MatxSearchBox.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxSuspense\\MatxSuspense.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxMenu\\MatxMenu.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxToolbarMenu\\MatxToolbarMenu.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxDivider\\MatxDivider.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Breadcrumb\\Breadcrumb.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\calendarEvents.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\invoice.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\fake-db\\db\\auth.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\Login\\loginRouter.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Charging-components\\ChargingRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bqc-components\\BqcRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\SortingRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\BotRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\WarehouseRouter.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Mis-routers.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\sup-admin-routers.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout2\\Layout2.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout1\\Layout1.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\ScrumBoardRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\Drag&Drop\\DragAndDropRoute.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\PageLayoutRoutees.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\data-table\\dataTableRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\EcommerceRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\sessions\\SessionRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\calendar\\CalendarRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\DashboardRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\InboxRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\MaterialRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\invoice\\InvoioceRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\PricingRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\TodoRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\pagesRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\Login\\login.jsx",["2486","2487","2488","2489","2490","2491","2492","2493","2494","2495","2496","2497","2498","2499","2500","2501","2502","2503","2504","2505"],"import { Card, Grid, Button, CircularProgress, IconButton } from '@mui/material'\r\nimport { Box, styled, useTheme } from '@mui/system'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport useAuth from 'app/hooks/useAuth'\r\nimport { Paragraph } from 'app/components/Typography'\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport { H4 } from 'app/components/Typography'\r\nimport InputAdornment from '@mui/material/InputAdornment'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({\r\n    justifyContent: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(JustifyBox)(() => ({\r\n    height: '100%',\r\n    padding: '32px',\r\n    background: 'rgba(0, 0, 0, 0.01)',\r\n}))\r\n\r\nconst IMG = styled('img')(() => ({\r\n    width: '100%',\r\n}))\r\n\r\nconst RegisterRoot = styled(JustifyBox)(({ theme }) => ({\r\n    background: '#1A2038',\r\n    minHeight: '100vh !important',\r\n    '& .card': {\r\n        maxWidth: 650,\r\n        borderRadius: 12,\r\n        margin: '1rem',\r\n    },\r\n    '& .buttonProgress': {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    },\r\n    '& .socialButton': {\r\n        width: '100%',\r\n        '& img': {\r\n            margin: '0 8px',\r\n        },\r\n    },\r\n    '& .labelLink': {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'underline',\r\n    },\r\n}))\r\n\r\nconst Login = () => {\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [state, setState] = useState({})\r\n    const [message, setMessage] = useState('')\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const { LoginPrxo } = useAuth()\r\n    useEffect(() => {\r\n        let userExists = localStorage.getItem('prexo-authentication')\r\n        if (userExists) {\r\n            const { user_type } = jwt_decode(userExists)\r\n            if (user_type == undefined) {\r\n                navigate('/')\r\n            } else if (user_type == 'super-admin') {\r\n                navigate('/sup-admin/dashboard')\r\n            } else if (user_type == 'MIS') {\r\n                navigate('/mis/dashboard')\r\n            } else if (user_type == 'Warehouse') {\r\n                navigate('/warehouse/dashboard')\r\n            } else if (user_type == 'Bag Opening') {\r\n                navigate('/bot/dashboard')\r\n            } else if (user_type == 'Charging') {\r\n                navigate('/charging/dashboard')\r\n            } else if (user_type == 'BQC') {\r\n                navigate('/bqc/dashboard')\r\n            } else if (user_type == 'Sorting Agent') {\r\n                navigate('/sorting/dashboard')\r\n            } else if (user_type == 'Audit') {\r\n                navigate('/audit/dashboard')\r\n            }\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [])\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        setState({\r\n            ...state,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    const handleFormSubmit = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let response = await LoginPrxo(state.username, state.password)\r\n            if (response.status == 200) {\r\n                localStorage.setItem(\r\n                    'prexo-authentication',\r\n                    response.data.data.jwt\r\n                )\r\n                if (response.data.data?.user_type == 'super-admin') {\r\n                    navigate('/sup-admin/dashboard')\r\n                } else if (response.data.data?.user_type == 'MIS') {\r\n                    navigate('/mis/dashboard')\r\n                } else if (response.data.data?.user_type == 'Warehouse') {\r\n                    navigate('/warehouse/dashboard')\r\n                } else if (response.data.data?.user_type == 'Bag Opening') {\r\n                    navigate('/bot/dashboard')\r\n                } else if (response.data.data?.user_type == 'Charging') {\r\n                    navigate('/charging/dashboard')\r\n                } else if (response.data.data?.user_type == 'BQC') {\r\n                    navigate('/bqc/dashboard')\r\n                } else if (response.data.data?.user_type == 'Sorting Agent') {\r\n                    navigate('/sorting/dashboard')\r\n                } else if (response.data.data?.user_type == 'Audit') {\r\n                    navigate('/audit/dashboard')\r\n                }\r\n            } else {\r\n                setLoading(false)\r\n                setMessage(response.data.data.message)\r\n            }\r\n        } catch (e) {\r\n            setLoading(false)\r\n            console.log(e)\r\n            setMessage(e.message)\r\n        }\r\n    }\r\n    let { username, password } = state\r\n    const { palette } = useTheme()\r\n    const textError = palette.error.main\r\n    // PASSWORD SHOW AND HIDE\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword((showPassword) => !showPassword)\r\n    }\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault()\r\n    }\r\n    return (\r\n        <RegisterRoot>\r\n            <Card className=\"card\">\r\n                <Grid container>\r\n                    <Grid item lg={5} md={5} sm={5} xs={12}>\r\n                        <ContentBox>\r\n                            <IMG\r\n                                src=\"/assets/images/illustrations/posting_photo.svg\"\r\n                                alt=\"\"\r\n                            />\r\n                        </ContentBox>\r\n                    </Grid>\r\n                    <Grid item lg={7} md={7} sm={7} xs={12}>\r\n                        <Box p={4} height=\"100%\">\r\n                            <ValidatorForm onSubmit={handleFormSubmit}>\r\n                                <TextValidator\r\n                                    sx={{ mb: 3, width: '100%' }}\r\n                                    variant=\"outlined\"\r\n                                    size=\"large\"\r\n                                    label=\"Username\"\r\n                                    onChange={handleChange}\r\n                                    type=\"text\"\r\n                                    name=\"username\"\r\n                                    value={username || ''}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                />\r\n                                <TextValidator\r\n                                    sx={{ mb: '16px', width: '100%' }}\r\n                                    label=\"Password\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"large\"\r\n                                    onChange={handleChange}\r\n                                    name=\"password\"\r\n                                    type={showPassword ? 'text' : 'password'}\r\n                                    value={password || ''}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={\r\n                                                        handleClickShowPassword\r\n                                                    }\r\n                                                    onMouseDown={\r\n                                                        handleMouseDownPassword\r\n                                                    }\r\n                                                    edge=\"end\"\r\n                                                >\r\n                                                    {showPassword ? (\r\n                                                        <VisibilityOff />\r\n                                                    ) : (\r\n                                                        <Visibility />\r\n                                                    )}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                                {message && (\r\n                                    <Paragraph sx={{ color: textError }}>\r\n                                        {message}\r\n                                    </Paragraph>\r\n                                )}\r\n                                <FlexBox display=\"flex\" alignItems=\"center\">\r\n                                    <Box position=\"relative\">\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            disabled={loading}\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            Login\r\n                                        </Button>\r\n                                        {loading && (\r\n                                            <CircularProgress\r\n                                                size={24}\r\n                                                className=\"buttonProgress\"\r\n                                            />\r\n                                        )}\r\n                                    </Box>\r\n                                </FlexBox>\r\n                            </ValidatorForm>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n        </RegisterRoot>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\map\\MapRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\hooks\\useSettings.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Charging-components\\Tray\\charging-out.jsx",["2506","2507","2508","2509","2510","2511","2512","2513","2514","2515","2516","2517","2518","2519","2520","2521","2522","2523","2524","2525","2526","2527","2528","2529","2530","2531","2532","2533","2534","2535","2536","2537","2538","2539","2540"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport { styled, alpha } from '@mui/material/styles'\r\nimport {\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    DialogTitle,\r\n    IconButton,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n    MenuItem,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    FormLabel,\r\n    FormControlLabel,\r\n    RadioGroup,\r\n    Radio,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport * as Yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport { axiosCharging, axiosWarehouseIn } from '../../../../axios'\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    /**************************************************************************** */\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [open, setOpen] = useState(false)\r\n    const [resDataUic, setResDataUic] = useState({})\r\n    const [bodyDamage, setBodyDamage] = useState(false)\r\n    const [loading, setlLoading] = useState(false)\r\n    const [textBoxDis, setTextBoxDis] = useState(false)\r\n    const [charge, setCharge] = useState('')\r\n    const handleClose = () => {\r\n        reset({})\r\n        setOpen(false)\r\n    }\r\n    /************************************************************************** */\r\n    const schema = Yup.object().shape({\r\n        battery_status: Yup.string().required('Required*').nullable(),\r\n        charge_percentage: Yup.string()\r\n            .when('battery_status', (battery_status, schema) => {\r\n                if (\r\n                    battery_status == 'Charge' ||\r\n                    battery_status == 'Heat Problem'\r\n                ) {\r\n                    return schema.required('Required')\r\n                }\r\n            })\r\n            .nullable(),\r\n        body_condition: Yup.string().required('Required*').nullable(),\r\n        display_condition: Yup.string().required('Required*').nullable(),\r\n        lock_status: Yup.string()\r\n            .when('battery_status', (battery_status, schema) => {\r\n                if (\r\n                    battery_status == 'Charge' ||\r\n                    battery_status == 'Heat Problem'\r\n                ) {\r\n                    return schema.required('Required')\r\n                }\r\n            })\r\n            .nullable(),\r\n        charging_jack_type: Yup.string().required('Required*').nullable(),\r\n        cimei_1: Yup.string()\r\n            .when(\r\n                ['battery_status', 'lock_status'],\r\n                (battery_status, lock_status, schema) => {\r\n                    if (\r\n                        battery_status !== 'Charge failed' &&\r\n                        battery_status !== 'Battery Bulging' &&\r\n                        battery_status !== 'No-battery' &&\r\n                        lock_status !== 'Pin/Pattern Lock' &&\r\n                        lock_status !== 'Google Locked' &&\r\n                        lock_status !== 'iCloud Locked'\r\n                    ) {\r\n                        return schema.required('Required').min(15)\r\n                    }\r\n                }\r\n            )\r\n            .nullable(),\r\n        cimei_2: Yup.string()\r\n            .when(\r\n                ['battery_status', 'lock_status'],\r\n                (battery_status, lock_status, schema) => {\r\n                    if (\r\n                        battery_status !== 'Charge failed' &&\r\n                        battery_status !== 'Battery Bulging' &&\r\n                        battery_status !== 'No-battery' &&\r\n                        lock_status !== 'Pin/Pattern Lock' &&\r\n                        lock_status !== 'Google Locked' &&\r\n                        lock_status !== 'iCloud Locked'\r\n                    ) {\r\n                        return schema.required('Required').min(15)\r\n                    }\r\n                }\r\n            )\r\n            .nullable(),\r\n        part_name: Yup.string()\r\n            .when('boady_part_missing', (boady_part_missing, schema) => {\r\n                if (boady_part_missing == 'YES') {\r\n                    return schema.required('Required')\r\n                }\r\n            })\r\n            .nullable(),\r\n    })\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n    /*********************************************************** */\r\n    let admin = localStorage.getItem('prexo-authentication')\r\n    let user_name1\r\n    if (admin) {\r\n        let { user_name } = jwt_decode(admin)\r\n        user_name1 = user_name\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getWhtTrayItem/' + trayId + '/' + 'Charging Station IN'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                    //   dataTableFun()\r\n                } else if (response.status === 202) {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                } else {\r\n                    navigate('/bag-issue-request')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextBoxDis(true)\r\n                let res = await axiosWarehouseIn.post('/check-uic', obj)\r\n                if (res?.status == 200) {\r\n                    reset({\r\n                        ...res.data.data?.charging,\r\n                    })\r\n                    setCharge(res.data.data?.charging?.battery_status)\r\n                    if (res.data.data?.charging?.boady_part_missing == 'YES') {\r\n                        setBodyDamage(true)\r\n                    }\r\n                    console.log(res.data.data?.charging?.boady_part_missing)\r\n                    setResDataUic(res.data.data)\r\n                    handleClickOpen()\r\n                } else {\r\n                    setTextBoxDis(false)\r\n                    setUic('')\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    const onSubmit = async (values) => {\r\n        values.charging_person = user_name1\r\n\r\n        if (trayData.limit <= trayData?.actual_items?.length) {\r\n            alert('All Items Scanned')\r\n        } else {\r\n            setlLoading(true)\r\n            if (\r\n                values.battery_status !== 'Charge' &&\r\n                values.battery_status !== 'Heat Problem'\r\n            ) {\r\n                values.charge_percentage = ''\r\n                values.lock_status = ''\r\n            }\r\n\r\n            if (\r\n                values.battery_status !== 'Charge' &&\r\n                values.battery_status !== 'Heat Problem' &&\r\n                values.lock_status == 'Unlocked' &&\r\n                values.lock_status == 'Software Issue'\r\n            ) {\r\n                values.cimei_1 = ''\r\n                values.cimei_2 = ''\r\n            }\r\n\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: resDataUic,\r\n                }\r\n                objData.item.charging = values\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/wht-add-actual-item',\r\n                    objData\r\n                )\r\n                if (res.status == 200) {\r\n                    setUic('')\r\n                    setlLoading(false)\r\n                    setTextBoxDis(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                    handleClose()\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        try {\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n            } else if (\r\n                trayData?.actual_items?.length == trayData?.items?.length\r\n            ) {\r\n                setlLoading(true)\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                }\r\n\r\n                let res = await axiosCharging.post('/charging-done', obj)\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setlLoading(false)\r\n                    navigate('/charging/tray')\r\n                }\r\n            } else {\r\n                alert('Please Verify Actual Data')\r\n            }\r\n        } catch (error) {\r\n            setlLoading(false)\r\n            alert(error)\r\n        }\r\n    }\r\n    const handleClickOpen = () => {\r\n        if (trayData.sort_id !== 'Recharging Station IN') {\r\n            setBodyDamage(false)\r\n        }\r\n        setOpen(true)\r\n    }\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>Expected</h5>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {\r\n                                    trayData?.items?.filter(function (item) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                                {/* <TableCell>Tracking Number</TableCell> */}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>ACTUAL</h5>\r\n                        <TextField\r\n                            sx={{ mt: 1 }}\r\n                            id=\"outlined-password-input\"\r\n                            type=\"text\"\r\n                            name=\"doorsteps_diagnostics\"\r\n                            label=\"SCAN UIC\"\r\n                            disabled={textBoxDis}\r\n                            inputRef={(input) => input && input.focus()}\r\n                            value={uic}\r\n                            // onChange={(e) => setAwbn(e.target.value)}\r\n                            onChange={(e) => {\r\n                                setUic(e.target.value)\r\n                                handelUic(e)\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    width: 'auto',\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {\r\n                                    trayData.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textBoxDis, uic])\r\n    /***************************************************************************************** */\r\n    console.log()\r\n    return (\r\n        <>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    ADD\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            alignItems: 'flex-start',\r\n                            flexDirection: 'column',\r\n                            p: 1,\r\n                            m: 1,\r\n                            bgcolor: 'background.paper',\r\n                            borderRadius: 1,\r\n                        }}\r\n                    >\r\n                        <FormControl fullWidth>\r\n                            <InputLabel\r\n                                sx={{ pt: 2 }}\r\n                                id=\"demo-simple-select-label\"\r\n                            >\r\n                                Battery Status\r\n                            </InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                fullWidth\r\n                                label=\"Battery Status\"\r\n                                defaultValue={getValues('battery_status')}\r\n                                {...register('battery_status')}\r\n                                error={errors.battery_status ? true : false}\r\n                                helperText={errors.battery_status?.message}\r\n                                sx={{ mt: 2 }}\r\n                            >\r\n                                <MenuItem\r\n                                    value=\"Charge failed\"\r\n                                    onClick={(e) => setCharge('Charge failed')}\r\n                                >\r\n                                    Charge failed\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                    value=\"Charge\"\r\n                                    onClick={(e) => setCharge('Charge')}\r\n                                >\r\n                                    Charge\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                    value=\"Heat Problem\"\r\n                                    onClick={(e) => setCharge('Heat Problem')}\r\n                                >\r\n                                    Heat Problem\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                    value=\"Battery Bulging\"\r\n                                    onClick={(e) =>\r\n                                        setCharge('Battery Bulging')\r\n                                    }\r\n                                >\r\n                                    Battery Bulging\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                    value=\"No-battery\"\r\n                                    onClick={(e) => setCharge('No-battery')}\r\n                                >\r\n                                    No-battery\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        {charge == 'Charge' || charge == 'Heat Problem' ? (\r\n                            <FormControl fullWidth>\r\n                                <InputLabel\r\n                                    sx={{ pt: 2 }}\r\n                                    id=\"demo-simple-select-label\"\r\n                                >\r\n                                    Charge Percentage\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-label\"\r\n                                    fullWidth\r\n                                    defaultValue={getValues(\r\n                                        'charge_percentage'\r\n                                    )}\r\n                                    label=\"Charge Percentage\"\r\n                                    {...register('charge_percentage')}\r\n                                    error={\r\n                                        errors.charge_percentage ? true : false\r\n                                    }\r\n                                    helperText={\r\n                                        errors.charge_percentage?.message\r\n                                    }\r\n                                    sx={{ mt: 2 }}\r\n                                >\r\n                                    <MenuItem value=\"1-10% Charged\">\r\n                                        1-10% Charged\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"10-50% Charged\">\r\n                                        10-50% Charged\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"50-80% Charged\">\r\n                                        50-80% Charged\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"80%+ Charged\">\r\n                                        80%+ Charged\r\n                                    </MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        ) : null}\r\n\r\n                        <FormControl fullWidth>\r\n                            <InputLabel\r\n                                sx={{ pt: 2 }}\r\n                                id=\"demo-simple-select-label\"\r\n                            >\r\n                                Body Condition\r\n                            </InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                fullWidth\r\n                                disabled={\r\n                                    trayData.sort_id == 'Recharging Station IN'\r\n                                }\r\n                                label=\"Body Condition\"\r\n                                defaultValue={getValues('body_condition')}\r\n                                {...register('body_condition')}\r\n                                error={errors.body_condition ? true : false}\r\n                                helperText={errors.body_condition?.message}\r\n                                sx={{ mt: 2 }}\r\n                            >\r\n                                <MenuItem value=\"Body Condition Ok\">\r\n                                    Body Condition Ok\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Body Broken\">\r\n                                    Body Broken\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Body with minor scratches\">\r\n                                    Body with minor scratches\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Body with major scratches\">\r\n                                    Body with major scratches\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel\r\n                                sx={{ pt: 2 }}\r\n                                id=\"demo-simple-select-label\"\r\n                            >\r\n                                Display Condition\r\n                            </InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                fullWidth\r\n                                defaultValue={getValues('display_condition')}\r\n                                disabled={\r\n                                    trayData.sort_id == 'Recharging Station IN'\r\n                                }\r\n                                label=\"Display Condition\"\r\n                                {...register('display_condition')}\r\n                                error={errors.display_condition ? true : false}\r\n                                helperText={errors.display_condition?.message}\r\n                                sx={{ mt: 2 }}\r\n                            >\r\n                                <MenuItem value=\"Display Condition Ok\">\r\n                                    Display Condition Ok\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Display Broken\">\r\n                                    Display Broken\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Display With Minor Scratches\">\r\n                                    Display With Minor Scratches\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Display With Major Scratches\">\r\n                                    Display With Major scratches\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        {charge === 'Heat Problem' || charge === 'Charge' ? (\r\n                            <FormControl fullWidth>\r\n                                <InputLabel\r\n                                    sx={{ pt: 2 }}\r\n                                    id=\"demo-simple-select-label\"\r\n                                >\r\n                                    Lock Status\r\n                                </InputLabel>\r\n                                <Select\r\n                                    disabled={\r\n                                        trayData.sort_id ==\r\n                                        'Recharging Station IN'\r\n                                    }\r\n                                    labelId=\"demo-simple-select-label\"\r\n                                    fullWidth\r\n                                    label=\"Lock Status\"\r\n                                    defaultValue={getValues('lock_status')}\r\n                                    {...register('lock_status')}\r\n                                    error={errors.lock_status ? true : false}\r\n                                    helperText={errors.lock_status?.message}\r\n                                    sx={{ mt: 2 }}\r\n                                >\r\n                                    <MenuItem value=\"Unlocked\">\r\n                                        Unlocked\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"Pin/Pattern Lock\">\r\n                                        Pin/Pattern Lock\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"Google Locked\">\r\n                                        Google Locked\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"iCloud Locked\">\r\n                                        iCloud Locked\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"Software Issue\">\r\n                                        Software Issue\r\n                                    </MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        ) : null}\r\n\r\n                        <FormControl fullWidth>\r\n                            <InputLabel\r\n                                sx={{ pt: 2 }}\r\n                                id=\"demo-simple-select-label\"\r\n                            >\r\n                                Charging Jack type\r\n                            </InputLabel>\r\n                            <Select\r\n                                disabled={\r\n                                    trayData.sort_id == 'Recharging Station IN'\r\n                                }\r\n                                labelId=\"demo-simple-select-label\"\r\n                                fullWidth\r\n                                defaultValue={getValues('charging_jack_type')}\r\n                                label=\"Charging Jack type\"\r\n                                {...register('charging_jack_type')}\r\n                                error={errors.charging_jack_type ? true : false}\r\n                                helperText={errors.charging_jack_type?.message}\r\n                                sx={{ mt: 2 }}\r\n                            >\r\n                                <MenuItem value=\"Micro USB\">Micro USB</MenuItem>\r\n                                <MenuItem value=\"Type C\">Type C</MenuItem>\r\n                                <MenuItem value=\"lightning\">lightning</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <FormLabel\r\n                                id=\"demo-radio-buttons-group-label\"\r\n                                sx={{ mt: 2 }}\r\n                            >\r\n                                Any Body Part missing\r\n                            </FormLabel>\r\n                            <RadioGroup\r\n                                aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                                defaultValue={\r\n                                    trayData?.sort_id == 'Recharging Station IN'\r\n                                        ? getValues('boady_part_missing')\r\n                                        : 'NO'\r\n                                }\r\n                                name=\"boady_part_missing\"\r\n                            >\r\n                                <Box>\r\n                                    <FormControlLabel\r\n                                        value=\"YES\"\r\n                                        disabled={\r\n                                            trayData.sort_id ==\r\n                                            'Recharging Station IN'\r\n                                        }\r\n                                        {...register('boady_part_missing')}\r\n\r\n                                        onClick={(e) => {\r\n                                            if (\r\n                                                trayData?.sort_id ==\r\n                                                'Recharging Station IN'\r\n                                            ) {\r\n                                                return false\r\n                                            } else {\r\n                                                setBodyDamage(true)\r\n                                            }\r\n                                        }}\r\n                                        control={<Radio />}\r\n                                        label=\"YES\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                    disabled={\r\n                                        trayData.sort_id ==\r\n                                        'Recharging Station IN'\r\n                                    }\r\n                                        {...register('boady_part_missing')}\r\n                                        value=\"NO\"\r\n                                        onClick={(e) => {\r\n                                            if (\r\n                                                trayData?.sort_id ==\r\n                                                'Recharging Station IN'\r\n                                            ) {\r\n                                                return false\r\n                                            } else {\r\n                                                setBodyDamage(false)\r\n                                            }\r\n                                        }}\r\n                                        control={<Radio />}\r\n                                        label=\"NO\"\r\n                                    />\r\n                                </Box>\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        {bodyDamage == true ? (\r\n                            <TextField\r\n                                defaultValue={getValues('part_name')}\r\n                                label=\"Missing Part Name\"\r\n                                variant=\"outlined\"\r\n                                type=\"text\"\r\n                                disabled={\r\n                                    trayData.sort_id == 'Recharging Station IN'\r\n                                }\r\n                                {...register('part_name')}\r\n                                error={errors.part_name ? true : false}\r\n                                helperText={errors.part_name?.message}\r\n                                fullWidth\r\n                                sx={{ mt: 2 }}\r\n                            />\r\n                        ) : null}\r\n                        <TextField\r\n                            label=\"CIMEI-1\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            disabled={\r\n                                trayData.sort_id == 'Recharging Station IN'\r\n                            }\r\n                            defaultValue={getValues('cimei_1')}\r\n                            {...register('cimei_1')}\r\n                            inputProps={{ maxLength: 15 }}\r\n                            onKeyPress={(event) => {\r\n                                if (!/[0-9]/.test(event.key)) {\r\n                                    event.preventDefault()\r\n                                }\r\n                            }}\r\n                            error={errors.cimei_1 ? true : false}\r\n                            helperText={errors.cimei_1?.message}\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n                        <TextField\r\n                            label=\"CIMEI-2\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            disabled={\r\n                                trayData.sort_id == 'Recharging Station IN'\r\n                            }\r\n                            defaultValue={getValues('cimei_2')}\r\n                            {...register('cimei_2')}\r\n                            inputProps={{ maxLength: 15 }}\r\n                            onKeyPress={(event) => {\r\n                                if (!/[0-9]/.test(event.key)) {\r\n                                    event.preventDefault()\r\n                                }\r\n                            }}\r\n                            error={errors.cimei_2 ? true : false}\r\n                            helperText={errors.cimei_2?.message}\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n                        <TextField\r\n                            label=\"Supervisor name\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            value={user_name1}\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            ml: 2,\r\n                        }}\r\n                        fullwidth\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'green' }}\r\n                        component=\"span\"\r\n                        disabled={loading}\r\n                        type=\"submit\"\r\n                        onClick={handleSubmit(onSubmit)}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>TRAY ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={loading}\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={() => {\r\n                            if (window.confirm('You Want send to warehouse?')) {\r\n                                handelIssue()\r\n                            }\r\n                        }}\r\n                    >\r\n                        Charging Done\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\Tray-merge\\start-merge.jsx",["2541","2542","2543","2544","2545","2546","2547","2548","2549"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nimport { axiosSortingAgent, axiosWarehouseIn } from '../../../../axios'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [tray, setTray] = useState([])\r\n    const { trayId } = useParams()\r\n    /**************************************************************************** */\r\n    const [awbn, setAwbn] = useState('')\r\n    const [open, setOpen] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [itemDetails, setItemDetails] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [loading2, setLoading2] = useState(false)\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/viewTrayFromAndTo/' + location + '/' + trayId\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setTray(response.data.data)\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        setLoading(false)\r\n        setAwbn('')\r\n    }\r\n\r\n    const handelAwbn = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                    wht_tray: tray?.wht,\r\n                }\r\n                let res = await axiosSortingAgent.post(\r\n                    '/cheack-uic-for-sorting',\r\n                    obj\r\n                )\r\n                if (res?.status === 200) {\r\n                    addActualitem(res.data.data)\r\n                    setOpen(true)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                setAwbn('')\r\n\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (data) => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                fromTray: trayId,\r\n                toTray: tray[1].code,\r\n                item: data,\r\n            }\r\n            let res = await axiosSortingAgent.post('/itemShifteToMmtTray', obj)\r\n            if (res?.status === 200) {\r\n                setRefresh((refresh) => !refresh)\r\n                setAwbn('')\r\n                handleClose()\r\n                setLoading(false)\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, trayId) => {\r\n        e.preventDefault()\r\n        try {\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n            } else {\r\n                setLoading2(true)\r\n                let obj = {\r\n                    fromTray: trayId,\r\n                    toTray: tray?.[1].code,\r\n                }\r\n                let res = await axiosSortingAgent.post(\r\n                    '/mergeDoneTraySendToWarehouse',\r\n                    obj\r\n                )\r\n                if (res.status === 200) {\r\n                    alert(res.data.message)\r\n                    setLoading2(false)\r\n                    navigate('/sorting/merge')\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    \r\n    /***************************************************************************************** */\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>FROM TRAY - {trayId}</h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Assigned Date --{' '}\r\n                        {new Date(tray?.[0]?.assigned_date).toLocaleString(\r\n                            'en-GB',\r\n                            {\r\n                                hour12: true,\r\n                            }\r\n                        )}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                        <h4>FROM TRAY ITEMS - {tray[0]?.code}</h4>\r\n\r\n                        <TableContainer>\r\n                            <Table\r\n                                style={{ width: '100%' }}\r\n                                id=\"example\"\r\n                                stickyHeader\r\n                                aria-label=\"sticky table\"\r\n                            >\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>S.NO</TableCell>\r\n                                        <TableCell>UIC</TableCell>\r\n                                        <TableCell>Order Id</TableCell>\r\n                                        <TableCell>AWBN</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {tray[0]?.actual_items?.map(\r\n                                        (data, index) => (\r\n                                            <TableRow\r\n                                                hover\r\n                                                role=\"checkbox\"\r\n                                                tabIndex={-1}\r\n                                            >\r\n                                                <TableCell>\r\n                                                    {index + 1}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data?.uic}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data?.order_id}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data?.awbn_number ==\r\n                                                    undefined\r\n                                                        ? data?.tracking_id\r\n                                                        : data?.awbn_number}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        )\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                        <h4>TO TRAY ITEMS - {tray?.[1]?.code}</h4>\r\n                        <TextField\r\n                            sx={{ m: 1 }}\r\n                            id=\"outlined-password-input\"\r\n                            type=\"text\"\r\n                            name=\"doorsteps_diagnostics\"\r\n                            label=\"Please Enter UIC\"\r\n                            value={awbn}\r\n                            // onChange={(e) => setAwbn(e.target.value)}\r\n                            onChange={(e) => {\r\n                                setAwbn(e.target.value)\r\n                                handelAwbn(e)\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    width: 'auto',\r\n                                },\r\n                            }}\r\n                        />\r\n\r\n                        <TableContainer>\r\n                            <Table\r\n                                style={{ width: '100%' }}\r\n                                id=\"example\"\r\n                                stickyHeader\r\n                                aria-label=\"sticky table\"\r\n                            >\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>S.NO</TableCell>\r\n                                        <TableCell>UIC</TableCell>\r\n                                        <TableCell>Order Id</TableCell>\r\n                                        <TableCell>AWBN</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                <TableBody>\r\n                                    {tray?.[1]?.items?.map((data, index) => (\r\n                                        <TableRow\r\n                                            hover\r\n                                            role=\"checkbox\"\r\n                                            tabIndex={-1}\r\n                                        >\r\n                                            <TableCell>{index + 1}</TableCell>\r\n                                            <TableCell>{data?.uic}</TableCell>\r\n                                            <TableCell>\r\n                                                {data?.order_id}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {data?.awbn_number == undefined\r\n                                                    ? data?.tracking_id\r\n                                                    : data?.awbn_number}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            tray?.[0]?.actual_items?.length !== 0\r\n                                ? true\r\n                                : loading2 == true\r\n                                ? true\r\n                                : false\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelIssue(e, trayId)\r\n                        }}\r\n                    >\r\n                        Close Tray\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\Tray\\view-item-tray.jsx",["2550","2551"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { axiosBot } from '../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosBot.post('/trayItem/' + trayId)\r\n                if (res.status == 200) {\r\n                    setTrayData(res.data.data?.items)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Tray', path: '/' },\r\n                        { name: 'Tray-Item', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst columns = [\r\n    {\r\n        name: 'index',\r\n        label: 'Record No',\r\n        options: {\r\n            filter: false,\r\n            sort: false,\r\n            customBodyRender: (rowIndex, dataIndex) => dataIndex.rowIndex + 1,\r\n        },\r\n    },\r\n    {\r\n        name: 'uic',\r\n        label: 'UIC',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'imei',\r\n        label: 'IMEI',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'bag_id',\r\n        label: 'Bag Id',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'body_damage',\r\n        label: 'Body Damage',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'body_damage_des',\r\n        label: 'Body Damage Description',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'item_recieved',\r\n        label: 'Item Received In Packet',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'model_brand',\r\n        label: 'Mismatched Model Brand Name',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerOne',\r\n        label: 'Other Info 1',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerTwo',\r\n        label: 'Other Info 2',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerThree',\r\n        label: 'Other Info 3',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerFour',\r\n        label: 'Other Info 4',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'added_time',\r\n        label: 'Added Date',\r\n        options: {\r\n            filter: true,\r\n            customBodyRender: (value) =>\r\n                new Date(value).toLocaleString('en-GB', {\r\n                    hour12: true,\r\n                }),\r\n        },\r\n    },\r\n]\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bqc-components\\Tray\\bqc-out.jsx",["2552","2553","2554","2555","2556","2557","2558","2559","2560","2561","2562","2563","2564","2565"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\Tray\\assigned-all-tray.jsx",["2566","2567"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosBot } from '../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [trayData, setTrayData] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { user_name } = jwt_decode(token)\r\n                    let res = await axiosBot.post('/assignedTray/' + user_name)\r\n                    if (res.status == 200) {\r\n                        setTrayData(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/bot/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta?.rowData[2],\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => {\r\n                                handelViewTray(e, value)\r\n                            }}\r\n                            style={{ backgroundColor: 'primery' }}\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Tray', path: '/' }]} />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\Bag\\bot-tray-transcation.jsx",["2568","2569","2570","2571","2572","2573","2574","2575","2576","2577","2578","2579","2580","2581","2582","2583","2584","2585","2586","2587","2588","2589","2590","2591","2592","2593","2594","2595","2596","2597","2598","2599","2600","2601","2602","2603","2604","2605","2606","2607","2608","2609","2610","2611"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Track\\item-track.jsx",["2612","2613","2614","2615","2616","2617","2618","2619","2620","2621","2622","2623","2624","2625","2626","2627","2628","2629","2630","2631","2632","2633","2634","2635","2636","2637","2638","2639","2640","2641","2642","2643","2644"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    MenuItem,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    TextField,\r\n    Box,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [item, setItem] = useState([])\r\n    const [data, setData] = useState([])\r\n    const navigate = useNavigate()\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [count, setCount] = useState(0)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const { location } = jwt_decode(admin)\r\n            const fetchData = async () => {\r\n                try {\r\n                    let res = await axiosMisUser.post(\r\n                        '/getDeliveredOrders/' +\r\n                            location +\r\n                            '/' +\r\n                            page +\r\n                            '/' +\r\n                            rowsPerPage\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setCount(res.data.count)\r\n\r\n                        setItem(res.data.data)\r\n                        // dataTableFun();\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [refresh, page])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 6050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const searchTrackItem = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setRefresh((refresh) => !refresh)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                    }\r\n                    let res = await axiosMisUser.post(\r\n                        '/search-mis-track-item',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setRowsPerPage(10)\r\n                        setPage(0)\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Uic Status</TableCell>\r\n                        <TableCell>UIC</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Stockin Date</TableCell>\r\n                        <TableCell>Bag ID</TableCell>\r\n                        <TableCell>Stockin Status</TableCell>\r\n                        <TableCell>Bag close Date</TableCell>\r\n                        <TableCell>BOT Agent Name</TableCell>\r\n                        <TableCell>Assigned to BOT Agent Date</TableCell>\r\n                        <TableCell>Tray ID</TableCell>\r\n                        <TableCell>Tray Type</TableCell>\r\n                        <TableCell>Tray Status</TableCell>\r\n                        <TableCell>Tray Location</TableCell>\r\n                        <TableCell>Tray Closed Time BOT</TableCell>\r\n                        <TableCell>\r\n                            Tray Received From BOT Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>Tray Closed Time Warehouse</TableCell>\r\n                        <TableCell>Sorting Agent Name</TableCell>\r\n                        <TableCell>Handover to Sorting Date</TableCell>\r\n                        <TableCell>WHT Tray</TableCell>\r\n                        <TableCell>WHT Tray Assigned Date</TableCell>\r\n                        <TableCell>WHT Tray Received From Sorting</TableCell>\r\n                        <TableCell>WHT Tray Closed After Sorting</TableCell>\r\n                        <TableCell>Charging Username</TableCell>\r\n                        <TableCell>Charging Assigned Date</TableCell>\r\n                        <TableCell>Charge In Date</TableCell>\r\n                        <TableCell>Charge Done Date</TableCell>\r\n                        <TableCell>\r\n                            Tray Received From Charging Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Charging Done Tray Closed Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>BQC Agent Name</TableCell>\r\n                        <TableCell>Assigned to BQC</TableCell>\r\n\r\n                        <TableCell>BQC Done Date</TableCell>\r\n                        <TableCell>\r\n                            Tray Received From BQC Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Bqc Done Tray Closed Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>Issued to Audit Date</TableCell>\r\n                        <TableCell>Audit Agnet Name</TableCell>\r\n                        <TableCell>Audit Done Date</TableCell>\r\n                        <TableCell>Audit Done Tray Recieved Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data?.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.tracking_id}</TableCell>\r\n                            <TableCell>{data.delivery.order_id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery.uic_status == 'Printed'\r\n                                        ? { color: 'green' }\r\n                                        : data.delivery.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'red' }\r\n                                }\r\n                            >\r\n                                {data.delivery.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.uic_code?.code}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.imei}</TableCell>\r\n\r\n                            <TableCell>{data.delivery.item_id}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.stockin_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.stockin_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.bag_id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery.stock_in_status == 'Valid'\r\n                                        ? { color: 'green' }\r\n                                        : { color: 'red' }\r\n                                }\r\n                            >\r\n                                {data.delivery.stock_in_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bag_close_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bag_close_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.agent_name}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.assign_to_agent != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.assign_to_agent\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.tray_id}</TableCell>\r\n                            <TableCell>{data.delivery.tray_type}</TableCell>\r\n                            <TableCell>{data.delivery.tray_status}</TableCell>\r\n                            <TableCell>{data.delivery.tray_location}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.tray_closed_by_bot != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.tray_closed_by_bot\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bot_done_received != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bot_done_received\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.warehouse_close_date !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.warehouse_close_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : data?.delivery.tray_close_wh_date !=\r\n                                      undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.tray_close_wh_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : null}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.sorting_agent_name}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.handover_sorting_date !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.handover_sorting_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.wht_tray}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.wht_tray_assigned_date !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.wht_tray_assigned_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.received_from_sorting !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.received_from_sorting\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.closed_from_sorting != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.closed_from_sorting\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.agent_name_charging}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.assign_to_agent_charging !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.assign_to_agent_charging\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_in_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_in_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_done_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_done_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_done_received !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_done_received\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_done_close != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_done_close\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.agent_name_bqc}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.assign_to_agent_bqc != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.assign_to_agent_bqc\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data?.delivery.bqc_out_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bqc_out_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bqc_done_received != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bqc_done_received\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bqc_done_close != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bqc_done_close\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.issued_to_audit != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.issued_to_audit\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.audit_user_name }\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.audit_done_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.audit_done_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.audit_done_recieved != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.audit_done_recieved\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [item, data])\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Track', path: '/' },\r\n                        { name: 'Track-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"uic\">UIC</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchTrackItem(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={count}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Ready-for-rdl\\wht-tray.jsx",["2645"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [whtTrayList, setWhtTrayList] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchWht = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post('/auditDoneWht')\r\n                if (res.status === 200) {\r\n                    setWhtTrayList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchWht()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n    const handelReadyForRdl = async () => {\r\n        try {\r\n            let obj = {\r\n                ischeck: isCheck,\r\n            }\r\n            let res = await axiosSuperAdminPrexo.post('/sendToRdl', obj)\r\n            setIsCheck([])\r\n            if (res.status === 200) {\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsCheck([])\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else if (res.status == 202) {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelViewItem = (trayId) => {\r\n        navigate('/sup-admin/wht/view-item/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code', // field name in the row object\r\n            label: 'Tray Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            hide: true,\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: false,\r\n                sort: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[8],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Ready For RDL', path: '/' }]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isCheck.length === 0}\r\n                onClick={(e) => {\r\n                    handelReadyForRdl(e)\r\n                }}\r\n            >\r\n                Ready For RDL\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'WHT Tray'}\r\n                data={whtTrayList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Merge\\Wht-merge\\wht-tray.jsx",["2646","2647","2648","2649"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    DialogTitle,\r\n    IconButton,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn, axiosMisUser } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [userList, setUserList] = useState([])\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const [sortingAgent, setSortingAgent] = useState([])\r\n    const [toWhtTray, setToWhatTray] = useState([])\r\n    const [open, setOpen] = useState(false)\r\n    const [mergreData, setMergeData] = useState({\r\n        fromTray: '',\r\n        toTray: '',\r\n        sort_agent: '',\r\n    })\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'wht-merge/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { location } = jwt_decode(token)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post(\r\n                        '/getSortingAgentMergeMmt/' + location\r\n                    )\r\n                    if (res.status === 200) {\r\n                        setSortingAgent(res.data.data)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                }\r\n                fetchData()\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [isAlive])\r\n\r\n    /* OPEN DIALOG BOX */\r\n    const handelMerge = async (e, model, brand, trayId, itemCount, status) => {\r\n        e.preventDefault()\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { location } = jwt_decode(token)\r\n                let obj = {\r\n                    location: location,\r\n                    model: model,\r\n                    brand: brand,\r\n                    fromTray: trayId,\r\n                    itemCount: itemCount,\r\n                    status: status,\r\n                }\r\n\r\n                let res = await axiosMisUser.post('/toWhtTrayForMerge', obj)\r\n                if (res.status === 200) {\r\n                    setOpen(true)\r\n                    setToWhatTray(res.data.data)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n                setMergeData((p) => ({ ...p, fromTray: trayId }))\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    /******************************************************************************* */\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n    /* REQUEST SEND TO WAREHOUSE */\r\n    const handelSendRequest = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let res = await axiosMisUser.post(\r\n                '/TrayMergeRequestSend',\r\n                mergreData\r\n            )\r\n            if (res.status === 200) {\r\n                alert(res.data.message)\r\n                handleClose()\r\n                setIsAlive((isAlive) => !isAlive)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code', // field name in the row object\r\n            label: 'Tray Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code', // field name in the row object\r\n            label: 'Tray Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Display Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta?.rowData[5],\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    handelViewTray(e, value)\r\n                                }}\r\n                                style={{ backgroundColor: 'primery' }}\r\n                            >\r\n                                View\r\n                            </Button>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    handelMerge(\r\n                                        e,\r\n                                        tableMeta.rowData[10],\r\n                                        tableMeta.rowData[9],\r\n                                        value,\r\n                                        tableMeta.rowData[6]?.length,\r\n                                        tableMeta.rowData[11]\r\n                                    )\r\n                                }}\r\n                                style={{ backgroundColor: 'primery' }}\r\n                            >\r\n                                Merge\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Tray Merge\r\n                </BootstrapDialogTitle>\r\n\r\n                <DialogContent dividers>\r\n                    <FormControl fullWidth>\r\n                        <InputLabel\r\n                            sx={{ pt: 2 }}\r\n                            id=\"demo-simple-select-label\"\r\n                        >\r\n                            To WHT Tray\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            label=\"Cpc\"\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        >\r\n                            {toWhtTray.map((data) => (\r\n                                <MenuItem\r\n                                    onClick={(e) => {\r\n                                        setMergeData((p) => ({\r\n                                            ...p,\r\n                                            toTray: data.code,\r\n                                        }))\r\n                                    }}\r\n                                    value={data.code}\r\n                                >\r\n                                    {data.code} - ({data.items.length})\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl fullWidth>\r\n                        <InputLabel\r\n                            sx={{ pt: 2 }}\r\n                            id=\"demo-simple-select-label\"\r\n                        >\r\n                            Sorting Agent\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            label=\"Cpc\"\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        >\r\n                            {sortingAgent.map((data) => (\r\n                                <MenuItem\r\n                                    onClick={(e) => {\r\n                                        setMergeData((p) => ({\r\n                                            ...p,\r\n                                            sort_agent: data.user_name,\r\n                                        }))\r\n                                    }}\r\n                                    value={data.user_name}\r\n                                >\r\n                                    {data.user_name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            mergreData.sort_agent === '' ||\r\n                            mergreData.toTray === ''\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelSendRequest(e)\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Merge', path: '/' },\r\n                        { name: 'Wht' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                // onClick={() => setShouldOpenEditorDialog(true)}\r\n            >\r\n                Assign\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'Wht Tray'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\close-tray.jsx",["2650","2651","2652","2653","2654","2655","2656"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/charging-done-recieved/' +\r\n                        trayId +\r\n                        '/' +\r\n                        'Received From Audit'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData?.items.length < trayData?.actual_items?.length) {\r\n            alert('All Items are Verified')\r\n        } else {\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/sorting-done-put-item',\r\n                    objData\r\n                )\r\n                if (res?.status == 200) {\r\n                    setRefresh((refresh) => !refresh)\r\n                    setTextDisable(false)\r\n                    setUic('')\r\n                } else {\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            setLoading(true)\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n                setLoading(false)\r\n            } else {\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                    type: 'Audit Done Closed By Warehouse',\r\n                    length: trayData?.items?.length,\r\n                    limit: trayData?.limit,\r\n                }\r\n                let res = await axiosWarehouseIn.post('/auditDoneClose', obj)\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/wareshouse/wht/return-from-audit')\r\n                } else {\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/check-uic-sorting-done',\r\n                    obj\r\n                )\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setUic('')\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>Expected</h5>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    fontSize: '22px',\r\n                                }}\r\n                            >\r\n                                {trayData?.items?.length}/{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    fontSize: '24px',\r\n                                }}\r\n                            >\r\n                                {trayData?.items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>ACTUAL</h5>\r\n                <TextField\r\n                    sx={{ mt: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    inputRef={(input) => input && input.focus()}\r\n                    name=\"doorsteps_diagnostics\"\r\n                    disabled={textDisable}\r\n                    label=\"SCAN UIC\"\r\n                    value={uic}\r\n                    onChange={(e) => {\r\n                        setUic(e.target.value)\r\n                        handelUic(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    fontSize: '24px',\r\n                                }}\r\n                            >\r\n                                {trayData?.actual_items?.length}/\r\n                                {trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    fontSize: '24px',\r\n                                }}\r\n                            >\r\n                                {trayData?.actual_items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textDisable, uic])\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>Tray ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Closed On --{' '}\r\n                        {new Date(trayData?.closed_time_bot).toLocaleString(\r\n                            'en-GB',\r\n                            {\r\n                                hour12: true,\r\n                            }\r\n                        )}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            trayData?.items?.length !==\r\n                                trayData?.actual_items?.length || loading\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Close?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Remove-invalid-item-from-bag\\view-item.jsx",["2657","2658","2659"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo, axiosWarehouseIn } from '../../../../axios'\r\nimport { Button } from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [bagItemList, setBagItemList] = useState([])\r\n    const { bagId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchBrand = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post(\r\n                    '/getBagItemInvalid/' + bagId\r\n                )\r\n                if (res.status === 200) {\r\n                    setBagItemList(res.data.data.items)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchBrand()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelDelete = async (id, awbn, state) => {\r\n        try {\r\n          let obj = {\r\n            id: id,\r\n            bagId: bagId,\r\n            awbn: awbn,\r\n            state: state,\r\n          };\r\n          let data = await axiosWarehouseIn.post(\"/stockin\", obj);\r\n          if (data.status == 200) {\r\n            alert(data.data.message);\r\n            setIsAlive((isAlive)=> !isAlive)\r\n          }\r\n          else{\r\n            alert(data.data.message)\r\n          }\r\n        } catch (error) {\r\n          alert(error);\r\n        }\r\n      };\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'awbn_number', // field name in the row object\r\n            label: 'Tracking Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: '_id', // field name in the row object\r\n            label: 'obj id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n                display:false\r\n            },\r\n        },\r\n        {\r\n            name: 'order_id',\r\n            label: 'Order Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'order_date',\r\n            label: 'Order Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        year: \"numeric\",\r\n                              month: \"2-digit\",\r\n                              day: \"2-digit\",\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n               \r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return value == 'Invalid' ? (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => {\r\n                                if (window.confirm(\"You want to Remove?\")) {\r\n                                  handelDelete(\r\n                                    tableMeta.rowData[2],\r\n                                    tableMeta.rowData[1],\r\n                                    value,\r\n                                  );\r\n                                }\r\n                              }}\r\n                            style={{ backgroundColor: 'red' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Remove\r\n                        </Button>\r\n                    ) : null\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Remove Invalid Item', path: '/' },\r\n                        { name: 'View-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Bag Item'}\r\n                data={bagItemList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Remove-invalid-item-from-bag\\bag.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Track-item\\track-item.jsx",["2660","2661","2662","2663","2664","2665","2666","2667","2668","2669","2670","2671","2672","2673","2674","2675","2676","2677","2678","2679","2680","2681","2682","2683","2684","2685","2686","2687","2688","2689","2690","2691","2692"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    TextField,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    TableFooter,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [item, setItem] = useState([])\r\n    const [data, setData] = useState([])\r\n    const navigate = useNavigate()\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [count, setCount] = useState(0)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const fetchData = async () => {\r\n                try {\r\n                    let res = await axiosSuperAdminPrexo.post(\r\n                        '/itemTracking/' + page + '/' + rowsPerPage\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setCount(res.data.count)\r\n                        setItem(res.data.data)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [refresh, page])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 6050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const searchTrackItem = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setRefresh((refresh) => !refresh)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                        page: page,\r\n                        rowsPerPage: rowsPerPage,\r\n                    }\r\n                    let res = await axiosSuperAdminPrexo.post(\r\n                        '/search-admin-track-item',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setRowsPerPage(10)\r\n                        setPage(0)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Uic Status</TableCell>\r\n                        <TableCell>UIC</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Stockin Date</TableCell>\r\n                        <TableCell>Bag ID</TableCell>\r\n                        <TableCell>Stockin Status</TableCell>\r\n                        <TableCell>Bag close Date</TableCell>\r\n                        <TableCell>BOT Agent Name</TableCell>\r\n                        <TableCell>Assigned to BOT Agent Date</TableCell>\r\n                        <TableCell>Tray ID</TableCell>\r\n                        <TableCell>Tray Type</TableCell>\r\n                        <TableCell>Tray Status</TableCell>\r\n                        <TableCell>Tray Location</TableCell>\r\n                        <TableCell>Tray Closed Time BOT</TableCell>\r\n                        <TableCell>\r\n                            Tray Received From BOT Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>Tray Closed Time Warehouse</TableCell>\r\n                        <TableCell>Sorting Agent Name</TableCell>\r\n                        <TableCell>Handover to Sorting Date</TableCell>\r\n                        <TableCell>WHT Tray</TableCell>\r\n                        <TableCell>WHT Tray Assigned Date</TableCell>\r\n                        <TableCell>WHT Tray Received From Sorting</TableCell>\r\n                        <TableCell>WHT Tray Closed After Sorting</TableCell>\r\n                        <TableCell>Charging Username</TableCell>\r\n                        <TableCell>Charging Assigned Date</TableCell>\r\n                        <TableCell>Charge In Date</TableCell>\r\n                        <TableCell>Charge Done Date</TableCell>\r\n                        <TableCell>\r\n                            Tray Received From Charging Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Charging Done Tray Closed Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>BQC Agent Name</TableCell>\r\n                        <TableCell>Assigned to BQC</TableCell>\r\n\r\n                        <TableCell>BQC Done Date</TableCell>\r\n                        <TableCell>\r\n                            Tray Received From BQC Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Bqc Done Tray Closed Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>Issued to Audit Date</TableCell>\r\n                        <TableCell>Audit Agnet Name</TableCell>\r\n                        <TableCell>Audit Done Date</TableCell>\r\n                        <TableCell>Audit Done Tray Recieved Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data?.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.tracking_id}</TableCell>\r\n                            <TableCell>{data.delivery.order_id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery.uic_status == 'Printed'\r\n                                        ? { color: 'green' }\r\n                                        : data.delivery.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'red' }\r\n                                }\r\n                            >\r\n                                {data.delivery.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.uic_code?.code}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.imei}</TableCell>\r\n\r\n                            <TableCell>{data.delivery.item_id}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.stockin_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.stockin_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.bag_id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery.stock_in_status == 'Valid'\r\n                                        ? { color: 'green' }\r\n                                        : { color: 'red' }\r\n                                }\r\n                            >\r\n                                {data.delivery.stock_in_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bag_close_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bag_close_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.agent_name}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.assign_to_agent != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.assign_to_agent\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.tray_id}</TableCell>\r\n                            <TableCell>{data.delivery.tray_type}</TableCell>\r\n                            <TableCell>{data.delivery.tray_status}</TableCell>\r\n                            <TableCell>{data.delivery.tray_location}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.tray_closed_by_bot != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.tray_closed_by_bot\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bot_done_received != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bot_done_received\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.warehouse_close_date !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.warehouse_close_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : data?.delivery.tray_close_wh_date !=\r\n                                      undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.tray_close_wh_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : null}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.sorting_agent_name}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.handover_sorting_date !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.handover_sorting_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.wht_tray}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.wht_tray_assigned_date !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.wht_tray_assigned_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.received_from_sorting !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.received_from_sorting\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.closed_from_sorting != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.closed_from_sorting\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.agent_name_charging}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.assign_to_agent_charging !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.assign_to_agent_charging\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_in_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_in_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_done_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_done_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_done_received !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_done_received\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_done_close != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_done_close\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.agent_name_bqc}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.assign_to_agent_bqc != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.assign_to_agent_bqc\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data?.delivery.bqc_out_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bqc_out_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bqc_done_received != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bqc_done_received\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bqc_done_close != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bqc_done_close\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.issued_to_audit != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.issued_to_audit\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.audit_user_name}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.audit_done_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.audit_done_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.audit_done_recieved != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.audit_done_recieved\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [item, data])\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Track-Item', path: '/' }]}\r\n                />\r\n            </div>\r\n            <TextField\r\n                onChange={(e) => {\r\n                    searchTrackItem(e)\r\n                }}\r\n                label=\"Search\"\r\n                variant=\"outlined\"\r\n                sx={{ mb: 2 }}\r\n            />\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TableFooter>\r\n                <TableRow>\r\n                    <TablePagination\r\n                        sx={{ px: 2 }}\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={count}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        showFirstButton=\"true\"\r\n                        showLastButton=\"true\"\r\n                        backIconButtonProps={{\r\n                            'aria-label': 'Previous Page',\r\n                        }}\r\n                        nextIconButtonProps={{\r\n                            'aria-label': 'Next Page',\r\n                        }}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={({ target: { value } }) =>\r\n                            setRowsPerPage(value)\r\n                        }\r\n                    />\r\n                </TableRow>\r\n            </TableFooter>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\search.jsx",["2693","2694","2695"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\utils\\constant.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\utils\\utils.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Ready-for-charging\\bqc-tray.jsx",["2696"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [whtTrayList, setWhtTrayList] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchWht = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post(\r\n                    '/chargeDoneFourDifferenceTray'\r\n                )\r\n                if (res.status === 200) {\r\n                    setWhtTrayList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchWht()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const handelReadyForCharging = async () => {\r\n        try {\r\n            let obj = {\r\n                ischeck: isCheck,\r\n                status: 'Recharging',\r\n            }\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/ready-for-charging',\r\n                obj\r\n            )\r\n            setIsCheck([])\r\n            if (res.status === 200) {\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsCheck([])\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else if (res.status == 202) {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelViewItem = (trayId) => {\r\n        navigate('/sup-admin/wht/view-item/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code', // field name in the row object\r\n            label: 'Tray Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            hide: true,\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: false,\r\n                sort: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[8],\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'Charging Done Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Ready For Charging', path: '/' }]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isCheck.length === 0}\r\n                onClick={(e) => {\r\n                    handelReadyForCharging(e)\r\n                }}\r\n            >\r\n                Ready For Recharging\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'WHT Tray'}\r\n                data={whtTrayList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Ready-for-charging\\view-item.jsx",["2697","2698","2699"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosWarehouseIn } from '../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [whtTrayItem, setWhtTrayItem] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchWht = async () => {\r\n            try {\r\n                const res = await axiosWarehouseIn.post(\r\n                    '/getWhtTrayItem/' + trayId + '/' + 'all-wht-tray'\r\n                )\r\n                if (res.status === 200) {\r\n                    setWhtTrayItem(res.data?.data?.items)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchWht()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic', // field name in the row object\r\n            label: 'UIC', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand_name',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model_name',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tracking_id',\r\n            label: 'Tracking Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_id',\r\n            label: 'Bot Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'bot_agent',\r\n            label: 'Bot Agent',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Ready For Charging', path: '/' },\r\n                        { name: 'View-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <MUIDataTable\r\n                title={'WHT Tray Item'}\r\n                data={whtTrayItem}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Ready-for-charging\\view-wht-tray.jsx",["2700"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [whtTrayList, setWhtTrayList] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchWht = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post('/getInuseWht')\r\n                if (res.status === 200) {\r\n                    setWhtTrayList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchWht()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const handelReadyForCharging = async () => {\r\n        try {\r\n            let obj = {\r\n                ischeck: isCheck,\r\n                status: 'Closed',\r\n            }\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/ready-for-charging',\r\n                obj\r\n            )\r\n            setIsCheck([])\r\n            if (res.status === 200) {\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsCheck([])\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else if (res.status == 202) {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelViewItem = (trayId) => {\r\n        navigate('/sup-admin/wht/view-item/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code', // field name in the row object\r\n            label: 'Tray Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            hide: true,\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: false,\r\n                sort: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[8],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Ready For Charging', path: '/' }]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isCheck.length === 0}\r\n                onClick={(e) => {\r\n                    handelReadyForCharging(e)\r\n                }}\r\n            >\r\n                Ready For Charging\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'WHT Tray'}\r\n                data={whtTrayList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\list\\ListRoute.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\FormsRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\CRUD\\CrudRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\chat-box\\ChatRoutes.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\ChartsRoute.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-tray\\history.jsx",["2701"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [mastersEditHistory, setMastersEditHistory] = useState([])\r\n\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        try {\r\n          const fetchData = async () => {\r\n            let response = await axiosSuperAdminPrexo.post(\r\n              \"/mastersEditHistory/\" + trayId\r\n            );\r\n            if (response.status === 200) {\r\n              setMastersEditHistory(response.data.data);\r\n            }\r\n          };\r\n          fetchData();\r\n        } catch (error) {\r\n          alert(error);\r\n        }\r\n      }, []);\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Display Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Limit',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n      \r\n        {\r\n            name: 'created_at',\r\n            label: 'Edited Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Tray', path: '/' },\r\n                        { name: 'Tray-History' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray Audit'}\r\n                data={mastersEditHistory}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-tray\\add-bulk-tray.jsx",["2702","2703","2704","2705","2706","2707","2708","2709","2710","2711","2712","2713","2714","2715","2716","2717","2718","2719","2720","2721","2722","2723","2724","2725","2726","2727","2728","2729","2730","2731","2732","2733","2734","2735","2736","2737","2738","2739","2740","2741","2742","2743","2744","2745","2746","2747","2748","2749","2750","2751","2752","2753","2754","2755","2756","2757","2758","2759","2760","2761","2762","2763","2764","2765","2766","2767","2768","2769","2770","2771","2772","2773","2774","2775","2776","2777","2778","2779","2780","2781","2782","2783","2784","2785","2786"],"import {\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    TextField,\r\n    Icon,\r\n    IconButton,\r\n} from '@mui/material'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport DoneIcon from '@mui/icons-material/Done'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport * as XLSX from 'xlsx'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst StyledTable = styled(Table)(({ theme }) => ({\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& tr': {\r\n            '& th': {\r\n                paddingLeft: 0,\r\n                paddingRight: 0,\r\n            },\r\n        },\r\n    },\r\n    '& tbody': {\r\n        '& tr': {\r\n            '& td': {\r\n                paddingLeft: 0,\r\n                textTransform: 'capitalize',\r\n            },\r\n        },\r\n    },\r\n}))\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst PaginationTable = () => {\r\n    const [validateState, setValidateState] = useState(false)\r\n    const [err, setErr] = useState({})\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [countOfTray, setCountOfTray] = useState({})\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n        item: [],\r\n        totalPage: 0,\r\n    })\r\n    const [item, setItem] = useState([])\r\n    const [exFile, setExfile] = useState(null)\r\n    useEffect(() => {\r\n        setItem((_) =>\r\n            pagination.item\r\n                .slice(\r\n                    (pagination.page - 1) * pagination.size,\r\n                    pagination.page * pagination.size\r\n                )\r\n                .map((d, index) => {\r\n                    d.id = (pagination.page - 1) * pagination.size + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [pagination.page, pagination.item])\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let res = await axiosSuperAdminPrexo.post(\r\n                    '/trayIdGenrate/' + 'tray-master'\r\n                )\r\n                if (res.status == 200) {\r\n                    setCountOfTray(res.data.data)\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }, [])\r\n    const importExcel = () => {\r\n        setLoading(true)\r\n        readExcel(exFile)\r\n    }\r\n    const readExcel = async (file) => {\r\n        const promise = new Promise((resolve, reject) => {\r\n            const filReader = new FileReader()\r\n            filReader.readAsArrayBuffer(file)\r\n            filReader.onload = (e) => {\r\n                const bufferArray = e.target.result\r\n                const wb = XLSX.read(bufferArray, { cellDates: true })\r\n                const wsname = wb.SheetNames[0]\r\n                const ws = wb.Sheets[wsname]\r\n                const data = XLSX.utils.sheet_to_json(ws)\r\n                resolve(data)\r\n            }\r\n            filReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n        const data = await promise\r\n        setPagination((p) => ({\r\n            ...p,\r\n            page: 1,\r\n            item: data.map((d, index) => toLowerKeys(d, index)),\r\n            totalPage: Math.ceil(data.length / p.size),\r\n        }))\r\n        setLoading(false)\r\n    }\r\n    function toLowerKeys(obj, id) {\r\n        return Object.keys(obj).reduce((accumulator, key) => {\r\n            accumulator.created_at = Date.now()\r\n            accumulator.prefix = 'tray-master'\r\n            accumulator.sort_id = 'Open'\r\n            accumulator[key.toLowerCase().split('-').join('_')] = obj[key]\r\n            return accumulator\r\n        }, {})\r\n    }\r\n    const validateData = async (e) => {\r\n        let count1 = 0\r\n        let count2 = 0\r\n        let count3 = 0\r\n        let count4 = 0\r\n        let count5 = 0\r\n        let count6 = 0\r\n        let count7 = 0\r\n        let count8 = 0\r\n\r\n        try {\r\n            for (let x of pagination.item) {\r\n                x.tray_id = ''\r\n                if (x.tray_category == 'BOT') {\r\n                    x.tray_id = 'BOT' + (countOfTray.BOT + count1)\r\n                    count1++\r\n                } else if (x.tray_category == 'MMT') {\r\n                    x.tray_id = 'MMT' + (countOfTray.MMT + count2)\r\n                    count2++\r\n                } else if (x.tray_category == 'PMT') {\r\n                    x.tray_id = 'PMT' + (countOfTray.PMT + count3)\r\n                    count3++\r\n                } else if (x.tray_category == 'WHT') {\r\n                    x.tray_id = 'WHT' + (countOfTray.WHT + count4)\r\n                    count4++\r\n                } else if (x.tray_category == 'CTA') {\r\n                    x.tray_id = 'CTA' + (countOfTray.CTA + count5)\r\n                    count5++\r\n                } else if (x.tray_category == 'CTB') {\r\n                    x.tray_id = 'CTB' + (countOfTray.CTB + count6)\r\n                    count6++\r\n                } else if (x.tray_category == 'CTC') {\r\n                    x.tray_id = 'CTC' + (countOfTray.CTC + count7)\r\n                    count7++\r\n                } else if (x.tray_category == 'CTD') {\r\n                    x.tray_id = 'CTD' + (countOfTray.CTD + count8)\r\n                    count8++\r\n                }\r\n            }\r\n            setCountOfTray((p) => ({\r\n                ...p,\r\n                BOT: p.BOT + count1,\r\n                MMT: p.MMT + count2,\r\n                PMT: p.PMT + count3,\r\n                WHT: p.WHT + count4,\r\n                CTA: p.CTA + count5,\r\n                CTB: p.CTB + count6,\r\n                CTC: p.CTC + count7,\r\n                CTD: p.CTD + count8,\r\n            }))\r\n\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/bulkValidationTray',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    showConfirmButton: true,\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setValidateState(true)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                setErr(res.data.data)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: res.data.message,\r\n                })\r\n            }\r\n            // }\r\n        } catch (error) {\r\n            if (error.response.status == 400) {\r\n                setLoading(false)\r\n                setErr(error.response.data.data)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error.response.data.message,\r\n                })\r\n            }\r\n        }\r\n    }\r\n    const handelSubmit = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n\r\n            let obj = {\r\n                allCount: countOfTray,\r\n                item: pagination.item,\r\n            }\r\n            let res = await axiosSuperAdminPrexo.post('/createBulkTray', obj)\r\n            if (res.status == 200) {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    showConfirmButton: true,\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setLoading(false)\r\n                        navigate('/sup-admin/tray')\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error.response.data.message,\r\n            })\r\n        }\r\n    }\r\n    // ----------------------------------------------------------------------------------------------------------------------------\r\n    const updateFieldChanged = (id) => (e) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.map((data, i) => {\r\n                if (data.id === id) {\r\n                    return { ...data, [e.target.name]: e.target.value }\r\n                } else {\r\n                    return data\r\n                }\r\n            }),\r\n        }))\r\n    }\r\n    // DATA DELETE FROM ARRAY\r\n    const handelDelete = (tray_id, trayType) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.filter((item) => item.tray_id != tray_id),\r\n        }))\r\n    }\r\n\r\n    const StyledLoading = styled('div')(() => ({\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        '& img': {\r\n            width: 'auto',\r\n            height: '25px',\r\n        },\r\n        '& .circleProgress': {\r\n            position: 'absolute',\r\n            left: -7,\r\n            right: 0,\r\n            top: 'calc(50% - 25px)',\r\n        },\r\n    }))\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Tray', path: '/' },\r\n                        { name: 'Bulk-Tray' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Bulk Tray\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <h4>Upload file</h4>\r\n\r\n                    <Box>\r\n                        <Button\r\n                            sx={{ mb: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            onClick={() => navigate('/sup-admin/tray')}\r\n                        >\r\n                            Back to list\r\n                        </Button>\r\n                        <Button\r\n                            sx={{ mb: 2, ml: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={\r\n                                process.env.PUBLIC_URL +\r\n                                '/bulk-tray-sheet-sample.xlsx'\r\n                            }\r\n                            download\r\n                        >\r\n                            Download Sample Sheet\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        mb: 5,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        size=\"small\"\r\n                        inputProps={{ accept: '.csv,.xlsx,.xls' }}\r\n                        onChange={(e) => {\r\n                            setExfile(e.target.files[0])\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        type=\"file\"\r\n                    />\r\n                    {item.length == 0 ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={loading || exFile == null}\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            onClick={(e) => {\r\n                                importExcel(e)\r\n                            }}\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    ) : validateState ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelSubmit(e)\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={\r\n                                Object.keys(countOfTray).length == 0 || loading\r\n                            }\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            onClick={(e) => {\r\n                                validateData(e)\r\n                            }}\r\n                        >\r\n                            Validate Data\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                <StyledTable>\r\n                    {item.length != 0 && loading !== true ? (\r\n                        <>\r\n                            <StyledTable>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>S.NO</TableCell>\r\n                                        {err?.tray_id?.length !== 0 &&\r\n                                        Object.keys(err).length !== 0 ? (\r\n                                            <TableCell>Tray ID</TableCell>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                        <TableCell>CPC</TableCell>\r\n                                        <TableCell>Warehouse</TableCell>\r\n                                        <TableCell>Tray Category</TableCell>\r\n                                        <TableCell>Tray Brand</TableCell>\r\n                                        <TableCell>Tray Model</TableCell>\r\n                                        <TableCell>Tray Name</TableCell>\r\n                                        <TableCell>Tray Limit</TableCell>\r\n                                        <TableCell>Tray Display</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {item.map((data, index) => (\r\n                                        <TableRow tabIndex={-1}>\r\n                                            <TableCell>{data.id}</TableCell>\r\n                                            {err?.tray_id?.length != 0 &&\r\n                                            Object.keys(err).length !== 0 ? (\r\n                                                <TableCell>\r\n                                                    {' '}\r\n                                                    <TextField\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        value={data.tray_id}\r\n                                                    />\r\n                                                    {err?.tray_id?.includes(\r\n                                                        data.tray_id\r\n                                                    ) ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.tray_id?.includes(\r\n                                                        data.tray_id\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            {data.tray_category +\r\n                                                                ' '}{' '}\r\n                                                            maximum count\r\n                                                            exceeded\r\n                                                        </p>\r\n                                                    ) : null}\r\n                                                </TableCell>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"cpc\"\r\n                                                    value={data.cpc}\r\n                                                />\r\n                                                {err?.cpc?.includes(data.cpc) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.cpc == undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.cpc == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                                {err?.cpc?.includes(\r\n                                                    data.cpc\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Cpc Does Not Exist\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.cpc == undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.cpc == '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Cpc Does Not Exist\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"warehouse\"\r\n                                                    value={data.warehouse?.toString()}\r\n                                                />\r\n                                                {err?.warehouse_does_not_exist?.includes(\r\n                                                    data.tray_id\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.warehouse_does_not_exist?.includes(\r\n                                                    data.tray_id\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Warehouse Does Not Exist\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.warehouse ==\r\n                                                          undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.warehouse == '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Required*\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"tray_category\"\r\n                                                    value={data.tray_category?.toString()}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"tray_brand\"\r\n                                                    value={data.tray_brand?.toString()}\r\n                                                />\r\n                                                {err?.brand?.includes(\r\n                                                    data.tray_brand\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                                {err?.brand?.includes(\r\n                                                    data.tray_brand\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Brand name not exists\r\n                                                    </p>\r\n                                                ) : null}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"tray_model\"\r\n                                                    value={data.tray_model?.toString()}\r\n                                                />\r\n                                                {err?.model?.includes(\r\n                                                    data.tray_model\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                                {err?.model?.includes(\r\n                                                    data.tray_model\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Model name not exists\r\n                                                    </p>\r\n                                                ) : null}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"tray_name\"\r\n                                                    value={data.tray_name?.toString()}\r\n                                                />\r\n                                                {err?.tray_display_name_duplicate?.includes(\r\n                                                    data.tray_name\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_name ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_name == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.tray_display_name_duplicate?.includes(\r\n                                                    data.tray_name\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Duplicate Tray Name\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.tray_name ==\r\n                                                          undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.tray_name == '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Required*\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"tray_limit\"\r\n                                                    value={data.tray_limit?.toString()}\r\n                                                />\r\n                                                {err?.trayLimit?.includes(\r\n                                                    data.tray_id\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                                {err?.trayLimit?.includes(\r\n                                                    data.tray_id\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Not Acceptable\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"tray_display\"\r\n                                                    value={data.tray_display?.toString()}\r\n                                                />\r\n                                                {err?.tray_display_is_duplicate?.includes(\r\n                                                    data.tray_display\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_display ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_display == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.tray_display_is_duplicate?.includes(\r\n                                                    data.tray_display\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Duplicate Tray Display\r\n                                                        Name\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.tray_display ==\r\n                                                          undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.tray_display ==\r\n                                                          '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Required*\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n\r\n                                            <TableCell>\r\n                                                {(Object.keys(err).length !=\r\n                                                    0 &&\r\n                                                    data.cpc == undefined) ||\r\n                                                err?.trayLimit?.includes(\r\n                                                    data.tray_id\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.cpc == '') ||\r\n                                                err?.cpc?.includes(data.cpc) ==\r\n                                                    true ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_id ==\r\n                                                        undefined) ||\r\n                                                err?.model?.includes(\r\n                                                    data.tray_model\r\n                                                ) ||\r\n                                                err?.model?.includes(\r\n                                                    data.tray_brand\r\n                                                ) ||\r\n                                                err?.tray_id?.includes(\r\n                                                    data.tray_id\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_id == '') ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse == '') ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_name ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_name == '') ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_display ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_display == '') ||\r\n                                                err?.warehouse_does_not_exist?.includes(\r\n                                                    data.tray_id\r\n                                                ) ||\r\n                                                err?.trya_id_is_duplicate?.includes(\r\n                                                    data.tray_display\r\n                                                ) == true ||\r\n                                                err?.tray_display_name_duplicate?.includes(\r\n                                                    data.tray_name\r\n                                                ) == true ||\r\n                                                err?.tray_display_is_duplicate?.includes(\r\n                                                    data.tray_display\r\n                                                ) == true ? (\r\n                                                    <IconButton>\r\n                                                        <Icon\r\n                                                            sx={{\r\n                                                                ml: 2,\r\n                                                            }}\r\n                                                            color=\"error\"\r\n                                                            onClick={() => {\r\n                                                                if (\r\n                                                                    window.confirm(\r\n                                                                        'You Want to Remove?'\r\n                                                                    )\r\n                                                                ) {\r\n                                                                    handelDelete(\r\n                                                                        data.tray_id,\r\n                                                                        data.tray_category\r\n                                                                    )\r\n                                                                }\r\n                                                            }}\r\n                                                        >\r\n                                                            delete\r\n                                                        </Icon>\r\n                                                    </IconButton>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </StyledTable>\r\n                        </>\r\n                    ) : item.length != 0 ? (\r\n                        <StyledLoading>\r\n                            <Box position=\"relative\">\r\n                                <img\r\n                                    src=\"/assets/images/logo-circle.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                <CircularProgress className=\"circleProgress\">\r\n                                    <p>Please Wait...</p>\r\n                                </CircularProgress>\r\n                            </Box>\r\n                        </StyledLoading>\r\n                    ) : null}\r\n                </StyledTable>\r\n                {pagination.item.length != 0 && loading !== true ? (\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            justifyContent: 'end',\r\n                            mt: 1,\r\n                            mr: 3,\r\n                            ml: 3,\r\n                        }}\r\n                    >\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ m: 1 }}\r\n                            disabled={pagination.page === 1}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) =>\r\n                                setPagination((p) => ({\r\n                                    ...p,\r\n                                    page: --p.page,\r\n                                }))\r\n                            }\r\n                        >\r\n                            Previous\r\n                        </Button>\r\n\r\n                        <h6 style={{ marginTop: '19px' }}>\r\n                            {pagination.page}/{pagination.totalPage}\r\n                        </h6>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ m: 1 }}\r\n                            disabled={pagination.page === pagination.totalPage}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) =>\r\n                                setPagination((p) => ({\r\n                                    ...p,\r\n                                    page: ++p.page,\r\n                                }))\r\n                            }\r\n                        >\r\n                            Next\r\n                        </Button>\r\n                    </Box>\r\n                ) : null}\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PaginationTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-tray\\tray-audit.jsx",["2787","2788","2789","2790"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [audit, setAudit] = useState([])\r\n\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post(\r\n                    '/getAudit/' + trayId\r\n                )\r\n                if (res.status === 200) {\r\n                    setAudit(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Date Of Closure ',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Max',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Valid',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Valid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Invalid',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Invalid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Duplicate',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Duplicate'\r\n                    }).length,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Total',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) => value.length,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Tray', path: '/' },\r\n                        { name: 'Tray-Audit' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray Audit'}\r\n                data={audit}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-tray\\view-tray.jsx",["2791","2792","2793"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport MemberEditorDialog from './add-tray'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Box, IconButton, Icon } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport EditRoadIcon from '@mui/icons-material/EditRoad'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [trayList, setTrayList] = useState([])\r\n    const navigate = useNavigate()\r\n    const [editFetchData, setEditFetchData] = useState({})\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchBrand = async () => {\r\n            try {\r\n                let obj = {\r\n                    master_type: 'tray-master',\r\n                }\r\n                const res = await axiosSuperAdminPrexo.post('/getMasters', obj)\r\n                if (res.status === 200) {\r\n                    setTrayList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchBrand()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setEditFetchData({})\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelDelete = (masterId) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: 'You Want to Delete!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Delete it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let res = await axiosSuperAdminPrexo.get(\r\n                        '/getOneMaster/' + masterId\r\n                    )\r\n                    if (res.status == 200) {\r\n                        let response = await axiosSuperAdminPrexo.post(\r\n                            '/deleteMaster/' + masterId\r\n                        )\r\n                        if (response.status == 200) {\r\n                            Swal.fire({\r\n                                position: 'top-center',\r\n                                icon: 'success',\r\n                                title: 'Your Tray has been Deleted',\r\n                                confirmButtonText: 'Ok',\r\n                            }).then((result) => {\r\n                                if (result.isConfirmed) {\r\n                                    setIsAlive((isAlive) => !isAlive)\r\n                                }\r\n                            })\r\n                        } else {\r\n                            alert(response.data.message)\r\n                        }\r\n                    } else {\r\n                        alert(\"You Can't Delete This Tray\")\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const editTray = async (masterId) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.get(\r\n                '/getOneMaster/' + masterId\r\n            )\r\n            if (response.status == 200) {\r\n                setEditFetchData(response.data.data)\r\n                handleDialogOpen()\r\n            } else if (response.status === 202) {\r\n                alert(\"You Can't Edit This Tray\")\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelAudit = (trayId) => {\r\n        navigate('/sup-admin/tray/audit/' + trayId)\r\n    }\r\n\r\n    const handelEditHistory = (trayId) => {\r\n        navigate('/sup-admin/tray/edit-history/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Display Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Limit',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                flexDirection: 'row',\r\n                            }}\r\n                        >\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        editTray(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    edit\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={() => {\r\n                                        handelDelete(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"error\"\r\n                                >\r\n                                    delete\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={() => {\r\n                                        handelAudit(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    history\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <EditRoadIcon\r\n                                    onClick={() => {\r\n                                        handelEditHistory(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"green\"\r\n                                >\r\n                                    button\r\n                                </EditRoadIcon>\r\n                            </IconButton>\r\n                        </Box>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Tray', path: '/' }]} />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => setShouldOpenEditorDialog(true)}\r\n            >\r\n                Add New Tray\r\n            </Button>\r\n            <Button\r\n                sx={{ mb: 2, ml: 2 }}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => navigate('/sup-admin/tray/add-bulk-tray')}\r\n            >\r\n                Add Bulk Tray\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'All Tray'}\r\n                data={trayList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <MemberEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    editFetchData={editFetchData}\r\n                    setEditFetchData={setEditFetchData}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bag\\add-bulk-bag.jsx",["2794","2795","2796","2797","2798","2799","2800","2801","2802","2803","2804","2805","2806","2807","2808","2809","2810","2811","2812","2813","2814","2815","2816","2817","2818","2819","2820","2821","2822","2823","2824","2825","2826","2827","2828","2829","2830","2831","2832","2833","2834","2835","2836","2837","2838","2839","2840","2841","2842","2843","2844","2845","2846","2847","2848","2849","2850","2851","2852","2853","2854","2855","2856","2857","2858","2859","2860","2861","2862","2863","2864","2865","2866","2867"],"import {\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    TextField,\r\n    Icon,\r\n    IconButton,\r\n} from '@mui/material'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport DoneIcon from '@mui/icons-material/Done'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Swal from 'sweetalert2'\r\nimport * as XLSX from 'xlsx'\r\n\r\nconst StyledTable = styled(Table)(({ theme }) => ({\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& tr': {\r\n            '& th': {\r\n                paddingLeft: 0,\r\n                paddingRight: 0,\r\n            },\r\n        },\r\n    },\r\n    '& tbody': {\r\n        '& tr': {\r\n            '& td': {\r\n                paddingLeft: 0,\r\n                textTransform: 'capitalize',\r\n            },\r\n        },\r\n    },\r\n}))\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst PaginationTable = () => {\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n    const [page, setPage] = React.useState(0)\r\n\r\n    const [validateState, setValidateState] = useState(false)\r\n    const [err, setErr] = useState({})\r\n    const [loading, setLoading] = useState(false)\r\n    const [brandCount, setBrandCount] = useState({})\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n        item: [],\r\n        totalPage: 0,\r\n    })\r\n    const navigate = useNavigate()\r\n    const [item, setItem] = useState([])\r\n    const [exFile, setExfile] = useState(null)\r\n\r\n    const importExcel = () => {\r\n        setLoading(true)\r\n        readExcel(exFile)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setItem((_) =>\r\n            pagination.item\r\n                .slice(\r\n                    (pagination.page - 1) * pagination.size,\r\n                    pagination.page * pagination.size\r\n                )\r\n                .map((d, index) => {\r\n                    d.id = (pagination.page - 1) * pagination.size + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [pagination.page, pagination.item])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosSuperAdminPrexo.post(\r\n                    '/getMasterHighest/' + 'bag-master'\r\n                )\r\n                if (res.status == 200) {\r\n                    setBrandCount(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    confirmButtonText: 'Ok',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const readExcel = async (file) => {\r\n        const promise = new Promise((resolve, reject) => {\r\n            const filReader = new FileReader()\r\n            filReader.readAsArrayBuffer(file)\r\n            filReader.onload = (e) => {\r\n                const bufferArray = e.target.result\r\n                const wb = XLSX.read(bufferArray, { cellDates: true })\r\n                const wsname = wb.SheetNames[0]\r\n                const ws = wb.Sheets[wsname]\r\n                const data = XLSX.utils.sheet_to_json(ws)\r\n                resolve(data)\r\n            }\r\n            filReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n        const data = await promise\r\n        setPagination((p) => ({\r\n            ...p,\r\n            page: 1,\r\n            item: data.map((d, index) => toLowerKeys(d, brandCount, index)),\r\n            totalPage: Math.ceil(data.length / p.size),\r\n        }))\r\n        setLoading(false)\r\n    }\r\n\r\n    function toLowerKeys(obj) {\r\n        return Object.keys(obj).reduce((accumulator, key) => {\r\n            accumulator.created_at = Date.now()\r\n            accumulator.prefix = 'bag-master'\r\n            accumulator.sort_id = 'No Status'\r\n            accumulator[key.toLowerCase().split('-').join('_')] = obj[key]\r\n            return accumulator\r\n        }, {})\r\n    }\r\n    const validateData = async (e) => {\r\n        try {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            setLoading(true)\r\n            for (let x of pagination.item) {\r\n                x.bag_id = ''\r\n                if (x.cpc == 'Gurgaon_122016') {\r\n                    x.bag_id = 'DDB-GGN-' + (brandCount.bagGurgaon + count1)\r\n                    count1++\r\n                } else {\r\n                    x.bag_id = 'DDB-BLR-' + (brandCount.bagBanglore + count2)\r\n                    count2++\r\n                }\r\n            }\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/bulkValidationBag',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                setValidateState(true)\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    showConfirmButton: true,\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setLoading(false)\r\n                    }\r\n                })\r\n            } else {\r\n                setErr(res.data.data)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: 'Please Check Errors',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setLoading(false)\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                confirmButtonText: 'Ok',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    const handelSubmit = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/createBulkBag',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    showConfirmButton: true,\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setLoading(false)\r\n                        navigate('/sup-admin/bag')\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error.response.data.message,\r\n            })\r\n            setLoading(false)\r\n        }\r\n    }\r\n    // ----------------------------------------------------------------------------------------------------------------------------\r\n    const updateFieldChanged = (bag_id) => (e) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.map((data, i) => {\r\n                if (data.id === bag_id) {\r\n                    return { ...data, [e.target.name]: e.target.value }\r\n                } else {\r\n                    return data\r\n                }\r\n            }),\r\n        }))\r\n    }\r\n    // DATA DELETE FROM ARRAY\r\n    const handelDelete = (bag_id) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.filter((item) => item.bag_id != bag_id),\r\n        }))\r\n    }\r\n\r\n    const StyledLoading = styled('div')(() => ({\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        '& img': {\r\n            width: 'auto',\r\n            height: '25px',\r\n        },\r\n        '& .circleProgress': {\r\n            position: 'absolute',\r\n            left: -7,\r\n            right: 0,\r\n            top: 'calc(50% - 25px)',\r\n        },\r\n    }))\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Bags', path: '/' },\r\n                        { name: 'Bulk-Bag' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Bulk Bag\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <h4>Upload file</h4>\r\n\r\n                    <Box>\r\n                        <Button\r\n                            sx={{ mb: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            onClick={() => navigate('/sup-admin/bag')}\r\n                        >\r\n                            Back to list\r\n                        </Button>\r\n                        <Button\r\n                            sx={{ mb: 2, ml: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={\r\n                                process.env.PUBLIC_URL +\r\n                                '/bulk-bag-sheet-sample.xlsx'\r\n                            }\r\n                            download\r\n                        >\r\n                            Download Sample Sheet\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        mb: 5,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        size=\"small\"\r\n                        inputProps={{ accept: '.csv,.xlsx,.xls' }}\r\n                        onChange={(e) => {\r\n                            setExfile(e.target.files[0])\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        type=\"file\"\r\n                    />\r\n                    {item.length == 0 ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={loading || exFile == null}\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            onClick={(e) => {\r\n                                importExcel(e)\r\n                            }}\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    ) : validateState ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelSubmit(e)\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={Object.keys(brandCount).length == 0 || loading}\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            onClick={(e) => {\r\n                                validateData(e)\r\n                            }}\r\n                        >\r\n                            Validate Data\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                <StyledTable>\r\n                    {item.length != 0 && loading !== true ? (\r\n                        <>\r\n                            <StyledTable>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>S.NO</TableCell>\r\n                                        <TableCell>CPC</TableCell>\r\n                                        <TableCell>Warehouse</TableCell>\r\n                                        <TableCell>Bag Category</TableCell>\r\n                                        <TableCell>Display Name</TableCell>\r\n                                        <TableCell>Bag Limit</TableCell>\r\n                                        <TableCell>Bag Display</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {item.map((data, index) => (\r\n                                        <TableRow tabIndex={-1}>\r\n                                            <TableCell>{data.id}</TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"cpc\"\r\n                                                    value={data.cpc}\r\n                                                />\r\n                                                {err?.cpc?.includes(data.cpc) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.cpc == undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.cpc == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                                {err?.cpc?.includes(\r\n                                                    data.cpc\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Cpc Does Not Exist\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.cpc == undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.cpc == '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Cpc Does Not Exist\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"warehouse\"\r\n                                                    value={data.warehouse}\r\n                                                />\r\n                                                {err?.warehouse_does_not_exist?.includes(\r\n                                                    data.bag_id\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                                {err?.warehouse_does_not_exist?.includes(\r\n                                                    data.bag_id\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Warehouse Does Not Exist\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.warehouse ==\r\n                                                          undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.warehouse == '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Warehouse Does Not Exist\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"bag_category\"\r\n                                                    value={data.bag_category?.toString()}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"bag_display_name\"\r\n                                                    value={data.bag_display_name?.toString()}\r\n                                                />\r\n                                                {err?.bag_display_name_is_duplicate?.includes(\r\n                                                    data.bag_display_name\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display_name ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display_name ==\r\n                                                        '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.bag_display_name_is_duplicate?.includes(\r\n                                                    data.bag_display_name\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        {' '}\r\n                                                        Duplicate Bag Display\r\n                                                        Name{' '}\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.bag_display_name ==\r\n                                                          undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.bag_display_name ==\r\n                                                          '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Required*\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"bag_limit\"\r\n                                                    value={data.bag_limit}\r\n                                                />\r\n                                                {err?.limit?.includes(\r\n                                                    data.bag_id\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                                {err?.limit?.includes(\r\n                                                    data.bag_id\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Not Acceptable\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"bag_display\"\r\n                                                    value={data.bag_display}\r\n                                                />\r\n                                                {err?.bag_display_is_duplicate?.includes(\r\n                                                    data.bag_display\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.bag_display_is_duplicate?.includes(\r\n                                                    data.bag_display\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        {' '}\r\n                                                        Duplicate Bag Display\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.bag_display ==\r\n                                                          undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.bag_display ==\r\n                                                          '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Required*\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {(Object.keys(err).length !=\r\n                                                    0 &&\r\n                                                    data.cpc == undefined) ||\r\n                                                err?.limit?.includes(\r\n                                                    data.bag_id\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.cpc == '') ||\r\n                                                err?.cpc?.includes(data.cpc) ==\r\n                                                    true ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse == '') ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display_name ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display_name ==\r\n                                                        '') ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display == '') ||\r\n                                                err?.warehouse_does_not_exist?.includes(\r\n                                                    data.bag_id\r\n                                                ) == true ||\r\n                                                err?.bag_id_is_duplicate?.includes(\r\n                                                    data.bag_id\r\n                                                ) == true ||\r\n                                                err?.bag_display_name_is_duplicate?.includes(\r\n                                                    data.bag_display_name\r\n                                                ) == true ||\r\n                                                err?.bag_display_is_duplicate?.includes(\r\n                                                    data.bag_display\r\n                                                ) == true ? (\r\n                                                    <IconButton>\r\n                                                        <Icon\r\n                                                            sx={{\r\n                                                                ml: 2,\r\n                                                            }}\r\n                                                            color=\"error\"\r\n                                                            onClick={() => {\r\n                                                                if (\r\n                                                                    window.confirm(\r\n                                                                        'You Want to Remove?'\r\n                                                                    )\r\n                                                                ) {\r\n                                                                    handelDelete(\r\n                                                                        data.bag_id\r\n                                                                    )\r\n                                                                }\r\n                                                            }}\r\n                                                        >\r\n                                                            delete\r\n                                                        </Icon>\r\n                                                    </IconButton>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </StyledTable>\r\n                        </>\r\n                    ) : item.length != 0 ? (\r\n                        <StyledLoading>\r\n                            <Box position=\"relative\">\r\n                                <img\r\n                                    src=\"/assets/images/logo-circle.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                <CircularProgress className=\"circleProgress\">\r\n                                    <p>Please Wait...</p>\r\n                                </CircularProgress>\r\n                            </Box>\r\n                        </StyledLoading>\r\n                    ) : null}\r\n                    {pagination.item.length && loading != true ? (\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'end',\r\n                                mt: 1,\r\n                                mr: 3,\r\n                                ml: 3,\r\n                            }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                sx={{ m: 1 }}\r\n                                disabled={pagination.page === 1}\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) =>\r\n                                    setPagination((p) => ({\r\n                                        ...p,\r\n                                        page: --p.page,\r\n                                    }))\r\n                                }\r\n                            >\r\n                                Previous\r\n                            </Button>\r\n\r\n                            <h6 style={{ marginTop: '19px' }}>\r\n                                {pagination.page}/{pagination.totalPage}\r\n                            </h6>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                sx={{ m: 1 }}\r\n                                disabled={\r\n                                    pagination.page === pagination.totalPage\r\n                                }\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) =>\r\n                                    setPagination((p) => ({\r\n                                        ...p,\r\n                                        page: ++p.page,\r\n                                    }))\r\n                                }\r\n                            >\r\n                                Next\r\n                            </Button>\r\n                        </Box>\r\n                    ) : null}\r\n                </StyledTable>\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PaginationTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Sidenav.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\sessions\\NotFound.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\SidenavTheme\\SidenavTheme.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\SecondarySidebar\\SecondarySidebar.jsx",["2868"],"import React from 'react'\r\nimport useSettings from 'app/hooks/useSettings'\r\nimport SecondarySidebarToggle from './SecondarySidebarToggle'\r\nimport SecondarySidebarContent from './SecondarySidebarContent'\r\nimport SecondarySidenavTheme from '../MatxTheme/SecondarySidenavTheme/SecondarySidenavTheme'\r\nimport { useTheme } from '@mui/system'\r\n\r\nconst SecondarySidebar = () => {\r\n    const theme = useTheme()\r\n    const { settings } = useSettings()\r\n    const secondarySidebarTheme =\r\n        settings.themes[settings.secondarySidebar.theme]\r\n\r\n    return (\r\n        <SecondarySidenavTheme theme={secondarySidebarTheme}>\r\n            {settings.secondarySidebar.open && (\r\n                <SecondarySidebarContent chatTheme={theme} />\r\n            )}\r\n            {/* <SecondarySidebarToggle /> */}\r\n        </SecondarySidenavTheme>\r\n    )\r\n}\r\n\r\nexport default SecondarySidebar\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout2\\layout2.style.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\auth\\AuthGuard.jsx",["2869","2870","2871","2872"],"import useAuth from 'app/hooks/useAuth'\r\nimport { flat } from 'app/utils/utils'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Navigate, useLocation, useNavigate } from 'react-router-dom'\r\nimport { AllPages } from '../routes/routes'\r\nimport Swal from 'sweetalert2'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosSuperAdminPrexo } from '../../axios'\r\n\r\nconst getUserRoleAuthStatus = (pathname, user, routes) => {\r\n    if (!user) {\r\n        return false\r\n    }\r\n    const matched = routes.find((r) => r.path === pathname)\r\n    const authenticated =\r\n        matched && matched.auth && matched.auth.length\r\n            ? matched.auth.includes(user.role)\r\n            : true\r\n    return authenticated\r\n}\r\nconst AuthGuard = ({ children }) => {\r\n    const { isAuthenticated, user } = useAuth()\r\n    const [previouseRoute, setPreviousRoute] = useState(null)\r\n    const { pathname } = useLocation()\r\n    const navigate = useNavigate()\r\n    const routes = flat(AllPages())\r\n\r\n    const isUserRoleAuthenticated = getUserRoleAuthStatus(\r\n        pathname,\r\n        user,\r\n        routes\r\n    )\r\n    let authenticated = isAuthenticated && isUserRoleAuthenticated\r\n\r\n    // IF YOU NEED ROLE BASED AUTHENTICATION,\r\n    // UNCOMMENT ABOVE TWO LINES, getUserRoleAuthStatus METHOD AND user VARIABLE\r\n    // AND COMMENT OUT BELOW LINE\r\n    // let authenticated = isAuthenticated\r\n\r\n\r\n    useEffect(() => {\r\n        const checkUserActiveOrNot = async () => {\r\n            try {\r\n                let user = localStorage.getItem('prexo-authentication')\r\n                if (user) {\r\n                    let { user_name, user_type } = jwt_decode(user)\r\n                    if (user_name == undefined || user_type == undefined) {\r\n                        navigate('/')\r\n                    } else {\r\n                        if (user_type !== 'super-admin') {\r\n                            let res = await axiosSuperAdminPrexo.post(\r\n                                '/check-user-status/' + user_name\r\n                            )\r\n                            if (res.status === 200) {\r\n                            } else if (res.status == 202) {\r\n                                Swal.fire({\r\n                                    icon: 'error',\r\n                                    title: 'Oops...',\r\n                                    text: res.data.message,\r\n                                }).then((result) => {\r\n                                    if (result.isConfirmed) {\r\n                                        localStorage.removeItem(\r\n                                            'prexo-authentication'\r\n                                        )\r\n                                        navigate('/')\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        checkUserActiveOrNot()\r\n        if (previouseRoute !== null) setPreviousRoute(pathname)\r\n    }, [pathname, previouseRoute])\r\n\r\n\r\n\r\n\r\n\r\n    if (authenticated) return <>{children}</>\r\n    else {\r\n        return <Navigate to=\"/\" state={{ redirectUrl: previouseRoute }} />\r\n    }\r\n}\r\n\r\nexport default AuthGuard\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Topbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Footer\\Footer.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Topbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Navbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\Drag&Drop\\AppDragAndDrop.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\AppScrumBoard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\data-table\\ExpandableMuiDataTable.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\Checkout.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\calendar\\MatxCalendar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\InventoryManagement.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\AppInbox.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\Pricing4.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\invoice\\InvoiceDetails.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\Pricing3.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\Pricing2.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\Pricing1.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\user-profile\\UserProfile.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\sessions\\register\\FirebaseRegister.jsx",["2873","2874","2875","2876","2877"],"import {\r\n    Card,\r\n    Grid,\r\n    Button,\r\n    CircularProgress,\r\n} from '@mui/material'\r\nimport { Box, styled, useTheme } from '@mui/system'\r\nimport React, { useState } from 'react'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport useAuth from 'app/hooks/useAuth'\r\nimport { Paragraph, Span } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({\r\n    justifyContent: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(JustifyBox)(() => ({\r\n    height: '100%',\r\n    padding: '32px',\r\n    background: 'rgba(0, 0, 0, 0.01)',\r\n}))\r\n\r\nconst IMG = styled('img')(() => ({\r\n    width: '100%',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(() => ({\r\n    color: 'rgba(0, 0, 0, 0.87)',\r\n    boxShadow:\r\n        '0px 5px 5px -3px rgb(0 0 0 / 6%), 0px 8px 10px 1px rgb(0 0 0 / 4%), 0px 3px 14px 2px rgb(0 0 0 / 4%)',\r\n    backgroundColor: '#e0e0e0',\r\n    '&:hover': {\r\n        backgroundColor: '#d5d5d5',\r\n    },\r\n}))\r\n\r\nconst RegisterRoot = styled(JustifyBox)(({ theme }) => ({\r\n    background: '#1A2038',\r\n    minHeight: '100vh !important',\r\n    '& .card': {\r\n        maxWidth: 650,\r\n        borderRadius: 12,\r\n        margin: '1rem',\r\n    },\r\n    '& .buttonProgress': {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    },\r\n    '& .socialButton': {\r\n        width: '100%',\r\n        '& img': {\r\n            margin: '0 8px',\r\n        },\r\n    },\r\n    '& .labelLink': {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'underline',\r\n    },\r\n}))\r\n\r\nconst FirebaseRegister = () => {\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [state, setState] = useState({})\r\n    const [message, setMessage] = useState('')\r\n    const { createUserWithEmailAndPassword, signInWithGoogle } = useAuth()\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        setState({\r\n            ...state,\r\n            [name]: value,\r\n        })\r\n    }\r\n    const handleGoogleRegister = async (event) => {\r\n        try {\r\n            // await signInWithGoogle()\r\n            navigate('/')\r\n        } catch (e) {\r\n            setMessage(e.message)\r\n            setLoading(false)\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const handleFormSubmit = async () => {\r\n        try {\r\n            setLoading(true)\r\n            // await createUserWithEmailAndPassword(state.email, state.password)\r\n            navigate('/dashboard/default')\r\n        } catch (e) {\r\n            setLoading(false)\r\n            console.log(e)\r\n            setMessage(e.message)\r\n        }\r\n    }\r\n    let { username, password } = state\r\n    const { palette } = useTheme()\r\n    const textError = palette.error.main\r\n\r\n    return (\r\n        <RegisterRoot>\r\n            <Card className=\"card\">\r\n                <Grid container>\r\n                    <Grid item lg={5} md={5} sm={5} xs={12}>\r\n                        <ContentBox>\r\n                            <IMG\r\n                                src=\"/assets/images/illustrations/posting_photo.svg\"\r\n                                alt=\"\"\r\n                            />\r\n                        </ContentBox>\r\n                    </Grid>\r\n                    <Grid item lg={7} md={7} sm={7} xs={12}>\r\n                        {/* <Box px={4} pt={4}>\r\n                            <StyledButton\r\n                                onClick={handleGoogleRegister}\r\n                                variant=\"contained\"\r\n                                className=\"socialButton\"\r\n                            >\r\n                                <img\r\n                                    src=\"/assets/images/logos/google.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                Sign Up With Google\r\n                            </StyledButton>\r\n                        </Box>\r\n                        <Paragraph sx={{ textAlign: 'center' }}>Or</Paragraph> */}\r\n                        <Box p={4} height=\"100%\">\r\n                            <ValidatorForm onSubmit={handleFormSubmit}>\r\n                                <TextValidator\r\n                                    sx={{ mb: 3, width: '100%' }}\r\n                                    variant=\"outlined\"\r\n                                    size=\"large\"\r\n                                    label=\"Username\"\r\n                                    onChange={handleChange}\r\n                                    type=\"text\"\r\n                                    name=\"username\"\r\n                                    value={username || ''}\r\n                                    validators={['required']}\r\n                                    errorMessages={[\r\n                                        'this field is required',\r\n                                        \r\n                                    ]}\r\n                                />\r\n                                <TextValidator\r\n                                    sx={{ mb: '16px', width: '100%' }}\r\n                                    label=\"Password\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"large\"\r\n                                    onChange={handleChange}\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    value={password || ''}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                />\r\n                                {/* <FormControlLabel\r\n                                    sx={{ mb: '16px' }}\r\n                                    name=\"agreement\"\r\n                                    onChange={(e) =>\r\n                                        handleChange({\r\n                                            target: {\r\n                                                name: 'agreement',\r\n                                                value: e.target.checked,\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                    control={\r\n                                        <Checkbox\r\n                                            size=\"small\"\r\n                                            checked={agreement || false}\r\n                                        />\r\n                                    }\r\n                                    label={\r\n                                        <>\r\n                                            I have read and agree to the{' '}\r\n                                            <a href=\"/\" className=\"labelLink\">\r\n                                                terms of service.\r\n                                            </a>\r\n                                        </>\r\n                                    }\r\n                                /> */}\r\n                                {message && (\r\n                                    <Paragraph sx={{ color: textError }}>\r\n                                        {message}\r\n                                    </Paragraph>\r\n                                )}\r\n                                <FlexBox display=\"flex\" alignItems=\"center\">\r\n                                    <Box position=\"relative\">\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            disabled={loading}\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            Sign Up\r\n                                        </Button>\r\n                                        {loading && (\r\n                                            <CircularProgress\r\n                                                size={24}\r\n                                                className=\"buttonProgress\"\r\n                                            />\r\n                                        )}\r\n                                    </Box>\r\n                                    {/* <Span sx={{ mr: 1, ml: '20px' }}>or</Span>\r\n                                    <Button\r\n                                        sx={{ textTransform: 'capitalize' }}\r\n                                        onClick={() => navigate(\"/session/signin\")}\r\n                                    >\r\n                                        Sign In\r\n                                    </Button> */}\r\n                                </FlexBox>\r\n                            </ValidatorForm>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n        </RegisterRoot>\r\n    )\r\n}\r\n\r\nexport default FirebaseRegister\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\expansion-panel\\AppExpansionPanel.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\TodoEditor.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\map\\AppMap.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerViewer.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\Bot-user-report.jsx",["2878","2879","2880"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst BqcUserReportPage = ({ BOt }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>BOT User Report</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    {/* <TableRow key={BOt?.stickerOne}>\r\n                        <TableCell sx={{ pl: 2 }}>Sticker One</TableCell>\r\n                        <TableCell>{BOt?.stickerOne}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BOt?.stickerTwo}>\r\n                        <TableCell sx={{ pl: 2 }}>Sticker Two</TableCell>\r\n                        <TableCell>{BOt?.stickerTwo}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BOt?.stickerThree}>\r\n                        <TableCell sx={{ pl: 2 }}>Sticker Three</TableCell>\r\n                        <TableCell>{BOt?.stickerThree}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BOt?.stickerFour}>\r\n                        <TableCell sx={{ pl: 2 }}>Sticker Four</TableCell>\r\n                        <TableCell>{BOt?.stickerFour}</TableCell>\r\n                    </TableRow> */}\r\n                    <TableRow key={BOt?.body_damage}>\r\n                        <TableCell sx={{ pl: 2 }}>Any body Damage</TableCell>\r\n                        <TableCell>{BOt?.body_damage}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BOt?.body_damage_des}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Details of Damage parts\r\n                        </TableCell>\r\n                        <TableCell>{BOt?.body_damage_des}</TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BqcUserReportPage\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\AmazonDetails.jsx",["2881","2882","2883","2884"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst CustomerBillings = ({ Order }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>Purchase Data</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    {/* <TableRow key={Order?.vc_eligible}>\r\n                        <TableCell sx={{ pl: 2 }}>VC Eligible</TableCell>\r\n                        <TableCell>{Order?.vc_eligible}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={\r\n                            Order?.customer_declaration_physical_defect_present\r\n                        }\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            {' '}\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {\r\n                                Order?.customer_declaration_physical_defect_present\r\n                            }\r\n                        </TableCell>\r\n                    </TableRow> */}\r\n                    <TableRow\r\n                        key={Order?.customer_declaration_physical_defect_type}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            {' '}\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {Order?.customer_declaration_physical_defect_type ==\r\n                            undefined\r\n                                ? 'N/A'\r\n                                : Order?.customer_declaration_physical_defect_type}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CustomerBillings\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\BqcUserReport.jsx",["2885","2886","2887"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\Bqc-api-data-summery.jsx",["2888","2889","2890","2891","2892","2893","2894","2895","2896","2897","2898","2899","2900","2901","2902","2903","2904","2905","2906","2907","2908","2909","2910","2911","2912","2913","2914","2915","2916","2917","2918","2919","2920","2921","2922","2923","2924","2925","2926","2927","2928","2929","2930","2931","2932","2933","2934","2935","2936","2937","2938","2939","2940","2941","2942","2943","2944","2945","2946","2947","2948","2949","2950","2951","2952","2953","2954","2955","2956","2957","2958","2959","2960","2961","2962","2963","2964","2965","2966","2967","2968","2969","2970","2971","2972","2973","2974","2975","2976","2977","2978","2979","2980","2981","2982","2983","2984","2985","2986","2987","2988","2989","2990","2991","2992","2993","2994","2995","2996","2997","2998","2999","3000","3001","3002","3003","3004","3005","3006","3007","3008","3009","3010","3011","3012","3013","3014","3015","3016","3017","3018","3019","3020","3021","3022","3023","3024","3025","3026","3027","3028","3029","3030","3031","3032","3033","3034","3035","3036","3037","3038","3039","3040","3041","3042","3043","3044","3045","3046","3047","3048","3049","3050","3051","3052","3053","3054","3055","3056","3057","3058","3059","3060","3061","3062","3063","3064","3065","3066","3067","3068","3069","3070","3071","3072","3073","3074","3075","3076","3077","3078","3079","3080","3081","3082","3083","3084","3085","3086","3087","3088","3089","3090","3091","3092","3093","3094","3095","3096"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\BqcReport.jsx",["3097","3098","3099"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst BqcSowftwareReportPage = ({ BqcSowftwareReport }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>BQC Report</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    <TableRow key={BqcSowftwareReport?.uic}>\r\n                        <TableCell sx={{ pl: 2 }}>UIC</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.uic}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.tray_id}>\r\n                        <TableCell sx={{ pl: 2 }}>Tray ID</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.tray_id}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.date}>\r\n                        <TableCell sx={{ pl: 2 }}>Date</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.date}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.testing_duration}>\r\n                        <TableCell sx={{ pl: 2 }}>Testing Duration</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.testing_duration}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.erasure_technician}>\r\n                        <TableCell sx={{ pl: 2 }}>Technician</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.erasure_technician}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.final_grade}>\r\n                        <TableCell sx={{ pl: 2 }}>Final Grade</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.final_grade}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.hardware_test_summary}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Hardware Test Summary\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.hardware_test_summary}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mandatory_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Mandatory Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mandatory_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Mobile Name</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.mobile_name}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.market_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Market Name</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.market_name}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.device_color}>\r\n                        <TableCell sx={{ pl: 2 }}>Device Color</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.device_color}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.bq_batterychargerange}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Bq Battery Charge Range\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.bq_batterychargerange}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_imei}>\r\n                        <TableCell sx={{ pl: 2 }}>Mobile IMEI</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.mobile_imei}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_imei2}>\r\n                        <TableCell sx={{ pl: 2 }}>Mobile IMEI 2</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mobile_imei2}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?._ro_imei_check}>\r\n                        <TableCell sx={{ pl: 2 }}>Ro IMEI Check</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?._ro_imei_check}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.chargingjack}>\r\n                        <TableCell sx={{ pl: 2 }}>Charging Jack</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.chargingjack}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.crackedlens}>\r\n                        <TableCell sx={{ pl: 2 }}>Cracked Lens</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.crackedlens}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.fingerprint}>\r\n                        <TableCell sx={{ pl: 2 }}>Finger Print</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.fingerprint}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.flashlight}>\r\n                        <TableCell sx={{ pl: 2 }}>Flash Light</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.flashlight}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.homekey}>\r\n                        <TableCell sx={{ pl: 2 }}>Home Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.homekey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_batterybulging}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Battery Bulging</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_batterybulging}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_bentondevicebody}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Benton device Body\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_bentondevicebody}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_crackdevicebody}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Crack Device Body\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_crackdevicebody}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_dentdevicebody}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Dentdevice Body</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_dentdevicebody}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_headphonejack_3_5mm}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Headphone Jack 3.5 mm\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_headphonejack_3_5mm}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_missingparts}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Missing Parts</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_missingparts}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_scratchchromeside}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Scratch Chrome Side\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_scratchchromeside}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_scratchesbackpanel}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Scratches Back Panel\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_scratchesbackpanel}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_scratchesdisplay}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Scratches Display\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_scratchesdisplay}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_screencracked}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Screen Cracked</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_screencracked}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_screen_type}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Screen Type</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_screen_type}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.powerkey}>\r\n                        <TableCell sx={{ pl: 2 }}> Power Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.powerkey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.simtray}>\r\n                        <TableCell sx={{ pl: 2 }}>SIM Tray</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.simtray}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.silentkey}>\r\n                        <TableCell sx={{ pl: 2 }}>Silent Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.silentkey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.volumekey}>\r\n                        <TableCell sx={{ pl: 2 }}>Volume Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.volumekey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.carrier_signal_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Carrier Signel Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.carrier_signal_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.carrier_signal_sim_2_test}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Carrier Signel Sim 2 Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.carrier_signal_sim_2_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.wi_fi_test}>\r\n                        <TableCell sx={{ pl: 2 }}>WI-Fi Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.wi_fi_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.bluetooth_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Bluetooth Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.bluetooth_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Microphone Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.speaker_microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Speaker Microphone Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.speaker_microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.front_microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Front Microphone Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.front_microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.headset_microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Headset Microphone Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.headset_microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.speaker_microphone_front_test}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Speaker Microphone Front Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.speaker_microphone_front_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.receiver_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Received Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.receiver_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.headset_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Headset Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.headset_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.front_camera_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Front Camera Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.front_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.video_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Video Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.video_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.auto_focus_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Auto Focus Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.auto_focus_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.camera_flash_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Camera Flash Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.camera_flash_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.front_camera_flash_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Front Camera Flash Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.front_camera_flash_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.battery_charging_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Battery Charging Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.battery_charging_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.touch_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Touch Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.touch_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.proximity_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Proximity Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.proximity_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.compass_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Compass Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.compass_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.light_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Light Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.light_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.vibration_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Vibration Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.vibration_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.home_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Home Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.home_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.volume_keys_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Volume Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.volume_keys_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.screen_lock_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Screen Lock Key Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.screen_lock_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.back_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>back Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.back_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.recent_menu_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Recent Menu Key Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.recent_menu_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.screen_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Screen Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.screen_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.live_call_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Live Call Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.live_call_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.live_call_sim_2_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Live Call Sim 2 Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.live_call_sim_2_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.screen_damage_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Screen Damage Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.screen_damage_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.assisted_front_camera_test}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Assisted Front Camera Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.assisted_front_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.fingerprint_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Fingerprint Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.fingerprint_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.multi_touch_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Multi Touch Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.multi_touch_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n\r\n                    <TableRow key={BqcSowftwareReport?.face_id_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Face ID Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.face_id_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.auto_rotation_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Auto Rotation Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.auto_rotation_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.infrared_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Infrared Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.infrared_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.fm_radio_test}>\r\n                        <TableCell sx={{ pl: 2 }}>FM Radio Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.fm_radio_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.product_version}>\r\n                        <TableCell sx={{ pl: 2 }}>Product Version</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.product_version}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.product_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Product Name</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.product_name}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.operating_system_version}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Operating System Version\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.operating_system_version}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.system_manufacturer}>\r\n                        <TableCell sx={{ pl: 2 }}>System Manufacture</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.system_manufacturer}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.system_model}>\r\n                        <TableCell sx={{ pl: 2 }}>System Model</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.system_model}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_internal_model}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Mobile Internal Model\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mobile_internal_model}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.system_serial}>\r\n                        <TableCell sx={{ pl: 2 }}>System Serial</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.system_serial}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.operating_system_name}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Operating System Name\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.operating_system_name}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.total_memory}>\r\n                        <TableCell sx={{ pl: 2 }}>Total Memory</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.total_memory}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.business_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Business Name</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.business_name}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.business_location}>\r\n                        <TableCell sx={{ pl: 2 }}>Business Location</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.business_location}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.report_id}>\r\n                        <TableCell sx={{ pl: 2 }}>Report Id</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.report_id}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.rooted}>\r\n                        <TableCell sx={{ pl: 2 }}>Rooted</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.rooted}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.frp}>\r\n                        <TableCell sx={{ pl: 2 }}>FRP</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.frp}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.frp_status}>\r\n                        <TableCell sx={{ pl: 2 }}>FRP Status</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.frp_status}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={\r\n                            BqcSowftwareReport?.blancco_data_blancco_hardware_report_system_mdm_status\r\n                        }\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Blancco Data Blancco Hardware Report System MDM\r\n                            Status\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {\r\n                                BqcSowftwareReport?.blancco_data_blancco_hardware_report_system_mdm_status\r\n                            }\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={\r\n                            BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                        }\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Blancco Data Blancco Hardware Report Hardware Tests\r\n                            Auto Fingerprint\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {\r\n                                BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                            }\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.disk_capacity}>\r\n                        <TableCell sx={{ pl: 2 }}>Disk Capacity</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.disk_capacity}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.agps_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Agps Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.agps_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.assisted_camera_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Assisted Camera Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.assisted_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.silent_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Silent Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.silent_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.speaker_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Speaker Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.speaker_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?._ro_ril_miui_imei0}>\r\n                        <TableCell sx={{ pl: 2 }}>RO Ril Miui IMEI 0</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?._ro_ril_miui_imei0}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.back_camera_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Back Camera Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.back_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BqcSowftwareReportPage\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\ChargingDetails.jsx",["3100","3101","3102"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\CRUD\\CrudTable.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\list\\AppList.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\chat-box\\AppChat.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-form\\CustomerForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\apex-charts\\ApexCharts.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\AppRechart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\SecondarySidebar\\SecondarySidebarContent.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\SecondarySidebar\\SecondarySidebarToggle.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sidenav\\Sidenav.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxTheme\\SecondarySidenavTheme\\SecondarySidenavTheme.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Brand\\Brand.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\InboxService.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\TodoService.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\invoice\\InvoiceEditor.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\invoice\\InvoiceViewer.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\InboxSidenav.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\InboxTopbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\InboxMessagList.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\calendar\\EventEditorDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\SimplePricing4.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\SimplePricing2.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\SimplePricing3.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pricing\\SimplePricing1.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\InventoryDashboard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\RecentUpdates.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\TagDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\map\\MarkerMap.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\map\\BasicMap.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerLogs.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerInvoice.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerDetails.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-form\\ContactPersonForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-form\\OtherDetailsForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-form\\AddressForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\SimpleRadialBar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\SimpleRadarChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\SimpleTreeMap.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\TwoSimplePieChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\SimpleScatterChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\LineBarAreaComposedChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\SimpleBarChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\StackedAreaChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\recharts\\SimpleLineChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\apex-charts\\AdvanceLineChart2.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\apex-charts\\AdvanceAreaChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\apex-charts\\AdvanceLineChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\ShoppingCart\\ShoppingCart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxCustomizer\\MatxCustomizer.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\invoice\\InvoiceService.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\calendar\\CalendarService.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\inbox\\InboxComposeDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\RecentUpdateCard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\InventoryDoughnutChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\MatxCustomizer\\BadgeSelected.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerActions.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerInfo.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerBillings.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerEmailSender.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\Country.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\TopSellingTable.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\InventoryLineChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\StatCard5.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\chat-box\\ChatService.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\list\\ListService.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\CRUD\\TableService.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\apex-charts\\HeatmapChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\apex-charts\\PeiChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\chat-box\\ChatSidenav.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\chat-box\\ChatContainer.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\list\\ListTopbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\list\\ListView.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\list\\GridView.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\CRUD\\MemberEditorDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\expansion-panel\\CustomizedExpansionPanel.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\expansion-panel\\DetailedExpansionPanel.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\expansion-panel\\ControlledAccordion.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\expansion-panel\\SimpleExpansionPanel.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\user-profile\\UserProfileSidenav.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\calendar\\CalendarHeader.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\user-profile\\UserProfileContent.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\PaymentDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\Drag&Drop\\SimpleListDnD.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\Drag&Drop\\SimpleHorizontalList.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\Drag&Drop\\TwoListDnD.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\NotificationBar2\\NotificationBar2.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-tray\\add-tray.jsx",["3103","3104","3105","3106","3107","3108","3109","3110","3111","3112","3113","3114","3115","3116","3117","3118"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\PropertyListingForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\WizardForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\UploadForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\BasicForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\echarts\\AppEchart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\invoice-form\\InvoiceForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\order-form\\OrderForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\chat-box\\EmptyMessage.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\user-profile\\ProfileBarChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\user-profile\\DummyChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\invoice-form\\InvoiceFormService.js",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\VerticalStepper.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\HorizontalStepper.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\forms\\SimpleForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\order-form\\InvoiceCustomer.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\order-form\\InvoiceOverview.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\forms\\invoice-form\\InvoiceItemTable.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\echarts\\ComparisonChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\echarts\\AreaChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\echarts\\Doughnut.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\charts\\echarts\\LineChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\NotificationBar2\\NotificationCard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\customers\\CustomerList.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\products\\ProductForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\products\\ProductList.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\products\\ProductViewer.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\user-list\\UserList4.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\user-list\\UserList3.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\user-list\\UserList2.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\user-list\\UserList1.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\AppTodo.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\orders\\OrderList.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\faq\\Faq2.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\faq\\Faq1.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\invoice\\InvoiceList.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\AppProgress.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\auto-complete\\AppAutoComplete.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\AppSnackbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\forms\\AppForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\switch\\AppSwitch.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\AppDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\radio\\AppRadio.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\slider\\AppSlider.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\Analytics3.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\checkbox\\AppCheckbox.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\menu\\AppMenu.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\sup-admin-dshboard.jsx",["3119","3120"],"import React from 'react'\r\nimport StatCard3 from './shared/StatCard3'\r\nimport { H3, Span } from 'app/components/Typography'\r\nimport { styled, useTheme } from '@mui/system'\r\n\r\nconst AnalyticsRoot = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n}))\r\n\r\nconst FlexBox = styled('div')(({ theme }) => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    marginBottom: '24px',\r\n}))\r\n\r\nconst Analytics2 = () => {\r\n    const { palette } = useTheme()\r\n    return (\r\n        <AnalyticsRoot>\r\n            <FlexBox>\r\n                <H3 sx={{ m: 0 }}>DASHBOARD</H3>\r\n            </FlexBox>\r\n            <StatCard3 />\r\n        </AnalyticsRoot>\r\n    )\r\n}\r\n\r\nexport default Analytics2\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\Analytics.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\icons\\AppIcon.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\buttons\\AppButton.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\Shop.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\Cart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\data-table\\SimpleMuiTable.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\page-layouts\\LeftSidebarCard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\sessions\\ForgotPassword.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\Board.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\tables\\AppTable.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bag\\view-bag.jsx",["3121","3122","3123"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport MemberEditorDialog from './add-bag'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Box, IconButton, Icon } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [bagList, setBagList] = useState([])\r\n    const navigate = useNavigate()\r\n    const [editFetchData, setEditFetchData] = useState({})\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchBrand = async () => {\r\n            try {\r\n                let obj = {\r\n                    master_type: 'bag-master',\r\n                }\r\n                const res = await axiosSuperAdminPrexo.post('/getMasters', obj)\r\n                if (res.status === 200) {\r\n                    setBagList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchBrand()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setEditFetchData({})\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelDelete = (masterId) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: 'You Want to Delete!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Delete it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let res = await axiosSuperAdminPrexo.get(\r\n                        '/getOneMaster/' + masterId\r\n                    )\r\n                    if (res.status == 200) {\r\n                        let response = await axiosSuperAdminPrexo.post(\r\n                            '/deleteMaster/' + masterId\r\n                        )\r\n                        if (response.status == 200) {\r\n                            Swal.fire({\r\n                                position: 'top-center',\r\n                                icon: 'success',\r\n                                title: 'Your Bag has been Deleted',\r\n                                confirmButtonText: 'Ok',\r\n                            }).then((result) => {\r\n                                if (result.isConfirmed) {\r\n                                    setIsAlive((isAlive) => !isAlive)\r\n                                }\r\n                            })\r\n                        } else {\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Oops...',\r\n                                text: response.data.message,\r\n                            })\r\n                        }\r\n                    } else {\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Oops...',\r\n                            text: \"You Can't Delete This Bag\",\r\n                        })\r\n                    }\r\n                } catch (error) {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: error,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const editbag = async (masterId) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.get(\r\n                '/getOneMaster/' + masterId\r\n            )\r\n            if (response.status == 200) {\r\n                setEditFetchData(response.data.data)\r\n                handleDialogOpen()\r\n            } else if (response.status === 202) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: response.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelAudit = (bagId) => {\r\n        navigate('/sup-admin/bag/audit/' + bagId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Bag Display Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Bag Limit',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Bag Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                flexDirection: 'row',\r\n                            }}\r\n                        >\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        editbag(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    edit\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={() => {\r\n                                        handelDelete(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"error\"\r\n                                >\r\n                                    delete\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={() => {\r\n                                        handelAudit(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    history\r\n                                </Icon>\r\n                            </IconButton>\r\n                        </Box>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Bag', path: '/' }]} />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => setShouldOpenEditorDialog(true)}\r\n            >\r\n                Add New Bag\r\n            </Button>\r\n            <Button\r\n                sx={{ mb: 2, ml: 2 }}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => navigate('/sup-admin/bag/add-bulk-bag')}\r\n            >\r\n                Add Bulk Bag\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'All Bag'}\r\n                data={bagList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <MemberEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    editFetchData={editFetchData}\r\n                    setEditFetchData={setEditFetchData}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bag\\bag-audit.jsx",["3124","3125","3126","3127"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [audit, setAudit] = useState([])\r\n\r\n    const { bagId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post(\r\n                    '/getAudit/' + bagId\r\n                )\r\n                if (res.status === 200) {\r\n                    setAudit(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Date Of Closure ',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Max',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Valid',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Valid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Invalid',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Invalid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Duplicate',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Duplicate'\r\n                    }).length,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Total',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) => value.length,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Bag', path: '/' }]} />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Bag Audit'}\r\n                data={audit}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\sessions\\login\\FirebaseLogin.jsx",["3128","3129"],"import {\r\n    Card,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    Grid,\r\n    Button,\r\n    CircularProgress,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport React, { useState } from 'react'\r\nimport { Box, styled, useTheme } from '@mui/system'\r\nimport useAuth from 'app/hooks/useAuth'\r\nimport { MatxLogo, MatxDivider } from 'app/components'\r\nimport { TextValidator, ValidatorForm } from 'react-material-ui-form-validator'\r\nimport { Paragraph, Span } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({\r\n    justifyContent: 'center',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(() => ({\r\n    color: 'rgba(0, 0, 0, 0.87)',\r\n    boxShadow:\r\n        '0px 5px 5px -3px rgb(0 0 0 / 6%), 0px 8px 10px 1px rgb(0 0 0 / 4%), 0px 3px 14px 2px rgb(0 0 0 / 4%)',\r\n    backgroundColor: '#e0e0e0',\r\n    '&:hover': {\r\n        backgroundColor: '#d5d5d5',\r\n    },\r\n}))\r\n\r\nconst FirebaseRoot = styled(JustifyBox)(({ theme }) => ({\r\n    background: '#1A2038',\r\n    minHeight: '100vh !important',\r\n    '& .card': {\r\n        maxWidth: 800,\r\n        margin: '1rem',\r\n    },\r\n    '& .cardLeft': {\r\n        height: '100%',\r\n        padding: '32px 56px',\r\n        background: '#161c37 url(/assets/images/bg-3.png) no-repeat',\r\n        backgroundSize: 'cover',\r\n        color: '#fff',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        [theme.breakpoints.down('sm')]: {\r\n            minWidth: 200,\r\n        },\r\n        '& img': {\r\n            width: 32,\r\n            height: 32,\r\n        },\r\n    },\r\n    '& .logo': {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '& span': {\r\n            fontSize: 26,\r\n            lineHeight: 1.3,\r\n            fontWeight: 800,\r\n        },\r\n    },\r\n    '& .mainTitle': {\r\n        fontSize: 18,\r\n        lineHeight: 1.3,\r\n        marginBottom: 24,\r\n    },\r\n    '& .features': {\r\n        '& .item': {\r\n            position: 'relative',\r\n            marginBottom: 12,\r\n            paddingLeft: 20,\r\n            '&::after': {\r\n                position: 'absolute',\r\n                content: '\"\"',\r\n                width: 4,\r\n                height: 4,\r\n                borderRadius: 4,\r\n                left: 4,\r\n                top: 7,\r\n                backgroundColor: theme.palette.error.main,\r\n            },\r\n        },\r\n    },\r\n    '& .buttonProgress': {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    },\r\n    '& .socialButton': {\r\n        width: '100%',\r\n        '& img': {\r\n            margin: '0 8px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst FirebaseLogin = () => {\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [userInfo, setUserInfo] = useState({\r\n        email: 'jason@ui-lib.com',\r\n        password: 'dummyPass',\r\n        remember: true,\r\n    })\r\n    const [message, setMessage] = useState('')\r\n    const { signInWithEmailAndPassword, signInWithGoogle } = useAuth()\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        let temp = { ...userInfo }\r\n        temp[name] = value\r\n        setUserInfo(temp)\r\n    }\r\n\r\n    const handleFormSubmit = async (event) => {\r\n        setLoading(true)\r\n        try {\r\n            // await signInWithEmailAndPassword(userInfo.email, userInfo.password)\r\n            navigate('/')\r\n        } catch (e) {\r\n            console.log(e)\r\n            setMessage(e.message)\r\n            setLoading(false)\r\n        }\r\n    }\r\n    const handleGoogleLogin = async (event) => {\r\n        try {\r\n            // await signInWithGoogle()\r\n            navigate('/')\r\n        } catch (e) {\r\n            setMessage(e.message)\r\n            setLoading(false)\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const { palette } = useTheme()\r\n    const textError = palette.error.main\r\n    const textPrimary = palette.primary.main\r\n\r\n    return (\r\n        <FirebaseRoot>\r\n            <Card className=\"card\">\r\n                <Grid container>\r\n                    <Grid item lg={6} md={6} sm={5} xs={12}>\r\n                        <div className=\"cardLeft\">\r\n                            <div className=\"logo\">\r\n                                <MatxLogo sx={{ mr: 1 }} />{' '}\r\n                                <span>MatX Pro</span>\r\n                            </div>\r\n                            <h1 className=\"mainTitle\">Admin Dashboard</h1>\r\n                            <div className=\"features\">\r\n                                <div className=\"item\">\r\n                                    JWT, FireBase & Auth0 Authentication\r\n                                </div>\r\n                                <div className=\"item\">\r\n                                    Clean & Organised code\r\n                                </div>\r\n                                <div className=\"item\">\r\n                                    Limitless Pages & Components\r\n                                </div>\r\n                            </div>\r\n                            <Span sx={{ flexGrow: 1 }}></Span>\r\n                            <FlexBox>\r\n                                <a\r\n                                    href=\"https://ui-lib.com/\"\r\n                                    target=\"_blank\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                >\r\n                                    <img\r\n                                        src=\"/assets/images/logos/ui-lib.png\"\r\n                                        alt=\"UI Lib Logo\"\r\n                                    />\r\n                                </a>\r\n                            </FlexBox>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <Box px={4} pt={4}>\r\n                            <StyledButton\r\n                                onClick={handleGoogleLogin}\r\n                                variant=\"contained\"\r\n                                className=\"socialButton\"\r\n                            >\r\n                                <img\r\n                                    src=\"/assets/images/logos/google.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                Sign In With Google\r\n                            </StyledButton>\r\n                        </Box>\r\n\r\n                        <MatxDivider sx={{ mt: 3, px: 4 }} text=\"Or\" />\r\n\r\n                        <Box p={4} height=\"100%\" position=\"relative\">\r\n                            <ValidatorForm onSubmit={handleFormSubmit}>\r\n                                <TextValidator\r\n                                    sx={{ mb: 3, width: '100%' }}\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    label=\"Email\"\r\n                                    onChange={handleChange}\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    value={userInfo.email}\r\n                                    validators={['required', 'isEmail']}\r\n                                    errorMessages={[\r\n                                        'this field is required',\r\n                                        'email is not valid',\r\n                                    ]}\r\n                                />\r\n                                <TextValidator\r\n                                    sx={{ mb: '12px', width: '100%' }}\r\n                                    label=\"Password\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    onChange={handleChange}\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    value={userInfo.password}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                />\r\n                                <FormControlLabel\r\n                                    sx={{ mb: '12px', maxWidth: 288 }}\r\n                                    name=\"remember\"\r\n                                    onChange={handleChange}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            size=\"small\"\r\n                                            onChange={({\r\n                                                target: { checked },\r\n                                            }) =>\r\n                                                handleChange({\r\n                                                    target: {\r\n                                                        name: 'remember',\r\n                                                        value: checked,\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                            checked={userInfo.remember}\r\n                                        />\r\n                                    }\r\n                                    label=\"Remeber me\"\r\n                                />\r\n\r\n                                {message && (\r\n                                    <Paragraph sx={{ color: textError }}>\r\n                                        {message}\r\n                                    </Paragraph>\r\n                                )}\r\n\r\n                                <FlexBox mb={2} flexWrap=\"wrap\">\r\n                                    <Box position=\"relative\">\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            disabled={loading}\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            Sign in\r\n                                        </Button>\r\n                                        {loading && (\r\n                                            <CircularProgress\r\n                                                size={24}\r\n                                                className=\"buttonProgress\"\r\n                                            />\r\n                                        )}\r\n                                    </Box>\r\n                                    <Span sx={{ mr: 1, ml: '20px' }}>or</Span>\r\n                                    <Button\r\n                                        sx={{ textTransform: 'capitalize' }}\r\n                                        onClick={() =>\r\n                                            navigate('/session/signup')\r\n                                        }\r\n                                    >\r\n                                        Sign up\r\n                                    </Button>\r\n                                </FlexBox>\r\n                                <Button\r\n                                    sx={{ color: textPrimary }}\r\n                                    onClick={() =>\r\n                                        navigate('/session/forgot-password')\r\n                                    }\r\n                                >\r\n                                    Forgot password?\r\n                                </Button>\r\n                            </ValidatorForm>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n        </FirebaseRoot>\r\n    )\r\n}\r\n\r\nexport default FirebaseLogin\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-location\\view-location.jsx",["3130","3131"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport MemberEditorDialog from './add-location'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { styled } from '@mui/system'\r\nimport { Button, IconButton, Icon } from '@mui/material'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [locationList, setLocatiolList] = useState([])\r\n    const [editFetchData, setEditFetchData] = useState({})\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchLocation = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post('/getLocation')\r\n                if (res.status === 200) {\r\n                    setLocatiolList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchLocation()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const editLocation = async (empId) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.get('/getInfra/' + empId)\r\n            if (response.status == 200) {\r\n                setEditFetchData(response.data.data)\r\n                handleDialogOpen()\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    const handelDelete = (id) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: 'You want to Delete Location!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Delete it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let response = await axiosSuperAdminPrexo.post(\r\n                        '/deleteInfra/' + id\r\n                    )\r\n                    if (response.status == 200) {\r\n                        Swal.fire({\r\n                            position: 'top-center',\r\n                            icon: 'success',\r\n                            title: 'Location has been Deleted',\r\n                            confirmButtonText: 'Ok',\r\n                        }).then((result) => {\r\n                            if (result.isConfirmed) {\r\n                                setIsAlive((isAlive) => !isAlive)\r\n                            }\r\n                        })\r\n                    } else {\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Oops...',\r\n                            text: response.data.message,\r\n                        })\r\n                    }\r\n                } catch (error) {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: error,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Code',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'address',\r\n            label: 'Address',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'city',\r\n            label: 'City',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'state',\r\n            label: 'State',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'country',\r\n            label: 'Country',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'pincode',\r\n            label: 'Pincode',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        editLocation(value)\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    edit\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        handelDelete(value)\r\n                                    }}\r\n                                    color=\"error\"\r\n                                >\r\n                                    delete\r\n                                </Icon>\r\n                            </IconButton>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Location', path: '/' }]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => setShouldOpenEditorDialog(true)}\r\n            >\r\n                Add New Location\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'All Location'}\r\n                data={locationList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <MemberEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    editFetchData={editFetchData}\r\n                    setEditFetchData={setEditFetchData}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-brands\\bulk-add-brand.jsx",["3132","3133","3134","3135","3136","3137","3138","3139","3140","3141","3142"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    TextField,\r\n} from '@mui/material'\r\nimport DoneIcon from '@mui/icons-material/Done'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\nimport * as XLSX from 'xlsx'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst StyledTable = styled(Table)(({ theme }) => ({\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& tr': {\r\n            '& th': {\r\n                paddingLeft: 0,\r\n                paddingRight: 0,\r\n            },\r\n        },\r\n    },\r\n    '& tbody': {\r\n        '& tr': {\r\n            '& td': {\r\n                paddingLeft: 0,\r\n                textTransform: 'capitalize',\r\n            },\r\n        },\r\n    },\r\n}))\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst StyledLoading = styled('div')(() => ({\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    '& img': {\r\n        width: 'auto',\r\n        height: '25px',\r\n    },\r\n    '& .circleProgress': {\r\n        position: 'absolute',\r\n        left: -7,\r\n        right: 0,\r\n        top: 'calc(50% - 25px)',\r\n    },\r\n}))\r\n\r\nconst AddBulkBrand = () => {\r\n    const navigate = useNavigate()\r\n    const [validateState, setValidateState] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [err, setErr] = useState({})\r\n    const [brandCount, setBrandCount] = useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [exFile, setExfile] = useState(null)\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n        item: [],\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let res = await axiosSuperAdminPrexo.post('/getBrandIdHighest')\r\n                if (res.status == 200) {\r\n                    setBrandCount(res.data.data)\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        setItem((_) =>\r\n            pagination.item\r\n                .slice(\r\n                    (pagination.page - 1) * pagination.size,\r\n                    pagination.page * pagination.size\r\n                )\r\n                .map((d, index) => {\r\n                    d.id = (pagination.page - 1) * pagination.size + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [pagination.page, pagination.item])\r\n\r\n    const importExcel = () => {\r\n        readExcel(exFile)\r\n    }\r\n\r\n    const readExcel = async (file) => {\r\n        const promise = new Promise((resolve, reject) => {\r\n            const filReader = new FileReader()\r\n            filReader.readAsArrayBuffer(file)\r\n            filReader.onload = (e) => {\r\n                const bufferArray = e.target.result\r\n                const wb = XLSX.read(bufferArray, { cellDates: true })\r\n                const wsname = wb.SheetNames[0]\r\n                const ws = wb.Sheets[wsname]\r\n                const data = XLSX.utils.sheet_to_json(ws)\r\n                resolve(data)\r\n            }\r\n            filReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n        const data = await promise\r\n        setPagination((p) => ({\r\n            ...p,\r\n            page: 1,\r\n            item: data.map((d, index) => toLowerKeys(d, brandCount, index)),\r\n            totalPage: Math.ceil(data.length / p.size),\r\n        }))\r\n    }\r\n    function toLowerKeys(obj, count, id) {\r\n        return Object.keys(obj).reduce((accumulator, key) => {\r\n            accumulator.brand_id = 'brand-0' + (count + id)\r\n            accumulator[key.toLowerCase().split('-').join('_')] = obj[key]\r\n            return accumulator\r\n        }, {})\r\n    }\r\n\r\n    const updateFieldChanged = (brand_id) => (e) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.map((data, i) => {\r\n                if (data.brand_id === brand_id) {\r\n                    return { ...data, [e.target.name]: e.target.value }\r\n                } else {\r\n                    return data\r\n                }\r\n            }),\r\n        }))\r\n    }\r\n\r\n    const handelDelete = (brand_id) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.filter((item) => item.brand_id != brand_id),\r\n        }))\r\n    }\r\n\r\n    const validateData = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/bulkValidationBrands',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                setValidateState(true)\r\n                setLoading(false)\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                setErr(res.data.data)\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: res.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    const handelSubmit = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/createBrands',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                    }\r\n                })\r\n                navigate('/sup-admin/brands')\r\n            } else {\r\n                setLoading(false)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: res.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error.response.data.message,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Brands', path: '/' },\r\n                        { name: 'Bulk-Brand' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Bulk Brand\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <h4>Upload file</h4>\r\n\r\n                    <Box>\r\n                        <Button\r\n                            sx={{ mb: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            onClick={() => navigate('/sup-admin/brands')}\r\n                        >\r\n                            Back to list\r\n                        </Button>\r\n                        <Button\r\n                            sx={{ mb: 2, ml: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={\r\n                                process.env.PUBLIC_URL +\r\n                                '/bulk-brand-sheet-sample.xlsx'\r\n                            }\r\n                            download\r\n                        >\r\n                            Download Sample Sheet\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        mb: 5,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        size=\"small\"\r\n                        onChange={(e) => {\r\n                            setExfile(e.target.files[0])\r\n                        }}\r\n                        inputProps={{ accept: '.csv,.xlsx,.xls' }}\r\n                        variant=\"outlined\"\r\n                        type=\"file\"\r\n                    />\r\n                    {item.length == 0 ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading || exFile == null}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                importExcel()\r\n                            }}\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    ) : validateState ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={loading}\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelSubmit(e)\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                validateData(e)\r\n                            }}\r\n                        >\r\n                            Validate Data\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                {item.length != 0 && loading !== true ? (\r\n                    <>\r\n                        <StyledTable>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>S.NO</TableCell>\r\n                                    <TableCell>Brand Name</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {item.map((data) => (\r\n                                    <TableRow tabIndex={-1}>\r\n                                        <TableCell>{data.id}</TableCell>\r\n                                        <TableCell>\r\n                                            <TextField\r\n                                                onChange={updateFieldChanged(\r\n                                                    data.brand_id\r\n                                                )}\r\n                                                id=\"outlined-password-input\"\r\n                                                type=\"text\"\r\n                                                name=\"brand_name\"\r\n                                                value={data.brand_name?.toString()}\r\n                                            />\r\n                                            {err?.duplicate_brand_name?.includes(\r\n                                                data.brand_name\r\n                                            ) ? (\r\n                                                <ClearIcon\r\n                                                    style={{ color: 'red' }}\r\n                                                />\r\n                                            ) : Object.keys(err).length != 0 ? (\r\n                                                <DoneIcon\r\n                                                    style={{ color: 'green' }}\r\n                                                />\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n\r\n                                            {err?.duplicate_brand_name?.includes(\r\n                                                data.brand_name\r\n                                            ) ? (\r\n                                                <p style={{ color: 'red' }}>\r\n                                                    Duplicate Brand Name\r\n                                                </p>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                        </TableCell>\r\n\r\n                                        <TableCell>\r\n                                            {err?.duplicate_brand_name?.includes(\r\n                                                data.brand_name\r\n                                            ) == true ? (\r\n                                                <Button\r\n                                                    sx={{\r\n                                                        ml: 2,\r\n                                                    }}\r\n                                                    variant=\"contained\"\r\n                                                    style={{\r\n                                                        backgroundColor: 'red',\r\n                                                    }}\r\n                                                    component=\"span\"\r\n                                                    onClick={() => {\r\n                                                        if (\r\n                                                            window.confirm(\r\n                                                                'You Want to Remove?'\r\n                                                            )\r\n                                                        ) {\r\n                                                            handelDelete(\r\n                                                                data.brand_id\r\n                                                            )\r\n                                                        }\r\n                                                    }}\r\n                                                >\r\n                                                    Remove\r\n                                                </Button>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </StyledTable>\r\n                    </>\r\n                ) : item.length != 0 ? (\r\n                    <StyledLoading>\r\n                        <Box position=\"relative\">\r\n                            <img src=\"/assets/images/logo-circle.svg\" alt=\"\" />\r\n                            <CircularProgress className=\"circleProgress\">\r\n                                <p>Please Wait...</p>\r\n                            </CircularProgress>\r\n                        </Box>\r\n                    </StyledLoading>\r\n                ) : null}\r\n\r\n                {pagination.item.length && loading != true ? (\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            justifyContent: 'end',\r\n                            mt: 1,\r\n                            mr: 3,\r\n                            ml: 3,\r\n                        }}\r\n                    >\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ m: 1 }}\r\n                            disabled={pagination.page === 1}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) =>\r\n                                setPagination((p) => ({\r\n                                    ...p,\r\n                                    page: --p.page,\r\n                                }))\r\n                            }\r\n                        >\r\n                            Previous\r\n                        </Button>\r\n\r\n                        <h6 style={{ marginTop: '19px' }}>\r\n                            {pagination.page}/{pagination.totalPage}\r\n                        </h6>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ m: 1 }}\r\n                            disabled={pagination.page === pagination.totalPage}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) =>\r\n                                setPagination((p) => ({\r\n                                    ...p,\r\n                                    page: ++p.page,\r\n                                }))\r\n                            }\r\n                        >\r\n                            Next\r\n                        </Button>\r\n                    </Box>\r\n                ) : null}\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default AddBulkBrand\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Dashboard\\dashboard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-warehouse\\view-warehouse.jsx",["3143","3144"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport MemberEditorDialog from './add-warehouse'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { styled } from '@mui/system'\r\nimport { Button, IconButton, Icon } from '@mui/material'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [warehouseList, setWarehouseList] = useState([])\r\n    const [editFetchData, setEditFetchData] = useState({})\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchLocation = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post('/getWarehouse')\r\n                if (res.status === 200) {\r\n                    setWarehouseList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchLocation()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const editWarehouse = async (empId) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.get('/getInfra/' + empId)\r\n            if (response.status == 200) {\r\n                setEditFetchData(response.data.data)\r\n                handleDialogOpen()\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelDelete = (id) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: 'You want to Delete Location!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Delete it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let response = await axiosSuperAdminPrexo.post(\r\n                        '/deleteInfra/' + id\r\n                    )\r\n                    if (response.status == 200) {\r\n                        Swal.fire({\r\n                            position: 'top-center',\r\n                            icon: 'success',\r\n                            title: 'Location has been Deleted',\r\n                            confirmButtonText: 'Ok',\r\n                        }).then((result) => {\r\n                            if (result.isConfirmed) {\r\n                                setIsAlive((isAlive) => !isAlive)\r\n                            }\r\n                        })\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Code',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'parent_id',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse_type',\r\n            label: 'Warehouse Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'address',\r\n            label: 'Address',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'city',\r\n            label: 'City',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'state',\r\n            label: 'State',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'country',\r\n            label: 'Country',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'pincode',\r\n            label: 'Pincode',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        editWarehouse(value)\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    edit\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        handelDelete(value)\r\n                                    }}\r\n                                    color=\"error\"\r\n                                >\r\n                                    delete\r\n                                </Icon>\r\n                            </IconButton>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Warehouse', path: '/' }]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => setShouldOpenEditorDialog(true)}\r\n            >\r\n                Add New Warehouse\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'All Warehouse'}\r\n                data={warehouseList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <MemberEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    editFetchData={editFetchData}\r\n                    setEditFetchData={setEditFetchData}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-brands\\view-brands.jsx",["3145","3146","3147","3148","3149","3150"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport MemberEditorDialog from './add-brand'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport { Button, IconButton, Icon } from '@mui/material'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst BrandTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [editFetchData, setEditFetchData] = useState({})\r\n    const [brandList, setBrandList] = useState([])\r\n    const navigate = useNavigate()\r\n    const [brandCount, setBrandCount] = useState(0)\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchBrand = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post('/getBrands')\r\n                if (res.status === 200) {\r\n                    setBrandList(res.data.data)\r\n                }\r\n                let countBrand = await axiosSuperAdminPrexo.post(\r\n                    '/getBrandIdHighest'\r\n                )\r\n                if (countBrand.status == 200) {\r\n                    setBrandCount(countBrand.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchBrand()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setEditFetchData({})\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = (state) => {\r\n        if (state == 'ADD') {\r\n            if (brandCount != 0) {\r\n                setShouldOpenEditorDialog(true)\r\n            }\r\n        } else {\r\n            setShouldOpenEditorDialog(true)\r\n        }\r\n    }\r\n\r\n    const editBrand = async (brandId) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.get(\r\n                '/getBrandOne/' + brandId\r\n            )\r\n            if (response.status == 200) {\r\n                setEditFetchData(response.data.data)\r\n                handleDialogOpen()\r\n            } else {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: response.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelDelete = (brandId) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: 'You Want to Delete!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Delete it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let res = await axiosSuperAdminPrexo.get(\r\n                        '/getBrandOne/' + brandId\r\n                    )\r\n                    if (res.status == 200) {\r\n                        let response = await axiosSuperAdminPrexo.post(\r\n                            '/deleteBrand/' + brandId\r\n                        )\r\n                        if (response.status == 200) {\r\n                            Swal.fire({\r\n                                position: 'top-center',\r\n                                icon: 'success',\r\n                                title: 'Your Brand has been Deleted.',\r\n                                confirmButtonText: 'Ok',\r\n                            }).then((result) => {\r\n                                if (result.isConfirmed) {\r\n                                    setIsAlive((isAlive) => !isAlive)\r\n                                }\r\n                            })\r\n                        } else {\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Oops...',\r\n                                text: \"This Brand You Can't Delete\",\r\n                            })\r\n                        }\r\n                    } else {\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Oops...',\r\n                            text: \"This Brand You Can't Delete\",\r\n                        })\r\n                    }\r\n                } catch (error) {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: error,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand_id', // field name in the row object\r\n            label: 'Brand Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand_name',\r\n            label: 'Brand Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand_id',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        editBrand(value)\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    edit\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        handelDelete(value)\r\n                                    }}\r\n                                    color=\"error\"\r\n                                >\r\n                                    delete\r\n                                </Icon>\r\n                            </IconButton>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Brands', path: '/' }]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => handleDialogOpen('ADD')}\r\n            >\r\n                Add New Brand\r\n            </Button>\r\n            <Button\r\n                sx={{ mb: 2, ml: 2 }}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => navigate('/sup-admin/brands/bulk-brand')}\r\n            >\r\n                Add Bulk Brand\r\n            </Button>\r\n\r\n            <MUIDataTable\r\n                title={'All Brands'}\r\n                data={brandList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <MemberEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    editFetchData={editFetchData}\r\n                    setEditFetchData={setEditFetchData}\r\n                    brandCount={brandCount}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default BrandTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-products\\view-products.jsx",["3151","3152","3153","3154"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-users\\view-users.jsx",["3155","3156","3157","3158","3159"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport MemberEditorDialog from './new-users'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { styled } from '@mui/system'\r\nimport { Button, IconButton, Icon, Box, Radio } from '@mui/material'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport Avatar from '@mui/material/Avatar'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst UserTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [userList, setUserList] = useState([])\r\n    const [editFetchData, setEditFetchData] = useState({})\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchUser = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post('/getUsers')\r\n                if (res.status === 200) {\r\n                    setUserList(res.data.data.user)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchUser()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setEditFetchData({})\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n    const editUser = async (empId) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.get(\r\n                '/getEditData/' + empId\r\n            )\r\n            if (response.status == 200) {\r\n                setEditFetchData(response.data.data)\r\n                handleDialogOpen()\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelHistory = (e, username) => {\r\n        e.preventDefault()\r\n        navigate('/sup-admin/user-history/' + username)\r\n    }\r\n\r\n    const handelDeactive = (userId) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be Deactive this user!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Deactivate it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let response = await axiosSuperAdminPrexo.post(\r\n                        '/userDeactivate/' + userId\r\n                    )\r\n                    if (response.status == 200) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                        Swal.fire(\r\n                            'Deactivated!',\r\n                            'Your user has been Deactivated.',\r\n                            'success'\r\n                        )\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const handelActive = (userId) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be Active this user!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Activate it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let response = await axiosSuperAdminPrexo.post(\r\n                        '/userActivate/' + userId\r\n                    )\r\n                    if (response.status == 200) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                        Swal.fire(\r\n                            'Activated!',\r\n                            'Your user has been Activated.',\r\n                            'success'\r\n                        )\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'profile',\r\n            label: 'Profile',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return <Avatar variant=\"rounded\" src={value} />\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'creation_date',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'email',\r\n            label: 'Email',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'contact',\r\n            label: 'Mobile No',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'user_name',\r\n            label: 'User name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'user_type',\r\n            label: 'User Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'CPC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'device_name',\r\n            label: 'Device Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'device_id',\r\n            label: 'Device Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    if (value == 'Active') {\r\n                        return (\r\n                            <div style={{ color: 'green', fontWeight: 'bold' }}>\r\n                                {value}\r\n                            </div>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <div style={{ color: 'red', fontWeight: 'bold' }}>\r\n                                {value}\r\n                            </div>\r\n                        )\r\n                    }\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Actions',\r\n            options: {\r\n                sort: false,\r\n                filter: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                flexDirection: 'row',\r\n                            }}\r\n                        >\r\n                            {value == 'Active' ? (\r\n                                <Radio\r\n                                    onClick={(e) => {\r\n                                        handelDeactive(tableMeta.rowData[6])\r\n                                    }}\r\n                                    checked\r\n                                    style={{ color: 'green' }}\r\n                                />\r\n                            ) : (\r\n                                <Radio\r\n                                    onClick={(e) => {\r\n                                        handelActive(tableMeta.rowData[6])\r\n                                    }}\r\n                                    checked\r\n                                    style={{ color: 'red' }}\r\n                                />\r\n                            )}\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        editUser(tableMeta.rowData[6])\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    edit\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        handelHistory(e, tableMeta.rowData[6])\r\n                                    }}\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    history\r\n                                </Icon>\r\n                            </IconButton>\r\n                        </Box>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Users', path: '/' }]} />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => handleDialogOpen()}\r\n            >\r\n                Add New Member\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'User Report'}\r\n                data={userList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <MemberEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    editFetchData={editFetchData}\r\n                    setEditFetchData={setEditFetchData}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default UserTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-users\\user-history.jsx",["3160","3161"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { styled } from '@mui/system'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport Avatar from '@mui/material/Avatar'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst UserTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [userList, setUserList] = useState([])\r\n    const { username } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchUser = async () => {\r\n            try {\r\n                let res = await axiosSuperAdminPrexo.post(\r\n                    '/getUsersHistoy/' + username\r\n                )\r\n                if (res.status === 200) {\r\n                    setUserList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchUser()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'image',\r\n            label: 'Profile',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: () => {\r\n                    return <Avatar variant=\"rounded\" src=\"profile\"></Avatar>\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'email',\r\n            label: 'Email',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'contact',\r\n            label: 'Mobile No',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'user_name',\r\n            label: 'User name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'user_type',\r\n            label: 'User Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'CPC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'device_name',\r\n            label: 'Device Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'device_id',\r\n            label: 'Device Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    if (value == 'Active') {\r\n                        return (\r\n                            <div style={{ color: 'green', fontWeight: 'bold' }}>\r\n                                {value}\r\n                            </div>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <div style={{ color: 'red', fontWeight: 'bold' }}>\r\n                                {value}\r\n                            </div>\r\n                        )\r\n                    }\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'last_update_date',\r\n            label: 'Edited Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    if (value !== undefined) {\r\n                        new Date(value).toLocaleString('en-GB', {\r\n                            hour12: true,\r\n                        })\r\n                    }\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Users', path: '/' },\r\n                        { name: 'History' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <MUIDataTable\r\n                title={'User History'}\r\n                data={userList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default UserTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-products\\add-bulk-products.jsx",["3162","3163","3164","3165","3166","3167","3168","3169","3170","3171","3172","3173","3174","3175","3176","3177","3178","3179","3180"],"import {\r\n    IconButton,\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Icon,\r\n    TablePagination,\r\n    Button,\r\n    TextField,\r\n} from '@mui/material'\r\nimport DoneIcon from '@mui/icons-material/Done'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\nimport * as XLSX from 'xlsx'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst StyledTable = styled(Table)(({ theme }) => ({\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& tr': {\r\n            '& th': {\r\n                paddingLeft: 0,\r\n                paddingRight: 0,\r\n            },\r\n        },\r\n    },\r\n    '& tbody': {\r\n        '& tr': {\r\n            '& td': {\r\n                paddingLeft: 0,\r\n                textTransform: 'capitalize',\r\n            },\r\n        },\r\n    },\r\n}))\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst StyledLoading = styled('div')(() => ({\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    '& img': {\r\n        width: 'auto',\r\n        height: '25px',\r\n    },\r\n    '& .circleProgress': {\r\n        position: 'absolute',\r\n        left: -7,\r\n        right: 0,\r\n        top: 'calc(50% - 25px)',\r\n    },\r\n}))\r\n\r\nconst AddBulkProduct = () => {\r\n    const navigate = useNavigate()\r\n    const [validateState, setValidateState] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [err, setErr] = useState({})\r\n    const [item, setItem] = useState([])\r\n    const [exFile, setExfile] = useState(null)\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n        item: [],\r\n    })\r\n\r\n    useEffect(() => {\r\n        setItem((_) =>\r\n            pagination.item\r\n                .slice(\r\n                    (pagination.page - 1) * pagination.size,\r\n                    pagination.page * pagination.size\r\n                )\r\n                .map((d, index) => {\r\n                    d.id = (pagination.page - 1) * pagination.size + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [pagination.page, pagination.item])\r\n\r\n    const importExcel = () => {\r\n        setLoading(true)\r\n        readExcel(exFile)\r\n    }\r\n\r\n    // READ EXCEL FILLE\r\n    const readExcel = async (file) => {\r\n        const promise = new Promise((resolve, reject) => {\r\n            const filReader = new FileReader()\r\n            filReader.readAsArrayBuffer(file)\r\n            filReader.onload = (e) => {\r\n                const bufferArray = e.target.result\r\n                const wb = XLSX.read(bufferArray, { cellDates: true })\r\n                const wsname = wb.SheetNames[0]\r\n                const ws = wb.Sheets[wsname]\r\n                const data = XLSX.utils.sheet_to_json(ws)\r\n                resolve(data)\r\n            }\r\n            filReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n        const data = await promise\r\n        setPagination((p) => ({\r\n            ...p,\r\n            page: 1,\r\n            item: data.map((d, index) => toLowerKeys(d)),\r\n            totalPage: Math.ceil(data.length / p.size),\r\n        }))\r\n        setLoading(false)\r\n    }\r\n    // EXCEL FILE HEADER CONVERT TO LOWERCASE AND GENERATE MUIC CODE\r\n    function toLowerKeys(obj) {\r\n        return Object.keys(obj).reduce((accumulator, key, index) => {\r\n            let muis_code = ''\r\n            let alphebet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n            let numbers = '123456789'\r\n            for (var i = 0; i < 2; i++) {\r\n                muis_code += alphebet.charAt(\r\n                    Math.floor(Math.random() * alphebet.length)\r\n                )\r\n            }\r\n            for (var i = 0; i < 3; i++) {\r\n                muis_code += numbers.charAt(\r\n                    Math.floor(Math.random() * numbers.length)\r\n                )\r\n            }\r\n            accumulator.muic = muis_code\r\n            accumulator.created_at = Date.now()\r\n            accumulator[key.toLowerCase().split('-').join('_')] = obj[key]\r\n            return accumulator\r\n        }, {})\r\n    }\r\n    // API FOR VALIDATE THE DATA\r\n    const validateData = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/bulkValidationProduct',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    showConfirmButton: true,\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setValidateState(true)\r\n                        setLoading(false)\r\n                    }\r\n                })\r\n            } else {\r\n                setErr(res.data.data)\r\n                setLoading(false)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: 'Please Check Errors',\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    // CREATE PRODUCTS API\r\n    const handelSubmit = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/createproducts',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    showConfirmButton: true,\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setLoading(false)\r\n                        navigate('/sup-admin/products')\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: res.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error.response.data.messag,\r\n            })\r\n        }\r\n    }\r\n    const updateFieldChanged = (index) => (e) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.map((data, i) => {\r\n                if (index === data.muic) {\r\n                    return { ...data, [e.target.name]: e.target.value }\r\n                } else {\r\n                    return data\r\n                }\r\n            }),\r\n        }))\r\n    }\r\n    // DATA DELETE FROM ARRAY\r\n    const handelDelete = (muic) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.filter((item) => item.muic != muic),\r\n        }))\r\n    }\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Products', path: '/' },\r\n                        { name: 'Bulk-Product' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Bulk Product\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <h4>Upload file</h4>\r\n                    <Box>\r\n                        <Button\r\n                            sx={{ mb: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => navigate('/sup-admin/products')}\r\n                        >\r\n                            Back to list\r\n                        </Button>\r\n                        <Button\r\n                            sx={{ mb: 2, ml: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={\r\n                                process.env.PUBLIC_URL +\r\n                                '/bulk -product-sheet-sample.xlsx'\r\n                            }\r\n                            download\r\n                        >\r\n                            Download Sample Sheet\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        mb: 5,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        size=\"small\"\r\n                        inputProps={{ accept: '.csv,.xlsx,.xls' }}\r\n                        onChange={(e) => {\r\n                            setExfile(e.target.files[0])\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        type=\"file\"\r\n                    />\r\n                    {item.length == 0 ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={loading || exFile == null}\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            onClick={(e) => {\r\n                                importExcel(e)\r\n                            }}\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    ) : validateState ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelSubmit(e)\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={loading}\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            onClick={(e) => {\r\n                                validateData(e)\r\n                            }}\r\n                        >\r\n                            Validate Data\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                <StyledTable>\r\n                    {item.length != 0 && loading !== true ? (\r\n                        <>\r\n                            <StyledTable>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>S.NO</TableCell>\r\n                                        <TableCell>Vendor SKU ID</TableCell>\r\n                                        <TableCell>Brand Name</TableCell>\r\n                                        <TableCell>Model Name</TableCell>\r\n                                        <TableCell>Vendor Name</TableCell>\r\n                                        <TableCell>Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {item.map((data) => (\r\n                                        <TableRow key={data.muic} tabIndex={-1}>\r\n                                            <TableCell>{data.id}</TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.muic\r\n                                                    )}\r\n                                                    type=\"text\"\r\n                                                    name=\"vendor_sku_id\"\r\n                                                    value={data.vendor_sku_id?.toString()}\r\n                                                />\r\n                                                {err?.duplicate_vendor_iD?.includes(\r\n                                                    data.vendor_sku_id\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.duplicate_vendor_iD?.includes(\r\n                                                    data.vendor_sku_id\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Duplicate Vendor Sku Id\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.muic\r\n                                                    )}\r\n                                                    type=\"text\"\r\n                                                    name=\"brand_name\"\r\n                                                    value={data.brand_name?.toString()}\r\n                                                />\r\n                                                {err?.brand_name?.includes(\r\n                                                    data.brand_name\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.brand_name?.includes(\r\n                                                    data.brand_name\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Brand Name Does Not\r\n                                                        Exist\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.muic\r\n                                                    )}\r\n                                                    type=\"text\"\r\n                                                    name=\"model_name\"\r\n                                                    value={data.model_name?.toString()}\r\n                                                />\r\n                                                {err?.model_name?.includes(\r\n                                                    data.model_name\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.model_name?.includes(\r\n                                                    data.model_name\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Duplicate Model Name\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.muic\r\n                                                    )}\r\n                                                    type=\"text\"\r\n                                                    name=\"vendor_name\"\r\n                                                    value={data.vendor_name?.toString()}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {err?.duplicate_vendor_iD?.includes(\r\n                                                    data.vendor_sku_id\r\n                                                ) == true ||\r\n                                                err?.brand_name?.includes(\r\n                                                    data.brand_name\r\n                                                ) == true ||\r\n                                                err?.model_name?.includes(\r\n                                                    data.model_name\r\n                                                ) == true ? (\r\n                                                    <Button\r\n                                                        sx={{\r\n                                                            ml: 2,\r\n                                                        }}\r\n                                                        variant=\"contained\"\r\n                                                        style={{\r\n                                                            backgroundColor:\r\n                                                                'red',\r\n                                                        }}\r\n                                                        component=\"span\"\r\n                                                        onClick={() => {\r\n                                                            if (\r\n                                                                window.confirm(\r\n                                                                    'You Want to Remove?'\r\n                                                                )\r\n                                                            ) {\r\n                                                                handelDelete(\r\n                                                                    data.muic\r\n                                                                )\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        Remove\r\n                                                    </Button>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </StyledTable>\r\n                        </>\r\n                    ) : item.length != 0 ? (\r\n                        <StyledLoading>\r\n                            <Box position=\"relative\">\r\n                                <img\r\n                                    src=\"/assets/images/logo-circle.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                <CircularProgress className=\"circleProgress\">\r\n                                    <p>Please Wait...</p>\r\n                                </CircularProgress>\r\n                            </Box>\r\n                        </StyledLoading>\r\n                    ) : null}\r\n                    {pagination.item.length != 0 && loading != true ? (\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'end',\r\n                                mt: 1,\r\n                                mr: 3,\r\n                                ml: 3,\r\n                            }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                sx={{ m: 1 }}\r\n                                disabled={pagination.page === 1}\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) =>\r\n                                    setPagination((p) => ({\r\n                                        ...p,\r\n                                        page: --p.page,\r\n                                    }))\r\n                                }\r\n                            >\r\n                                Previous\r\n                            </Button>\r\n\r\n                            <h6 style={{ marginTop: '19px' }}>\r\n                                {pagination.page}/{pagination.totalPage}\r\n                            </h6>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                sx={{ m: 1 }}\r\n                                disabled={\r\n                                    pagination.page === pagination.totalPage\r\n                                }\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) =>\r\n                                    setPagination((p) => ({\r\n                                        ...p,\r\n                                        page: ++p.page,\r\n                                    }))\r\n                                }\r\n                            >\r\n                                Next\r\n                            </Button>\r\n                        </Box>\r\n                    ) : null}\r\n                </StyledTable>\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default AddBulkProduct\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Merge\\Mmt-merge\\mmt-tray.jsx",["3181","3182"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    DialogTitle,\r\n    IconButton,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const navigate = useNavigate()\r\n    const [mmtTray, setMmtTray] = useState([])\r\n    const [open, setOpen] = useState(false)\r\n    const [sortingAgent, setSortingAgent] = useState([])\r\n    const [toMmtTray, setToMmtTray] = useState([])\r\n    const [mergreData, setMergeData] = useState({\r\n        fromTray: '',\r\n        toTray: '',\r\n        sort_agent: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { location } = jwt_decode(token)\r\n                    let res = await axiosMisUser.post(\r\n                        '/getClosedMmtTray/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setMmtTray(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { location } = jwt_decode(token)\r\n                    let res = await axiosMisUser.post(\r\n                        '/getSortingAgentMergeMmt/' + location\r\n                    )\r\n                    if (res.status === 200) {\r\n                        setSortingAgent(res.data.data)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    /* OPEN DIALOG BOX */\r\n    const handelMerge = async (e, trayId, itemsCount) => {\r\n        e.preventDefault()\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { location } = jwt_decode(token)\r\n                let res = await axiosMisUser.post(\r\n                    '/toMmtTrayForMerge/' +\r\n                        trayId +\r\n                        '/' +\r\n                        location +\r\n                        '/' +\r\n                        itemsCount\r\n                )\r\n                if (res.status === 200) {\r\n                    setOpen(true)\r\n                    setToMmtTray(res.data.data)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n                setMergeData((p) => ({ ...p, fromTray: trayId }))\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /* REQUEST SEND TO WAREHOUSE */\r\n    const handelSendRequest = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let res = await axiosMisUser.post(\r\n                '/TrayMergeRequestSend',\r\n                mergreData\r\n            )\r\n            if (res.status === 200) {\r\n                alert(res.data.message)\r\n                handleClose()\r\n                setIsAlive((isAlive) => !isAlive)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/mis/merge/mmt/view-item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code', // field name in the row object\r\n            label: 'Tray Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta?.rowData[2],\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_wharehouse',\r\n            label: 'Closed Time Warehouse',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    handelViewTray(e, value)\r\n                                }}\r\n                                style={{ backgroundColor: 'primery' }}\r\n                            >\r\n                                View\r\n                            </Button>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    handelMerge(\r\n                                        e,\r\n                                        value,\r\n                                        tableMeta?.rowData[3].length\r\n                                    )\r\n                                }}\r\n                                style={{ backgroundColor: 'primery' }}\r\n                            >\r\n                                Merge\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Tray Merge\r\n                </BootstrapDialogTitle>\r\n\r\n                <DialogContent dividers>\r\n                    <FormControl fullWidth>\r\n                        <InputLabel\r\n                            sx={{ pt: 2 }}\r\n                            id=\"demo-simple-select-label\"\r\n                        >\r\n                            To MMT Tray\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            label=\"Cpc\"\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        >\r\n                            {toMmtTray.map((data) => (\r\n                                <MenuItem\r\n                                    onClick={(e) => {\r\n                                        setMergeData((p) => ({\r\n                                            ...p,\r\n                                            toTray: data.code,\r\n                                        }))\r\n                                    }}\r\n                                    value={data.code}\r\n                                >\r\n                                    {data.code} - ({data.items.length})\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl fullWidth>\r\n                        <InputLabel\r\n                            sx={{ pt: 2 }}\r\n                            id=\"demo-simple-select-label\"\r\n                        >\r\n                            Sorting Agent\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            label=\"Cpc\"\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        >\r\n                            {sortingAgent.map((data) => (\r\n                                <MenuItem\r\n                                    onClick={(e) => {\r\n                                        setMergeData((p) => ({\r\n                                            ...p,\r\n                                            sort_agent: data.user_name,\r\n                                        }))\r\n                                    }}\r\n                                    value={data.user_name}\r\n                                >\r\n                                    {data.user_name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            mergreData.sort_agent === '' ||\r\n                            mergreData.toTray === ''\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelSendRequest(e)\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Merge', path: '/' },\r\n                        { name: 'MMT' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Mmt Tray'}\r\n                data={mmtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Merge\\Mmt-merge\\view-item.jsx",["3183","3184"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { axiosBot } from '../../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosBot.post('/trayItem/' + trayId)\r\n                if (res.status == 200) {\r\n                    setTrayData(res.data.data?.items)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Tray', path: '/' },\r\n                        { name: 'Tray-Item', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst columns = [\r\n    {\r\n        name: 'index',\r\n        label: 'Record No',\r\n        options: {\r\n            filter: true,\r\n            sort: true,\r\n            customBodyRender: (rowIndex, dataIndex) => dataIndex.rowIndex + 1,\r\n        },\r\n    },\r\n    {\r\n        name: 'uic',\r\n        label: 'UIC',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'imei',\r\n        label: 'IMEI',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'bag_id',\r\n        label: 'Bag Id',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'body_damage',\r\n        label: 'Body Damage',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'body_damage_des',\r\n        label: 'Body Damage Description',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'item_recieved',\r\n        label: 'Item Received In Packet',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'model_brand',\r\n        label: 'Mismatched Model Brand Name',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerOne',\r\n        label: 'Other Info 1',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerTwo',\r\n        label: 'Other Info 2',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerThree',\r\n        label: 'Other Info 3',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerFour',\r\n        label: 'Other Info 4',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'added_time',\r\n        label: 'Added Date',\r\n        options: {\r\n            filter: true,\r\n            customBodyRender: (value) =>\r\n                new Date(value).toLocaleString('en-GB', {\r\n                    hour12: true,\r\n                }),\r\n        },\r\n    },\r\n]\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Uic-manage\\uic-generated.jsx",["3185","3186","3187","3188","3189","3190","3191","3192","3193","3194","3195","3196","3197","3198","3199","3200"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport * as FileSaver from 'file-saver'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    Checkbox,\r\n    Box,\r\n    MenuItem,\r\n    TextField,\r\n    Button\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const navigate = useNavigate()\r\n    const [isCheckAll, setIsCheckAll] = useState(false)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState(0)\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let obj = {\r\n                        status: 'Created',\r\n                        location: location,\r\n                        page: page,\r\n                        size: rowsPerPage,\r\n                    }\r\n                    let res = await axiosMisUser.post('/uicGeneratedRecon', obj)\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setDeliveryCount(res.data.count)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, isAlive])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleSelectAll = (e) => {\r\n        setIsCheckAll(!isCheckAll)\r\n        setIsCheck(item.map((li, index) => index.toString()))\r\n        if (isCheckAll) {\r\n            setIsCheck([])\r\n        }\r\n    }\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 6500,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    const fileType =\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n    const fileExtension = '.xlsx'\r\n\r\n    const exportToCSV = (fileName) => {\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Data')\r\n        } else {\r\n            let arr = []\r\n            let status = false\r\n            let changeStatus = async () => {\r\n                for (let i = 0; i < isCheck.length; i++) {\r\n                    if (item[isCheck[i]].uic_code == undefined) {\r\n                        alert('Please Generate UIC')\r\n                        status = true\r\n                        break\r\n                    } else {\r\n                        try {\r\n                            let res = await axiosMisUser.post(\r\n                                '/changeUicStatus/' + item[isCheck[i]]._id\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        let obj = {\r\n                            UIC: item[isCheck[i]].uic_code?.code,\r\n                            IMEI: item[isCheck[i]]?.order?.imei?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ''\r\n                            ),\r\n                            Model: item[\r\n                                isCheck[i]\r\n                            ]?.order?.old_item_details?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ' '\r\n                            ),\r\n                        }\r\n                        arr.push(obj)\r\n                    }\r\n                }\r\n                if (status == false) {\r\n                    download(arr, fileName)\r\n                }\r\n            }\r\n            changeStatus()\r\n        }\r\n    }\r\n    function download(arr, fileName) {\r\n        const ws = XLSX.utils.json_to_sheet(arr)\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, fileName + fileExtension)\r\n        setIsCheck([])\r\n        setIsAlive((isAlive) => !isAlive)\r\n    }\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setItem([])\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                        uic_status: 'Created',\r\n                    }\r\n\r\n                    let res = await axiosMisUser.post('/searchUicPage', obj)\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    if (res.status == 200 && res.data.data?.length !== 0) {\r\n                        setItem(res.data.data)\r\n                    } else {\r\n                        alert('No data found')\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            {' '}\r\n                            <Checkbox\r\n                                {...label}\r\n                                onClick={(e) => {\r\n                                    handleSelectAll()\r\n                                }}\r\n                                checked={\r\n                                    item.length == isCheck.length ? true : false\r\n                                }\r\n                            />{' '}\r\n                            Select All\r\n                        </TableCell>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>UIC Status</TableCell>\r\n                        <TableCell>UIC Generated Admin</TableCell>\r\n                        <TableCell>UIC Generated Time</TableCell>\r\n                        <TableCell>UIC Code</TableCell>\r\n                        <TableCell>UIC Downloaded Time</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Actual Delivery Date</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Order TimeStamp</TableCell>\r\n                        <TableCell>Order Status</TableCell>\r\n                        <TableCell>Partner ID</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Base Disscount</TableCell>\r\n                        <TableCell>Diganostic</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>Order ID Replaced</TableCell>\r\n                        <TableCell>Deliverd With OTP</TableCell>\r\n                        <TableCell>Deliverd With Bag Exception</TableCell>\r\n                        <TableCell>GC Amount Redeemed</TableCell>\r\n                        <TableCell>GC Amount Refund</TableCell>\r\n                        <TableCell>GC Redeem Time</TableCell>\r\n                        <TableCell>GC Amount Refund Time</TableCell>\r\n                        <TableCell>Diagonstic Status</TableCell>\r\n                        <TableCell>VC Eligible</TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>Partner Price No Defect</TableCell>\r\n                        <TableCell>Revised Partner Price</TableCell>\r\n                        <TableCell>Delivery Fee</TableCell>\r\n                        <TableCell>Exchange Facilitation Fee</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Gep Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diganostic Discount</TableCell>\r\n                        <TableCell>Storage Discount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorstep Diganostic</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>\r\n                                {' '}\r\n                                <Checkbox\r\n                                    {...label}\r\n                                    onClick={(e) => {\r\n                                        handleClick(e)\r\n                                    }}\r\n                                    id={index}\r\n                                    key={index}\r\n                                    checked={isCheck.includes(\r\n                                        index?.toString()\r\n                                    )}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.uic_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : data.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.uic_code?.user}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.uic_code?.created_at == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.uic_code?.created_at\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data?.uic_code?.code}</TableCell>\r\n                            <TableCell>\r\n                                {data?.download_time == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data?.download_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell style={{ color: 'green' }}>\r\n                                {data.order.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data?.delivery_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_date == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          year: 'numeric',\r\n                                          month: '2-digit',\r\n                                          day: '2-digit',\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.order_timestamp == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_timestamp\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_status?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.partner_id?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.item_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.old_item_details?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.imei?.toString()}</TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.diagnostic}</TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_purchase_price}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.tracking_id}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.order.delivery_date == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id_replaced}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_otp}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_bag_exception}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_redeemed?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.gc_redeem_time == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.gc_redeem_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund_time?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.diagnstic_status?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.vc_eligible?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_present?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_type?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_price_no_defect?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.revised_partner_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.delivery_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.$exchange_facilitation_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>{data.gep_order?.toString()}</TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, isCheck, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'UIC-Manage', path: '/' },\r\n                        { name: 'UIC-Generated' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n            <Box>\r\n                <TextField\r\n                    select\r\n                    label=\"Select\"\r\n                    variant=\"outlined\"\r\n                    sx={{ mb: 1, width: '140px' }}\r\n                    onChange={(e) => {\r\n                        setSearch((p) => ({ ...p, type: e.target.value }))\r\n                    }}\r\n                >\r\n                    <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                    <MenuItem value=\"uic\">UIC</MenuItem>\r\n                    <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                    <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                    <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                </TextField>\r\n                <TextField\r\n                    onChange={(e) => {\r\n                        searchOrders(e)\r\n                    }}\r\n                    disabled={search.type == '' ? true : false}\r\n                    label=\"Search\"\r\n                    variant=\"outlined\"\r\n                    sx={{ ml: 2, mb: 1 }}\r\n                />\r\n                 </Box>\r\n                 <Box>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ m: 1 }}\r\n                        onClick={(e) => {\r\n                            exportToCSV('UIC-Printing-Sheet')\r\n                        }}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Uic-manage\\uic-downloaded.jsx",["3201","3202","3203","3204","3205","3206","3207","3208","3209","3210","3211","3212","3213","3214","3215","3216"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport * as FileSaver from 'file-saver'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    Checkbox,\r\n    Box,\r\n    MenuItem,\r\n    TextField,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const navigate = useNavigate()\r\n    const [isCheckAll, setIsCheckAll] = useState(false)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState(0)\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let obj = {\r\n                        status: 'Printed',\r\n                        location: location,\r\n                        page: page,\r\n                        size: rowsPerPage,\r\n                    }\r\n                    let res = await axiosMisUser.post('/uicGeneratedRecon', obj)\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setDeliveryCount(res.data.count)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, isAlive])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleSelectAll = (e) => {\r\n        setIsCheckAll(!isCheckAll)\r\n        setIsCheck(item.map((li, index) => index.toString()))\r\n        if (isCheckAll) {\r\n            setIsCheck([])\r\n        }\r\n    }\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 6500,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    const fileType =\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n    const fileExtension = '.xlsx'\r\n\r\n    const exportToCSV = (fileName) => {\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Data')\r\n        } else {\r\n            let arr = []\r\n            let status = false\r\n            let changeStatus = async () => {\r\n                for (let i = 0; i < isCheck.length; i++) {\r\n                    if (item[isCheck[i]].uic_code == undefined) {\r\n                        alert('Please Generate UIC')\r\n                        status = true\r\n                        break\r\n                    } else {\r\n                        try {\r\n                            let res = await axiosMisUser.post(\r\n                                '/changeUicStatus/' + item[isCheck[i]]._id\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        let obj = {\r\n                            UIC: item[isCheck[i]].uic_code?.code,\r\n                            IMEI: item[isCheck[i]]?.order?.imei?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ''\r\n                            ),\r\n                            Model: item[\r\n                                isCheck[i]\r\n                            ]?.order?.old_item_details?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ' '\r\n                            ),\r\n                        }\r\n                        arr.push(obj)\r\n                    }\r\n                }\r\n                if (status == false) {\r\n                    download(arr, fileName)\r\n                }\r\n            }\r\n            changeStatus()\r\n        }\r\n    }\r\n    function download(arr, fileName) {\r\n        const ws = XLSX.utils.json_to_sheet(arr)\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, fileName + fileExtension)\r\n        setIsCheck([])\r\n        setIsAlive((isAlive) => !isAlive)\r\n    }\r\n\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setItem([])\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                        uic_status: 'Printed',\r\n                    }\r\n\r\n                    let res = await axiosMisUser.post('/searchUicPage', obj)\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    if (res.status == 200 && res.data.data?.length !== 0) {\r\n                        setItem(res.data.data)\r\n                    } else {\r\n                        alert('No data found')\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            {' '}\r\n                            <Checkbox\r\n                                {...label}\r\n                                onClick={(e) => {\r\n                                    handleSelectAll()\r\n                                }}\r\n                                checked={\r\n                                    item.length == isCheck.length ? true : false\r\n                                }\r\n                            />{' '}\r\n                            Select All\r\n                        </TableCell>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>UIC Status</TableCell>\r\n                        <TableCell>UIC Generated Admin</TableCell>\r\n                        <TableCell>UIC Generated Time</TableCell>\r\n                        <TableCell>UIC Code</TableCell>\r\n                        <TableCell>UIC Downloaded Time</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Actual Delivery Date</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Order TimeStamp</TableCell>\r\n                        <TableCell>Order Status</TableCell>\r\n                        <TableCell>Partner ID</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Base Disscount</TableCell>\r\n                        <TableCell>Diganostic</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>Order ID Replaced</TableCell>\r\n                        <TableCell>Deliverd With OTP</TableCell>\r\n                        <TableCell>Deliverd With Bag Exception</TableCell>\r\n                        <TableCell>GC Amount Redeemed</TableCell>\r\n                        <TableCell>GC Amount Refund</TableCell>\r\n                        <TableCell>GC Redeem Time</TableCell>\r\n                        <TableCell>GC Amount Refund Time</TableCell>\r\n                        <TableCell>Diagonstic Status</TableCell>\r\n                        <TableCell>VC Eligible</TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>Partner Price No Defect</TableCell>\r\n                        <TableCell>Revised Partner Price</TableCell>\r\n                        <TableCell>Delivery Fee</TableCell>\r\n                        <TableCell>Exchange Facilitation Fee</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Gep Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diganostic Discount</TableCell>\r\n                        <TableCell>Storage Discount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorstep Diganostic</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>\r\n                                {' '}\r\n                                <Checkbox\r\n                                    {...label}\r\n                                    onClick={(e) => {\r\n                                        handleClick(e)\r\n                                    }}\r\n                                    id={index}\r\n                                    key={index}\r\n                                    checked={isCheck.includes(\r\n                                        index?.toString()\r\n                                    )}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.uic_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : data.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.uic_code?.user}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.uic_code?.created_at == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.uic_code?.created_at\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data?.uic_code?.code}</TableCell>\r\n                            <TableCell>\r\n                                {data?.download_time == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data?.download_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell style={{ color: 'green' }}>\r\n                                {data.order.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data?.delivery_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_date == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          year: 'numeric',\r\n                                          month: '2-digit',\r\n                                          day: '2-digit',\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.order_timestamp == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_timestamp\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_status?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.partner_id?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.item_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.old_item_details?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.imei?.toString()}</TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.diagnostic}</TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_purchase_price}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.tracking_id}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.order.delivery_date == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id_replaced}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_otp}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_bag_exception}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_redeemed?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.gc_redeem_time == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.gc_redeem_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund_time?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.diagnstic_status?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.vc_eligible?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_present?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_type?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_price_no_defect?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.revised_partner_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.delivery_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.$exchange_facilitation_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>{data.gep_order?.toString()}</TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, isCheck, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'UIC-Manage', path: '/' },\r\n                        { name: 'UIC-Downloaded' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"uic\">UIC</MenuItem>\r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchOrders(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ m: 1 }}\r\n                        onClick={(e) => {\r\n                            exportToCSV('UIC-Printing-Sheet')\r\n                        }}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Uic-manage\\uic-not-generated.jsx",["3217","3218","3219","3220","3221","3222","3223","3224","3225","3226","3227","3228","3229","3230","3231","3232","3233","3234","3235","3236"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport * as FileSaver from 'file-saver'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    Checkbox,\r\n    Box,\r\n    MenuItem,\r\n    TextField,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const navigate = useNavigate()\r\n    const [isCheckAll, setIsCheckAll] = useState(false)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState(0)\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let obj = {\r\n                        status: 'Pending',\r\n                        location: location,\r\n                        page: page,\r\n                        size: rowsPerPage,\r\n                    }\r\n                    let res = await axiosMisUser.post('/uicGeneratedRecon', obj)\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setDeliveryCount(res.data.count)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, isAlive])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleSelectAll = (e) => {\r\n        setIsCheckAll(!isCheckAll)\r\n        setIsCheck(item.map((li, index) => index.toString()))\r\n        if (isCheckAll) {\r\n            setIsCheck([])\r\n        }\r\n    }\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 6500,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const handelUicGen = (e) => {\r\n        e.preventDefault()\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Delivered Data')\r\n        } else {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { user_name } = jwt_decode(token)\r\n\r\n                const addUic = async () => {\r\n                    let count = 0\r\n                    for (let i = 0; i < isCheck.length; i++) {\r\n                        if (item[isCheck[i]].uic_status != 'Pending') {\r\n                            alert('Already UIC Created')\r\n\r\n                            break\r\n                        }\r\n                        try {\r\n                            let obj = {\r\n                                _id: item[isCheck[i]]?._id,\r\n                                email: user_name,\r\n                                created_at: Date.now(),\r\n                            }\r\n                            let res = await axiosMisUser.post(\r\n                                '/addUicCode',\r\n                                obj\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        count++\r\n                    }\r\n                    if (count == isCheck.length) {\r\n                        alert('Successfully Generated')\r\n                        setIsCheck([])\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                }\r\n                addUic()\r\n            }\r\n        }\r\n    }\r\n\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    const fileType =\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n    const fileExtension = '.xlsx'\r\n\r\n    const exportToCSV = (fileName) => {\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Data')\r\n        } else {\r\n            let arr = []\r\n            let status = false\r\n            let changeStatus = async () => {\r\n                for (let i = 0; i < isCheck.length; i++) {\r\n                    if (item[isCheck[i]].uic_code == undefined) {\r\n                        alert('Please Generate UIC')\r\n                        status = true\r\n                        break\r\n                    } else {\r\n                        try {\r\n                            let res = await axiosMisUser.post(\r\n                                '/changeUicStatus/' + item[isCheck[i]]._id\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        let obj = {\r\n                            UIC: item[isCheck[i]].uic_code?.code,\r\n                            IMEI: item[isCheck[i]]?.order?.imei?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ''\r\n                            ),\r\n                            Model: item[\r\n                                isCheck[i]\r\n                            ]?.order?.old_item_details?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ' '\r\n                            ),\r\n                        }\r\n                        arr.push(obj)\r\n                    }\r\n                }\r\n                if (status == false) {\r\n                    download(arr, fileName)\r\n                }\r\n            }\r\n            changeStatus()\r\n        }\r\n    }\r\n    function download(arr, fileName) {\r\n        const ws = XLSX.utils.json_to_sheet(arr)\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, fileName + fileExtension)\r\n        setIsCheck([])\r\n        setIsAlive((isAlive) => !isAlive)\r\n    }\r\n\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setItem([])\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                        uic_status: 'Pending',\r\n                    }\r\n\r\n                    let res = await axiosMisUser.post('/searchUicPage', obj)\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    if (res.status == 200 && res.data.data?.length !== 0) {\r\n                        setItem(res.data.data)\r\n                    } else {\r\n                        alert('No data found')\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            {' '}\r\n                            <Checkbox\r\n                                {...label}\r\n                                onClick={(e) => {\r\n                                    handleSelectAll()\r\n                                }}\r\n                                checked={\r\n                                    item.length == isCheck.length ? true : false\r\n                                }\r\n                            />{' '}\r\n                            Select All\r\n                        </TableCell>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>UIC Status</TableCell>\r\n                        <TableCell>UIC Generated Admin</TableCell>\r\n                        <TableCell>UIC Generated Time</TableCell>\r\n                        <TableCell>UIC Code</TableCell>\r\n                        <TableCell>UIC Downloaded Time</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Actual Delivery Date</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Order TimeStamp</TableCell>\r\n                        <TableCell>Order Status</TableCell>\r\n                        <TableCell>Partner ID</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Base Disscount</TableCell>\r\n                        <TableCell>Diganostic</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>Order ID Replaced</TableCell>\r\n                        <TableCell>Deliverd With OTP</TableCell>\r\n                        <TableCell>Deliverd With Bag Exception</TableCell>\r\n                        <TableCell>GC Amount Redeemed</TableCell>\r\n                        <TableCell>GC Amount Refund</TableCell>\r\n                        <TableCell>GC Redeem Time</TableCell>\r\n                        <TableCell>GC Amount Refund Time</TableCell>\r\n                        <TableCell>Diagonstic Status</TableCell>\r\n                        <TableCell>VC Eligible</TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>Partner Price No Defect</TableCell>\r\n                        <TableCell>Revised Partner Price</TableCell>\r\n                        <TableCell>Delivery Fee</TableCell>\r\n                        <TableCell>Exchange Facilitation Fee</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Gep Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diganostic Discount</TableCell>\r\n                        <TableCell>Storage Discount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorstep Diganostic</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>\r\n                                {' '}\r\n                                <Checkbox\r\n                                    {...label}\r\n                                    onClick={(e) => {\r\n                                        handleClick(e)\r\n                                    }}\r\n                                    id={index}\r\n                                    key={index}\r\n                                    checked={isCheck.includes(\r\n                                        index?.toString()\r\n                                    )}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.uic_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : data.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.uic_code?.user}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.uic_code?.created_at == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.uic_code?.created_at\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data?.uic_code?.code}</TableCell>\r\n                            <TableCell>\r\n                                {data?.download_time == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data?.download_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell style={{ color: 'green' }}>\r\n                                {data.order.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data?.delivery_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_date == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          year: 'numeric',\r\n                                          month: '2-digit',\r\n                                          day: '2-digit',\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.order_timestamp == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_timestamp\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_status?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.partner_id?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.item_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.old_item_details?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.imei?.toString()}</TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.diagnostic}</TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_purchase_price}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.tracking_id}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.order.delivery_date == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id_replaced}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_otp}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_bag_exception}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_redeemed?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.gc_redeem_time == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.gc_redeem_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund_time?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.diagnstic_status?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.vc_eligible?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_present?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_type?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_price_no_defect?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.revised_partner_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.delivery_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.$exchange_facilitation_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>{data.gep_order?.toString()}</TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, isCheck, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'UIC-Manage', path: '/' },\r\n                        { name: 'UIC-Not-Generated' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"uic\">UIC</MenuItem>\r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchOrders(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ mb: 2, m: 1 }}\r\n                        style={{ backgroundColor: 'primery' }}\r\n                        onClick={(e) => {\r\n                            handelUicGen(e)\r\n                        }}\r\n                    >\r\n                        Generate UIC\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ m: 1 }}\r\n                        onClick={(e) => {\r\n                            exportToCSV('UIC-Printing-Sheet')\r\n                        }}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Uic-manage\\all.jsx",["3237","3238","3239","3240","3241","3242","3243","3244","3245","3246","3247","3248","3249","3250","3251","3252","3253","3254","3255","3256"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport * as FileSaver from 'file-saver'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    Checkbox,\r\n    MenuItem,\r\n    TextField,\r\n    Box,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const navigate = useNavigate()\r\n    const [isCheckAll, setIsCheckAll] = useState(false)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState(0)\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post(\r\n                        '/uicPageData/' +\r\n                            location +\r\n                            '/' +\r\n                            page +\r\n                            '/' +\r\n                            rowsPerPage\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setDeliveryCount(res.data.count)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, isAlive])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleSelectAll = (e) => {\r\n        setIsCheckAll(!isCheckAll)\r\n        setIsCheck(item.map((li, index) => index.toString()))\r\n        if (isCheckAll) {\r\n            setIsCheck([])\r\n        }\r\n    }\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 5050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    const fileType =\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n    const fileExtension = '.xlsx'\r\n\r\n    const exportToCSV = (fileName) => {\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Data')\r\n        } else {\r\n            let arr = []\r\n            let status = false\r\n            let changeStatus = async () => {\r\n                for (let i = 0; i < isCheck.length; i++) {\r\n                    if (item[isCheck[i]].uic_code == undefined) {\r\n                        alert('Please Generate UIC')\r\n                        status = true\r\n                        break\r\n                    } else {\r\n                        try {\r\n                            let res = await axiosMisUser.post(\r\n                                '/changeUicStatus/' + item[isCheck[i]]._id\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        let obj = {\r\n                            UIC: item[isCheck[i]].uic_code?.code,\r\n                            IMEI: item[isCheck[i]]?.order?.imei?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ''\r\n                            ),\r\n                            Model: item[\r\n                                isCheck[i]\r\n                            ]?.order?.old_item_details?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ' '\r\n                            ),\r\n                        }\r\n                        arr.push(obj)\r\n                    }\r\n                }\r\n                if (status == false) {\r\n                    download(arr, fileName)\r\n                }\r\n            }\r\n            changeStatus()\r\n        }\r\n    }\r\n    function download(arr, fileName) {\r\n        const ws = XLSX.utils.json_to_sheet(arr)\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, fileName + fileExtension)\r\n        setIsCheck([])\r\n        setIsAlive((isAlive) => !isAlive)\r\n    }\r\n    const handelUicGen = (e) => {\r\n        e.preventDefault()\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Delivered Data')\r\n        } else {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { user_name } = jwt_decode(token)\r\n\r\n                const addUic = async () => {\r\n                    let count = 0\r\n                    for (let i = 0; i < isCheck.length; i++) {\r\n                        if (item[isCheck[i]].uic_status != 'Pending') {\r\n                            alert('Already UIC Created')\r\n\r\n                            break\r\n                        }\r\n                        try {\r\n                            let obj = {\r\n                                _id: item[isCheck[i]]?._id,\r\n                                email: user_name,\r\n                                created_at: Date.now(),\r\n                            }\r\n                            let res = await axiosMisUser.post(\r\n                                '/addUicCode',\r\n                                obj\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        count++\r\n                    }\r\n                    if (count == isCheck.length) {\r\n                        alert('Successfully Generated')\r\n                        setIsCheck([])\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                }\r\n                addUic()\r\n            }\r\n        }\r\n    }\r\n\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setItem([])\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                    }\r\n                    let res = await axiosMisUser.post('/searchUicPageAllPage', obj)\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    if (res.status == 200 && res.data.data?.length !== 0) {\r\n                        setItem(res.data.data)\r\n                    } else {\r\n                        alert('No data found')\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            {' '}\r\n                            <Checkbox\r\n                                {...label}\r\n                                onClick={(e) => {\r\n                                    handleSelectAll()\r\n                                }}\r\n                                checked={\r\n                                    item.length == isCheck.length ? true : false\r\n                                }\r\n                            />{' '}\r\n                            Select All\r\n                        </TableCell>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>UIC Status</TableCell>\r\n                        <TableCell>UIC Generated Admin</TableCell>\r\n                        <TableCell>UIC Generated Time</TableCell>\r\n                        <TableCell>UIC Code</TableCell>\r\n                        <TableCell>UIC Downloaded Time</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Actual Delivery Date</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Order TimeStamp</TableCell>\r\n                        <TableCell>Order Status</TableCell>\r\n                        <TableCell>Partner ID</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Base Disscount</TableCell>\r\n                        <TableCell>Diganostic</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>Order ID Replaced</TableCell>\r\n                        <TableCell>Deliverd With OTP</TableCell>\r\n                        <TableCell>Deliverd With Bag Exception</TableCell>\r\n                        <TableCell>GC Amount Redeemed</TableCell>\r\n                        <TableCell>GC Amount Refund</TableCell>\r\n                        <TableCell>GC Redeem Time</TableCell>\r\n                        <TableCell>GC Amount Refund Time</TableCell>\r\n                        <TableCell>Diagonstic Status</TableCell>\r\n                        <TableCell>VC Eligible</TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>Partner Price No Defect</TableCell>\r\n                        <TableCell>Revised Partner Price</TableCell>\r\n                        <TableCell>Delivery Fee</TableCell>\r\n                        <TableCell>Exchange Facilitation Fee</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Gep Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diganostic Discount</TableCell>\r\n                        <TableCell>Storage Discount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorstep Diganostic</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>\r\n                                {' '}\r\n                                <Checkbox\r\n                                    {...label}\r\n                                    onClick={(e) => {\r\n                                        handleClick(e)\r\n                                    }}\r\n                                    id={index}\r\n                                    key={index}\r\n                                    checked={isCheck.includes(\r\n                                        index?.toString()\r\n                                    )}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.uic_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : data.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.uic_code?.user}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.uic_code?.created_at == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.uic_code?.created_at\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data?.uic_code?.code}</TableCell>\r\n                            <TableCell>\r\n                                {data?.download_time == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data?.download_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell style={{ color: 'green' }}>\r\n                                {data.order.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data?.delivery_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_date == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          year: 'numeric',\r\n                                          month: '2-digit',\r\n                                          day: '2-digit',\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.order_timestamp == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_timestamp\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_status?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.partner_id?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.item_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.old_item_details?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.imei?.toString()}</TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.diagnostic}</TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_purchase_price}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.tracking_id}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.order.delivery_date == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id_replaced}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_otp}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_bag_exception}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_redeemed?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.gc_redeem_time == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.gc_redeem_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund_time?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.diagnstic_status?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.vc_eligible?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_present?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_type?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_price_no_defect?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.revised_partner_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.delivery_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.$exchange_facilitation_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>{data.gep_order?.toString()}</TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, isCheck, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'UIC-Manage', path: '/' },\r\n                        { name: 'All' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"uic\">UIC</MenuItem>\r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchOrders(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ m: 1 }}\r\n                        style={{ backgroundColor: 'secondary' }}\r\n                        onClick={(e) => {\r\n                            handelUicGen(e)\r\n                        }}\r\n                    >\r\n                        Generate UIC\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ m: 1 }}\r\n                        onClick={(e) => {\r\n                            exportToCSV('UIC-Printing-Sheet')\r\n                        }}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Recon-sheet\\not-delivered-orders.jsx",["3257","3258","3259","3260","3261","3262","3263","3264","3265","3266","3267","3268","3269"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    MenuItem,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    TextField,\r\n    Box,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState([])\r\n    const navigate = useNavigate()\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post(\r\n                        '/notDeliveredOrders/' +\r\n                            location +\r\n                            '/' +\r\n                            page +\r\n                            '/' +\r\n                            rowsPerPage\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setDeliveryCount(res.data.count)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, isAlive])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 5050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                    }\r\n                    let res = await axiosMisUser.post('/ordersSearch', obj)\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Order TimeStamp</TableCell>\r\n                        <TableCell>Order Status</TableCell>\r\n\r\n                        <TableCell>Partner ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n\r\n                        <TableCell>Base Disscount</TableCell>\r\n                        <TableCell>Diganostic</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>Order ID Replaced</TableCell>\r\n                        <TableCell>Deliverd With OTP</TableCell>\r\n                        <TableCell>Deliverd With Bag Exception</TableCell>\r\n                        <TableCell>GC Amount Redeemed</TableCell>\r\n                        <TableCell>GC Amount Refund</TableCell>\r\n                        <TableCell>GC Redeem Time</TableCell>\r\n                        <TableCell>GC Amount Refund Time</TableCell>\r\n                        <TableCell>Diagonstic Status</TableCell>\r\n                        <TableCell>VC Eligible</TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>Partner Price No Defect</TableCell>\r\n                        <TableCell>Revised Partner Price</TableCell>\r\n                        <TableCell>Delivery Fee</TableCell>\r\n                        <TableCell>Exchange Facilitation Fee</TableCell>\r\n\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Gep Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diganostic Discount</TableCell>\r\n                        <TableCell>Storage Discount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorstep Diganostic</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data?.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.order_date == null\r\n                                    ? ''\r\n                                    : new Date(data.order_date).toLocaleString(\r\n                                          'en-GB',\r\n                                          {\r\n                                              year: 'numeric',\r\n                                              month: '2-digit',\r\n                                              day: '2-digit',\r\n                                          }\r\n                                      )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.order_timestamp == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order_timestamp\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order_status?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>{data.partner_id?.toString()}</TableCell>\r\n\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.old_item_details?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.diagnostic}</TableCell>\r\n                            <TableCell>{data.partner_purchase_price}</TableCell>\r\n                            <TableCell>{data.tracking_id}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.delivery_date == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id_replaced}</TableCell>\r\n                            <TableCell>{data.deliverd_with_otp}</TableCell>\r\n                            <TableCell>\r\n                                {data.deliverd_with_bag_exception}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_amount_redeemed?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_amount_refund?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_redeem_time == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.gc_redeem_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_amount_refund_time?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnstic_status?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.vc_eligible?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.customer_declaration_physical_defect_present?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.customer_declaration_physical_defect_type?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_price_no_defect?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.revised_partner_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.exchange_facilitation_fee?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.delivery?.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.order_id?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.delivery?.item_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.gep_order?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.imei?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Recon-Sheet', path: '/' },\r\n                        { name: 'Not-Delivered-Orders' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Recon-sheet\\delivered-orders.jsx",["3270","3271","3272","3273","3274","3275","3276"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    MenuItem,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    TextField,\r\n    Box,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState([])\r\n    const navigate = useNavigate()\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post(\r\n                        '/getDeliveredOrders/' +\r\n                            location +\r\n                            '/' +\r\n                            page +\r\n                            '/' +\r\n                            rowsPerPage\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setDeliveryCount(res.data.count)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, isAlive])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 5050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                        status:\"Delivered\"\r\n                    }\r\n                    let res = await axiosMisUser.post('/searchDeliveredOrders', obj)\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Order TimeStamp</TableCell>\r\n                        <TableCell>Order Status</TableCell>\r\n\r\n                        <TableCell>Partner ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n\r\n                        <TableCell>Base Disscount</TableCell>\r\n                        <TableCell>Diganostic</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>Order ID Replaced</TableCell>\r\n                        <TableCell>Deliverd With OTP</TableCell>\r\n                        <TableCell>Deliverd With Bag Exception</TableCell>\r\n                        <TableCell>GC Amount Redeemed</TableCell>\r\n                        <TableCell>GC Amount Refund</TableCell>\r\n                        <TableCell>GC Redeem Time</TableCell>\r\n                        <TableCell>GC Amount Refund Time</TableCell>\r\n                        <TableCell>Diagonstic Status</TableCell>\r\n                        <TableCell>VC Eligible</TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>Partner Price No Defect</TableCell>\r\n                        <TableCell>Revised Partner Price</TableCell>\r\n                        <TableCell>Delivery Fee</TableCell>\r\n                        <TableCell>Exchange Facilitation Fee</TableCell>\r\n\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Gep Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diganostic Discount</TableCell>\r\n                        <TableCell>Storage Discount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorstep Diganostic</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data?.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.order_date == null\r\n                                    ? ''\r\n                                    : new Date(data.order_date).toLocaleString(\r\n                                          'en-GB',\r\n                                          {\r\n                                              year: 'numeric',\r\n                                              month: '2-digit',\r\n                                              day: '2-digit',\r\n                                          }\r\n                                      )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.order_timestamp == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order_timestamp\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order_status?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>{data.partner_id?.toString()}</TableCell>\r\n\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.old_item_details?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.diagnostic}</TableCell>\r\n                            <TableCell>{data.partner_purchase_price}</TableCell>\r\n                            <TableCell>{data.tracking_id}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.delivery_date == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id_replaced}</TableCell>\r\n                            <TableCell>{data.deliverd_with_otp}</TableCell>\r\n                            <TableCell>\r\n                                {data.deliverd_with_bag_exception}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_amount_redeemed?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_amount_refund?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_redeem_time == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.gc_redeem_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_amount_refund_time?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnstic_status?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.vc_eligible?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.customer_declaration_physical_defect_present?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.customer_declaration_physical_defect_type?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_price_no_defect?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.revised_partner_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.exchange_facilitation_fee?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.delivery?.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.order_id?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.delivery?.item_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.gep_order?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.imei?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Recon-Sheet', path: '/' },\r\n                        { name: 'Delivered-Orders' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        \r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                      \r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchOrders(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Delivery\\delivery.jsx",["3277","3278","3279","3280","3281","3282","3283","3284","3285","3286","3287"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    MenuItem,\r\n    Box,\r\n    TextField,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState([])\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n    const navigate = useNavigate()\r\n    const [refresh, setRefresh] = useState(false)\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let deliveryCountRes = await axiosMisUser.post(\r\n                        '/getDeliveryCount/' + location\r\n                    )\r\n                    if (deliveryCountRes.status === 200) {\r\n                        setDeliveryCount(deliveryCountRes.data.data)\r\n                    }\r\n                    let res = await axiosMisUser.post(\r\n                        '/getAllDelivery/' +\r\n                            location +\r\n                            '/' +\r\n                            page +\r\n                            '/' +\r\n                            rowsPerPage\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, refresh])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 3050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const searchDelivery = async (e) => {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setRefresh((refresh) => !refresh)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                    }\r\n                    let res = await axiosMisUser.post('/searchDelivery', obj)\r\n                    if (res.status == 200) {\r\n                        setRowsPerPage(10)\r\n                        setPage(0)\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Delivery Imported Date</TableCell>\r\n                        <TableCell>UIC Status</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>GEP Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diagnostics Discount</TableCell>\r\n                        <TableCell>Storage Disscount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorsteps Diagnostics</TableCell>\r\n                        <TableCell>Actual Delivered Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.result.length != 0\r\n                                        ? { color: 'green' }\r\n                                        : { color: 'red' }\r\n                                }\r\n                            >\r\n                                {data.result.length != 0\r\n                                    ? 'Match'\r\n                                    : 'Not Match'}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data.created_at).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        hour12: true,\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.uic_status == 'Printed'\r\n                                        ? { color: 'green' }\r\n                                        : data.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'red' }\r\n                                }\r\n                            >\r\n                                {data.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data?.order_date == null\r\n                                    ? ''\r\n                                    : new Date(data?.order_date).toLocaleString(\r\n                                          'en-GB',\r\n                                          {\r\n                                              year: 'numeric',\r\n                                              month: '2-digit',\r\n                                              day: '2-digit',\r\n                                          }\r\n                                      ) == 'Invalid Date'\r\n                                    ? data?.order_date\r\n                                    : new Date(data?.order_date).toLocaleString(\r\n                                        'en-GB',\r\n                                        {\r\n                                            year: 'numeric',\r\n                                            month: '2-digit',\r\n                                            day: '2-digit',\r\n                                        }\r\n                                    )}\r\n                            </TableCell>\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>{data.gep_order?.toString()}</TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data?.delivery_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Delivery', path: '/' },\r\n                        { name: 'Delivery' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchDelivery(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Button\r\n                        sx={{ mb: 2 }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={(e) => navigate('/mis/delivery/bulk-import')}\r\n                    >\r\n                        Add Bulk Delivery\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Delivery\\badDelivery.jsx",["3288","3289","3290","3291","3292","3293","3294","3295"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    TableFooter,\r\n    MenuItem,\r\n    Box,\r\n    TextField,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\nimport * as FileSaver from 'file-saver'\r\nimport * as XLSX from 'xlsx'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const navigate = useNavigate()\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post(\r\n                        '/getBadDelivery/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((d, index) => {\r\n                    d.id = page * rowsPerPage + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 3050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const download = (e) => {\r\n        const fileExtension = '.xlsx'\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n        const ws = XLSX.utils.json_to_sheet(item)\r\n        ws['!cols'] = []\r\n        ws['!cols'][0] = { hidden: true }\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, 'bad-orders' + fileExtension)\r\n    }\r\n\r\n    const searchDelivery = async (e) => {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setRefresh((refresh) => !refresh)\r\n                } else if (search.type == '') {\r\n                    alert('Please add input')\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                    }\r\n                    let res = await axiosMisUser.post('/searchBadDelivery', obj)\r\n                    if (res.status == 200) {\r\n                        setRowsPerPage(10)\r\n                        setPage(0)\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Delivery', path: '/' },\r\n                        { name: 'Bad-Delivery' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchDelivery(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Button\r\n                        sx={{ mb: 2 }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={(e) => {\r\n                            download(e)\r\n                        }}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                <ProductTable>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Record.NO</TableCell>\r\n                            <TableCell>Delivery Imported Date</TableCell>\r\n                            <TableCell>Tracking ID</TableCell>\r\n                            <TableCell>Order ID</TableCell>\r\n                            <TableCell>Order Date</TableCell>\r\n                            <TableCell>Item ID</TableCell>\r\n                            <TableCell>GEP Order</TableCell>\r\n                            <TableCell>IMEI</TableCell>\r\n                            <TableCell>Partner Purchase Price</TableCell>\r\n                            <TableCell>Partner Shop</TableCell>\r\n                            <TableCell>Base Discount</TableCell>\r\n                            <TableCell>Diagnostics Discount</TableCell>\r\n                            <TableCell>Storage Disscount</TableCell>\r\n                            <TableCell>Buyback Category</TableCell>\r\n                            <TableCell>Doorsteps Diagnostics</TableCell>\r\n                            <TableCell>Delivered Date</TableCell>\r\n                            <TableCell>Reason</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.map((data, index) => (\r\n                            <TableRow tabIndex={-1}>\r\n                                <TableCell>{data.id}</TableCell>\r\n                                <TableCell>\r\n                                    {new Date(data.created_at).toLocaleString(\r\n                                        'en-GB',\r\n                                        {\r\n                                            hour12: true,\r\n                                        }\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.tracking_id?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.order_id?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data?.order_date == null\r\n                                        ? ''\r\n                                        : new Date(\r\n                                              data?.order_date\r\n                                          ).toLocaleString('en-GB', {\r\n                                              year: 'numeric',\r\n                                              month: '2-digit',\r\n                                              day: '2-digit',\r\n                                          })  == 'Invalid Date'\r\n                                        ? data?.order_date\r\n                                        : new Date(data?.order_date).toLocaleString(\r\n                                            'en-GB',\r\n                                            {\r\n                                                year: 'numeric',\r\n                                                month: '2-digit',\r\n                                                day: '2-digit',\r\n                                            }\r\n                                        )}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.item_id?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.gep_order?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>{data.imei?.toString()}</TableCell>\r\n                                <TableCell>\r\n                                    {data.partner_purchase_price?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.partner_shop?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.base_discount?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.diagnostics_discount?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.storage_disscount?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.buyback_category?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.doorsteps_diagnostics?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {new Date(\r\n                                        data?.delivery_date\r\n                                    ).toLocaleString('en-GB', {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    })}\r\n                                </TableCell>\r\n                                <TableCell style={{ color: 'red' }}>\r\n                                    {data?.reason?.join(', ')}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </ProductTable>\r\n                <TableFooter>\r\n                    <TablePagination\r\n                        sx={{ px: 2 }}\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={item.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                        backIconButtonProps={{\r\n                            'aria-label': 'Previous Page',\r\n                        }}\r\n                        nextIconButtonProps={{\r\n                            'aria-label': 'Next Page',\r\n                        }}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={({ target: { value } }) =>\r\n                            setRowsPerPage(value)\r\n                        }\r\n                    />\r\n                </TableFooter>\r\n            </Card>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Delivery\\bulk-import-delivery.jsx",["3296","3297","3298","3299","3300","3301","3302","3303","3304","3305","3306","3307","3308","3309","3310","3311","3312","3313","3314","3315","3316","3317","3318","3319","3320","3321","3322","3323","3324","3325","3326","3327","3328","3329","3330","3331","3332","3333","3334","3335","3336","3337","3338","3339","3340","3341","3342","3343","3344","3345","3346","3347","3348","3349","3350","3351","3352","3353","3354","3355","3356","3357","3358","3359","3360","3361","3362","3363","3364","3365","3366","3367","3368","3369","3370","3371","3372","3373","3374","3375","3376","3377","3378","3379","3380","3381"],"import {\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    TextField,\r\n} from '@mui/material'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport DoneIcon from '@mui/icons-material/Done'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\nimport jwt_decode from 'jwt-decode'\r\nimport * as XLSX from 'xlsx'\r\nimport { axiosMisUser } from '../../../../axios'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport moment from 'moment'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst StyledLoading = styled('div')(() => ({\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    '& img': {\r\n        width: 'auto',\r\n        height: '25px',\r\n    },\r\n    '& .circleProgress': {\r\n        position: 'absolute',\r\n        left: -7,\r\n        right: 0,\r\n        top: 'calc(50% - 25px)',\r\n    },\r\n}))\r\n\r\nconst ProductTable = styled(Table)(() => ({\r\n    minWidth: 750,\r\n    width: 3000,\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& th:first-of-type': {\r\n            paddingLeft: 16,\r\n        },\r\n    },\r\n    '& td': {\r\n        borderBottom: 'none',\r\n    },\r\n    '& td:first-of-type': {\r\n        paddingLeft: '16px !important',\r\n    },\r\n}))\r\n\r\nconst PaginationTable = () => {\r\n    const navigate = useNavigate()\r\n    const [validate, setValidate] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [deliveryData, setDeliveryDate] = useState('')\r\n    const [err, setErr] = useState({})\r\n    const [item, setItem] = useState([])\r\n    const [exFile, setExfile] = useState(null)\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n        item: [],\r\n        totalPage: 0,\r\n    })\r\n\r\n    const importExcel = () => {\r\n        if (exFile == null) {\r\n            alert('Please Select File')\r\n        } else {\r\n            setLoading(true)\r\n            readExcel(exFile)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setItem((_) =>\r\n            pagination.item\r\n                .slice(\r\n                    (pagination.page - 1) * pagination.size,\r\n                    pagination.page * pagination.size\r\n                )\r\n                .map((d, index) => {\r\n                    d.id = (pagination.page - 1) * pagination.size + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [pagination.page, pagination.item])\r\n    const readExcel = async (file) => {\r\n        let aa = file\r\n        const promise = new Promise((resolve, reject) => {\r\n            const filReader = new FileReader()\r\n            filReader.readAsArrayBuffer(file)\r\n            filReader.onload = (e) => {\r\n                const bufferArray = e.target.result\r\n                const wb = XLSX.read(bufferArray, {\r\n                    cellDates: true,\r\n                })\r\n                const wsname = wb.SheetNames[0]\r\n                const ws = wb.Sheets[wsname]\r\n                const data = XLSX.utils.sheet_to_json(ws, { raw: false })\r\n                resolve(data)\r\n            }\r\n            filReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n        const data = await promise\r\n        setPagination((p) => ({\r\n            ...p,\r\n            page: 1,\r\n            item: data.map((d, index) => toLowerKeys(d, index)),\r\n            totalPage: Math.ceil(data.length / p.size),\r\n        }))\r\n        setLoading(false)\r\n    }\r\n    function toLowerKeys(obj, id) {\r\n        return Object.keys(obj).reduce((accumulator, key) => {\r\n            accumulator.created_at = Date.now()\r\n            accumulator[key.toLowerCase().split(' ').join('_')] = obj[key]\r\n            accumulator.delet_id = id\r\n            return accumulator\r\n        }, {})\r\n    }\r\n\r\n    const handelSubmit = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                validItem: [],\r\n                invalidItem: [],\r\n            }\r\n            pagination.item.forEach((data) => {\r\n                data.delivery_date = deliveryData\r\n\r\n                data.reason = []\r\n                if (data?.base_discount !== undefined) {\r\n                    data.base_discount = data.base_discount.toString()\r\n                }\r\n                if(data?.partner_purchase_price !== undefined){\r\n                    data.partner_purchase_price = data.partner_purchase_price.toString() \r\n                }\r\n                if(data?.diagnostics_discount !== undefined){\r\n                    data.diagnostics_discount=data.diagnostics_discount.toString()\r\n                }\r\n                if(data?.storage_discount !== undefined){\r\n                    data.storage_discount =data.storage_discount.toString() \r\n                }\r\n\r\n                if (\r\n                    err?.delivery_date?.includes(data?.order_date) ||\r\n                    data?.order_date == undefined ||\r\n                    data?.order_date == ''\r\n                ) {\r\n                    data.reason.push('Order date does not exists')\r\n                }\r\n                if (\r\n                    err?.duplicate_tracking_id?.includes(data?.tracking_id) ||\r\n                    data?.tracking_id == undefined ||\r\n                    data?.tracking_id == ''\r\n                ) {\r\n                    data.reason.push(\r\n                        'Tracking id is empty or duplicate tracking id'\r\n                    )\r\n                }\r\n                if (err?.tracking_id_digit?.includes(data?.tracking_id)) {\r\n                    data.reason.push('Tracking Id Must Be 12 Digits')\r\n                }\r\n                if (\r\n                    err?.duplicate_order_id_found?.includes(data?.order_id) ||\r\n                    data?.order_id == undefined ||\r\n                    data?.order_id == ''\r\n                ) {\r\n                    data.reason.push('Duplicate order id or order id is empty')\r\n                }\r\n                if (err?.no_orders?.includes(data?.order_id)) {\r\n                    data.reason.push('Order not found')\r\n                }\r\n                if (\r\n                    err?.item_does_not_exist?.includes(data?.item_id) ||\r\n                    data?.item_id == undefined ||\r\n                    data?.item_id == ''\r\n                ) {\r\n                    data.reason.push('Item does not exitsts')\r\n                }\r\n                if (\r\n                    err?.location_does_not_exist?.includes(\r\n                        data?.partner_shop\r\n                    ) ||\r\n                    data?.partner_shop == undefined ||\r\n                    data?.partner_shop == ''\r\n                ) {\r\n                    data.reason.push('Partner shop does not exitsts')\r\n                }\r\n\r\n                if (\r\n                    err?.delivery_date?.includes(data?.order_date) ||\r\n                    data?.order_date == undefined ||\r\n                    data?.order_date == ''\r\n                ) {\r\n                    obj.invalidItem.push(data)\r\n                } else if (\r\n                    err?.duplicate_tracking_id?.includes(data?.tracking_id) ||\r\n                    data?.tracking_id == undefined ||\r\n                    data?.tracking_id == ''\r\n                ) {\r\n                    obj.invalidItem.push(data)\r\n                } else if (\r\n                    err?.tracking_id_digit?.includes(data?.tracking_id)\r\n                ) {\r\n                    obj.invalidItem.push(data)\r\n                } else if (\r\n                    err?.duplicate_order_id_found?.includes(data?.order_id) ||\r\n                    data?.order_id == undefined ||\r\n                    data?.order_id == ''\r\n                ) {\r\n                    obj.invalidItem.push(data)\r\n                } else if (err?.no_orders?.includes(data?.order_id)) {\r\n                    obj.invalidItem.push(data)\r\n                } else if (\r\n                    err?.item_does_not_exist?.includes(data?.item_id) ||\r\n                    data?.item_id == undefined ||\r\n                    data?.item_id == ''\r\n                ) {\r\n                    obj.invalidItem.push(data)\r\n                } else if (\r\n                    err?.location_does_not_exist?.includes(\r\n                        data?.partner_shop\r\n                    ) ||\r\n                    data?.partner_shop == undefined ||\r\n                    data?.partner_shop == ''\r\n                ) {\r\n                    obj.invalidItem.push(data)\r\n                } else {\r\n                    obj.validItem.push(data)\r\n                }\r\n            })\r\n\r\n            let res = await axiosMisUser.post('/importDelivery', obj)\r\n            if (res.status == 200) {\r\n                alert(res.data.message)\r\n                setLoading(false)\r\n                navigate('/mis/delivery')\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelValidate = async () => {\r\n        try {\r\n            if (deliveryData == '') {\r\n                alert('Please Select The Date')\r\n            } else {\r\n                setLoading(true)\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let obj = {\r\n                        item: pagination.item,\r\n                        location: location,\r\n                    }\r\n\r\n                    let res = await axiosMisUser.post(\r\n                        '/bulkValidationDelivery',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        setLoading(false)\r\n                        setValidate(true)\r\n                    } else {\r\n                        setErr(res.data.data)\r\n                        alert('Please Check Errors')\r\n                        setLoading(false)\r\n                        setValidate(true)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    // ----------------------------------------------------------------------------------------------------------------------------\r\n    const updateFieldChanged = (delet_id) => (e) => {\r\n        setValidate(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.map((data, i) => {\r\n                if (data.delet_id === delet_id) {\r\n                    return { ...data, [e.target.name]: e.target.value }\r\n                } else {\r\n                    return data\r\n                }\r\n            }),\r\n        }))\r\n    }\r\n    // DATA DELETE FROM ARRAY\r\n    const handelDelete = (delet_id) => {\r\n        setValidate(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.filter((item) => item.delet_id != delet_id),\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Delivery', path: '/' },\r\n                        { name: 'Bulk Delivery', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Bulk Delivery\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <h4>Upload file</h4>\r\n                    <Box>\r\n                        <Button\r\n                            sx={{ mb: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => navigate('/mis/delivery')}\r\n                        >\r\n                            Back to list\r\n                        </Button>\r\n                        <Button\r\n                            sx={{ mb: 2, ml: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={\r\n                                process.env.PUBLIC_URL +\r\n                                '/bulk-delivery-sheet-sample.xlsx'\r\n                            }\r\n                            download\r\n                        >\r\n                            Download Sample Sheet\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        mb: 5,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        size=\"small\"\r\n                        onChange={(e) => {\r\n                            setExfile(e.target.files[0])\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        type=\"file\"\r\n                    />\r\n                    <TextField\r\n                        size=\"small\"\r\n                        sx={{ mt: 2, width: '300px' }}\r\n                        onChange={(e) => {\r\n                            setDeliveryDate(e.target.value)\r\n                        }}\r\n                        inputProps={{\r\n                            max: moment().format('YYYY-MM-DD'),\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        type=\"date\"\r\n                    />\r\n                    {item.length == 0 ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            onClick={(e) => {\r\n                                importExcel(e)\r\n                            }}\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    ) : validate ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelSubmit(e)\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelValidate(e)\r\n                            }}\r\n                        >\r\n                            Validate Data\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                <>\r\n                    {item.length != 0 && loading !== true ? (\r\n                        <>\r\n                            <Box\r\n                                sx={{ maxHeight: '100%', overflow: 'auto' }}\r\n                                elevation={6}\r\n                            >\r\n                                <ProductTable>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>S.NO</TableCell>\r\n                                            <TableCell>Tracking ID</TableCell>\r\n                                            <TableCell>Order ID</TableCell>\r\n                                            <TableCell>Order Date</TableCell>\r\n                                            <TableCell>Item ID</TableCell>\r\n                                            <TableCell>GEP Order</TableCell>\r\n                                            <TableCell>IMEI</TableCell>\r\n                                            <TableCell>\r\n                                                Partner Purchase Price\r\n                                            </TableCell>\r\n                                            <TableCell>Partner Shop</TableCell>\r\n                                            <TableCell>Base Discount</TableCell>\r\n                                            <TableCell>\r\n                                                Diagnostics Discount\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Storage Disscount\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Buyback Category\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Doorsteps Diagnostics\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {item.map((data, index) => (\r\n                                            <TableRow tabIndex={-1}>\r\n                                                <TableCell>{data.id}</TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"tracking_id\"\r\n                                                        value={data.tracking_id?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.duplicate_tracking_id?.includes(\r\n                                                        data.tracking_id\r\n                                                    ) ||\r\n                                                    err?.tracking_id_digit?.includes(\r\n                                                        data.tracking_id\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.tracking_id ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.tracking_id ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.duplicate_tracking_id?.includes(\r\n                                                        data.tracking_id\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Duplicate Tracking\r\n                                                            ID\r\n                                                        </p>\r\n                                                    ) : err?.tracking_id_digit?.includes(\r\n                                                          data.tracking_id\r\n                                                      ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Tracking Id Must Be\r\n                                                            12 Digits\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data.tracking_id ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data.tracking_id ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Tracking Id Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"order_id\"\r\n                                                        value={data.order_id?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.duplicate_order_id_found?.includes(\r\n                                                        data.order_id\r\n                                                    ) ||\r\n                                                    err?.no_orders?.includes(\r\n                                                        data.order_id\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.order_id ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.order_id == '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.duplicate_order_id_found?.includes(\r\n                                                        data.order_id\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Duplicate Order Id\r\n                                                            Found\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data?.order_id ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data.order_id ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Order Id Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : err?.no_orders?.includes(\r\n                                                          data.order_id\r\n                                                      ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Order not found\r\n                                                        </p>\r\n                                                    ) : null}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"order_date\"\r\n                                                        value={data.order_date?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"item_id\"\r\n                                                        value={data.item_id?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.item_does_not_exist?.includes(\r\n                                                        data.item_id\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.item_id ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.item_id == '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.item_does_not_exist?.includes(\r\n                                                        data.item_id\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Item Does Not Exist\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data?.item_id ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data?.item_id ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Item Does Not Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"gep_order\"\r\n                                                        value={data.gep_order?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"imei\"\r\n                                                        value={data.imei?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"partner_purchase_price\"\r\n                                                        value={data.partner_purchase_price?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"partner_shop\"\r\n                                                        value={data.partner_shop?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.location_does_not_exist?.includes(\r\n                                                        data.partner_shop\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.partner_shop ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.partner_shop ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.location_does_not_exist?.includes(\r\n                                                        data.partner_shop\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            You Can't Add This\r\n                                                            Data\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data?.partner_shop ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data?.partner_shop ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Location Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"base_discount\"\r\n                                                        value={data.base_discount?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"diagnostics_discount\"\r\n                                                        value={data.diagnostics_discount?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"storage_disscount\"\r\n                                                        value={data.storage_disscount?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"buyback_category\"\r\n                                                        value={data.buyback_category?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"doorsteps_diagnostics\"\r\n                                                        value={data.doorsteps_diagnostics?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {(Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.tracking_id ==\r\n                                                            '') ||\r\n                                                    err?.no_orders?.includes(\r\n                                                        data.order_id\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.order_id == '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.item_id == '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.partner_shop ==\r\n                                                            '') ||\r\n                                                    err?.duplicate_tracking_id?.includes(\r\n                                                        data.tracking_id\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.tracking_id ==\r\n                                                            undefined) ||\r\n                                                    err?.duplicate_order_id_found?.includes(\r\n                                                        data.order_id\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.order_id ==\r\n                                                            undefined) ||\r\n                                                    err?.item_does_not_exist?.includes(\r\n                                                        data.item_id\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.item_id ==\r\n                                                            undefined) ||\r\n                                                    err?.location_does_not_exist?.includes(\r\n                                                        data.partner_shop\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.partner_shop ==\r\n                                                            undefined) ? (\r\n                                                        <Button\r\n                                                            sx={{\r\n                                                                ml: 2,\r\n                                                            }}\r\n                                                            variant=\"contained\"\r\n                                                            style={{\r\n                                                                backgroundColor:\r\n                                                                    'red',\r\n                                                            }}\r\n                                                            component=\"span\"\r\n                                                            onClick={() => {\r\n                                                                if (\r\n                                                                    window.confirm(\r\n                                                                        'You Want to Remove?'\r\n                                                                    )\r\n                                                                ) {\r\n                                                                    handelDelete(\r\n                                                                        data.delet_id\r\n                                                                    )\r\n                                                                }\r\n                                                            }}\r\n                                                        >\r\n                                                            Remove\r\n                                                        </Button>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </ProductTable>\r\n                            </Box>\r\n                            {pagination.item.length != 0 ? (\r\n                                <Box\r\n                                    sx={{\r\n                                        display: 'flex',\r\n                                        justifyContent: 'end',\r\n                                        mt: 1,\r\n                                        mr: 3,\r\n                                        ml: 3,\r\n                                    }}\r\n                                >\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        sx={{ m: 1 }}\r\n                                        disabled={pagination.page === 1}\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) =>\r\n                                            setPagination((p) => ({\r\n                                                ...p,\r\n                                                page: --p.page,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Previous\r\n                                    </Button>\r\n\r\n                                    <h6 style={{ marginTop: '19px' }}>\r\n                                        {pagination.page}/{pagination.totalPage}\r\n                                    </h6>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        sx={{ m: 1 }}\r\n                                        disabled={\r\n                                            pagination.page ===\r\n                                            pagination.totalPage\r\n                                        }\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) =>\r\n                                            setPagination((p) => ({\r\n                                                ...p,\r\n                                                page: ++p.page,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Next\r\n                                    </Button>\r\n                                </Box>\r\n                            ) : null}\r\n                        </>\r\n                    ) : item.length != 0 ? (\r\n                        <StyledLoading>\r\n                            <Box position=\"relative\">\r\n                                <img\r\n                                    src=\"/assets/images/logo-circle.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                <CircularProgress className=\"circleProgress\">\r\n                                    <p>Please Wait...</p>\r\n                                </CircularProgress>\r\n                            </Box>\r\n                        </StyledLoading>\r\n                    ) : null}\r\n                </>\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PaginationTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Order\\view-bad-order.jsx",["3382","3383","3384","3385","3386"],"import { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableRow,\r\n    TablePagination,\r\n    TableBody,\r\n    Card,\r\n    TableHead,\r\n    Table,\r\n    TableFooter,\r\n    MenuItem,\r\n    Box,\r\n    TextField,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport * as FileSaver from 'file-saver'\r\nimport * as XLSX from 'xlsx'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const navigate = useNavigate()\r\n    const [rowsPerPage, setRowsPerPage] = useState(10)\r\n    const [page, setPage] = useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [data, setData] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post(\r\n                        '/getBadOrders/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((d, index) => {\r\n                    d.id = page * rowsPerPage + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 5750,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n    const download = (e) => {\r\n        const fileExtension = '.xlsx'\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n        const ws = XLSX.utils.json_to_sheet(item)\r\n        ws['!cols'] = []\r\n        ws['!cols'][0] = { hidden: true }\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, 'bad-orders' + fileExtension)\r\n    }\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setRefresh((refresh) => !refresh)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                    }\r\n                    let res = await axiosMisUser.post('/badOrdersSearch', obj)\r\n                    if (res.status == 200) {\r\n                        setRowsPerPage(10)\r\n                        setPage(0)\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Order', path: '/' },\r\n                        { name: 'Bad-Orders', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"order_status\">\r\n                            Delivery Status\r\n                        </MenuItem>\r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                        <MenuItem value=\"old_item_details\">\r\n                            OLD Item Details\r\n                        </MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchOrders(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Button\r\n                        sx={{ mb: 2 }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={(e) => {\r\n                            download(e)\r\n                        }}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                <ProductTable>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Record.NO</TableCell>\r\n                            <TableCell>Order Imported TimeStamp</TableCell>\r\n                            <TableCell>Order ID</TableCell>\r\n                            <TableCell>Order Date</TableCell>\r\n                            <TableCell>Order TimeStamp</TableCell>\r\n                            <TableCell>Order Status</TableCell>\r\n                            <TableCell>Partner ID</TableCell>\r\n                            <TableCell>Item ID</TableCell>\r\n                            <TableCell>Old Item Details</TableCell>\r\n                            <TableCell>IMEI</TableCell>\r\n                            <TableCell>Base Disscount</TableCell>\r\n                            <TableCell>Diganostic</TableCell>\r\n                            <TableCell>Partner Purchase Price</TableCell>\r\n                            <TableCell>Tracking ID</TableCell>\r\n                            <TableCell>Delivery Date</TableCell>\r\n                            <TableCell>Order ID Replaced</TableCell>\r\n                            <TableCell>Deliverd With OTP</TableCell>\r\n                            <TableCell>Deliverd With Bag Exception</TableCell>\r\n                            <TableCell>GC Amount Redeemed</TableCell>\r\n                            <TableCell>GC Amount Refund</TableCell>\r\n                            <TableCell>GC Redeem Time</TableCell>\r\n                            <TableCell>GC Amount Refund Time</TableCell>\r\n                            <TableCell>Diagonstic Status</TableCell>\r\n                            <TableCell>VC Eligible</TableCell>\r\n                            <TableCell>\r\n                                Customer Declaration Physical Defect Present\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                Customer Declaration Physical Defect Type\r\n                            </TableCell>\r\n                            <TableCell>Partner Price No Defect</TableCell>\r\n                            <TableCell>Revised Partner Price</TableCell>\r\n                            <TableCell>Delivery Fee</TableCell>\r\n                            <TableCell>Exchange Facilitation Fee</TableCell>\r\n                            <TableCell>Reason</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.map((data, index) => (\r\n                            <TableRow tabIndex={-1}>\r\n                                <TableCell>{data.id}</TableCell>\r\n                                <TableCell>\r\n                                    {new Date(data.created_at).toLocaleString(\r\n                                        'en-GB',\r\n                                        {\r\n                                            hour12: true,\r\n                                        }\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.order_id?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data?.order_date == null\r\n                                        ? ''\r\n                                        : new Date(\r\n                                              data.order_date\r\n                                          ).toLocaleString('en-GB', {\r\n                                              year: 'numeric',\r\n                                              month: '2-digit',\r\n                                              day: '2-digit',\r\n                                          })}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data?.order_timestamp == null\r\n                                        ? ''\r\n                                        : new Date(\r\n                                              data.order_timestamp\r\n                                          ).toLocaleString('en-GB', {\r\n                                              hour12: true,\r\n                                          })}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.order_status?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.partner_id?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.item_id?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.old_item_details?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>{data.imei?.toString()}</TableCell>\r\n                                <TableCell>\r\n                                    ₹{data.base_discount?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>{data.diagnostic}</TableCell>\r\n                                <TableCell>\r\n                                    ₹{data.partner_purchase_price}\r\n                                </TableCell>\r\n                                <TableCell>{data.tracking_id}</TableCell>\r\n                                <TableCell>\r\n                                    {data.delivery_date == null\r\n                                        ? ''\r\n                                        : new Date(\r\n                                              data.delivery_date\r\n                                          ).toLocaleString('en-GB', {\r\n                                              hour12: true,\r\n                                          })}\r\n                                </TableCell>\r\n                                <TableCell>{data.order_id_replaced}</TableCell>\r\n                                <TableCell>{data.deliverd_with_otp}</TableCell>\r\n                                <TableCell>\r\n                                    {data.deliverd_with_bag_exception}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.gc_amount_redeemed?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.gc_amount_refund?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.gc_redeem_time == null\r\n                                        ? ''\r\n                                        : new Date(\r\n                                              data.gc_redeem_time\r\n                                          ).toLocaleString('en-GB', {\r\n                                              hour12: true,\r\n                                          })}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.gc_amount_refund_time == null\r\n                                        ? ''\r\n                                        : new Date(\r\n                                              data.gc_amount_refund_time\r\n                                          ).toLocaleString('en-GB', {\r\n                                              hour12: true,\r\n                                          })}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.diagnstic_status?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.vc_eligible?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.customer_declaration_physical_defect_present?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.customer_declaration_physical_defect_type?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.partner_price_no_defect?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    ₹{data.revised_partner_price?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    ₹{data.delivery_fee?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    ₹\r\n                                    {data.exchange_facilitation_fee?.toString()}\r\n                                </TableCell>\r\n                                <TableCell style={{ color: 'red' }}>\r\n                                    {data?.reason?.join(', ')}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </ProductTable>\r\n            </Card>\r\n            <TableFooter>\r\n                <TablePagination\r\n                    sx={{ px: 2 }}\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={item.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    showFirstButton=\"true\"\r\n                    showLastButton=\"true\"\r\n                    backIconButtonProps={{\r\n                        'aria-label': 'Previous Page',\r\n                    }}\r\n                    nextIconButtonProps={{\r\n                        'aria-label': 'Next Page',\r\n                    }}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={({ target: { value } }) =>\r\n                        setRowsPerPage(value)\r\n                    }\r\n                />\r\n            </TableFooter>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Order\\bulk-import-order.jsx",["3387","3388","3389","3390","3391","3392","3393","3394","3395","3396","3397","3398","3399","3400","3401","3402","3403","3404","3405","3406","3407","3408","3409","3410","3411","3412","3413","3414","3415","3416","3417","3418","3419","3420","3421","3422","3423","3424","3425","3426","3427","3428","3429","3430","3431","3432","3433","3434","3435","3436","3437","3438","3439","3440","3441","3442","3443","3444","3445","3446","3447","3448","3449","3450","3451","3452","3453","3454","3455","3456","3457","3458","3459","3460","3461","3462","3463","3464","3465","3466","3467","3468","3469","3470","3471","3472","3473","3474","3475","3476","3477","3478","3479","3480","3481","3482","3483","3484","3485","3486","3487","3488","3489","3490","3491","3492","3493","3494","3495","3496","3497","3498","3499","3500","3501","3502","3503","3504","3505","3506","3507","3508","3509","3510","3511","3512","3513","3514","3515","3516","3517","3518","3519","3520","3521","3522","3523","3524","3525","3526","3527","3528","3529","3530","3531","3532","3533","3534","3535","3536","3537","3538","3539","3540"],"import {\r\n    IconButton,\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Icon,\r\n    Card,\r\n    Button,\r\n    TextField,\r\n} from '@mui/material'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport DoneIcon from '@mui/icons-material/Done'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\nimport jwt_decode from 'jwt-decode'\r\nimport * as XLSX from 'xlsx'\r\nimport { axiosMisUser } from '../../../../axios'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst StyledLoading = styled('div')(() => ({\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    '& img': {\r\n        width: 'auto',\r\n        height: '25px',\r\n    },\r\n    '& .circleProgress': {\r\n        position: 'absolute',\r\n        left: -7,\r\n        right: 0,\r\n        top: 'calc(50% - 25px)',\r\n    },\r\n}))\r\n\r\nconst ProductTable = styled(Table)(() => ({\r\n    minWidth: 750,\r\n    width: 7000,\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& th:first-of-type': {\r\n            paddingLeft: 16,\r\n        },\r\n    },\r\n    '& td': {\r\n        borderBottom: 'none',\r\n    },\r\n    '& td:first-of-type': {\r\n        paddingLeft: '16px !important',\r\n    },\r\n}))\r\n\r\nconst PaginationTable = () => {\r\n    const [validate, setValidate] = useState(false)\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [item, setItem] = useState([])\r\n    const [err, setErr] = useState({})\r\n    const [exFile, setExfile] = useState(null)\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n        item: [],\r\n        totalPage: 0,\r\n    })\r\n\r\n    useEffect(() => {\r\n        setItem((_) =>\r\n            pagination.item\r\n                .slice(\r\n                    (pagination.page - 1) * pagination.size,\r\n                    pagination.page * pagination.size\r\n                )\r\n                .map((d, index) => {\r\n                    d.id = (pagination.page - 1) * pagination.size + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [pagination.page, pagination.item])\r\n\r\n    const importExcel = (e) => {\r\n        if (exFile == null) {\r\n            alert('Please Select File')\r\n        } else {\r\n            setLoading(true)\r\n            readExcel(exFile)\r\n        }\r\n    }\r\n    const readExcel = async (file) => {\r\n        const promise = new Promise((resolve, reject) => {\r\n            const filReader = new FileReader()\r\n            filReader.readAsArrayBuffer(file)\r\n            filReader.onload = (e) => {\r\n                const bufferArray = e.target.result\r\n                const wb = XLSX.read(bufferArray, { cellDates: true })\r\n                const wsname = wb.SheetNames[0]\r\n                const ws = wb.Sheets[wsname]\r\n                const data = XLSX.utils.sheet_to_json(ws, { raw: false })\r\n                resolve(data)\r\n            }\r\n            filReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n        const data = await promise\r\n        setPagination((p) => ({\r\n            ...p,\r\n            page: 1,\r\n            item: data.map((d, index) => toLowerKeys(d, index)),\r\n            totalPage: Math.ceil(data.length / p.size),\r\n        }))\r\n        setLoading(false)\r\n    }\r\n    function toLowerKeys(obj, id) {\r\n        return Object.keys(obj).reduce((accumulator, key) => {\r\n            accumulator.created_at = Date.now()\r\n            accumulator[key.toLowerCase()?.split(' ').join('_')] = obj[key]\r\n            accumulator.delet_id = id\r\n            return accumulator\r\n        }, {})\r\n    }\r\n    // Validate the data\r\n    const handelValidate = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                let obj = {\r\n                    item: pagination.item,\r\n                    location: location,\r\n                }\r\n                let res = await axiosMisUser.post('/bulkOrdersValidation', obj)\r\n                if (res.status == 200) {\r\n                    setValidate(true)\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                } else {\r\n                    setErr(res.data.data)\r\n                    setValidate(true)\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    // handelSubmit\r\n    const handelSubmit = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                validItem: [],\r\n                invalidItem: [],\r\n            }\r\n            pagination.item.forEach((data) => {\r\n                data.reason = []\r\n                data.order_date = new Date(data.order_date)\r\n                data.order_timestamp = new Date(data.order_timestamp)\r\n                data.delivery_date = new Date(data.gc_redeem_time)\r\n                data.gc_redeem_time = new Date(data.gc_redeem_time)\r\n                if (\r\n                    err?.order_id_is_duplicate?.includes(data?.order_id) ||\r\n                    data?.order_id == undefined ||\r\n                    data?.order_id == ''\r\n                ) {\r\n                    data.reason.push('Duplicate order id or order id is empty')\r\n                }\r\n                if (err?.tracking_id?.includes(data?.tracking_id)) {\r\n                    data.reason.push('Tracking Id Must Be 12 Digits')\r\n                }\r\n                if (\r\n                    err?.partner_id_does_not_exist?.includes(\r\n                        data?.partner_id\r\n                    ) ||\r\n                    data?.partner_id == undefined ||\r\n                    data?.partner_id == ''\r\n                ) {\r\n                    data.reason.push('Partner id does not exists')\r\n                }\r\n                if (\r\n                    err?.partner_id_does_not_exist?.includes(\r\n                        data?.partner_shop\r\n                    ) ||\r\n                    data?.partner_shop == undefined ||\r\n                    data?.partner_shop == ''\r\n                ) {\r\n                    data.reason.push('Partner shop does not exists')\r\n                }\r\n                if (\r\n                    err?.item_id_does_not_exist?.includes(data.item_id) ||\r\n                    data?.item_id == undefined ||\r\n                    data?.item_id == ''\r\n                ) {\r\n                    data.reason.push('Item id does not exists')\r\n                }\r\n                if (\r\n                    err?.brand_name_does_not_exist?.includes(\r\n                        data?.old_item_details?.split(':')?.[0]\r\n                    ) ||\r\n                    data?.old_item_details?.split(':')?.[0] == undefined ||\r\n                    data?.old_item_details?.split(':')?.[0] == ''\r\n                ) {\r\n                    data.reason.push('Brand name does not exists')\r\n                }\r\n                if (\r\n                    err?.model_name_does_not_exist?.includes(\r\n                        data?.old_item_details?.split(':')?.[1]\r\n                    ) ||\r\n                    data?.old_item_details?.split(':')?.[1] == undefined ||\r\n                    data?.old_item_details?.split(':')?.[1] == ''\r\n                ) {\r\n                    data.reason.push('Model name does not exists')\r\n                }\r\n                if (\r\n                    err?.imei_number_is_duplicate?.some(\r\n                        (d) =>\r\n                            d.imei == data['imei'] &&\r\n                            d.status == data.order_status\r\n                    ) ||\r\n                    data?.imei == undefined ||\r\n                    data.imei == ''\r\n                ) {\r\n                    data.reason.push(\r\n                        'Duplicate IMEI number or imei number number is empty'\r\n                    )\r\n                }\r\n                if (data.order_status !== 'NEW') {\r\n                    data.reason.push('Not a NEW Order')\r\n                }\r\n\r\n                if (data.order_status == 'NEW') {\r\n                    if (\r\n                        err?.order_id_is_duplicate?.includes(data?.order_id) ||\r\n                        data?.order_id == undefined ||\r\n                        data?.order_id == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (err?.tracking_id?.includes(data?.tracking_id)) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (\r\n                        err?.partner_id_does_not_exist?.includes(\r\n                            data?.partner_id\r\n                        ) ||\r\n                        data?.partner_id == undefined ||\r\n                        data?.partner_id == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (\r\n                        err?.partner_id_does_not_exist?.includes(\r\n                            data?.partner_shop\r\n                        ) ||\r\n                        data?.partner_shop == undefined ||\r\n                        data?.partner_shop == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (\r\n                        err?.item_id_does_not_exist?.includes(data.item_id) ||\r\n                        data?.item_id == undefined ||\r\n                        data?.item_id == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (\r\n                        err?.brand_name_does_not_exist?.includes(\r\n                            data?.old_item_details?.split(':')?.[0]\r\n                        ) ||\r\n                        data?.old_item_details?.split(':')?.[0] == undefined ||\r\n                        data?.old_item_details?.split(':')?.[0] == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (\r\n                        err?.brand_name_does_not_exist?.includes(\r\n                            data?.old_item_details?.split(':')?.[1]\r\n                        ) ||\r\n                        data?.old_item_details?.split(':')?.[1] == undefined ||\r\n                        data?.old_item_details?.split(':')?.[1] == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (\r\n                        err?.imei_number_is_duplicate?.some(\r\n                            (d) =>\r\n                                d.imei == data['imei'] &&\r\n                                d.status == data.order_status\r\n                        ) ||\r\n                        data?.imei == undefined ||\r\n                        data.imei == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else {\r\n                        obj.validItem.push(data)\r\n                    }\r\n                } else {\r\n                    obj.invalidItem.push(data)\r\n                }\r\n            })\r\n            let res = await axiosMisUser.post('/ordersImport', obj)\r\n            if (res.status == 200) {\r\n                alert('Successfully Added')\r\n                setLoading(false)\r\n                navigate('/mis/orders')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    // ----------------------------------------------------------------------------------------------------------------------------\r\n    const updateFieldChanged = (delet_id) => (e) => {\r\n        setValidate(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.map((data, i) => {\r\n                if (data.delet_id === delet_id) {\r\n                    return { ...data, [e.target.name]: e.target.value }\r\n                } else {\r\n                    return data\r\n                }\r\n            }),\r\n        }))\r\n    }\r\n    // DATA DELETE FROM ARRAY\r\n    const handelDelete = (delet_id) => {\r\n        setValidate(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.filter((item) => item.delet_id != delet_id),\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Order', path: '/' },\r\n                        { name: 'Bulk Order', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Bulk Order\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <h4>Upload file</h4>\r\n\r\n                    <Box>\r\n                        <Button\r\n                            sx={{ mb: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => navigate('/mis/orders')}\r\n                        >\r\n                            Back to list\r\n                        </Button>\r\n                        <Button\r\n                            sx={{ mb: 2, ml: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={\r\n                                process.env.PUBLIC_URL +\r\n                                '/bulk-order-sheet-sample.xlsx'\r\n                            }\r\n                            download\r\n                        >\r\n                            Download Sample Sheet\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        mb: 5,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        size=\"small\"\r\n                        onChange={(e) => {\r\n                            setExfile(e.target.files[0])\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        type=\"file\"\r\n                    />\r\n                    {item.length == 0 ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            onClick={(e) => {\r\n                                importExcel(e)\r\n                            }}\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    ) : validate ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelSubmit(e)\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelValidate(e)\r\n                            }}\r\n                        >\r\n                            Validate Data\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                <>\r\n                    {item.length != 0 && loading !== true ? (\r\n                        <>\r\n                            <Box\r\n                                sx={{ maxHeight: '100%', overflow: 'auto' }}\r\n                                elevation={6}\r\n                            >\r\n                                <ProductTable>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>S.NO</TableCell>\r\n                                            <TableCell>Order ID</TableCell>\r\n                                            <TableCell>Order Date</TableCell>\r\n                                            <TableCell>\r\n                                                Order TimeStamp\r\n                                            </TableCell>\r\n                                            <TableCell>Order Status</TableCell>\r\n                                            <TableCell>\r\n                                                Buyback Category\r\n                                            </TableCell>\r\n                                            <TableCell>Partner ID</TableCell>\r\n                                            <TableCell>Partner Email</TableCell>\r\n                                            <TableCell>Partner Shop</TableCell>\r\n                                            <TableCell>Item ID</TableCell>\r\n                                            <TableCell>\r\n                                                Old Item Details\r\n                                            </TableCell>\r\n                                            <TableCell>IMEI</TableCell>\r\n                                            <TableCell>GEP Order</TableCell>\r\n                                            <TableCell>\r\n                                                Base Disscount\r\n                                            </TableCell>\r\n                                            <TableCell>Diganostic</TableCell>\r\n                                            <TableCell>\r\n                                                Partner Purchase Price\r\n                                            </TableCell>\r\n                                            <TableCell>Tracking ID</TableCell>\r\n                                            <TableCell>Delivery Date</TableCell>\r\n                                            <TableCell>\r\n                                                Order ID Replaced\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Deliverd With OTP\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Deliverd With Bag Exception\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                GC Amount Redeemed\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                GC Amount Refund\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                GC Redeem Time\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                GC Amount Refund Time\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Diagonstic Status\r\n                                            </TableCell>\r\n                                            <TableCell>VC Eligible</TableCell>\r\n                                            <TableCell>\r\n                                                Customer Declaration Physical\r\n                                                Defect Present\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Customer Declaration Physical\r\n                                                Defect Type\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Partner Price No Defect\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Revised Partner Price\r\n                                            </TableCell>\r\n                                            <TableCell>Delivery Fee</TableCell>\r\n                                            <TableCell>\r\n                                                Exchange Facilitation Fee\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {item.map((data, index) => (\r\n                                            <TableRow key={data.id}>\r\n                                                <TableCell scope=\"row\">\r\n                                                    {data.id}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"order_id\"\r\n                                                        value={data.order_id}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.order_id_is_duplicate?.includes(\r\n                                                        data['order_id']\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['order_id'] ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['order_id'] ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {err?.order_id_is_duplicate?.includes(\r\n                                                        data['order_id']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Order Id Is\r\n                                                            Duplicate\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['order_id'] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['order_id'] ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Order Does Not Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"order_date\"\r\n                                                        value={data.order_date}\r\n                                                    />\r\n                                                    {err?.order_date?.includes(\r\n                                                        data['order_date']\r\n                                                    ) ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.order_date?.includes(\r\n                                                        data['order_date']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Please check date\r\n                                                            formate\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"order_timestamp\"\r\n                                                        value={\r\n                                                            data.order_timestamp\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.order_timestamp?.includes(\r\n                                                        data['order_timestamp']\r\n                                                    ) ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.order_timestamp?.includes(\r\n                                                        data['order_timestamp']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Please check date\r\n                                                            formate\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"order_status\"\r\n                                                        value={\r\n                                                            data.order_status\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                    data.order_status !==\r\n                                                        'NEW' ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                    data.order_status !==\r\n                                                        'NEW' ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Not a new order\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"buyback_category\"\r\n                                                        value={\r\n                                                            data.buyback_category\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {' '}\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"partner_id\"\r\n                                                        value={data.partner_id}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.partner_id_does_not_exist?.includes(\r\n                                                        data['partner_id']\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_id'] ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_id'] ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.partner_id_does_not_exist?.includes(\r\n                                                        data['partner_id']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Partner Id Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['partner_id'] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['partner_id'] ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Partner Id Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"partner_email\"\r\n                                                        value={\r\n                                                            data.partner_email\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"partner_shop\"\r\n                                                        value={\r\n                                                            data.partner_shop\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.location_does_not_exist?.includes(\r\n                                                        data['partner_shop']\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_shop'] ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_shop'] ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {err?.location_does_not_exist?.includes(\r\n                                                        data['partner_shop']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            You can't add this\r\n                                                            data\r\n                                                        </p>\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                      data['partner_shop'] ==\r\n                                                          undefined ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Location Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"item_id\"\r\n                                                        value={data.item_id}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.item_id_does_not_exist?.includes(\r\n                                                        data['item_id']\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['item_id'] ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['item_id'] ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.item_id_does_not_exist?.includes(\r\n                                                        data['item_id']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Item Id Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['item_id'] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['item_id'] ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Item Id Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"old_item_details\"\r\n                                                        value={\r\n                                                            data[\r\n                                                                'old_item_details'\r\n                                                            ]\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.brand_name_does_not_exist?.includes(\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0]\r\n                                                    ) ||\r\n                                                    err?.model_name_does_not_exist?.includes(\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[1]\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0] ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0] ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : err?.model_name_does_not_exist?.includes(\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[1]\r\n                                                      ) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[1] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[1] ==\r\n                                                              '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.brand_name_does_not_exist?.includes(\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0]\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            This Brand Name Does\r\n                                                            Not Exist\r\n                                                        </p>\r\n                                                    ) : err?.model_name_does_not_exist?.includes(\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[1]\r\n                                                      ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Model Name Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[0] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[0] ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            This Brand Name Does\r\n                                                            Not Exist\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[1] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[1] ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Model Name Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {' '}\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"imei\"\r\n                                                        value={data.imei}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.imei_number_is_duplicate?.some(\r\n                                                        (d) =>\r\n                                                            d.imei ==\r\n                                                                data['imei'] &&\r\n                                                            d.status ==\r\n                                                                data.order_status\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['imei'] ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['imei'] == '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.imei_number_is_duplicate?.some(\r\n                                                        (d) =>\r\n                                                            d.imei ==\r\n                                                                data['imei'] &&\r\n                                                            d.status ==\r\n                                                                data.order_status\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            IMEI Number Is\r\n                                                            Duplicate\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['imei'] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['imei'] ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            IMEI Number Does Not\r\n                                                            Exist{' '}\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {' '}\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"gep_order\"\r\n                                                        value={data.gep_order}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"base_discount\"\r\n                                                        value={\r\n                                                            data[\r\n                                                                'base_discount'\r\n                                                            ]\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"diagnostic\"\r\n                                                        value={data.diagnostic}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"partner_purchase_price\"\r\n                                                        value={\r\n                                                            data.partner_purchase_price\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"tracking_id\"\r\n                                                        value={data.tracking_id}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.tracking_id?.includes(\r\n                                                        data['tracking_id']\r\n                                                    ) ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {err?.tracking_id?.includes(\r\n                                                        data['tracking_id']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Tracking Id Must Be\r\n                                                            12 Digits\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        name=\"delivery_date\"\r\n                                                        value={\r\n                                                            data.delivery_date\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.delivery_date?.includes(\r\n                                                        data['delivery_date']\r\n                                                    ) ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.delivery_date?.includes(\r\n                                                        data['delivery_date']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Please check date\r\n                                                            formate\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"order_id_replaced\"\r\n                                                        value={\r\n                                                            data.order_id_replaced\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"deliverd_with_otp\"\r\n                                                        value={\r\n                                                            data.deliverd_with_otp\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"deliverd_with_bag_exception\"\r\n                                                        value={\r\n                                                            data.deliverd_with_bag_exception\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"gc_amount_redeemed\"\r\n                                                        value={\r\n                                                            data.gc_amount_redeemed\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"gc_amount_refund\"\r\n                                                        value={\r\n                                                            data.gc_amount_refund\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"gc_redeem_time\"\r\n                                                        value={\r\n                                                            data.gc_redeem_time\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.gc_redeem_time?.includes(\r\n                                                        data['gc_redeem_time']\r\n                                                    ) ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.gc_redeem_time?.includes(\r\n                                                        data['gc_redeem_time']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Please check date\r\n                                                            formate\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"gc_amount_refund_time\"\r\n                                                        value={\r\n                                                            data.gc_amount_refund_time\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"diagnstic_status\"\r\n                                                        value={\r\n                                                            data.diagnstic_status\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"vc_eligible\"\r\n                                                        value={data.vc_eligible}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"customer_declaration_physical_defect_present\"\r\n                                                        value={\r\n                                                            data.customer_declaration_physical_defect_present\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"customer_declaration_physical_defect_type\"\r\n                                                        value={\r\n                                                            data.customer_declaration_physical_defect_type\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"partner_price_no_defect\"\r\n                                                        value={\r\n                                                            data.partner_price_no_defect\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"revised_partner_price\"\r\n                                                        value={\r\n                                                            data.revised_partner_price\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"delivery_fee\"\r\n                                                        value={\r\n                                                            data.delivery_fee\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"exchange_facilitation_fee\"\r\n                                                        value={\r\n                                                            data.exchange_facilitation_fee\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {(Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.order_status !==\r\n                                                            'NEW') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_id'] ==\r\n                                                            '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['order_id'] ==\r\n                                                            '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_shop'] ==\r\n                                                            '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['item_id'] ==\r\n                                                            '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0] ==\r\n                                                            '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[1] ==\r\n                                                            '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['imei'] == '') ||\r\n                                                    err?.order_date?.includes(\r\n                                                        data['order_date']\r\n                                                    ) ||\r\n                                                    err?.order_timestamp?.includes(\r\n                                                        data['order_timestamp']\r\n                                                    ) ||\r\n                                                    err?.delivery_date?.includes(\r\n                                                        data['delivery_date']\r\n                                                    ) ||\r\n                                                    err?.gc_redeem_time?.includes(\r\n                                                        data['gc_redeem_time']\r\n                                                    ) ||\r\n                                                    err?.order_id_is_duplicate?.includes(\r\n                                                        data['order_id']\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['order_id'] ==\r\n                                                            undefined) ||\r\n                                                    err?.partner_id_does_not_exist?.includes(\r\n                                                        data['partner_id']\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_id'] ==\r\n                                                            undefined) ||\r\n                                                    err?.location_does_not_exist?.includes(\r\n                                                        data['partner_shop']\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_shop'] ==\r\n                                                            undefined) ||\r\n                                                    err?.item_id_does_not_exist?.includes(\r\n                                                        data['item_id']\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['item_id'] ==\r\n                                                            undefined) ||\r\n                                                    err?.brand_name_does_not_exist?.includes(\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0]\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0] ==\r\n                                                            undefined) ||\r\n                                                    err?.model_name_does_not_exist?.includes(\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[1]\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[1] ==\r\n                                                            undefined) ||\r\n                                                    err?.imei_number_is_duplicate?.some(\r\n                                                        (d) =>\r\n                                                            d.imei ==\r\n                                                                data['imei'] &&\r\n                                                            d.status ==\r\n                                                                data.order_status\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['imei'] ==\r\n                                                            undefined) ? (\r\n                                                        <Button\r\n                                                            sx={{\r\n                                                                ml: 2,\r\n                                                            }}\r\n                                                            variant=\"contained\"\r\n                                                            style={{\r\n                                                                backgroundColor:\r\n                                                                    'red',\r\n                                                            }}\r\n                                                            component=\"span\"\r\n                                                            onClick={() => {\r\n                                                                if (\r\n                                                                    window.confirm(\r\n                                                                        'You Want to Remove?'\r\n                                                                    )\r\n                                                                ) {\r\n                                                                    handelDelete(\r\n                                                                        data.delet_id\r\n                                                                    )\r\n                                                                }\r\n                                                            }}\r\n                                                        >\r\n                                                            Remove\r\n                                                        </Button>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </ProductTable>\r\n                            </Box>\r\n                            {pagination.item.length != 0 ? (\r\n                                <Box\r\n                                    sx={{\r\n                                        display: 'flex',\r\n                                        justifyContent: 'end',\r\n                                        mt: 1,\r\n                                        mr: 3,\r\n                                        ml: 3,\r\n                                    }}\r\n                                >\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        sx={{ m: 1 }}\r\n                                        disabled={pagination.page === 1}\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) =>\r\n                                            setPagination((p) => ({\r\n                                                ...p,\r\n                                                page: --p.page,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Previous\r\n                                    </Button>\r\n\r\n                                    <h6 style={{ marginTop: '19px' }}>\r\n                                        {pagination.page}/{pagination.totalPage}\r\n                                    </h6>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        sx={{ m: 1 }}\r\n                                        disabled={\r\n                                            pagination.page ===\r\n                                            pagination.totalPage\r\n                                        }\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) =>\r\n                                            setPagination((p) => ({\r\n                                                ...p,\r\n                                                page: ++p.page,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Next\r\n                                    </Button>\r\n                                </Box>\r\n                            ) : null}\r\n                        </>\r\n                    ) : item.length != 0 ? (\r\n                        <StyledLoading>\r\n                            <Box position=\"relative\">\r\n                                <img\r\n                                    src=\"/assets/images/logo-circle.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                <CircularProgress className=\"circleProgress\">\r\n                                    <p>Please Wait...</p>\r\n                                </CircularProgress>\r\n                            </Box>\r\n                        </StyledLoading>\r\n                    ) : null}\r\n                </>\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PaginationTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\wht-assignment.jsx",["3541","3542","3543","3544","3545"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n    FormControl,\r\n    MenuItem,\r\n    InputLabel,\r\n    Select,\r\n} from '@mui/material'\r\nimport { useNavigate, useLocation } from 'react-router-dom'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn, axiosMisUser } from '../../../../../axios'\r\nimport Checkbox from '@mui/material/Checkbox'\r\n\r\nexport default function DialogBox() {\r\n    const [clubModel, setClubModel] = useState({})\r\n    const navigate = useNavigate()\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const [assignedTray, setAssignedTray] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [currentstate, setCurrentState] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [trayDataCheck, setTrayDataCheck] = useState(false)\r\n    const [whtTrayId, setWhtTrayId] = useState([])\r\n    const { state } = useLocation()\r\n    const [count, setCount] = useState(0)\r\n    const { isCheck, muic } = state\r\n    /**************************************************************************** */\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let obj = {\r\n                    tray: isCheck,\r\n                    muic: muic,\r\n                }\r\n                let res = await axiosMisUser.post(\r\n                    '/view-bot-clubed-data-model',\r\n                    obj\r\n                )\r\n                if (res.status === 200) {\r\n                    setClubModel(res.data.data)\r\n                } else {\r\n                    alert(res.data.message)\r\n                    navigate('/bag-issue-request')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n    useEffect(() => {\r\n        setCount(0)\r\n        if (clubModel?.items !== undefined) {\r\n            for (let x of clubModel?.items) {\r\n                if (x.muic === clubModel.muic) {\r\n                }\r\n                if (x.wht_tray !== null && x.muic === clubModel.muic) {\r\n                    setCount((count) => count + 1)\r\n                }\r\n            }\r\n        }\r\n    }, [clubModel])\r\n\r\n    /******************************************USEEFFECT FOR READY TO ASSIGN TRAY******************************/\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            const fetchData = async () => {\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let obj = {\r\n                        brand: clubModel.brand,\r\n                        model: clubModel.model,\r\n                        location: location,\r\n                        trayId: isCheck,\r\n                        whtTrayId: clubModel?.items,\r\n                    }\r\n                    if (clubModel?.items !== undefined) {\r\n                        let res = await axiosWarehouseIn.post(\r\n                            '/getAssignedTray',\r\n                            obj\r\n                        )\r\n                        handeTrayGet('use_new_tray')\r\n                        if (res.status === 200) {\r\n                            setAssignedTray(res.data.data)\r\n                        }\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [refresh, clubModel])\r\n    /***********************************GET TRAY***************************************************** */\r\n    const handeTrayGet = async (type) => {\r\n        try {\r\n            setCurrentState(type)\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                let obj = {\r\n                    type: type,\r\n                    brand_name: clubModel.brand,\r\n                    model_name: clubModel.model,\r\n                    location: location,\r\n                }\r\n                let res = await axiosWarehouseIn.post('/getWhtTray', obj)\r\n                if (res.status === 200) {\r\n                    if (res.data.data?.length === 0) {\r\n                        setTrayDataCheck(true)\r\n                    } else {\r\n                        setTrayDataCheck(false)\r\n                    }\r\n                    setWhtTray(res.data.data)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /****************************************SELECT TRAY*********************************************** */\r\n    const handelSelect = async (\r\n        whtTrayId,\r\n        trayLimit,\r\n        trayQunatity,\r\n        tempLength\r\n    ) => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                wht_tray: whtTrayId,\r\n                item: [],\r\n                sku: clubModel.temp_array?.[0].vendor_sku_id,\r\n                muic: clubModel?.muic,\r\n                botTray: isCheck,\r\n            }\r\n            let i = 1\r\n            let count = trayLimit - trayQunatity\r\n            let tempCount = trayLimit - tempLength\r\n            for (let x of clubModel.items) {\r\n                if (x.wht_tray === null && x.muic === clubModel?.muic) {\r\n                    if (trayLimit >= i && count >= i && tempCount >= i) {\r\n                        x.model_name = clubModel?.model\r\n                        x.brand_name = clubModel?.brand\r\n                        x.muic = clubModel?.muic\r\n                        x.created = clubModel.temp_array?.[0].created_at\r\n                        obj.item.push(x)\r\n                    } else {\r\n                        break\r\n                    }\r\n                    i++\r\n                }\r\n            }\r\n            if (obj.item.length !== 0) {\r\n                let res = await axiosWarehouseIn.post('/itemAssignToWht', obj)\r\n                if (res.status === 200) {\r\n                    setLoading(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                    handeTrayGet(currentstate)\r\n                    alert(res.data.message)\r\n                }\r\n            } else {\r\n                alert('Tray Already Full')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /**********************************DATATABLE************************************************* */\r\n\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    /********************************************HANDEL REMOVE********************************************* */\r\n    const handelRemoveTray = async (WhttrayId) => {\r\n        try {\r\n            let obj = {\r\n                code: WhttrayId,\r\n                botTray: isCheck,\r\n                muic: clubModel?.muic,\r\n            }\r\n            let res = await axiosWarehouseIn.post('/removeItemWht', obj)\r\n            if (res.status === 200) {\r\n                setRefresh((refresh)=> !refresh)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelIssue = async (e) => {\r\n        e.preventDefault()\r\n        navigate(-1)\r\n    }\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    ml: 1,\r\n                }}\r\n            >\r\n                <Grid container spacing={1}>\r\n                    <Grid itme xs={6}>\r\n                        <Box>\r\n                            <h4 style={{ marginLeft: '13px' }}>\r\n                                MUIC - {clubModel?.muic}\r\n                            </h4>\r\n                            <h4 style={{ marginLeft: '13px' }}>\r\n                                Model Name - {clubModel?.model}\r\n                            </h4>\r\n                            <FormControl sx={{ mt: 1, width: '300px' }}>\r\n                                <InputLabel\r\n                                    sx={{ pt: 1 }}\r\n                                    id=\"demo-simple-select-label\"\r\n                                >\r\n                                    Select\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-label\"\r\n                                    label=\"Select search field\"\r\n                                    sx={{ m: 1 }}\r\n                                >\r\n                                    {/* <MenuItem\r\n                    onClick={(e) => {\r\n                      handeTrayGet(\"Use_existing_tray\");\r\n                    }}\r\n                    value=\"Use_existing_tray\"\r\n                  >\r\n                    Use Existing Tray\r\n                  </MenuItem> */}\r\n\r\n                                    <MenuItem\r\n                                        onClick={(e) => {\r\n                                            handeTrayGet('use_new_tray')\r\n                                        }}\r\n                                        value=\"use_new_tray\"\r\n                                    >\r\n                                        Use New Tray\r\n                                    </MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid xs={6}>\r\n                        <Box>\r\n                            <h4 style={{ marginLeft: '13px' }}>\r\n                                Brand Name - {clubModel?.brand}\r\n                            </h4>\r\n                            <h4 style={{ marginLeft: '13px' }}>\r\n                                Number of Pieces - {count} /{' '}\r\n                                {clubModel?.temp_array?.length}\r\n                            </h4>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid xs={6}>\r\n                        <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                            <TableContainer>\r\n                                <Table\r\n                                    style={{ width: '100%' }}\r\n                                    // id=\"trayTable\"\r\n                                    stickyHeader\r\n                                    aria-label=\"sticky table\"\r\n                                >\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>S.NO</TableCell>\r\n                                            <TableCell>Tray Id</TableCell>\r\n                                            <TableCell>Quantity</TableCell>\r\n                                            {count ===\r\n                                            clubModel?.temp_array?.length ? (\r\n                                                <TableCell>Select</TableCell>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n\r\n                                    <TableBody>\r\n                                        {whtTray.map((data, index) => (\r\n                                            <TableRow\r\n                                                hover\r\n                                                role=\"checkbox\"\r\n                                                tabIndex={-1}\r\n                                            >\r\n                                                <TableCell>\r\n                                                    {index + 1}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data.code}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data.items.length +\r\n                                                        '/' +\r\n                                                        data?.temp_array\r\n                                                            ?.length +\r\n                                                        '/' +\r\n                                                        data?.limit}\r\n                                                </TableCell>\r\n                                                {count ===\r\n                                                clubModel?.temp_array\r\n                                                    ?.length ? null : (\r\n                                                    <TableCell>\r\n                                                        {data?.items?.length <\r\n                                                            data.limit &&\r\n                                                        data?.temp_array\r\n                                                            ?.length <\r\n                                                            data.limit ? (\r\n                                                            <Checkbox\r\n                                                                {...label}\r\n                                                                disabled={\r\n                                                                    loading ===\r\n                                                                        true ||\r\n                                                                    clubModel?.items?.filter(\r\n                                                                        (\r\n                                                                            item\r\n                                                                        ) => {\r\n                                                                            return (\r\n                                                                                item.wht_tray ==\r\n                                                                                data.code\r\n                                                                            )\r\n                                                                        }\r\n                                                                    ).length !==\r\n                                                                        0\r\n                                                                        ? true\r\n                                                                        : false\r\n                                                                }\r\n                                                                onClick={(\r\n                                                                    e\r\n                                                                ) => {\r\n                                                                    handelSelect(\r\n                                                                        data.code,\r\n                                                                        data.limit,\r\n                                                                        data\r\n                                                                            ?.items\r\n                                                                            ?.length,\r\n                                                                        data\r\n                                                                            ?.temp_array\r\n                                                                            ?.length\r\n                                                                    )\r\n                                                                }}\r\n                                                                id={index}\r\n                                                                key={index}\r\n                                                            />\r\n                                                        ) : null}\r\n                                                    </TableCell>\r\n                                                )}\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                            {trayDataCheck === true ? (\r\n                                <p style={{ textAlign: 'center' }}>\r\n                                    No data available in table\r\n                                </p>\r\n                            ) : null}\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid xs={6}>\r\n                        <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                            <TableContainer>\r\n                                <Table\r\n                                    style={{ width: '100%' }}\r\n                                    // id=\"trayTable2\"\r\n                                    stickyHeader\r\n                                    aria-label=\"sticky table\"\r\n                                >\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>S.NO</TableCell>\r\n                                            <TableCell>Tray Id</TableCell>\r\n                                            <TableCell>Quantity</TableCell>\r\n                                            <TableCell>Action</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n\r\n                                    <TableBody>\r\n                                        {assignedTray.map((data, index) => (\r\n                                            <TableRow\r\n                                                hover\r\n                                                role=\"checkbox\"\r\n                                                tabIndex={-1}\r\n                                            >\r\n                                                <TableCell>\r\n                                                    {index + 1}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data?.code}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data.items.length +\r\n                                                        '/' +\r\n                                                        data?.temp_array\r\n                                                            ?.length +\r\n                                                        '/' +\r\n                                                        data?.limit}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <Button\r\n                                                        sx={{\r\n                                                            ml: 2,\r\n                                                        }}\r\n                                                        variant=\"contained\"\r\n                                                        style={{\r\n                                                            backgroundColor:\r\n                                                                'red',\r\n                                                        }}\r\n                                                        component=\"span\"\r\n                                                        onClick={() => {\r\n                                                            if (\r\n                                                                window.confirm(\r\n                                                                    'You Want to Remove?'\r\n                                                                )\r\n                                                            ) {\r\n                                                                handelRemoveTray(\r\n                                                                    data?.code\r\n                                                                )\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        Remove\r\n                                                    </Button>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n                <div style={{ float: 'right' }}>\r\n                    <Box sx={{ float: 'right' }}>\r\n                        <Button\r\n                            sx={{ m: 3, mb: 9 }}\r\n                            variant=\"contained\"\r\n                            disabled={loading === true ? true : false}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            onClick={(e) => {\r\n                                handelIssue(e)\r\n                            }}\r\n                        >\r\n                            Back to List\r\n                        </Button>\r\n                    </Box>\r\n                </div>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\assign-for-sorting.jsx",["3546","3547","3548"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Box } from '@mui/material'\r\nimport { useNavigate, useLocation } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport AssignDialogBox from './assign-dailog'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [item, setItem] = useState({})\r\n    const navigate = useNavigate()\r\n    const [sortingAgent, setSortingAgent] = useState([])\r\n    const { state } = useLocation()\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n    const { isCheck, type } = state\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let obj = {\r\n                    trayData: isCheck,\r\n                }\r\n                let res = await axiosMisUser.post('/assign-for-sorting', obj)\r\n                if (res.status === 200) {\r\n                    setItem(res.data.data)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    // NAVIGATE TO ASSIGN FOR SORTING PAGE\r\n    const handelAssignForSorting = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/assign-for-sorting', {\r\n            state: { isCheck: isCheck, type: 'Not From Request' },\r\n        })\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setSortingAgent([])\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelViewDetailClub = (e, muic) => {\r\n        e.preventDefault()\r\n        navigate('/mis/sorting/bot-to-wht/assign-for-sorting/view-item', {\r\n            state: { isCheck: isCheck, muic: muic },\r\n        })\r\n    }\r\n    const handelAssignWht = (e, muic, whtTray) => {\r\n        navigate('/mis/sorting/bot-to-wht/wht-assignment', {\r\n            state: { isCheck: isCheck, muic: muic, whtTrayId: whtTray },\r\n        })\r\n    }\r\n\r\n    const handelGetSortingUser = () => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosMisUser.post(\r\n                        '/getSortingAgent/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setSortingAgent(res.data.data)\r\n                        handleDialogOpen()\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'item',\r\n            label: 'In BOT',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => value.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'wht_tray',\r\n            label: 'Wht Tray',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => value.join(', '),\r\n            },\r\n        },\r\n        {\r\n            name: 'assigned_count',\r\n            label: 'action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) => {\r\n                                    handelViewDetailClub(\r\n                                        e,\r\n                                        tableMeta.rowData[1]\r\n                                    )\r\n                                }}\r\n                            >\r\n                                View Item\r\n                            </Button>\r\n                            {type === 'Not From Request' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        handelAssignWht(\r\n                                            e,\r\n                                            tableMeta.rowData[1],\r\n                                            tableMeta.rowData[1]\r\n                                        )\r\n                                    }}\r\n                                >\r\n                                    {tableMeta.rowData[4]?.length === value\r\n                                        ? 'Tray Assigned'\r\n                                        : ' Assign Tray'}\r\n                                </Button>\r\n                            ) : null}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Sorting', path: '/' },\r\n                        { name: 'Bot-to-wht' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <h4>BOT Tray - {isCheck.toString()}</h4>\r\n                </Box>\r\n                <Box>\r\n                    {type === 'Not From Request' ? (\r\n                        <Box>\r\n                            <Button\r\n                                sx={{\r\n                                    mb: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: 'green' }}\r\n                                component=\"span\"\r\n                                disabled={item.not_assigned}\r\n                                onClick={(e) => {\r\n                                    handelGetSortingUser()\r\n                                }}\r\n                            >\r\n                                Select Sorting Agent\r\n                            </Button>\r\n                        </Box>\r\n                    ) : null}\r\n                </Box>\r\n            </Box>\r\n\r\n            <MUIDataTable\r\n                title={'Wht Tray'}\r\n                data={item.temp_array}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n\r\n            {shouldOpenEditorDialog && (\r\n                <AssignDialogBox\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    sortingAgent={sortingAgent}\r\n                    isCheck={isCheck}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\bot-tray.jsx",["3549","3550","3551","3552","3553","3554","3555"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Box, TextField, Checkbox } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport moment from 'moment'\r\nimport jwt_decode from 'jwt-decode'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [item, setItem] = useState([])\r\n    const navigate = useNavigate()\r\n    const [sortDate, setSortDate] = useState('')\r\n    const [sortData, setSortData] = useState(false)\r\n    const [yesterdayDate, setYesterDayDate] = useState('')\r\n    const [isCheck, setIsCheck] = useState([])\r\n\r\n    useEffect(() => {\r\n        let date = new Date() // Today!\r\n        setYesterDayDate(date.setDate(date.getDate() - 1))\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const { location } = jwt_decode(admin)\r\n            const fetchData = async () => {\r\n                try {\r\n                    let res = await axiosMisUser.post(\r\n                        '/wh-closed-bot-tray/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelSort = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                const { location } = jwt_decode(admin)\r\n                let obj = {\r\n                    date: sortDate,\r\n                    location: location,\r\n                }\r\n                let res = await axiosMisUser.post('/wht-bot-sort', obj)\r\n                if (res.status == 200) {\r\n                    setSortData(true)\r\n                    setItem(res.data.data)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    /*-----------------------------------------------------------------------------*/\r\n    // NAVIGATE TO ASSIGN FOR SORTING PAGE\r\n    const handelAssignForSorting = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/mis/sorting/bot-to-wht/assign-for-sorting', {\r\n            state: { isCheck: isCheck, type: 'Not From Request' },\r\n        })\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray ID',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_wharehouse_from_bot',\r\n            label: 'Date of Clouser',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        year: 'numeric',\r\n                        month: '2-digit',\r\n                        day: '2-digit',\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Items Count',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[4],\r\n            },\r\n        },\r\n        {\r\n            name: 'temp_array',\r\n            label: 'Sku Count',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => value.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Sorting', path: '/' },\r\n                        { name: 'Bot-to-wht' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <h3>\r\n                        Date:-{' '}\r\n                        {new Date(\r\n                            sortDate != '' && sortData == true\r\n                                ? sortDate\r\n                                : yesterdayDate\r\n                        ).toLocaleString('en-GB', {\r\n                            year: 'numeric',\r\n                            month: '2-digit',\r\n                            day: '2-digit',\r\n                        })}\r\n                    </h3>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        flexDirection: 'start',\r\n                        justifyContent: 'flex-end',\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        id=\"filled-select-currency\"\r\n                        type=\"Date\"\r\n                        onChange={(e) => {\r\n                            setSortDate(e.target.value)\r\n                        }}\r\n                        inputProps={{\r\n                            max: moment().format('YYYY-MM-DD'),\r\n                        }}\r\n                        sx={{ mt: 1, mb: 1 }}\r\n                        helperText=\"Please Select BOT closed Date\"\r\n                        variant=\"filled\"\r\n                    />\r\n                    <Button\r\n                        sx={{\r\n                            mt: 20,\r\n                            m: 2,\r\n                            height: '38px',\r\n                        }}\r\n                        disabled={sortDate == '' ? true : false}\r\n                        variant=\"contained\"\r\n                        style={{\r\n                            backgroundColor: '#206CE2',\r\n                            marginTop: '23px',\r\n                        }}\r\n                        onClick={(e) => {\r\n                            handelSort(e)\r\n                        }}\r\n                    >\r\n                        Sort\r\n                    </Button>\r\n                    <Box>\r\n                        <Button\r\n                            sx={{\r\n                                mt: 2,\r\n                                height: '48px',\r\n                                width: '200px',\r\n                            }}\r\n                            variant=\"contained\"\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                            disabled={isCheck.length === 0}\r\n                            onClick={(e) => {\r\n                                handelAssignForSorting(e)\r\n                            }}\r\n                        >\r\n                            Assign For Sorting\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n\r\n            <MUIDataTable\r\n                title={'Wht Tray'}\r\n                data={item}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\view-clubed-item.jsx",["3556"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate, useLocation } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [item, setItem] = useState({})\r\n    const navigate = useNavigate()\r\n    const { state } = useLocation()\r\n    const { isCheck, muic } = state\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const fetchData = async () => {\r\n                try {\r\n                    let obj = {\r\n                        tray: isCheck,\r\n                        muic: muic,\r\n                    }\r\n                    let res = await axiosMisUser.post(\r\n                        '/view-bot-clubed-data-model',\r\n                        obj\r\n                    )\r\n                    if (res.status === 200) {\r\n                        setItem(res.data.data)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'imei',\r\n            label: 'IMEI',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return item.muic\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return item.brand\r\n                },\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return item.model\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'bag_id',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'user_name',\r\n            label: 'Bot Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_id',\r\n            label: 'Bot Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'added_time',\r\n            label: 'Added Time',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Sorting', path: '/' },\r\n                        { name: 'Bot-to-wht' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Wht Tray'}\r\n                data={item?.temp_array}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-audit\\view-wht-tray.jsx",["3557","3558","3559","3560"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport { axiosWarehouseIn, axiosMisUser } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport AssignDialogBox from './user-dailog'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [auditUsers, setAuditUsers] = useState([])\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Ready to Audit/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setIsCheck([])\r\n        setAuditUsers([])\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelGetAuditUser = () => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosMisUser.post(\r\n                        '/get-charging-users/' + 'Audit/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setAuditUsers(res.data.data)\r\n                        handleDialogOpen()\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }\r\n\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[8],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assign-to-agent', path: '/' },\r\n                        { name: 'Audit' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => handelGetAuditUser()}\r\n                disabled={isCheck.length === 0}\r\n            >\r\n                Assign For Audit\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'WHT'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <AssignDialogBox\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    auditUsers={auditUsers}\r\n                    isCheck={isCheck}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bot\\uic-gen.jsx",["3561","3562","3563","3564","3565","3566","3567","3568","3569","3570","3571","3572","3573","3574","3575","3576","3577"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport * as FileSaver from 'file-saver'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    Checkbox,\r\n    Box,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const navigate = useNavigate()\r\n    const [isCheckAll, setIsCheckAll] = useState(false)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const { bagId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosMisUser.post('/getBagItemWithUic/' + bagId)\r\n                if (res.status == 200) {\r\n                    setItem(res.data.data)\r\n                } else if (res.status == 202) {\r\n                    alert(res.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 2000,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const handelUicGen = (e) => {\r\n        e.preventDefault()\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Delivered Data')\r\n        } else {\r\n            setLoading(true)\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { user_name } = jwt_decode(token)\r\n\r\n                const addUic = async () => {\r\n                    let count = 0\r\n                    for (let i = 0; i < isCheck.length; i++) {\r\n                        if (\r\n                            item?.[0]?.delivery?.[isCheck[i]].uic_status !=\r\n                            'Pending'\r\n                        ) {\r\n                            alert('Already UIC Created')\r\n\r\n                            break\r\n                        }\r\n                        try {\r\n                            let obj = {\r\n                                _id: item?.[0]?.delivery?.[isCheck[i]]._id,\r\n                                email: user_name,\r\n                                created_at: Date.now(),\r\n                            }\r\n                            let res = await axiosMisUser.post(\r\n                                '/addUicCode',\r\n                                obj\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        count++\r\n                    }\r\n                    if (count == isCheck.length) {\r\n                        alert('Successfully Generated')\r\n                        setLoading(false)\r\n                        setIsCheck([])\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                }\r\n                addUic()\r\n            }\r\n        }\r\n    }\r\n\r\n    const fileType =\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n    const fileExtension = '.xlsx'\r\n\r\n    const exportToCSV = (fileName) => {\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Data')\r\n        } else {\r\n            let arr = []\r\n            let status = false\r\n            let changeStatus = async () => {\r\n                for (let i = 0; i < isCheck.length; i++) {\r\n                    if (\r\n                        item?.[0]?.delivery?.[isCheck[i]].uic_code == undefined\r\n                    ) {\r\n                        alert('Please Generate UIC')\r\n                        status = true\r\n                        break\r\n                    } else {\r\n                        try {\r\n                            let res = await axiosMisUser.post(\r\n                                '/changeUicStatus/' +\r\n                                    item?.[0]?.delivery?.[isCheck[i]]?._id\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        let obj = {\r\n                            UIC: item?.[0]?.delivery?.[isCheck[i]]?.uic_code\r\n                                ?.code,\r\n                            IMEI: item?.[0]?.delivery?.[\r\n                                isCheck[i]\r\n                            ]?.imei?.replace(/[^a-zA-Z0-9 ]/g, ''),\r\n                            Model: item?.[0]?.delivery?.[\r\n                                isCheck[i]\r\n                            ]?.order_old_item_detail?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ' '\r\n                            ),\r\n                        }\r\n\r\n                        arr.push(obj)\r\n                    }\r\n                }\r\n                if (status == false) {\r\n                    download(arr, fileName)\r\n                }\r\n            }\r\n            changeStatus()\r\n        }\r\n    }\r\n    function download(arr, fileName) {\r\n        const ws = XLSX.utils.json_to_sheet(arr)\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, fileName + fileExtension)\r\n        setIsCheck([])\r\n        setIsAlive((isAlive) => !isAlive)\r\n    }\r\n\r\n    const handleSelectAll = (e) => {\r\n        setIsCheckAll(!isCheckAll)\r\n        setIsCheck(item?.[0]?.delivery?.map((li, index) => index.toString()))\r\n        if (isCheckAll) {\r\n            setIsCheck([])\r\n        }\r\n    }\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            {' '}\r\n                            <Checkbox\r\n                                onClick={(e) => {\r\n                                    handleSelectAll()\r\n                                }}\r\n                                checked={\r\n                                    item?.[0]?.delivery?.length ==\r\n                                    isCheck.length\r\n                                        ? true\r\n                                        : false\r\n                                }\r\n                            />{' '}\r\n                            Select All\r\n                        </TableCell>\r\n                        <TableCell>S.NO</TableCell>\r\n                        <TableCell>UIC Status</TableCell>\r\n                        <TableCell>UIC Generated Admin</TableCell>\r\n                        <TableCell>UIC Generated Time</TableCell>\r\n                        <TableCell>UIC Code</TableCell>\r\n                        <TableCell>UIC Downloaded Time</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Actual Delivery Date</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {item?.[0]?.delivery?.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>\r\n                                {' '}\r\n                                <Checkbox\r\n                                    onClick={(e) => {\r\n                                        handleClick(e)\r\n                                    }}\r\n                                    id={index}\r\n                                    key={index}\r\n                                    checked={isCheck.includes(\r\n                                        index?.toString()\r\n                                    )}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>{index + 1}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data?.uic_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : data?.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data?.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>{data?.uic_code?.user}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data?.uic_code?.created_at == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data?.uic_code?.created_at\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data?.uic_code?.code}</TableCell>\r\n                            <TableCell>\r\n                                {data?.download_time == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data?.download_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data?.delivery_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data.order_order_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.order_old_item_detail?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [isCheck, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'UIC-Manage', path: '/' },\r\n                        { name: 'UIC-Not-Generated' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    sx={{ mb: 2, m: 1 }}\r\n                    disabled={loading}\r\n                    style={{ backgroundColor: 'primery' }}\r\n                    onClick={(e) => {\r\n                        handelUicGen(e)\r\n                    }}\r\n                >\r\n                    Generate UIC\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    sx={{ mb: 2, m: 1 }}\r\n                    onClick={(e) => {\r\n                        exportToCSV('UIC-Printing-Sheet')\r\n                    }}\r\n                >\r\n                    Download\r\n                </Button>\r\n            </Box>\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={item.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bot\\view-bot-tray.jsx",["3578","3579","3580","3581","3582","3583","3584"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport AssignDialogBox from './assign-dialog'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Box } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosMisUser } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [bagList, setBotBag] = useState([])\r\n    const navigate = useNavigate()\r\n    const [botUsers, setBotUsers] = useState([])\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n    const [bagId, setBagId] = useState('')\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let user = localStorage.getItem('prexo-authentication')\r\n            if (user) {\r\n                let { location } = jwt_decode(user)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post('/getStockin/' + location)\r\n                    if (res.status == 200) {\r\n                        setBotBag(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setBagId('')\r\n        setBotUsers([])\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelAssign = (id) => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosMisUser.post('/getBot/' + location)\r\n                    if (res.status == 200) {\r\n                        setBagId(id)\r\n                        setBotUsers(res.data.data)\r\n                        handleDialogOpen()\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Date Of Closure',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Max',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Valid',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Valid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Invalid',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Invalid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Duplicate',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Duplicate'\r\n                    }).length,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Total',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) => value.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            {value === 'Closed' ||\r\n                            value === 'Pre-closure' ||\r\n                            value === 'In Progress' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    disabled={value == 'In Progress'}\r\n                                    variant=\"contained\"\r\n                                    onClick={() => {\r\n                                        handelAssign(tableMeta.rowData[1])\r\n                                    }}\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                >\r\n                                    Assign\r\n                                </Button>\r\n                            ) : (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    disabled\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    meadium\r\n                                >\r\n                                    Assigned\r\n                                </Button>\r\n                            )}\r\n                            <Button\r\n                                fullWidth\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: 'primery' }}\r\n                                component=\"span\"\r\n                                onClick={() => {\r\n                                    navigate(\r\n                                        '/mis/assign-to-agent/bot/uic-genaration/' +\r\n                                            tableMeta.rowData[1]\r\n                                    )\r\n                                }}\r\n                            >\r\n                                UIC\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assign-to-agent', path: '/' },\r\n                        { name: 'BOT' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Bot Bag'}\r\n                data={bagList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <AssignDialogBox\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    botUsers={botUsers}\r\n                    setBotUsers={setBotUsers}\r\n                    bagId={bagId}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bqc\\view-wht-tray.jsx",["3585","3586","3587","3588","3589"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport { axiosMisUser, axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport AssignDialogBox from './user-dailog'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const navigate = useNavigate()\r\n    const [chargingUsers, setChargingUsers] = useState([])\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Ready to BQC/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setIsCheck([])\r\n        setChargingUsers([])\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelGetBqcUser = () => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosMisUser.post(\r\n                        '/get-charging-users/' + 'BQC/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setChargingUsers(res.data.data)\r\n                        handleDialogOpen()\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[9],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assign-to-agent', path: '/' },\r\n                        { name: 'BQC' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isCheck.length == 0}\r\n                onClick={() => handelGetBqcUser(true)}\r\n            >\r\n                Assign For BQC\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'WHT'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n\r\n            {shouldOpenEditorDialog && (\r\n                <AssignDialogBox\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    chargingUsers={chargingUsers}\r\n                    isCheck={isCheck}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-charging\\view-wht-tray.jsx",["3590","3591","3592","3593","3594"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport { axiosMisUser, axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport AssignDialogBox from './user-dailog'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const navigate = useNavigate()\r\n    const [chargingUsers, setChargingUsers] = useState([])\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Closed/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setIsCheck([])\r\n        setChargingUsers([])\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelGetChargingUser = () => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosMisUser.post(\r\n                        '/get-charging-users/' + 'Charging/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setChargingUsers(res.data.data)\r\n                        handleDialogOpen()\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }\r\n\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[8],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n       \r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assign-to-agent', path: '/' },\r\n                        { name: 'Charging' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isCheck.length == 0}\r\n                onClick={() => handelGetChargingUser(true)}\r\n            >\r\n                Assign For Charging\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'WHT'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n\r\n            {shouldOpenEditorDialog && (\r\n                <AssignDialogBox\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    chargingUsers={chargingUsers}\r\n                    isCheck={isCheck}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\user-list\\ProfileCard1.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\TodoList.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\TransitionSnackbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\ConsecutiveSnackbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\DirectionSnackbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\StackedSnackbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\PositionedSnackbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\CustomizedSnackbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\LongLengthSnackbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\snackbar\\SimpleSnackbar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\ModifiedAreaChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\UpgradeCard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\tables\\SimpleTable.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\tables\\PaginationTable.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\ShopSidenav.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\ScrumBoardContainer.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\ShopContainer.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\Doughnut.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\StatCards2.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\menu\\MaxHeightMenu.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\Campaigns.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\menu\\CustomizedMenu.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\menu\\SelectedMenu.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\StatCard3.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\menu\\SimpleMenu.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\RowCards.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\StatCards.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\checkbox\\FormGroupCheckbox.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-bag\\add-bag.jsx",["3595","3596","3597","3598","3599","3600","3601","3602","3603"],"import React, { useState, useEffect } from 'react'\r\nimport { Dialog, Button, Grid, TextField, MenuItem } from '@mui/material'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport * as Yup from 'yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n}) => {\r\n    const [bagCount, setBagCount] = useState(0)\r\n    const [warehouse, setWarehouse] = useState([])\r\n    const [cpc, setCpc] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchCpc = async () => {\r\n                let response = await axiosSuperAdminPrexo.get('/getCpc')\r\n                if (response.status == 200) {\r\n                    setCpc(response.data.data.data)\r\n                }\r\n            }\r\n            fetchCpc()\r\n            if (Object.keys(editFetchData).length !== 0) {\r\n                reset({ ...editFetchData })\r\n                open()\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                confirmButtonText: 'Ok',\r\n                text: error,\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    async function getCpcData(data, cpc) {\r\n        try {\r\n            if (cpc == 'Gurgaon_122016') {\r\n                let res = await axiosSuperAdminPrexo.post(\r\n                    '/getMasterHighest/' + cpc\r\n                )\r\n                if (res.status == 200) {\r\n                    setBagCount('DDB-GGN-' + res.data.data)\r\n                }\r\n            } else if (cpc == 'Bangalore_560067') {\r\n                let res = await axiosSuperAdminPrexo.post(\r\n                    '/getMasterHighest/' + cpc\r\n                )\r\n                if (res.status == 200) {\r\n                    setBagCount('DDB-BLR-' + res.data.data)\r\n                }\r\n            }\r\n            let obj = {\r\n                name: data,\r\n            }\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/getWarehouseByLocation',\r\n                obj\r\n            )\r\n            if (response.status == 200) {\r\n                setWarehouse(response.data.data.warehouse)\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                confirmButtonText: 'Ok',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    const schema = Yup.object().shape({\r\n        cpc: Yup.string().required('Required*').nullable(),\r\n        name: Yup.string()\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(100)\r\n            .nullable(),\r\n        type_taxanomy: Yup.string()\r\n            .required('Required*')\r\n            .matches(\r\n                /^.*((?=.*[aA-zZ\\s]){1}).*$/,\r\n                'Please enter valid category'\r\n            )\r\n            .max(100)\r\n            .nullable(),\r\n        limit: Yup.number('Must be number')\r\n            .required('Required*')\r\n            .positive()\r\n            .integer()\r\n            .min(1, 'Minimum is 1')\r\n            .nullable(),\r\n        warehouse: Yup.string().required('Required*').nullable(),\r\n        display: Yup.string()\r\n            .required('Required*')\r\n            .matches(\r\n                /^.*((?=.*[aA-zZ\\s]){1}).*$/,\r\n                'Please enter valid display name'\r\n            )\r\n            .max(100)\r\n            .nullable(),\r\n    })\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        setLoading(true)\r\n        data.prefix = 'bag-master'\r\n        data.sort_id = 'No Status'\r\n        data.created_at = Date.now()\r\n        data.code = bagCount\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/createMasters',\r\n                data\r\n            )\r\n            if (response.status == 200) {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Created',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: 'Bag Already Exists',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                confirmButtonText: 'Ok',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelEdit = async (data) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post('/editMaster', data)\r\n            if (response.status == 200) {\r\n                handleClose()\r\n                setEditFetchData({})\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Updated',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                handleClose()\r\n                setEditFetchData({})\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'failed',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            handleClose()\r\n            setEditFetchData({})\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                confirmButtonText: 'Ok',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n   \r\n    return (\r\n        <Dialog onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Bag</H4>\r\n\r\n                <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Bag Id\"\r\n                            type=\"text\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            name=\"email\"\r\n                            value={\r\n                                getValues('code') == null\r\n                                    ? bagCount === 0\r\n                                        ? null\r\n                                        : bagCount\r\n                                    : getValues('code')\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Bag Display Name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            {...register('name')}\r\n                            error={errors.name ? true : false}\r\n                            helperText={errors.name ? errors.name.message : ''}\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Bag Limit\"\r\n                            name=\"phone\"\r\n                            inputProps={{ maxLength: 2 }}\r\n                            onPaste={(e) => {\r\n                                e.preventDefault()\r\n                                return false\r\n                            }}\r\n                            onKeyPress={(event) => {\r\n                                if (!/[0-9]/.test(event.key)) {\r\n                                    event.preventDefault()\r\n                                }\r\n                            }}\r\n                            {...register('limit')}\r\n                            error={errors.limit ? true : false}\r\n                            helperText={\r\n                                errors.limit ? errors.limit.message : ''\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Bag Display\"\r\n                            type=\"text\"\r\n                            name=\"display\"\r\n                            {...register('display')}\r\n                            error={errors.display ? true : false}\r\n                            helperText={\r\n                                errors.display ? errors.display.message : ''\r\n                            }\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"CPC\"\r\n                            select\r\n                            type=\"text\"\r\n                            name=\"cpc\"\r\n                            defaultValue={getValues('cpc')}\r\n                            {...register('cpc')}\r\n                            error={errors.cpc ? true : false}\r\n                            helperText={errors.cpc?.message}\r\n                        >\r\n                            {cpc.map((data) => (\r\n                                <MenuItem\r\n                                    value={data.code}\r\n                                    onClick={() =>\r\n                                        getCpcData(data.name, data.code)\r\n                                    }\r\n                                >\r\n                                    {data.code}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextFieldCustOm>\r\n                        <TextFieldCustOm\r\n                            label=\"Warehouse\"\r\n                            select\r\n                            type=\"text\"\r\n                            name=\"warehouse\"\r\n                            defaultValue={getValues('warehouse')}\r\n                            {...register('warehouse')}\r\n                            error={errors.warehouse ? true : false}\r\n                            helperText={errors.warehouse?.message}\r\n                        >\r\n                            {warehouse.map((data) => (\r\n                                <MenuItem value={data.name}>\r\n                                    {data.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextFieldCustOm>\r\n                        <TextFieldCustOm\r\n                            label=\"Bag Category\"\r\n                            select\r\n                            type=\"text\"\r\n                            name=\"type_taxanomy\"\r\n                            defaultValue={getValues('type_taxanomy')}\r\n                            {...register('type_taxanomy')}\r\n                            error={errors.type_taxanomy ? true : false}\r\n                            helperText={errors.type_taxanomy?.message}\r\n                        >\r\n                            <MenuItem value=\"BOT\">BOT</MenuItem>\r\n                        </TextFieldCustOm>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading}\r\n                        onClick={\r\n                            Object.keys(editFetchData).length !== 0\r\n                                ? handleSubmit(handelEdit)\r\n                                : handleSubmit(onSubmit)\r\n                        }\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\checkbox\\LabelledCheckbox.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\checkbox\\PlacingCheckboxLabel.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-charging\\user-dailog.jsx",["3604","3605"],"import React, { useState } from 'react'\r\nimport { Dialog, Button, TextField, MenuItem } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosMisUser } from '../../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    handleClose,\r\n    open,\r\n    setIsAlive,\r\n    chargingUsers,\r\n    isCheck,\r\n}) => {\r\n    const [chargingUserName, setCharging] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const handelSendRequestConfirm = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                tray: isCheck,\r\n                user_name: chargingUserName,\r\n                sort_id: 'Send for charging',\r\n            }\r\n            let res = await axiosMisUser.post('/wht-sendTo-wharehouse', obj)\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setCharging(\"\")\r\n                setIsAlive((isAlive) => !isAlive)\r\n                handleClose()\r\n            } else {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Dialog fullWidth maxWidth=\"xs\" onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Select Charging User</H4>\r\n                <TextFieldCustOm\r\n                    label=\"Username\"\r\n                    fullWidth\r\n                    select\r\n                    name=\"username\"\r\n                >\r\n                    {chargingUsers.map((data) => (\r\n                        <MenuItem\r\n                            key={data.user_name}\r\n                            value={data.user_name}\r\n                            onClick={(e) => {\r\n                                setCharging(data.user_name)\r\n                            }}\r\n                        >\r\n                            {data.user_name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextFieldCustOm>\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading || chargingUserName == ''}\r\n                        onClick={(e) => {\r\n                            handelSendRequestConfirm()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bqc\\user-dailog.jsx",["3606","3607"],"import React, { useState } from 'react'\r\nimport { Dialog, Button, TextField, MenuItem } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosMisUser } from '../../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    handleClose,\r\n    open,\r\n    setIsAlive,\r\n    chargingUsers,\r\n    isCheck,\r\n}) => {\r\n    const [bqcuserName, setBqcUserName] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const handelSendRequestConfirm = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                tray: isCheck,\r\n                user_name: bqcuserName,\r\n                sort_id: 'Send for BQC',\r\n            }\r\n            let res = await axiosMisUser.post('/wht-sendTo-wharehouse', obj)\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setBqcUserName('')\r\n                setIsAlive((isAlive) => !isAlive)\r\n                handleClose()\r\n            } else {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Dialog fullWidth maxWidth=\"xs\" onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Select Charging User</H4>\r\n                <TextFieldCustOm\r\n                    label=\"Username\"\r\n                    fullWidth\r\n                    select\r\n                    name=\"username\"\r\n                >\r\n                    {chargingUsers.map((data) => (\r\n                        <MenuItem\r\n                            key={data.user_name}\r\n                            value={data.user_name}\r\n                            onClick={(e) => {\r\n                                setBqcUserName(data.user_name)\r\n                            }}\r\n                        >\r\n                            {data.user_name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextFieldCustOm>\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading || bqcuserName == ''}\r\n                        onClick={(e) => {\r\n                            handelSendRequestConfirm()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bot\\assign-dialog.jsx",["3608","3609","3610","3611","3612"],"import React, { useState, useEffect } from 'react'\r\nimport { Dialog, Button, Grid, TextField, MenuItem } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    botUsers,\r\n    setBotUsers,\r\n    bagId,\r\n}) => {\r\n    const [botName, setBotName] = useState()\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const handelSendRequestConfirm = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                bagId: bagId,\r\n                bot_name: botName,\r\n            }\r\n            let res = await axiosMisUser.post('/issueRequestSend', obj)\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setBotName('')\r\n                setIsAlive((isAlive) => !isAlive)\r\n                handleClose()\r\n            } else {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setBotName('')\r\n                handleClose()\r\n                navigate('/mis/assign-to-agent/bot/uic-genaration/' + res.data.bagId)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Dialog fullWidth\r\n        maxWidth=\"xs\" onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Select Bot User</H4>\r\n                <TextFieldCustOm label=\"Username\" fullWidth select name=\"username\">\r\n                    {botUsers.map((data) => (\r\n                        <MenuItem\r\n                            key={data.user_name}\r\n                            value={data.user_name}\r\n                            onClick={(e) => {\r\n                                setBotName(data.user_name)\r\n                            }}\r\n                        >\r\n                            {data.user_name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextFieldCustOm>\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading || botName == ''}\r\n                        onClick={(e) => {\r\n                            handelSendRequestConfirm()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        \r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-audit\\user-dailog.jsx",["3613","3614"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\assign-dailog.jsx",["3615","3616"],"import React, { useState } from 'react'\r\nimport { Dialog, Button, TextField, MenuItem } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    handleClose,\r\n    open,\r\n    setIsAlive,\r\n    sortingAgent,\r\n    isCheck,\r\n}) => {\r\n    const [sortingAgentName, setSortingAgentName] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n    const handelSendRequestConfirm = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                agent_name: sortingAgentName,\r\n                trayId: isCheck,\r\n            }\r\n            let checkReadyForSorting = await axiosMisUser.post(\r\n                '/check-all-wht-inuse-for-sorting',\r\n                obj\r\n            )\r\n            if (checkReadyForSorting.status === 200) {\r\n                let res = await axiosMisUser.post(\r\n                    '/assign-to-sorting-agent',\r\n                    obj\r\n                )\r\n                if (res.status === 200) {\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                    navigate('/mis/sorting/bot-to-wht')\r\n                } else if (res.status == 202) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    handleClose()\r\n                    setSortingAgentName('')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog fullWidth maxWidth=\"xs\" onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Select Sorting User</H4>\r\n                <TextFieldCustOm\r\n                    label=\"Username\"\r\n                    fullWidth\r\n                    select\r\n                    name=\"username\"\r\n                >\r\n                    {sortingAgent.map((data) => (\r\n                        <MenuItem\r\n                            key={data.user_name}\r\n                            value={data.user_name}\r\n                            onClick={(e) => {\r\n                                setSortingAgentName(data.user_name)\r\n                            }}\r\n                        >\r\n                            {data.user_name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextFieldCustOm>\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        p\r\n                        disabled={loading || sortingAgentName == ''}\r\n                        onClick={(e) => {\r\n                            handelSendRequestConfirm()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-products\\add-products.jsx",["3617","3618","3619","3620","3621"],"import React, { useState, useEffect } from 'react'\r\nimport { Dialog, Button, Grid, TextField, MenuItem } from '@mui/material'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport * as Yup from 'yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n}) => {\r\n    const [brands, setBrands] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [productImage, setProductImage] = useState({\r\n        imagePreview: '',\r\n        imageStore: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosSuperAdminPrexo.post(\r\n                    '/getBrandsAlpha'\r\n                )\r\n                if (response.status === 200) {\r\n                    setBrands(response.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchData()\r\n        if (Object.keys(editFetchData).length !== 0) {\r\n            reset({ ...editFetchData })\r\n            open()\r\n        }\r\n    }, [])\r\n\r\n    const schema = Yup.object().shape({\r\n        vendor_sku_id: Yup.string()\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .nullable(),\r\n        vendor_name: Yup.string()\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .nullable(),\r\n        model_name: Yup.string()\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .nullable(),\r\n        brand_name: Yup.string().required('Required'),\r\n    })\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        console.log(data)\r\n        setLoading(true)\r\n        let muis_code = ''\r\n        let alphebet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n        let numbers = '123456789'\r\n        for (var i = 0; i < 2; i++) {\r\n            muis_code += alphebet.charAt(\r\n                Math.floor(Math.random() * alphebet.length)\r\n            )\r\n        }\r\n        for (var i = 0; i < 3; i++) {\r\n            muis_code += numbers.charAt(\r\n                Math.floor(Math.random() * numbers.length)\r\n            )\r\n        }\r\n        try {\r\n            data.muic = muis_code\r\n            data.created_at = Date.now()\r\n            let formdata = new FormData()\r\n            formdata.append('image', productImage.store)\r\n            for (let [key, value] of Object.entries(data)) {\r\n                formdata.append(key, value)\r\n            }\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/createproducts',\r\n                formdata\r\n            )\r\n            if (response.status == 200) {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: response.data.message,\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: response.data.message,\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelEdit = async (data) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post('/editProduct', data)\r\n            if (response.status == 200) {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Update Successfully',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'failed',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelProfile = (event) => {\r\n        setProductImage({\r\n            preview: URL.createObjectURL(event.target.files[0]),\r\n            store: event.target.files[0],\r\n        })\r\n    }\r\n    return (\r\n        <Dialog open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Update Member</H4>\r\n                <img\r\n                    src={productImage.preview}\r\n                    height=\"60px\"\r\n                    width=\"60px\"\r\n                    style={{ borderRadius: '50%', margin: 'auto' }}\r\n                />\r\n                <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Image\"\r\n                            type=\"file\"\r\n                            onChange={(e) => {\r\n                                handelProfile(e)\r\n                            }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            accept=\".jpg,.jpeg,.png,\"\r\n                            name=\"image\"\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Vendor SKU ID\"\r\n                            type=\"text\"\r\n                            name=\"vendor_sku_id\"\r\n                            {...register('vendor_sku_id')}\r\n                            error={errors.vendor_sku_id ? true : false}\r\n                            helperText={\r\n                                errors.vendor_sku_id\r\n                                    ? errors.vendor_sku_id.message\r\n                                    : ''\r\n                            }\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Model Name\"\r\n                            type=\"text\"\r\n                            name=\"model_name\"\r\n                            {...register('model_name')}\r\n                            error={errors.model_name ? true : false}\r\n                            helperText={\r\n                                errors.model_name\r\n                                    ? errors.model_name.message\r\n                                    : ''\r\n                            }\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Vendor Name\"\r\n                            type=\"text\"\r\n                            name=\"vendor_name\"\r\n                            {...register('vendor_name')}\r\n                            error={errors.vendor_name ? true : false}\r\n                            helperText={\r\n                                errors.vendor_name\r\n                                    ? errors.vendor_name.message\r\n                                    : ''\r\n                            }\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Brand Name\"\r\n                            select\r\n                            name=\"brand_name\"\r\n                            defaultValue={getValues('brand_name')}\r\n                            {...register('brand_name')}\r\n                            error={errors.brand_name ? true : false}\r\n                            helperText={\r\n                                errors.brand_name\r\n                                    ? errors.brand_name.message\r\n                                    : ''\r\n                            }\r\n                        >\r\n                            {brands.map((data) => (\r\n                                <MenuItem\r\n                                    key={data.brand_name}\r\n                                    value={data.brand_name}\r\n                                >\r\n                                    {data.brand_name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextFieldCustOm>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading}\r\n                        onClick={\r\n                            Object.keys(editFetchData).length !== 0\r\n                                ? handleSubmit(handelEdit)\r\n                                : handleSubmit(onSubmit)\r\n                        }\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-users\\new-users.jsx",["3622","3623","3624","3625","3626"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-products\\edit-product.jsx",["3627","3628","3629","3630"],"import React, { useState, useEffect } from 'react'\r\nimport { Dialog, Button, TextField } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n}) => {\r\n    const [productImage, setProductImage] = useState({\r\n        preview: '',\r\n        store: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(editFetchData).length !== 0) {\r\n            setProductImage({\r\n                ...productImage,\r\n                preview: editFetchData.image,\r\n            })\r\n            open()\r\n        }\r\n    }, [])\r\n\r\n    const handelEditImage = async () => {\r\n        try {\r\n            let obj = {\r\n                _id: editFetchData?._id,\r\n            }\r\n            let formdata = new FormData()\r\n            formdata.append('image', productImage.store)\r\n            for (let [key, value] of Object.entries(obj)) {\r\n                formdata.append(key, value)\r\n            }\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/editProductImage',\r\n                formdata\r\n            )\r\n            if (response.status == 200) {\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Update Successfully',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setEditFetchData({})\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                handleClose()\r\n\r\n                setEditFetchData({})\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            handleClose()\r\n            setEditFetchData({})\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'Updation Failed',\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelProfile = (event) => {\r\n        setProductImage({\r\n            preview: URL.createObjectURL(event.target.files[0]),\r\n            store: event.target.files[0],\r\n        })\r\n    }\r\n    return (\r\n        <Dialog open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Update Image</H4>\r\n                <img\r\n                    src={productImage.preview}\r\n                    height=\"60px\"\r\n                    width=\"60px\"\r\n                    style={{ borderRadius: '50%', margin: 'auto' }}\r\n                />\r\n\r\n                <TextFieldCustOm\r\n                    label=\"Image\"\r\n                    type=\"file\"\r\n                    onChange={(e) => {\r\n                        handelProfile(e)\r\n                    }}\r\n                    fullWidth\r\n                    InputLabelProps={{ shrink: true }}\r\n                    accept=\".jpg,.jpeg,.png,\"\r\n                    name=\"image\"\r\n                />\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={productImage.store == ''}\r\n                        onClick={(e) => {\r\n                            handelEditImage()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Update\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-brands\\add-brand.jsx",["3631","3632","3633","3634"],"import React, { useEffect, useState } from 'react'\r\nimport { Dialog, Button, Grid, TextField } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport * as Yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport Swal from 'sweetalert2'\r\nimport { useForm } from 'react-hook-form'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst AddBrandAndEditDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n    brandCount,\r\n}) => {\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(editFetchData).length !== 0) {\r\n            reset({ ...editFetchData })\r\n            open()\r\n        }\r\n    }, [])\r\n\r\n    const schema = Yup.object().shape({\r\n        brand_name: Yup.string()\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .nullable(),\r\n    })\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        reset,\r\n        getValues,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            setLoading(true)\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/createBrands',\r\n                data\r\n            )\r\n            if (response.status == 200) {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Created',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelEdit = async (data) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post('/editBrand', data)\r\n            if (response.status == 200) {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Updated',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                Swal.fire({\r\n                    icon: 'failed',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Add Location</H4>\r\n\r\n                <TextFieldCustOm\r\n                    label=\"Brand Id\"\r\n                    type=\"text\"\r\n                    name=\"brand_id\"\r\n                    value={\r\n                        getValues('brand_id') == null\r\n                            ? 'brand-0' + brandCount\r\n                            : getValues('brand_id')\r\n                    }\r\n                    {...register('brand_id')}\r\n                />\r\n                <TextFieldCustOm\r\n                    label=\"Name\"\r\n                    type=\"text\"\r\n                    name=\"brand_name\"\r\n                    {...register('brand_name')}\r\n                    error={errors.name ? true : false}\r\n                    helperText={errors.name ? errors.name?.message : ''}\r\n                />\r\n\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={loading}\r\n                        onClick={\r\n                            Object.keys(editFetchData).length !== 0\r\n                                ? handleSubmit(handelEdit)\r\n                                : handleSubmit(onSubmit)\r\n                        }\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default AddBrandAndEditDialog\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-warehouse\\add-warehouse.jsx",["3635","3636","3637","3638"],"import React, { useEffect, useState } from 'react'\r\nimport { Dialog, Button, Grid, TextField, MenuItem } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport * as Yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport Swal from 'sweetalert2'\r\nimport { useForm } from 'react-hook-form'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n}) => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [locationDrop, setLocationDrop] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosSuperAdminPrexo.post('/getLocation')\r\n                if (res.status == 200) {\r\n                    setLocationDrop(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n            if (Object.keys(editFetchData).length !== 0) {\r\n                reset({ ...editFetchData })\r\n                open()\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const schema = Yup.object().shape({\r\n        name: Yup.string()\r\n            .max(40, 'Please Enter Below 40')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        code: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid code')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        address: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid address')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        city: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid city')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        state: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid state')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        country: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid country')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        pincode: Yup.string()\r\n            .min(6, 'Please Enter valid Pincode')\r\n            .required('Required*')\r\n            .nullable(),\r\n        parent_id: Yup.string().required('Required*').nullable(),\r\n        warehouse_type: Yup.string().required('Required*').nullable(),\r\n    })\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        data.type_taxanomy = 'Warehouse'\r\n        try {\r\n            setLoading(true)\r\n            let response = await axiosSuperAdminPrexo.post('/addLocation', data)\r\n            if (response.status == 200) {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Added',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelEdit = async (data) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post('/editInfra', data)\r\n            if (response.status == 200) {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Update Successfully',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                alert(response.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Dialog  open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Add Warehouse</H4>\r\n\r\n                <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            {...register('name')}\r\n                            error={errors.name ? true : false}\r\n                            helperText={errors.name ? errors.name?.message : ''}\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Location\"\r\n                            select\r\n                            name=\"parent_id\"\r\n                            {...register('parent_id')}\r\n                            error={errors.parent_id ? true : false}\r\n                            helperText={errors.parent_id?.message}\r\n                        >\r\n                            {locationDrop.map((data) => (\r\n                                <MenuItem value={data.name}>\r\n                                    {data.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextFieldCustOm>\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Address\"\r\n                            type=\"text\"\r\n                            name=\"address\"\r\n                            {...register('address')}\r\n                            error={errors.address ? true : false}\r\n                            helperText={\r\n                                errors.address ? errors.address?.message : ''\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"State\"\r\n                            type=\"text\"\r\n                            name=\"state\"\r\n                            {...register('state')}\r\n                            error={errors.state ? true : false}\r\n                            helperText={\r\n                                errors.state ? errors.state?.message : ''\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Pincode\"\r\n                            type=\"number\"\r\n                            name=\"pincode\"\r\n                            inputProps={{ maxLength: 6 }}\r\n                            onKeyPress={(event) => {\r\n                                if (!/[0-9]/.test(event.key)) {\r\n                                    event.preventDefault()\r\n                                }\r\n                            }}\r\n                            {...register('pincode')}\r\n                            error={errors.pincode ? true : false}\r\n                            helperText={\r\n                                errors.pincode ? errors.pincode?.message : ''\r\n                            }\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Code\"\r\n                            type=\"text\"\r\n                            name=\"code\"\r\n                            disabled={Object.keys(editFetchData).length !== 0}\r\n                            {...register('code')}\r\n                            error={errors.code ? true : false}\r\n                            helperText={errors.code ? errors.code?.message : ''}\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Warehouse Type\"\r\n                            select\r\n                            name=\"warehouse_type\"\r\n                            {...register('warehouse_type')}\r\n                            error={errors.warehouse_type ? true : false}\r\n                            helperText={errors.warehouse_type?.message}\r\n                        >\r\n                            <MenuItem value=\"STW\">STW</MenuItem>\r\n                            <MenuItem value=\"PRC\">PRC</MenuItem>\r\n                            <MenuItem value=\"Sales\">Sales</MenuItem>\r\n                        </TextFieldCustOm>\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Country\"\r\n                            type=\"text\"\r\n                            name=\"country\"\r\n                            {...register('country')}\r\n                            error={errors.country ? true : false}\r\n                            helperText={\r\n                                errors.country ? errors.country?.message : ''\r\n                            }\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"City\"\r\n                            type=\"text\"\r\n                            name=\"city\"\r\n                            {...register('city')}\r\n                            error={errors.city ? true : false}\r\n                            helperText={errors.city ? errors.city?.message : ''}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={loading}\r\n                        onClick={\r\n                            Object.keys(editFetchData).length !== 0\r\n                                ? handleSubmit(handelEdit)\r\n                                : handleSubmit(onSubmit)\r\n                        }\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Dashboard\\card.jsx",["3639"],"import React, { useEffect, useState } from 'react'\r\nimport { Box, useTheme } from '@mui/system'\r\nimport { H3, Paragraph } from 'app/components/Typography'\r\nimport { Grid, Card, IconButton, Icon } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst StatCard3 = () => {\r\n    const [count, setCount] = useState({})\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosSuperAdminPrexo.post(\r\n                    '/superAdminDashboard'\r\n                )\r\n                if (res.status == 200) {\r\n                    setCount(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    confirmButtonText: 'Ok',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const statList = [\r\n        {\r\n            icon: 'people',\r\n            amount: count.usersCount,\r\n            title: 'Users',\r\n            link: '/sup-admin/users',\r\n        },\r\n        {\r\n            icon: 'location_on_outlined',\r\n            amount: count.location,\r\n            title: 'Locations',\r\n            link: '/sup-admin/location',\r\n        },\r\n        {\r\n            icon: 'home',\r\n            amount: count.warehouse,\r\n            title: 'Warehouses',\r\n            link: '/sup-admin/warehouse',\r\n        },\r\n        {\r\n            icon: 'branding_watermark',\r\n            amount: count.brand,\r\n            title: 'Brands',\r\n            link: '/sup-admin/brands',\r\n        },\r\n        {\r\n            icon: 'shopping_cart',\r\n            amount: count.products,\r\n            title: 'Products',\r\n            link: '/sup-admin/products',\r\n        },\r\n        {\r\n            icon: 'add_shopping_cart',\r\n            amount: count.bag,\r\n            title: 'Bags',\r\n            link: '/sup-admin/bag',\r\n        },\r\n        {\r\n            icon: 'add_shopping_cart',\r\n            amount: count.tray,\r\n            title: 'Trays',\r\n            link: '/sup-admin/tray',\r\n        },\r\n        {\r\n            icon: 'battery_charging_full',\r\n            amount: count.readyForCharging,\r\n            title: 'Ready For Charging',\r\n            link: '/sup-admin/ready-for-charging',\r\n        },\r\n        {\r\n            icon: 'leak_remove',\r\n            amount: count.removeInvalidItem,\r\n            title: 'Remove invalid item',\r\n            link: '/sup-admin/remove-invalid-item',\r\n        },\r\n        {\r\n            icon: 'art_track',\r\n            amount: count.trackItem,\r\n            title: 'Track Item',\r\n            link: '/sup-admin/track-item',\r\n        },\r\n    ]\r\n    const { palette } = useTheme()\r\n    const textMuted = palette.text.secondary\r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing={3}>\r\n                {statList.map((item, ind) => (\r\n                    <Grid key={item.title} item md={3} sm={6} xs={12}>\r\n                        <Card\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => {\r\n                                navigate(item.link)\r\n                            }}\r\n                            elevation={3}\r\n                            sx={{ p: '20px', display: 'flex' }}\r\n                        >\r\n                            <div>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    sx={{\r\n                                        padding: '8px',\r\n                                        background: 'rgba(0, 0, 0, 0.01)',\r\n                                    }}\r\n                                >\r\n                                    <Icon sx={{ color: textMuted }}>\r\n                                        {item.icon}\r\n                                    </Icon>\r\n                                </IconButton>\r\n                            </div>\r\n                            <Box ml={2}>\r\n                                <H3 sx={{ mt: '-4px', fontSize: '32px' }}>\r\n                                    {item.amount}\r\n                                </H3>\r\n                                <Paragraph sx={{ m: 0, color: textMuted }}>\r\n                                    {item.title}\r\n                                </Paragraph>\r\n                            </Box>\r\n                        </Card>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatCard3\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\sup-admin-components\\Manage-location\\add-location.jsx",["3640","3641","3642"],"import React, { useEffect, useState } from 'react'\r\nimport { Dialog, Button, Grid, TextField } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport * as Yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport Swal from 'sweetalert2'\r\nimport { useForm } from 'react-hook-form'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n}) => {\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(editFetchData).length !== 0) {\r\n            reset({ ...editFetchData })\r\n            open()\r\n        }\r\n    }, [])\r\n\r\n    const schema = Yup.object().shape({\r\n        name: Yup.string()\r\n            .max(40, 'Please Enter Below 40')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        code: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid code')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        address: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid address')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        city: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid city')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        state: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid state')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        country: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid country')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        pincode: Yup.string()\r\n            .min(6, 'Please Enter valid Pincode')\r\n            .required('Required*')\r\n            .nullable(),\r\n    })\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        data.type_taxanomy = 'CPC'\r\n        try {\r\n            setLoading(true)\r\n            let response = await axiosSuperAdminPrexo.post('/addLocation', data)\r\n            if (response.status == 200) {\r\n                setLoading(true)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Added',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(true)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(true)\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelEdit = async (data) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post('/editInfra', data)\r\n            if (response.status == 200) {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Update Successfully',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: response.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Add Location</H4>\r\n\r\n                <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            {...register('name')}\r\n                            error={errors.name ? true : false}\r\n                            helperText={errors.name ? errors.name?.message : ''}\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Address\"\r\n                            type=\"text\"\r\n                            name=\"address\"\r\n                            {...register('address')}\r\n                            error={errors.address ? true : false}\r\n                            helperText={\r\n                                errors.address ? errors.address?.message : ''\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"State\"\r\n                            type=\"text\"\r\n                            name=\"state\"\r\n                            {...register('state')}\r\n                            error={errors.state ? true : false}\r\n                            helperText={\r\n                                errors.state ? errors.state?.message : ''\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Pincode\"\r\n                            type=\"number\"\r\n                            name=\"pincode\"\r\n                            inputProps={{ maxLength: 6 }}\r\n                            onKeyPress={(event) => {\r\n                                if (!/[0-9]/.test(event.key)) {\r\n                                    event.preventDefault()\r\n                                }\r\n                            }}\r\n                            {...register('pincode')}\r\n                            error={errors.pincode ? true : false}\r\n                            helperText={\r\n                                errors.pincode ? errors.pincode?.message : ''\r\n                            }\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Code\"\r\n                            type=\"text\"\r\n                            name=\"code\"\r\n                            disabled={Object.keys(editFetchData).length !== 0}\r\n                            {...register('code')}\r\n                            error={errors.code ? true : false}\r\n                            helperText={errors.code ? errors.code?.message : ''}\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Country\"\r\n                            type=\"text\"\r\n                            name=\"country\"\r\n                            {...register('country')}\r\n                            error={errors.country ? true : false}\r\n                            helperText={\r\n                                errors.country ? errors.country?.message : ''\r\n                            }\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"City\"\r\n                            type=\"text\"\r\n                            name=\"city\"\r\n                            {...register('city')}\r\n                            error={errors.city ? true : false}\r\n                            helperText={errors.city ? errors.city?.message : ''}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={loading}\r\n                        onClick={\r\n                            Object.keys(editFetchData).length !== 0\r\n                                ? handleSubmit(handelEdit)\r\n                                : handleSubmit(onSubmit)\r\n                        }\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\checkbox\\SimpleCheckbox.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\AdvanceLineChart2.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\AdvanceLineChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\AdvanceAreaChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\slider\\VerticalSlider.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\slider\\InputSlider.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\slider\\RangeSlider.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\dashboard\\shared\\HeatmapChart.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\slider\\DiscreteSlider.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\todo\\TodoItem.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\GridProductCard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\ecommerce\\ListProductCard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\BoardList.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\CardEditorDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\slider\\ContinuousSlider.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\radio\\PlacingRadioLabel.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\radio\\StandaloneRadio.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\radio\\SimpleRadio.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\ConfirmationDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\ResponsiveDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\OptimalSizeDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\CustomizedDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\FullScreenDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\FormDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\switch\\CustomizedSwitch.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\DialogTransition.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\SimpleDialog.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\dialog\\SimpleAlerts.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\switch\\LabelledSwitch.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\switch\\PlacingSwitchLabel.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\switch\\FormGroupSwitch.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\forms\\StepperForm.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\switch\\SijmpleSwitch.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\auto-complete\\BadgeAutocomplete.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\auto-complete\\AsyncAutocomplete.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\material-kit\\auto-complete\\AutocompleteCombo.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\ScrumBoardCard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\pages\\user-list\\ProfileCard2.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\views\\scrum-board\\ScrumBoardLabelBar.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Order\\order.jsx",["3643","3644","3645","3646","3647","3648","3649","3650","3651","3652"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Dashboard\\dashboard.jsx",["3653","3654"],"import React from 'react'\r\nimport StatCard3 from './card'\r\nimport { H3, Span } from 'app/components/Typography'\r\nimport { styled, useTheme } from '@mui/system'\r\n\r\nconst AnalyticsRoot = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n}))\r\n\r\nconst FlexBox = styled('div')(({ theme }) => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    marginBottom: '24px',\r\n}))\r\n\r\nconst Analytics2 = () => {\r\n    const { palette } = useTheme()\r\n    return (\r\n        <AnalyticsRoot>\r\n            <FlexBox>\r\n                <H3 sx={{ m: 0 }}>DASHBOARD</H3>\r\n            </FlexBox>\r\n            <StatCard3 />\r\n        </AnalyticsRoot>\r\n    )\r\n}\r\n\r\nexport default Analytics2\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\handel-view-tray-item.jsx",["3655"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport { axiosAuditAgent } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [trayItem, setTrayItem] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosAuditAgent.post(\r\n                    '/view-items/' + trayId\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayItem(response.data.data.items)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand_name',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model_name',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Audit Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.stage,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Orginel Grade',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.orgGrade,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Audit Recomendad Grade',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.grade,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Reason',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.reason,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Description',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.description,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assigned Tray', path: '/' },\r\n                        { name: 'Tray-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayItem}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\wht-tray-release.jsx",["3656"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [tray, setTray] = useState([])\r\n\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/tray-for-release/' +\r\n                            location +\r\n                            '/' +\r\n                            'Audit Done' +\r\n                            '/' +\r\n                            'WHT'\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    const handelClose = async (e, id) => {\r\n        e.preventDefault()\r\n        try {\r\n            let res = await axiosWarehouseIn.post('/wht-relase/' + id)\r\n            if (res.status === 200) {\r\n                alert(res.data.message)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    0 + '/' + tableMeta.rowData[7],\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'Audit Done Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: 'green' }}\r\n                                onClick={(e) => {\r\n                                    handelClose(e, value)\r\n                                }}\r\n                            >\r\n                                Release\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Return-from-Audit' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Report\\pmt-report.jsx",["3657","3658","3659","3660","3661","3662","3663","3664","3665"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    MenuItem,\r\n    Box,\r\n    TextField,\r\n} from '@mui/material'\r\nimport moment from \"moment\";\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const [sortDate, setSortDate] = useState(\"\");\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((d, index) => {\r\n                    d.id = page * rowsPerPage + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const { location } = jwt_decode(admin)\r\n            const fetchData = async () => {\r\n                try {\r\n                    let obj = {\r\n                        location: location,\r\n                        trayType: 'PMT',\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/mmt-pmt-report',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [])\r\n\r\n    /****************************************DATE WISE SORT *************************************************** */\r\n    const handelSort = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                const { location } = jwt_decode(admin)\r\n                let obj = {\r\n                    date: sortDate,\r\n                    location: location,\r\n                    trayType: 'PMT',\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/sort-mmt-pmt-report',\r\n                    obj\r\n                )\r\n                if (res.status == 200) {\r\n                    setItem(res.data.data)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n  \r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <Table id=\"example\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>UIC</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>MUIC</TableCell>\r\n                        <TableCell>Brand</TableCell>\r\n                        <TableCell>Model</TableCell>\r\n                        <TableCell>Bag ID</TableCell>\r\n                        <TableCell>BOT Agent Name</TableCell>\r\n                        <TableCell>Assigned Date</TableCell>\r\n                        <TableCell>Tray ID</TableCell>\r\n                        <TableCell>Tray Type</TableCell>\r\n                        <TableCell>Tray Closed Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell>{data.tracking_id}</TableCell>\r\n                            <TableCell>{data.order_id}</TableCell>\r\n                            <TableCell>\r\n                                {data?.order[0]?.order_date != undefined\r\n                                    ? new Date(\r\n                                          data?.order[0]?.order_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.uic_code?.code}</TableCell>\r\n                            <TableCell>{data.imei}</TableCell>\r\n                            <TableCell>{data.item_id}</TableCell>\r\n                            <TableCell>{data?.product[0]?.muic}</TableCell>\r\n                            <TableCell>\r\n                                {data?.product[0]?.brand_name}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.product[0]?.model_name}\r\n                            </TableCell>\r\n                            <TableCell>{data.bag_id}</TableCell>\r\n                            <TableCell>{data.agent_name}</TableCell>\r\n                            <TableCell>\r\n                                {data?.assign_to_agent != undefined\r\n                                    ? new Date(\r\n                                          data?.assign_to_agent\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.tray_id}</TableCell>\r\n                            <TableCell>{data.tray_type}</TableCell>\r\n                            <TableCell>\r\n                                {new Date(\r\n                                    data?.warehouse_close_date\r\n                                ).toLocaleString('en-GB', {\r\n                                    hour12: true,\r\n                                })}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        )\r\n    }, [item, data])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Report', path: '/' },\r\n                        { name: 'PMT' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n               \r\n            >\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        flexDirection: 'start',\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        id=\"filled-select-currency\"\r\n                        type=\"Date\"\r\n                        onChange={(e) => {\r\n                            setSortDate(e.target.value)\r\n                        }}\r\n                        inputProps={{\r\n                            max: moment().format('YYYY-MM-DD'),\r\n                        }}\r\n                        sx={{ mt: 1, mb: 1 }}\r\n                        helperText=\"Please Select MMT closed Date\"\r\n                        variant=\"filled\"\r\n                    />\r\n                    <Button\r\n                        sx={{\r\n                            mt: 20,\r\n                            m: 2,\r\n                            height: '38px',\r\n                        }}\r\n                        disabled={sortDate == '' ? true : false}\r\n                        variant=\"contained\"\r\n                        style={{\r\n                            backgroundColor: '#206CE2',\r\n                            marginTop: '23px',\r\n                        }}\r\n                        onClick={(e) => {\r\n                            handelSort(e)\r\n                        }}\r\n                    >\r\n                        Sort\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={item.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\other-tray-return-from-audit.jsx",["3666","3667","3668","3669","3670","3671","3672"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport AssignTrayDialogBox from './assign-tray'\r\n\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContent,\r\n    DialogActions,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport { axiosMisUser, axiosWarehouseIn } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [tray, setTray] = useState([])\r\n    const [open, setOpen] = React.useState(false)\r\n    const [counts, setCounts] = useState('')\r\n    const [trayId, setTrayId] = useState('')\r\n    const [auditUsers, setAuditUsers] = useState([])\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/retunrFromAudit/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    const handelViewDetailTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/return-from-audit/close/' + id)\r\n    }\r\n\r\n    const handelTrayReceived = async () => {\r\n        if (counts === '') {\r\n            alert('Please confirm counts')\r\n        } else {\r\n            try {\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    counts: counts,\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/recievedFromOtherTray',\r\n                    obj\r\n                )\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setOpen(false)\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/return-from-audit/tray-items/' + id)\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelGetAuditUser = () => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosMisUser.post(\r\n                        '/get-charging-users/' + 'Audit/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setAuditUsers(res.data.data)\r\n                        handleDialogOpen()\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'Audit Done Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            {tableMeta.rowData[3] != 'Received From Audit' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        setOpen(true)\r\n                                        setTrayId(value)\r\n                                    }}\r\n                                >\r\n                                    RECEIVE\r\n                                </Button>\r\n                            ) : (\r\n                                <>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        View\r\n                                    </Button>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: 'red' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewDetailTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        Close\r\n                                    </Button>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Please verify the count of - {trayId}\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <TextField\r\n                        label=\"Enter Item Count\"\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => {\r\n                            setCounts(e.target.value)\r\n                        }}\r\n                        inputProps={{ maxLength: 3 }}\r\n                        onKeyPress={(event) => {\r\n                            if (!/[0-9]/.test(event.key)) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        disabled={counts === ''}\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelTrayReceived(e)\r\n                        }}\r\n                    >\r\n                        RECEIVED\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Return-from-Audit' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Button\r\n                variant=\"contained\"\r\n                sx={{ mb: 1 }}\r\n                style={{ backgroundColor: 'primery' }}\r\n                onClick={(e) => {\r\n                    handelGetAuditUser()\r\n                }}\r\n            >\r\n                Assign new tray\r\n            </Button>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <AssignTrayDialogBox\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    auditUsers={auditUsers}\r\n                    setIsAlive={setIsAlive}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Report\\mmt-report.jsx",["3673","3674","3675","3676","3677","3678","3679","3680","3681"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    MenuItem,\r\n    Box,\r\n    TextField,\r\n} from '@mui/material'\r\nimport moment from 'moment'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const [sortDate, setSortDate] = useState('')\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((d, index) => {\r\n                    d.id = page * rowsPerPage + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const { location } = jwt_decode(admin)\r\n            const fetchData = async () => {\r\n                try {\r\n                    let obj = {\r\n                        location: location,\r\n                        trayType: 'MMT',\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/mmt-pmt-report',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [])\r\n\r\n    /****************************************DATE WISE SORT *************************************************** */\r\n    const handelSort = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                const { location } = jwt_decode(admin)\r\n                let obj = {\r\n                    date: sortDate,\r\n                    location: location,\r\n                    trayType: 'MMT',\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/sort-mmt-pmt-report',\r\n                    obj\r\n                )\r\n                if (res.status == 200) {\r\n                    setItem(res.data.data)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <Table id=\"example\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>UIC</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>MUIC</TableCell>\r\n                        <TableCell>Brand</TableCell>\r\n                        <TableCell>Model</TableCell>\r\n                        <TableCell>Bag ID</TableCell>\r\n                        <TableCell>BOT Agent Name</TableCell>\r\n                        <TableCell>Assigned Date</TableCell>\r\n                        <TableCell>Tray ID</TableCell>\r\n                        <TableCell>Tray Type</TableCell>\r\n                        <TableCell>Tray Closed Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell>{data.tracking_id}</TableCell>\r\n                            <TableCell>{data.order_id}</TableCell>\r\n                            <TableCell>\r\n                                {data?.order[0]?.order_date != undefined\r\n                                    ? new Date(\r\n                                          data?.order[0]?.order_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.uic_code?.code}</TableCell>\r\n                            <TableCell>{data.imei}</TableCell>\r\n                            <TableCell>{data.item_id}</TableCell>\r\n                            <TableCell>{data?.product[0]?.muic}</TableCell>\r\n                            <TableCell>\r\n                                {data?.product[0]?.brand_name}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.product[0]?.model_name}\r\n                            </TableCell>\r\n                            <TableCell>{data.bag_id}</TableCell>\r\n                            <TableCell>{data.agent_name}</TableCell>\r\n                            <TableCell>\r\n                                {data?.assign_to_agent != undefined\r\n                                    ? new Date(\r\n                                          data?.assign_to_agent\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.tray_id}</TableCell>\r\n                            <TableCell>{data.tray_type}</TableCell>\r\n                            <TableCell>\r\n                                {new Date(\r\n                                    data?.warehouse_close_date\r\n                                ).toLocaleString('en-GB', {\r\n                                    hour12: true,\r\n                                })}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        )\r\n    }, [item, data])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Report', path: '/' },\r\n                        { name: 'MMT' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        flexDirection: 'start',\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        id=\"filled-select-currency\"\r\n                        type=\"Date\"\r\n                        onChange={(e) => {\r\n                            setSortDate(e.target.value)\r\n                        }}\r\n                        inputProps={{\r\n                            max: moment().format('YYYY-MM-DD'),\r\n                        }}\r\n                        sx={{ mt: 1, mb: 1 }}\r\n                        helperText=\"Please Select MMT closed Date\"\r\n                        variant=\"filled\"\r\n                    />\r\n                    <Button\r\n                        sx={{\r\n                            mt: 20,\r\n                            m: 2,\r\n                            height: '38px',\r\n                        }}\r\n                        disabled={sortDate == '' ? true : false}\r\n                        variant=\"contained\"\r\n                        style={{\r\n                            backgroundColor: '#206CE2',\r\n                            marginTop: '23px',\r\n                        }}\r\n                        onClick={(e) => {\r\n                            handelSort(e)\r\n                        }}\r\n                    >\r\n                        Sort\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={item.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Report\\Bot-report\\from-sku-summery-view-item.jsx",["3682","3683","3684"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [botTray, setBotTray] = useState([])\r\n    const navigate = useNavigate()\r\n    const { trayId, muic } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let user = localStorage.getItem('prexo-authentication')\r\n                if (user) {\r\n                    let { location } = jwt_decode(user)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/bot-tray-report-item-details/' +\r\n                            location +\r\n                            '/' +\r\n                            trayId +\r\n                            '/' +\r\n                            muic\r\n                    )\r\n                    if (res.status === 200) {\r\n                        setBotTray(res.data.data.temp_array)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                        navigate('/bot-tray-report')\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelViewTray = (e, muic) => {\r\n        e.preventDefault()\r\n        navigate('/bot-tray-report-details/' + trayId + '/' + muic)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: () => {\r\n                    return botTray[0]?.muic\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'Brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: () => {\r\n                    return botTray[0]?.brand\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'Model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: () => {\r\n                    return botTray[0]?.model\r\n                },\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'awbn_number',\r\n            label: 'Tracking Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'order_id',\r\n            label: 'Order Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'order_date',\r\n            label: 'Order Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'bag_id',\r\n            label: 'BOT ID',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Report', path: '/' },\r\n                        { name: 'Bot-Report' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Report'}\r\n                data={botTray?.[0]?.item}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Report\\Bot-report\\sku-summery.jsx",["3685"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [botTray, setBotTray] = useState([])\r\n    const { trayId } = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let obj = {\r\n                        location: location,\r\n                        botTray: trayId,\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/bot-tray-report',\r\n                        obj\r\n                    )\r\n                    if (res.status === 200) {\r\n                        console.log(res.data.data.temp_array)\r\n                        setBotTray(res.data.data.temp_array)\r\n                    }\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n\r\n    const handelViewTray = (e, muic) => {\r\n        e.preventDefault()\r\n        navigate(\r\n            '/wareshouse/report/bot/sku-summery/details/' + trayId + '/' + muic\r\n        )\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'item',\r\n            label: 'Units',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => value?.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'wht_tray',\r\n            label: 'Open WHT',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => value?.join(', '),\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            style={{ backgroundColor: 'green' }}\r\n                            onClick={(e) => {\r\n                                handelViewTray(e, value)\r\n                            }}\r\n                        >\r\n                            Details\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Report', path: '/' },\r\n                        { name: 'Bot-Report' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Report'}\r\n                data={botTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Report\\Bot-report\\tray.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Audit-request\\tray.jsx",["3686","3687","3688"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [chargingRequest, setChargingRequest] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/request-for-assign/' + 'Send_for_audit/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setChargingRequest(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n    const handelDetailPage = (e, trayId) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/audit-request/approve/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[6],\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelDetailPage(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Audit-Requests' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={chargingRequest}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Audit-request\\request-approve.jsx",["3689","3690","3691","3692","3693","3694","3695","3696","3697","3698","3699","3700","3701","3702","3703","3704","3705","3706"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport TrayAssignDialogBox from './trayAssignMent'\r\n\r\n// import jwt from \"jsonwebtoken\"\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    const [userAgent, setUserAgent] = useState('')\r\n    /**************************************************************************** */\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [trayIdNotChangeAble, setTrayIdNotChangeAble] = useState({})\r\n    const [otherTrayAssign, setOtherTrayAssign] = useState({\r\n        CTA: '',\r\n        CTB: '',\r\n        CTC: '',\r\n        CTD: '',\r\n        WHT: '',\r\n    })\r\n\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getWhtTrayItem/' + trayId + '/' + 'Send for Audit'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n    useEffect(() => {\r\n        const userStatusApiCall = async () => {\r\n            try {\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/auditUserStatusChecking/' + trayData.issued_user_name + \"/\" + trayData.brand + \"/\" + trayData.model\r\n                )\r\n                let trayFetch = await axiosWarehouseIn.post(\r\n                    '/fetchAssignedTrayForAudit/' + trayData.issued_user_name + \"/\" + trayData.brand + \"/\" + trayData.model\r\n                )\r\n                if (trayFetch.status == 200) {\r\n                    setOtherTrayAssign({\r\n                        CTA: trayFetch.data.data.CTA,\r\n                        CTB: trayFetch.data.data.CTB,\r\n                        CTC: trayFetch.data.data.CTC,\r\n                        CTD: trayFetch.data.data.CTD,\r\n                        WHT: trayId,\r\n                    })\r\n                    setTrayIdNotChangeAble(trayFetch.data.data)\r\n                }\r\n                if (res.status === 200) {\r\n                    setUserAgent(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        if (trayData.issued_user_name !== undefined) {\r\n            userStatusApiCall()\r\n        }\r\n    }, [trayData])\r\n\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n\r\n                let res = await axiosWarehouseIn.post('/check-uic', obj)\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setTextDisable(false)\r\n                    setUic('')\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData.items.length < trayData?.actual_items?.length) {\r\n            alert('All Items Scanned')\r\n        } else {\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/wht-add-actual-item',\r\n                    objData\r\n                )\r\n                if (res.status == 200) {\r\n                    setUic('')\r\n                    setTextDisable(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n     /************************************************************************** */\r\n    const handelIssue = async (e, sortId) => {\r\n        try {\r\n            if (userAgent !== 'User is free') {\r\n                alert(userAgent)\r\n            } else if (\r\n                otherTrayAssign.CTA == '' ||\r\n                otherTrayAssign.CTB == '' ||\r\n                otherTrayAssign.CTC == '' ||\r\n                otherTrayAssign.CTD == ''\r\n            ) {\r\n                alert('Please assign other tray')\r\n                handleDialogOpen()\r\n            } else {\r\n                if (trayData?.actual_items?.length == trayData?.items?.length) {\r\n                    setLoading(true)\r\n                    let obj = {\r\n                        trayId: Object.values(otherTrayAssign),\r\n                        description: description,\r\n                        username: trayData.issued_user_name,\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/auditTrayIssueToAgent',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        navigate('/wareshouse/wht/audit-request')\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                } else {\r\n                    setLoading(false)\r\n                    alert('Please Verify Actual Data')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h4>Expected</h4>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h4>Total</h4>\r\n                            <p style={{ fontSize: '22px' }}>\r\n                                {\r\n                                    trayData?.items?.filter(function (item) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h4>ACTUAL</h4>\r\n                        <TextField\r\n                            sx={{ mt: 1 }}\r\n                            id=\"outlined-password-input\"\r\n                            type=\"text\"\r\n                            disabled={textDisable}\r\n                            name=\"doorsteps_diagnostics\"\r\n                            inputRef={(input) => input && input.focus()}\r\n                            label=\"SCAN UIC\"\r\n                            value={uic}\r\n                            onChange={(e) => {\r\n                                setUic(e.target.value)\r\n                                handelUic(e)\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    width: 'auto',\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h4>Total</h4>\r\n                            <p style={{ fontSize: '24px' }}>\r\n                                {\r\n                                    trayData.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textDisable, uic])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>TRAY ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                    <Button\r\n                        sx={{ m: 2 }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => handleDialogOpen()}\r\n                    >\r\n                        Assign Other Tray\r\n                    </Button>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n                {shouldOpenEditorDialog && (\r\n                    <TrayAssignDialogBox\r\n                        handleClose={handleDialogClose}\r\n                        open={handleDialogOpen}\r\n                        setOtherTrayAssign={setOtherTrayAssign}\r\n                        otherTrayAssign={otherTrayAssign}\r\n                        trayIdNotChangeAble={trayIdNotChangeAble}\r\n                        brand={trayData?.brand}\r\n                        model={trayData?.model}\r\n                    />\r\n                )}\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n                    <Button\r\n                        sx={{ m: 3, mb: 7 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            loading == true || description == '' ? true : false\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Issue?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Issue To Agent\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-bqc\\close.jsx",["3707","3708","3709","3710","3711","3712","3713"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/charging-done-recieved/' +\r\n                        trayId +\r\n                        '/' +\r\n                        'Received From BQC'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData?.actual_items?.length < trayData?.items.length) {\r\n            alert('All Items are Verified')\r\n        } else {\r\n            setTextDisable(true)\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/charging-done-put-item',\r\n                    objData\r\n                )\r\n                if (res?.status == 200) {\r\n                    setTextDisable(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                    setUic('')\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            setLoading(true)\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n                setLoading(false)\r\n            } else {\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                    type: 'Ready to audit',\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/close-wht-tray-ready-to-next',\r\n                    obj\r\n                )\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/wareshouse/wht/return-from-bqc')\r\n                } else {\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/check-uic-charging-done',\r\n                    obj\r\n                )\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setUic('')\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>Expected</h5>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {trayData?.actual_items?.length}/\r\n                                {trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '14px', fontSize: '24px' }}>\r\n                                {trayData?.actual_items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>ACTUAL</h5>\r\n                <TextField\r\n                    sx={{ mt: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    inputRef={(input) => input && input.focus()}\r\n                    name=\"doorsteps_diagnostics\"\r\n                    disabled={textDisable}\r\n                    label=\"SCAN UIC\"\r\n                    value={uic}\r\n                    onChange={(e) => {\r\n                        setUic(e.target.value)\r\n                        handelUic(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {trayData?.items?.length}/{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '19px', fontSize: '24px' }}>\r\n                                {trayData?.items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items, textDisable, uic])\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>Tray ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Closed On --{' '}\r\n                        {new Date(trayData?.closed_time_bot).toLocaleString(\r\n                            'en-GB',\r\n                            {\r\n                                hour12: true,\r\n                            }\r\n                        )}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            trayData?.items?.length !==\r\n                                trayData?.actual_items?.length || loading\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Close?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-bqc\\view-item.jsx",["3714","3715"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\n\r\nimport { axiosBot } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosBot.post('/trayItem/' + trayId)\r\n                if (res.status === 200) {\r\n                    setTrayData(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'imei',\r\n            label: 'IMEI',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return trayData.brand\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return trayData.model\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'bqc_status',\r\n            label: 'BQC STAGE',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'bqc_report',\r\n            label: 'Blancco QC Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.blancoo_qc_status\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'bqc_report',\r\n            label: 'BQC Incomplete Reason',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.bqc_incomplete_reason\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'bqc_report',\r\n            label: 'Technical Issue',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.technical_issue\r\n                },\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'bqc_report',\r\n            label: 'BQC User Remark',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.other\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'bqc_report',\r\n            label: 'Factory reset status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.factory_reset_status\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Return-from-BQC' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData.actual_items}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-bqc\\tray.jsx",["3716","3717","3718","3719"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [tray, setTray] = useState([])\r\n    const [open, setOpen] = React.useState(false)\r\n    const [counts, setCounts] = useState('')\r\n    const [trayId, setTrayId] = useState('')\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/return-from-bqc-wht/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    const handelViewDetailTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/return-from-bqc/close/' + id)\r\n    }\r\n\r\n    const handelTrayReceived = async () => {\r\n        try {\r\n            let obj = {\r\n                trayId: trayId,\r\n                counts: counts,\r\n            }\r\n            let res = await axiosWarehouseIn.post('/recieved-from-bqc', obj)\r\n            if (res.status == 200) {\r\n                alert(res.data.message)\r\n                setOpen(false)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/return-from-bqc/view-item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'BQC Done Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            {tableMeta.rowData[3] != 'Received From BQC' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        setOpen(true)\r\n                                        setTrayId(value)\r\n                                    }}\r\n                                >\r\n                                    RECEIVE\r\n                                </Button>\r\n                            ) : (\r\n                                <>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        View\r\n                                    </Button>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: 'red' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewDetailTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        Close\r\n                                    </Button>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Please verify the count of - {trayId}\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <TextField\r\n                        label=\"Enter Item Count\"\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => {\r\n                            setCounts(e.target.value)\r\n                        }}\r\n                        inputProps={{ maxLength: 3 }}\r\n                        onKeyPress={(event) => {\r\n                            if (!/[0-9]/.test(event.key)) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        disabled={counts === ''}\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelTrayReceived(e)\r\n                        }}\r\n                    >\r\n                        RECEIVED\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Return-from-BQC' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Bqc-request\\tray.jsx",["3720","3721","3722"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [chargingRequest, setChargingRequest] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/request-for-assign/' + 'send_for_bqc/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setChargingRequest(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n\r\n    const handelDetailPage = (e, trayId) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/bqc-request/approve/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[6],\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelDetailPage(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'BQC-Requests' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={chargingRequest}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Bqc-request\\approve.jsx",["3723","3724","3725","3726","3727","3728","3729","3730","3731","3732","3733","3734","3735"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\n\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getWhtTrayItem/' + trayId + '/' + 'Send for charging'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n\r\n                let res = await axiosWarehouseIn.post('/check-uic', obj)\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setTextDisable(false)\r\n                    setUic('')\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData.items.length < trayData?.actual_items?.length) {\r\n            alert('All Items Scanned')\r\n        } else {\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/wht-add-actual-item',\r\n                    objData\r\n                )\r\n                if (res.status == 200) {\r\n                    setUic('')\r\n                    setTextDisable(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, sortId) => {\r\n        try {\r\n            if (trayData?.actual_items?.length == trayData?.items?.length) {\r\n                setLoading(true)\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                    sortId: trayData?.sort_id,\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/issue-to-agent-wht',\r\n                    obj\r\n                )\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    if (trayData?.sort_id == 'Send for BQC') {\r\n                        setLoading(false)\r\n                        navigate('/wareshouse/wht/bqc-request')\r\n                    } else {\r\n                        setLoading(false)\r\n                        navigate('/wareshouse/wht/charging-request')\r\n                    }\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } else {\r\n                setLoading(false)\r\n                alert('Please Verify Actual Data')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n \r\n\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>Expected</h5>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {\r\n                                    trayData?.items?.filter(function (item) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>ACTUAL</h5>\r\n                        <TextField\r\n                            sx={{ mt: 1 }}\r\n                            id=\"outlined-password-input\"\r\n                            type=\"text\"\r\n                            disabled={textDisable}\r\n                            name=\"doorsteps_diagnostics\"\r\n                            inputRef={(input) => input && input.focus()}\r\n                            label=\"SCAN UIC\"\r\n                            value={uic}\r\n                            onChange={(e) => {\r\n                                setUic(e.target.value)\r\n                                handelUic(e)\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    width: 'auto',\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {\r\n                                    trayData.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textDisable, uic])\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>TRAY ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                  \r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n               \r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            loading == true || description == '' ? true : false\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Issue?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Issue To Agent\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-charging\\close.jsx",["3736","3737","3738","3739","3740","3741","3742"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [uic, setUic] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/charging-done-recieved/' +\r\n                        trayId +\r\n                        '/' +\r\n                        'Received From Charging'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData?.actual_items?.length < trayData?.items.length) {\r\n            alert('All Items are Verified')\r\n        } else {\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/charging-done-put-item',\r\n                    objData\r\n                )\r\n                if (res?.status == 200) {\r\n                    setRefresh((refresh) => !refresh)\r\n                    setTextDisable(false)\r\n                    setUic('')\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            setLoading(true)\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n                setLoading(false)\r\n            } else {\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                    type: 'Ready to bqc',\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/close-wht-tray-ready-to-next',\r\n                    obj\r\n                )\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/wareshouse/wht/return-from-charging')\r\n                } else {\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/check-uic-charging-done',\r\n                    obj\r\n                )\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setUic('')\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>Expected</h5>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {trayData?.actual_items?.length}/\r\n                                {trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '14px', fontSize: '24px' }}>\r\n                                {trayData?.actual_items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>ACTUAL</h5>\r\n                <TextField\r\n                    sx={{ mt: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    inputRef={(input) => input && input.focus()}\r\n                    disabled={textDisable}\r\n                    name=\"doorsteps_diagnostics\"\r\n                    label=\"SCAN UIC\"\r\n                    value={uic}\r\n                    // onChange={(e) => setAwbn(e.target.value)}\r\n                    onChange={(e) => {\r\n                        setUic(e.target.value)\r\n                        handelUic(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {trayData?.items?.length}/{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '19px', fontSize: '24px' }}>\r\n                                {trayData?.items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items, textDisable, uic])\r\n\r\n    /***************************************************************************************** */\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>Tray ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Closed On --{' '}\r\n                        {new Date(trayData?.closed_time_bot).toLocaleString(\r\n                            'en-GB',\r\n                            {\r\n                                hour12: true,\r\n                            }\r\n                        )}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            trayData?.items?.length !==\r\n                                trayData?.actual_items?.length || loading\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Close?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-charging\\view-item.jsx",["3743"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { axiosBot } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    let res = await axiosBot.post('/trayItem/' + trayId)\r\n                    if (res.status === 200) {\r\n                        setTrayData(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'imei',\r\n            label: 'IMEI',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'Brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return trayData.brand\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return trayData.model\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Battery Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.battery_status\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Charge Percentage',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.charge_percentage\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Body Condiation',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.body_condition\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Display Condiation',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.display_condition\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Lock Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.lock_status\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Charging Jack Type',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.charging_jack_type\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Body Part missing',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.part_name\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'CIMEI-1',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.cimei_1\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'CIMEI-2',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.cimei_2\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Return-from-charging' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData.actual_items}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\In-charging\\tray.jsx",["3744","3745","3746","3747"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Send to Charging/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[3],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'In-Charging-WHT-Tray' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-charging\\tray.jsx",["3748","3749","3750","3751","3752","3753","3754","3755"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [tray, setTray] = useState([])\r\n    const [open, setOpen] = React.useState(false)\r\n    const [counts, setCounts] = useState('')\r\n    const [trayId, setTrayId] = useState('')\r\n    const [refresh, setRefresh] = useState(refresh)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/wht-return-from-charging/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    const handelViewDetailTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/return-from-charging/close/' + id)\r\n    }\r\n\r\n    const handelTrayReceived = async () => {\r\n        try {\r\n            let obj = {\r\n                trayId: trayId,\r\n                counts: counts,\r\n                type: 'charging',\r\n            }\r\n            let res = await axiosWarehouseIn.post('/receivedTray', obj)\r\n            if (res.status == 200) {\r\n                alert(res.data.message)\r\n                setOpen(false)\r\n                setRefresh((refresh) => !refresh)\r\n            }\r\n            else{\r\n                alert(res.data.message) \r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/return-from-charging/view-item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'Charging Done Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            {tableMeta.rowData[2] != 'Received From Charging' &&\r\n                            tableMeta.rowData[2] !=\r\n                                'Received From Recharging' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        setOpen(true)\r\n                                        setTrayId(value)\r\n                                    }}\r\n                                >\r\n                                    RECEIVE\r\n                                </Button>\r\n                            ) : (\r\n                                <>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        View\r\n                                    </Button>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: 'red' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewDetailTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        Close\r\n                                    </Button>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Please verify the count of - {trayId}\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <TextField\r\n                        label=\"Enter Item Count\"\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => {\r\n                            setCounts(e.target.value)\r\n                        }}\r\n                        inputProps={{ maxLength: 3 }}\r\n                        onKeyPress={(event) => {\r\n                            if (!/[0-9]/.test(event.key)) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        disabled={counts === ''}\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelTrayReceived(e)\r\n                        }}\r\n                    >\r\n                        RECEIVED\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Return-from-charging' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Charging-request\\requests.jsx",["3756","3757","3758"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [chargingRequest, setChargingRequest] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/request-for-assign/' + 'Send_for_charging/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setChargingRequest(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n\r\n    const handelDetailPage = (e, trayId) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/charging-request/approve/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[6],\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelDetailPage(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Charging-Requests' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={chargingRequest}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Charging-request\\approve.jsx",["3759","3760","3761","3762","3763","3764","3765","3766","3767","3768","3769","3770","3771"],"import React, { useEffect, useState, useMemo } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Grid,\r\n} from \"@mui/material\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// import jwt from \"jsonwebtoken\"\r\nimport { axiosWarehouseIn } from \"../../../../../axios\";\r\nexport default function DialogBox() {\r\n  const navigate = useNavigate();\r\n  const [trayData, setTrayData] = useState([]);\r\n  const { trayId } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const [textDisable, setTextDisable] = useState(false);\r\n  /**************************************************************************** */\r\n  const [uic, setUic] = useState(\"\");\r\n  const [description, setDescription] = useState([]);\r\n  const [refresh, setRefresh] = useState(false);\r\n  /*********************************************************** */\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        let response = await axiosWarehouseIn.post(\r\n          \"/getWhtTrayItem/\" + trayId + \"/\" + \"Send for charging\"\r\n        );\r\n        if (response.status === 200) {\r\n          setTrayData(response.data.data);\r\n        } else {\r\n          alert(response.data.message);\r\n          navigate(-1);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [refresh]);\r\n \r\n\r\n  const handelUic = async (e) => {\r\n    if (e.target.value.length === 11) {\r\n      try {\r\n        let obj = {\r\n          uic: e.target.value,\r\n          trayId: trayId,\r\n        };\r\n        setTextDisable(true);\r\n\r\n        let res = await axiosWarehouseIn.post(\"/check-uic\", obj);\r\n        if (res?.status == 200) {\r\n          addActualitem(res.data.data);\r\n        } else {\r\n          setTextDisable(false);\r\n          setUic(\"\");\r\n          alert(res.data.message);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    }\r\n  };\r\n  /************************************************************************** */\r\n  const addActualitem = async (obj) => {\r\n    if (trayData.items.length < trayData?.actual_items?.length) {\r\n      alert(\"All Items Scanned\");\r\n    } else {\r\n      try {\r\n        let objData = {\r\n          trayId: trayId,\r\n          item: obj,\r\n        };\r\n        setTextDisable(true);\r\n        let res = await axiosWarehouseIn.post(\"/wht-add-actual-item\", objData);\r\n        if (res.status == 200) {\r\n          setUic(\"\");\r\n          setTextDisable(false);\r\n          setRefresh((refresh) => !refresh);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    }\r\n  };\r\n  /************************************************************************** */\r\n  const handelIssue = async (e, sortId) => {\r\n    try {\r\n     if (trayData?.actual_items?.length == trayData?.items?.length) {\r\n        setLoading(true);\r\n        let obj = {\r\n          trayId: trayId,\r\n          description: description,\r\n          sortId: trayData?.sort_id,\r\n        };\r\n        let res = await axiosWarehouseIn.post(\"/issue-to-agent-wht\", obj);\r\n        if (res.status == 200) {\r\n          alert(res.data.message);\r\n          if (trayData?.sort_id == \"Send for BQC\") {\r\n            setLoading(false);\r\n            navigate(\"/bqc-request\");\r\n          } else {\r\n            setLoading(false);\r\n            navigate(\"/wareshouse/wht/charging-request\");\r\n          }\r\n        } else {\r\n          alert(res.data.message);\r\n        }\r\n      } else {\r\n        setLoading(false);\r\n        alert(\"Please Verify Actual Data\");\r\n      }\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const tableExpected = useMemo(() => {\r\n    return (\r\n      <Paper sx={{ width: \"95%\", overflow: \"hidden\", m: 1 }}>\r\n        <Box sx={{}}>\r\n          <Box\r\n            sx={{\r\n              float: \"left\",\r\n              ml: 2,\r\n            }}\r\n          >\r\n            <h5>Expected</h5>\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              float: \"right\",\r\n              mr: 2,\r\n            }}\r\n          >\r\n            <Box sx={{}}>\r\n              <h5>Total</h5>\r\n              <p style={{ paddingLeft: \"5px\", fontSize: \"22px\" }}>\r\n                {\r\n                  trayData?.items?.filter(function (item) {\r\n                    return item.status != \"Duplicate\";\r\n                  }).length\r\n                }\r\n                /{trayData?.limit}\r\n              </p>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <TableContainer>\r\n          <Table\r\n            style={{ width: \"100%\" }}\r\n            id=\"example\"\r\n            stickyHeader\r\n            aria-label=\"sticky table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>S.NO</TableCell>\r\n                <TableCell>UIC</TableCell>\r\n                <TableCell>MUIC</TableCell>\r\n                <TableCell>BOT Tray</TableCell>\r\n                <TableCell>BOT Agent</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {trayData?.items?.map((data, index) => (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                  <TableCell>{index + 1}</TableCell>\r\n                  <TableCell>{data?.uic}</TableCell>\r\n                  <TableCell>{data?.muic}</TableCell>\r\n                  <TableCell>{data?.tray_id}</TableCell>\r\n                  <TableCell>{data?.bot_agent}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    );\r\n  }, [trayData?.items]);\r\n  const tableActual = useMemo(() => {\r\n    return (\r\n      <Paper sx={{ width: \"98%\", overflow: \"hidden\", m: 1 }}>\r\n        <Box sx={{}}>\r\n          <Box\r\n            sx={{\r\n              float: \"left\",\r\n              ml: 2,\r\n            }}\r\n          >\r\n            <h5>ACTUAL</h5>\r\n            <TextField\r\n              sx={{ mt: 1 }}\r\n              id=\"outlined-password-input\"\r\n              type=\"text\"\r\n              disabled={textDisable}\r\n              name=\"doorsteps_diagnostics\"\r\n              inputRef={(input) => input && input.focus()}\r\n              label=\"SCAN UIC\"\r\n              value={uic}\r\n              onChange={(e) => {\r\n                setUic(e.target.value);\r\n                handelUic(e);\r\n              }}\r\n              inputProps={{\r\n                style: {\r\n                  width: \"auto\",\r\n                },\r\n              }}\r\n            />\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              float: \"right\",\r\n              mr: 2,\r\n            }}\r\n          >\r\n            <Box sx={{}}>\r\n              <h5>Total</h5>\r\n              <p style={{ marginLeft: \"5px\", fontSize: \"24px\" }}>\r\n                {\r\n                  trayData.actual_items?.filter(function (item) {\r\n                    return item.status != \"Duplicate\";\r\n                  }).length\r\n                }\r\n                /{trayData?.limit}\r\n              </p>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <TableContainer>\r\n          <Table\r\n            style={{ width: \"100%\" }}\r\n            id=\"example\"\r\n            stickyHeader\r\n            aria-label=\"sticky table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>S.NO</TableCell>\r\n                <TableCell>UIC</TableCell>\r\n                <TableCell>MUIC</TableCell>\r\n                <TableCell>BOT Tray</TableCell>\r\n                <TableCell>BOT Agent</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n\r\n            <TableBody>\r\n              {trayData?.actual_items?.map((data, index) => (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                  <TableCell>{index + 1}</TableCell>\r\n                  <TableCell>{data?.uic}</TableCell>\r\n                  <TableCell>{data?.muic}</TableCell>\r\n                  <TableCell>{data?.tray_id}</TableCell>\r\n                  <TableCell>{data?.bot_agent}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    );\r\n  }, [trayData?.actual_items, textDisable,uic]);\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          mt: 1,\r\n          height: 70,\r\n          borderRadius: 1,\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            float: \"left\",\r\n          }}\r\n        >\r\n          <h4 style={{ marginLeft: \"13px\" }}>TRAY ID - {trayId}</h4>\r\n          <h4 style={{ marginLeft: \"13px\" }}>\r\n            AGENT NAME - {trayData?.issued_user_name}\r\n          </h4>\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            float: \"right\",\r\n          }}\r\n        >\r\n          <h4 style={{ marginRight: \"13px\" }}>Brand -- {trayData?.brand}</h4>\r\n          <h4 style={{ marginRight: \"13px\" }}>Model -- {trayData?.model}</h4>\r\n        </Box>\r\n      </Box>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={6}>\r\n          {tableExpected}\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          {tableActual}\r\n        </Grid>\r\n      </Grid>\r\n      <div style={{ float: \"right\" }}>\r\n        <Box sx={{ float: \"right\" }}>\r\n          <textarea\r\n            onChange={(e) => {\r\n              setDescription(e.target.value);\r\n            }}\r\n            style={{ width: '300px', height: '60px' }}\r\n            placeholder=\"Description\"\r\n          ></textarea>\r\n          <Button\r\n            sx={{ m: 3, mb: 9 }}\r\n            variant=\"contained\"\r\n            disabled={loading == true  || description == \"\" ? true : false}\r\n            style={{ backgroundColor: \"green\" }}\r\n            onClick={(e) => {\r\n              if (window.confirm(\"You Want to Issue?\")) {\r\n                handelIssue(e);\r\n              }\r\n            }}\r\n          >\r\n            Issue To Agent\r\n          </Button>\r\n        </Box>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\In-sorting\\tray.jsx",["3772","3773","3774","3775"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Issued to sorting agent/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[3],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'In-Soring' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\In-use-wht\\tray.jsx",["3776","3777"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Inuse/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Display Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Limit',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'In-use' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\wht-tray\\wht-tray-item.jsx",["3778","3779","3780"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getWhtTrayItem/' + trayId + '/' + 'all-wht-tray'\r\n                )\r\n                if (response.status === 200) {\r\n                    if (response.data.data?.items?.length == 0) {\r\n                        setWhtTray(response.data.data.actual_items)\r\n                    } else {\r\n                        setWhtTray(response.data.data.items)\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand_name',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model_name',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tracking_id',\r\n            label: 'Tracking Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_id',\r\n            label: 'BOT Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'bot_agent',\r\n            label: 'BOT Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'WHT-Tray-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\wht-tray\\tray.jsx",["3781","3782","3783","3784","3785"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/whtTray/' + location + '/' + 'all-wht-tray'\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'actual_items',\r\n            label: 'acutual_items',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        (value.length == 0\r\n                            ? tableMeta.rowData[3].length\r\n                            : value.length) +\r\n                        '/' +\r\n                        tableMeta.rowData[4]\r\n                    )\r\n                },\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'WHT-Tray' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Merge\\Return-from-merge\\close.jsx",["3786","3787","3788","3789","3790","3791","3792","3793","3794","3795","3796","3797","3798","3799","3800","3801","3802"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport Checkbox from '@mui/material/Checkbox'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [employeeData, setEmployeeData] = useState([])\r\n    const { trayId } = useParams()\r\n    /**************************************************************************** */\r\n    const [awbn, setAwbn] = useState('')\r\n    const [bagReuse, setBagReuse] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /******************************************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getBagItemRequest/' +\r\n                        trayId +\r\n                        '/' +\r\n                        'Received From Merging'\r\n                )\r\n                if (response.status === 200) {\r\n                    setEmployeeData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    /******************************************************************************** */\r\n    const getitem = async () => {\r\n        try {\r\n            let response = await axiosWarehouseIn.post(\r\n                '/getBagItemRequest/' + trayId + '/' + 'Received From Merging'\r\n            )\r\n            if (response.status === 200) {\r\n                setEmployeeData(response.data.data)\r\n\r\n                //   dataTableFun()\r\n            } else if (response.status == 201) {\r\n                setEmployeeData(response.data.data)\r\n                alert(response.data.message)\r\n            } else if (response.status == 202) {\r\n                alert(response.data.message)\r\n                navigate(-1)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /******************************************************************************** */\r\n    const handelAwbn = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post('/check-uic', obj)\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (uic) => {\r\n        setTextDisable(true)\r\n        try {\r\n            let obj = {\r\n                bag_id: trayId,\r\n                awbn_number: uic.awbn_number,\r\n                order_id: uic.order_id,\r\n                order_date: uic.order_date,\r\n                uic: uic.uic,\r\n                status:uic.status,\r\n                stock_in: new Date(),\r\n            }\r\n            let res = await axiosWarehouseIn.post('/addActualitem', obj)\r\n            if (res?.status == 200) {\r\n                setAwbn('')\r\n                setTextDisable(false)\r\n                getitem()\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, trayId, type, length, limit,status) => {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let obj = {\r\n                    toTray: trayId,\r\n                    fromTray: employeeData[0].from_merge,\r\n                    type: type,\r\n                    length: length,\r\n                    limit: limit,\r\n                    status:status\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/mergeDoneMmttrayClose',\r\n                    obj\r\n                )\r\n                if (res.status === 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/wareshouse/merge/return-from-merge')\r\n                } else {\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    /***************************************************************************************** */\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    /******************************************************************************** */\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>Expected</h5>\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {\r\n                                    employeeData[0]?.items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{employeeData[0]?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n\r\n                                {/* <TableCell>AWBN Number</TableCell> */}\r\n                                <TableCell>Order ID</TableCell>\r\n                                <TableCell>Order Date</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {employeeData[0]?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n\r\n                                    <TableCell>{data?.order_id}</TableCell>\r\n                                    <TableCell>\r\n                                        {new Date(\r\n                                            data?.order_date\r\n                                        ).toLocaleString('en-GB', {\r\n                                            year: 'numeric',\r\n                                            month: '2-digit',\r\n                                            day: '2-digit',\r\n                                        })}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={\r\n                                            data.status == 'Valid'\r\n                                                ? { color: 'green' }\r\n                                                : { color: 'red' }\r\n                                        }\r\n                                    >\r\n                                        {data.status}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [employeeData[0]?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>ACTUAL</h5>\r\n                <TextField\r\n                    sx={{ m: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    inputRef={(input) => input && input.focus()}\r\n                    disabled={textDisable}\r\n                    name=\"doorsteps_diagnostics\"\r\n                    label=\"SCAN UIC\"\r\n                    value={awbn}\r\n                    onChange={(e) => {\r\n                        setAwbn(e.target.value)\r\n                        handelAwbn(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {\r\n                                    employeeData[0]?.actual_items?.filter(\r\n                                        function (item) {\r\n                                            return item.status != 'Duplicate'\r\n                                        }\r\n                                    ).length\r\n                                }\r\n                                /{employeeData[0]?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                {/* <TableCell>Bag Id</TableCell> */}\r\n                                {/* <TableCell>AWBN Number</TableCell> */}\r\n                                <TableCell>Order ID</TableCell>\r\n                                <TableCell>Order Date</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {employeeData[0]?.actual_items?.map(\r\n                                (data, index) => (\r\n                                    <TableRow\r\n                                        hover\r\n                                        role=\"checkbox\"\r\n                                        tabIndex={-1}\r\n                                    >\r\n                                        <TableCell>{index + 1}</TableCell>\r\n                                        <TableCell>{data?.uic}</TableCell>\r\n                                        <TableCell>{data?.order_id}</TableCell>\r\n                                        <TableCell>\r\n                                            {new Date(\r\n                                                data?.order_date\r\n                                            ).toLocaleString('en-GB', {\r\n                                                year: 'numeric',\r\n                                                month: '2-digit',\r\n                                                day: '2-digit',\r\n                                            })}\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            style={\r\n                                                data.status == 'Valid'\r\n                                                    ? { color: 'green' }\r\n                                                    : { color: 'red' }\r\n                                            }\r\n                                        >\r\n                                            {data.status}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [employeeData[0]?.actual_items, textDisable, awbn])\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>Tray ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {employeeData[0]?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Closed On --{' '}\r\n                        {new Date(\r\n                            employeeData[0]?.closed_time_sorting_agent\r\n                        ).toLocaleString('en-GB', { hour12: true })}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <>\r\n                        <Checkbox\r\n                            checked={bagReuse}\r\n                            onClick={(e) => {\r\n                                if (\r\n                                    window.confirm(\r\n                                        bagReuse\r\n                                            ? 'Already Added'\r\n                                            : 'You Want to Release Tray ?'\r\n                                    )\r\n                                ) {\r\n                                    setBagReuse(true)\r\n                                }\r\n                            }}\r\n                            {...label}\r\n                        />\r\n                        <label>{employeeData[0]?.from_merge} - Release</label>\r\n                    </>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'green' }}\r\n                        disabled={\r\n                            loading == true ||\r\n                            description == '' ||\r\n                            bagReuse == false ||\r\n                            employeeData[0]?.actual_items?.length !==\r\n                                employeeData[0]?.items?.length\r\n                                ? true\r\n                                : false\r\n                        }\r\n                        onClick={(e) => {\r\n                            handelIssue(\r\n                                e,\r\n                                employeeData[0]?.code,\r\n                                employeeData[0]?.type_taxanomy,\r\n                                employeeData[0]?.items.length,\r\n                                employeeData[0]?.limit,\r\n                                employeeData[0]?.sort_id\r\n                            )\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Merge\\Merge-request\\approve-request.jsx",["3803","3804","3805","3806","3807","3808","3809"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Box,\r\n    Button,\r\n} from '@mui/material'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\n\r\nexport default function StickyHeadTable({ props }) {\r\n    const [mmtTray, setMmtTray] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [userAgent, setUserAgent] = useState('')\r\n    const navigate = useNavigate()\r\n    const { mmtTrayId } = useParams()\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/viewTrayFromAndTo/' + location + '/' + mmtTrayId\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setMmtTray(response.data.data)\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    useEffect(() => {\r\n        const userStatusApiCall = async () => {\r\n            try {\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/sortingAgnetStatus/' + mmtTray[0]?.issued_user_name\r\n                )\r\n                if (res.status === 200) {\r\n                    setUserAgent(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        if (mmtTray[0]?.issued_user_name !== undefined) {\r\n            userStatusApiCall()\r\n        }\r\n    }, [mmtTray])\r\n\r\n    const handelExvsAt = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/request/approve/item-verifiying/' + code)\r\n    }\r\n\r\n    /******************************************************************************* */\r\n    const handelIssue = async (e, type) => {\r\n        try {\r\n            if (userAgent !== 'User is free') {\r\n                alert(userAgent)\r\n            } else {\r\n                setLoading(true)\r\n                let flag = false\r\n                for (let x of mmtTray) {\r\n                    if (x.items.length !== x.actual_items.length) {\r\n                        flag = true\r\n                        break\r\n                    }\r\n                }\r\n                if (flag == false) {\r\n                    let obj = {\r\n                        fromTray: mmtTray[0].code,\r\n                        toTray: mmtTray[1].code,\r\n                        username: mmtTray[0]?.issued_user_name,\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/mmtTraySendToSorting',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        setLoading(false)\r\n                        navigate('/wareshouse/merge/request')\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                } else {\r\n                    setLoading(false)\r\n                    alert('Please Issue all Tray')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    m: 3,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4>\r\n                        Assigned Date -{' '}\r\n                        {new Date(\r\n                            mmtTray[0]?.status_change_time\r\n                        ).toLocaleString('en-GB', {\r\n                            year: 'numeric',\r\n                            month: '2-digit',\r\n                            day: '2-digit',\r\n                        })}\r\n                    </h4>\r\n                    <h4>Agent Name- {mmtTray[0]?.issued_user_name}</h4>\r\n                </Box>\r\n                <Box sx={{}}>\r\n                    <Paper sx={{ width: '100%', overflow: 'auto' }}>\r\n                        <TableContainer>\r\n                            <Table\r\n                                id=\"example\"\r\n                                style={{ width: '100%' }}\r\n                                aria-label=\"sticky table\"\r\n                            >\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Record.NO</TableCell>\r\n                                        <TableCell>Tray Id</TableCell>\r\n                                        <TableCell>Tray Type</TableCell>\r\n                                        <TableCell>Quantity</TableCell>\r\n                                        <TableCell>Status</TableCell>\r\n                                        <TableCell>Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {mmtTray.map((data, index) => (\r\n                                        <TableRow\r\n                                            hover\r\n                                            role=\"checkbox\"\r\n                                            tabIndex={-1}\r\n                                        >\r\n                                            <TableCell>{index + 1}</TableCell>\r\n                                            <TableCell>{data.code}</TableCell>\r\n                                            <TableCell>\r\n                                                {data.type_taxanomy}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {data.items.length}/{data.limit}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {data.sort_id ==\r\n                                                    'Sorting Request Sent To Warehouse' &&\r\n                                                data.type_taxanomy == 'BOT'\r\n                                                    ? 'Not Issued'\r\n                                                    : data.type_taxanomy ==\r\n                                                          'WHT' &&\r\n                                                      data.items.length !== 0\r\n                                                    ? 'Not Issued'\r\n                                                    : data.type_taxanomy ==\r\n                                                      'WHT'\r\n                                                    ? 'New WHT'\r\n                                                    : 'Issued'}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    disabled={\r\n                                                        data.items.length ===\r\n                                                        data.actual_items.length\r\n                                                            ? true\r\n                                                            : false\r\n                                                    }\r\n                                                    onClick={(e) =>\r\n                                                        handelExvsAt(\r\n                                                            e,\r\n                                                            data.code\r\n                                                        )\r\n                                                    }\r\n                                                    style={{\r\n                                                        backgroundColor:\r\n                                                            'green',\r\n                                                    }}\r\n                                                    component=\"span\"\r\n                                                >\r\n                                                    {data.items.length ===\r\n                                                    data.actual_items.length\r\n                                                        ? 'Scanned'\r\n                                                        : 'Issue'}\r\n                                                </Button>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Box>\r\n                <div style={{ float: 'right' }}>\r\n                    <Box sx={{ float: 'right' }}>\r\n                        <Button\r\n                            sx={{ m: 3, mb: 9 }}\r\n                            variant=\"contained\"\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            onClick={(e) => {\r\n                                handelIssue(e, 'Assigned to sorting agent')\r\n                            }}\r\n                        >\r\n                            Assign To Agent\r\n                        </Button>\r\n                    </Box>\r\n                </div>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n ","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Merge\\Merge-request\\tray.jsx",["3810","3811"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [tray, setTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { location } = jwt_decode(token)\r\n                const fetchData = async () => {\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/mmtMergeRequest/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n\r\n    const handelApprove = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/merge/request/approve/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[2],\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Sorting Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'to_merge',\r\n            label: 'To Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelApprove(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Merge', path: '/' },\r\n                        { name: 'Merge-Requests' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Sorting\\Sorting-requests\\detailed-view.jsx",["3812","3813","3814","3815","3816","3817","3818","3819","3820","3821","3822","3823","3824","3825"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button, Box } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [botTray, setBotTray] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [userAgent, setUserAgent] = useState('')\r\n    const { trayId } = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/get-tray-sorting-requests/' + trayId\r\n                )\r\n                if (response.status === 200) {\r\n                    setBotTray(response.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    useEffect(() => {\r\n        const userStatusApiCall = async () => {\r\n            try {\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/sortingAgnetStatus/' + botTray[0]?.issued_user_name\r\n                )\r\n                if (res.status === 200) {\r\n                    setUserAgent(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        if (botTray[0]?.issued_user_name !== undefined) {\r\n            userStatusApiCall()\r\n        }\r\n    }, [botTray])\r\n\r\n    const handelExvsAt = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/request/approve/item-verifiying/' + code)\r\n    }\r\n\r\n    const handelIssue = async (e, type) => {\r\n        try {\r\n            if (userAgent !== 'User is free') {\r\n                alert(userAgent)\r\n            } else {\r\n                setLoading(true)\r\n                let flag = false\r\n                for (let x of botTray) {\r\n                    if (x.items.length !== x.actual_items.length) {\r\n                        flag = true\r\n                        break\r\n                    }\r\n                }\r\n                if (flag == false) {\r\n                    let obj = {\r\n                        allTray: botTray,\r\n                        type: type,\r\n                        username: botTray[0]?.issued_user_name,\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/assign-to-sorting-confirm',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        setLoading(false)\r\n                        navigate('/wareshouse/sorting/request')\r\n                    } else {\r\n                        setLoading(false)\r\n                        alert(res.data.message)\r\n                    }\r\n                } else {\r\n                    setLoading(false)\r\n                    alert('Please Issue all Tray')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta.rowData[3],\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return value == 'Sorting Request Sent To Warehouse' &&\r\n                        tableMeta.rowData[6] == 'BOT'\r\n                        ? 'Not Issued'\r\n                        : tableMeta.rowData[6] == 'WHT' &&\r\n                          tableMeta.rowData[4]?.length !== 0\r\n                        ? 'Not Issued'\r\n                        : tableMeta.rowData[6] == 'WHT'\r\n                        ? 'New WHT'\r\n                        : 'Issued'\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort_id: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return tableMeta.rowData[6] == 'BOT' ||\r\n                        (tableMeta.rowData[6] == 'WHT' &&\r\n                            tableMeta.rowData[4]?.length !== 0) ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={\r\n                                tableMeta.rowData[4]?.length ===\r\n                                tableMeta.rowData[7]?.length\r\n                                    ? true\r\n                                    : false\r\n                            }\r\n                            onClick={(e) =>\r\n                                handelExvsAt(e, tableMeta.rowData[1])\r\n                            }\r\n                            style={{ backgroundColor: 'primery' }}\r\n                            component=\"span\"\r\n                        >\r\n                            {tableMeta.rowData[4]?.length ===\r\n                            tableMeta.rowData[7]?.length\r\n                                ? 'Scanned'\r\n                                : ' Issue Now'}\r\n                        </Button>\r\n                    ) : null\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'actual_items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: false,\r\n                display: false,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Sorting', path: '/' },\r\n                        { name: 'Request-Approve' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <Box\r\n                sx={{\r\n                    float: 'right',\r\n                }}\r\n            >\r\n                <h4>\r\n                    Assigned Date -{' '}\r\n                    {new Date(botTray[0]?.status_change_time).toLocaleString(\r\n                        'en-GB',\r\n                        {\r\n                            year: 'numeric',\r\n                            month: '2-digit',\r\n                            day: '2-digit',\r\n                        }\r\n                    )}\r\n                </h4>\r\n                <h4>Agent Name- {botTray[0]?.issued_user_name}</h4>\r\n            </Box>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={botTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            <Box sx={{ float: 'right' }}>\r\n                {botTray?.[0]?.sort_id == 'Assigned to sorting agent' ? (\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            botTray?.[0]?.items.length !==\r\n                            botTray?.[0]?.actual_items.length\r\n                                ? true\r\n                                : loading == true\r\n                                ? true\r\n                                : false\r\n                        }\r\n                        style={{ backgroundColor: 'primery' }}\r\n                        onClick={(e) => {\r\n                            handelIssue(e, 'Issued to sorting agent')\r\n                        }}\r\n                    >\r\n                        Handover Done\r\n                    </Button>\r\n                ) : botTray?.[0]?.sort_id !== 'Issued to sorting agent' ? (\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={loading || userAgent == ''}\r\n                        style={{ backgroundColor: 'primery' }}\r\n                        onClick={(e) => {\r\n                            handelIssue(e, 'Assigned to sorting agent')\r\n                        }}\r\n                    >\r\n                        Assign To Agent\r\n                    </Button>\r\n                ) : null}\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Sorting\\Return-from-sorting\\close.jsx",["3826","3827","3828","3829","3830","3831","3832","3833","3834"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n    Container,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    /************************************************************/\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/charging-done-recieved/' +\r\n                        trayId +\r\n                        '/' +\r\n                        'Received From Sorting'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData?.items.length < trayData?.actual_items?.length) {\r\n            alert('All Items are Verified')\r\n        } else {\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/sorting-done-put-item',\r\n                    objData\r\n                )\r\n                if (res?.status == 200) {\r\n                    setRefresh((refresh) => !refresh)\r\n                    setTextDisable(false)\r\n                    setUic('')\r\n                } else {\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            setLoading(true)\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n                setLoading(false)\r\n            } else {\r\n                trayData.description = description\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/wht-tray-close-from-sorting',\r\n                    trayData\r\n                )\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/wareshouse/sorting/return-from-sorting')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/check-uic-sorting-done',\r\n                    obj\r\n                )\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setUic('')\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /***************************************************************************************** */\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>Expected</h5>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {trayData?.items?.length}/{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '14px', fontSize: '24px' }}>\r\n                                {trayData?.items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>ACTUAL</h5>\r\n                <TextField\r\n                    sx={{ mt: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    inputRef={(input) => input && input.focus()}\r\n                    disabled={textDisable}\r\n                    name=\"doorsteps_diagnostics\"\r\n                    label=\"Please Enter UIC\"\r\n                    value={uic}\r\n                    // onChange={(e) => setAwbn(e.target.value)}\r\n                    onChange={(e) => {\r\n                        setUic(e.target.value)\r\n                        handelUic(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {trayData?.actual_items?.length}/\r\n                                {trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '19px', fontSize: '24px' }}>\r\n                                {trayData?.actual_items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textDisable, uic])\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>Tray ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Closed On --{' '}\r\n                        {new Date(\r\n                            trayData?.closed_time_sorting_agent\r\n                        ).toLocaleString('en-GB', {\r\n                            hour12: true,\r\n                        })}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            trayData?.items?.length !==\r\n                                trayData?.actual_items?.length ||\r\n                            loading == false\r\n                                ? false\r\n                                : true\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Close?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Merge\\Return-from-merge\\tray.jsx",["3835","3836","3837","3838","3839","3840"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Sorting\\Return-from-sorting\\tray.jsx",["3841","3842","3843","3844","3845"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport Checkbox from '@mui/material/Checkbox'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [tray, setTray] = useState([])\r\n    const [counts, setCounts] = useState('')\r\n    const [open, setOpen] = React.useState(false)\r\n    const [trayId, setTrayId] = useState('')\r\n    const [refresh, setRefresh] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/return-from-sorting-wht/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [refresh])\r\n\r\n    const handelTrayReceived = async () => {\r\n        try {\r\n            let obj = {\r\n                trayId: trayId,\r\n                counts: counts,\r\n            }\r\n            let res = await axiosWarehouseIn.post('/recieved-from-sorting', obj)\r\n            if (res.status == 200) {\r\n                alert(res.data.message)\r\n                setOpen(false)\r\n                setRefresh((refresh) => !refresh)\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handelViewTray = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/tray/item/' + code)\r\n    }\r\n    const handelViewDetailTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/sorting/return-from-sorting/close/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Sorting Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'closed_time_sorting_agent',\r\n            label: 'Closed Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            {tableMeta.rowData[5] != 'Received From Sorting' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        setOpen(true)\r\n                                        setTrayId(value)\r\n                                    }}\r\n                                >\r\n                                    RECEIVED\r\n                                </Button>\r\n                            ) : (\r\n                                <>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        View\r\n                                    </Button>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: 'red' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewDetailTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        Close\r\n                                    </Button>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    RECEIVED\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <TextField\r\n                        label=\"Enter Item Count\"\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => {\r\n                            setCounts(e.target.value)\r\n                        }}\r\n                        inputProps={{ maxLength: 3 }}\r\n                        onKeyPress={(event) => {\r\n                            if (!/[0-9]/.test(event.key)) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        variant=\"contained\"\r\n                        disabled={counts === ''}\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelTrayReceived(e)\r\n                        }}\r\n                    >\r\n                        RECEIVED\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Sorting', path: '/' },\r\n                        { name: 'Return-From-Sorting' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Sorting\\Sorting-requests\\tray.jsx",["3846","3847","3848","3849","3850"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [botTray, setBotTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosMisUser.post(\r\n                        '/view-sorting-item/' + location + '/' + 'warehouse'\r\n                    )\r\n                    if (response.status === 200) {\r\n                        console.log(response.data.data)\r\n                        setBotTray(response.data.data)\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelViewTrayForSorting = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/sorting/request/approve/' + code)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray',\r\n            label: 'BOT Tray Id',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.[0]?.botTray?.join(', '),\r\n            },\r\n        },\r\n        {\r\n            name: '_id',\r\n            label: 'Sorting Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value?.[0]?.status_change_time).toLocaleString(\r\n                        'en-GB',\r\n                        {\r\n                            hour12: true,\r\n                        }\r\n                    ),\r\n            },\r\n        },\r\n        {\r\n            name: 'tray',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => value?.[0]?.sort_id,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray',\r\n            label: 'WHT Tray',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.[0]?.WhtTray?.join(', '),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'WHT Tray',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return value == 'Assigned to sorting agent' ? (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) =>\r\n                                handelViewTrayForSorting(\r\n                                    e,\r\n                                    tableMeta.rowData[6]\r\n                                )\r\n                            }\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Handover to Agent\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) =>\r\n                                handelViewTrayForSorting(\r\n                                    e,\r\n                                    tableMeta.rowData[2]\r\n                                )\r\n                            }\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Issue Trays\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Sorting', path: '/' },\r\n                        { name: 'Requests' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={botTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Sorting\\Sorting-requests\\ex-vs-act.jsx",["3851","3852","3853","3854","3855","3856","3857","3858","3859","3860","3861","3862"],"import React, { useEffect, useState, useMemo } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Grid,\r\n} from \"@mui/material\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { axiosWarehouseIn } from \"../../../../../axios\";\r\n\r\nexport default function DialogBox() {\r\n  const navigate = useNavigate();\r\n  const [trayData, setTrayData] = useState([]);\r\n  const { trayId, sortId } = useParams();\r\n  const [textDisable, setTextDisable] = useState(false);\r\n  /**************************************************************************** */\r\n  const [uic, setUic] = useState(\"\");\r\n  const [refresh, setRefresh] = useState(false);\r\n  /*********************************************************** */\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        let response = await axiosWarehouseIn.post(\r\n          \"/get-tray-sorting/\" + trayId\r\n        );\r\n        if (response.status === 200) {\r\n          setTrayData(response.data.data);\r\n        } else {\r\n          alert(response.data.message);\r\n          navigate(-1);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [refresh]);\r\n\r\n  const handelUic = async (e) => {\r\n    if (e.target.value.length === 11) {\r\n      try {\r\n        let obj = {\r\n          uic: e.target.value,\r\n          trayId: trayId,\r\n        };\r\n        setTextDisable(true);\r\n        let res = await axiosWarehouseIn.post(\"/check-uic\", obj);\r\n        if (res?.status === 200) {\r\n          addActualitem(res.data.data);\r\n        } else {\r\n          setTextDisable(false);\r\n          setUic(\"\");\r\n          alert(res.data.message);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    }\r\n  };\r\n  /************************************************************************** */\r\n  const addActualitem = async (obj) => {\r\n    if (trayData.limit <= trayData?.actual_items?.length) {\r\n      alert(\"All Items Scanned\");\r\n    } else {\r\n      setTextDisable(true);\r\n      try {\r\n        let objData = {\r\n          trayId: trayId,\r\n          item: obj,\r\n        };\r\n        let res = await axiosWarehouseIn.post(\"/wht-add-actual-item\", objData);\r\n        if (res.status === 200) {\r\n          setUic(\"\");\r\n          setTextDisable(false);\r\n          setRefresh((refresh) => !refresh);\r\n        } else {\r\n          setTextDisable(false);\r\n          alert(res.data.message);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    }\r\n  };\r\n  /************************************************************************** */\r\n  const handelIssue = async (e) => {\r\n    e.preventDefault();\r\n    navigate(-1);\r\n  };\r\n  /************************************************************************** */\r\n  const tableExpected = useMemo(() => {\r\n    return (\r\n      <Paper sx={{ width: \"95%\", overflow: \"hidden\", m: 1 }}>\r\n        <Box sx={{}}>\r\n          <Box\r\n            sx={{\r\n              float: \"left\",\r\n              ml: 2,\r\n            }}\r\n          >\r\n            <h5>Expected</h5>\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              float: \"right\",\r\n              mr: 2,\r\n            }}\r\n          >\r\n            <Box sx={{}}>\r\n              <h5>Total</h5>\r\n              <p style={{ paddingLeft: \"5px\", fontSize: \"22px\" }}>\r\n                {\r\n                  trayData?.items?.length\r\n                }\r\n                /{trayData?.limit}\r\n              </p>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <TableContainer>\r\n          <Table\r\n            style={{ width: \"100%\" }}\r\n            id=\"example\"\r\n            stickyHeader\r\n            aria-label=\"sticky table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>S.NO</TableCell>\r\n                <TableCell>UIC</TableCell>\r\n                {trayData?.type_taxanomy === \"MMT\" &&\r\n                trayData?.prefix == \"tray-master\" ? (\r\n                  <TableCell>AWBN Number</TableCell>\r\n                ) : (\r\n                  <TableCell>MUIC</TableCell>\r\n                )}\r\n                {trayData?.type_taxanomy === \"MMT\" &&\r\n                trayData?.prefix == \"tray-master\" ? (\r\n                  <TableCell>Bag ID</TableCell>\r\n                ) : (\r\n                  <TableCell>BOT Tray</TableCell>\r\n                )}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {trayData?.items?.map((data, index) => (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                  <TableCell>{index + 1}</TableCell>\r\n                  <TableCell>{data?.uic}</TableCell>\r\n                  {trayData?.type_taxanomy === \"MMT\" &&\r\n                  trayData?.prefix == \"tray-master\" ? (\r\n                    <TableCell>{data?.awbn_number}</TableCell>\r\n                  ) : (\r\n                    <TableCell>{data?.muic}</TableCell>\r\n                  )}\r\n                  {trayData?.type_taxanomy === \"MMT\" &&\r\n                  trayData?.prefix == \"tray-master\" ? (\r\n                    <TableCell>{data?.bag_id}</TableCell>\r\n                  ) : (\r\n                    <TableCell>{data?.tray_id}</TableCell>\r\n                  )}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    );\r\n  }, [trayData?.items]);\r\n  const tableActul = useMemo(() => {\r\n    return (\r\n      <Paper sx={{ width: \"98%\", overflow: \"hidden\", m: 1 }}>\r\n        <Box sx={{}}>\r\n          <Box\r\n            sx={{\r\n              float: \"left\",\r\n              ml: 2,\r\n            }}\r\n          >\r\n            <h5>ACTUAL</h5>\r\n            <TextField\r\n              sx={{ mt: 1 }}\r\n              id=\"outlined-password-input\"\r\n              type=\"text\"\r\n              inputRef={(input) => input && input.focus()}\r\n              name=\"doorsteps_diagnostics\"\r\n              disabled={textDisable}\r\n              label=\"SCAN UIC\"\r\n              value={uic}\r\n              onChange={(e) => {\r\n                setUic(e.target.value);\r\n                handelUic(e);\r\n              }}\r\n              inputProps={{\r\n                style: {\r\n                  width: \"auto\",\r\n                },\r\n              }}\r\n            />\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              float: \"right\",\r\n              mr: 2,\r\n            }}\r\n          >\r\n            <Box sx={{}}>\r\n              <h5>Total</h5>\r\n              <p style={{ marginLeft: \"5px\", fontSize: \"24px\" }}>\r\n                {\r\n                  trayData.actual_items?.length\r\n                }\r\n                /{trayData?.limit}\r\n              </p>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <TableContainer>\r\n          <Table\r\n            style={{ width: \"100%\" }}\r\n            id=\"example\"\r\n            stickyHeader\r\n            aria-label=\"sticky table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>S.NO</TableCell>\r\n                <TableCell>UIC</TableCell>\r\n                {trayData?.type_taxanomy === \"MMT\" &&\r\n                trayData?.prefix == \"tray-master\" ? (\r\n                  <TableCell>AWBN Number</TableCell>\r\n                ) : (\r\n                  <TableCell>MUIC</TableCell>\r\n                )}\r\n                {trayData?.type_taxanomy === \"MMT\" &&\r\n                trayData?.prefix == \"tray-master\" ? (\r\n                  <TableCell>Bag ID</TableCell>\r\n                ) : (\r\n                  <TableCell>BOT Tray</TableCell>\r\n                )}\r\n              </TableRow>\r\n            </TableHead>\r\n\r\n            <TableBody>\r\n              {trayData?.actual_items?.map((data, index) => (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                  <TableCell>{index + 1}</TableCell>\r\n                  <TableCell>{data?.uic}</TableCell>\r\n                  {trayData?.type_taxanomy === \"MMT\" &&\r\n                  trayData?.prefix == \"tray-master\" ? (\r\n                    <TableCell>{data?.awbn_number}</TableCell>\r\n                  ) : (\r\n                    <TableCell>{data?.muic}</TableCell>\r\n                  )}\r\n                  {trayData?.type_taxanomy === \"MMT\" &&\r\n                  trayData?.prefix == \"tray-master\" ? (\r\n                    <TableCell>{data?.bag_id}</TableCell>\r\n                  ) : (\r\n                    <TableCell>{data?.tray_id}</TableCell>\r\n                  )}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    );\r\n  }, [trayData?.actual_items, textDisable,uic]);\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          mt: 1,\r\n          height: 70,\r\n          borderRadius: 1,\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            float: \"left\",\r\n          }}\r\n        >\r\n          <h4 style={{ marginLeft: \"13px\" }}>TRAY ID - {trayId}</h4>\r\n          <h4 style={{ marginLeft: \"13px\" }}>\r\n            AGENT NAME - {trayData?.issued_user_name}\r\n          </h4>\r\n        </Box>\r\n      </Box>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={6}>\r\n          {tableExpected}\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          {tableActul}\r\n        </Grid>\r\n      </Grid>\r\n      <div style={{ float: \"right\" }}>\r\n        <Box sx={{ float: \"right\" }}>\r\n          <Button\r\n            sx={{ m: 3, mb: 9 }}\r\n            variant=\"contained\"\r\n            style={{ backgroundColor: \"primery\" }}\r\n            onClick={(e) => {\r\n              handelIssue(e);\r\n            }}\r\n          >\r\n            Back to List\r\n          </Button>\r\n        </Box>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bot\\bot-to-release\\view-tray-item.jsx",["3863","3864"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport { axiosBot, } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [botTray, setBotTray] = useState([])\r\n    const {trayId}=useParams()\r\n   \r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosBot.post('/trayItem/' + trayId)\r\n                if (response.status === 200) {\r\n                    setBotTray(response.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'imei',\r\n            label: 'IMEI',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'wht_tray',\r\n            label: 'WHT Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'BOT', path: '/' },\r\n                        { name: 'View-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={botTray.items}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bot\\bot-to-release\\bot-tray.jsx",["3865"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [botTray, setBotTray] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/tray-for-release/' +\r\n                            location +\r\n                            '/' +\r\n                            'Closed By Sorting Agent' +\r\n                            '/' +\r\n                            'BOT'\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setBotTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    const handelRelease = async (e, trayId) => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosWarehouseIn.post(\r\n                '/approve-release-bot-tray/' + trayId\r\n            )\r\n            if (res.status === 200) {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/bot/release/view-item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Sorting Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Max',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta.rowData[4],\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) => {\r\n                                    handelViewTray(e, value)\r\n                                }}\r\n                            >\r\n                                View\r\n                            </Button>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                disabled={loading}\r\n                                onClick={(e) => {\r\n                                    if (\r\n                                        window.confirm('You Want to Release?')\r\n                                    ) {\r\n                                        handelRelease(e, value)\r\n                                    }\r\n                                }}\r\n                                style={{ backgroundColor: 'green' }}\r\n                                component=\"span\"\r\n                            >\r\n                                Release Tray\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'BOT', path: '/' },\r\n                        { name: 'Bot-To-Release' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={botTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Pmt-mmt\\issued-pmt-mmt\\view-item.jsx",["3866","3867"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { axiosBot } from '../../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosBot.post('/trayItem/' + trayId)\r\n                if (res.status == 200) {\r\n                    setTrayData(res.data.data?.items)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Tray', path: '/' },\r\n                        { name: 'Tray-Item', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst columns = [\r\n    {\r\n        name: 'index',\r\n        label: 'Record No',\r\n        options: {\r\n            filter: false,\r\n            sort: false,\r\n            customBodyRender: (rowIndex, dataIndex) => dataIndex.rowIndex + 1,\r\n        },\r\n    },\r\n    {\r\n        name: 'uic',\r\n        label: 'UIC',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'imei',\r\n        label: 'IMEI',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'bag_id',\r\n        label: 'Bag Id',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'body_damage',\r\n        label: 'Body Damage',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'body_damage_des',\r\n        label: 'Body Damage Description',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'item_recieved',\r\n        label: 'Item Received In Packet',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'model_brand',\r\n        label: 'Mismatched Model Brand Name',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerOne',\r\n        label: 'Other Info 1',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerTwo',\r\n        label: 'Other Info 2',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerThree',\r\n        label: 'Other Info 3',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerFour',\r\n        label: 'Other Info 4',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'added_time',\r\n        label: 'Added Date',\r\n        options: {\r\n            filter: true,\r\n            customBodyRender: (value) =>\r\n                new Date(value).toLocaleString('en-GB', {\r\n                    hour12: true,\r\n                }),\r\n        },\r\n    },\r\n]\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Pmt-mmt\\issued-pmt-mmt\\issue-pmt-mmt.jsx",["3868","3869","3870","3871"],"import jwt_decode from 'jwt-decode'\r\nimport MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [trayData, setTrayData] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { location } = jwt_decode(token)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/inuse-mmt-pmt/' + location + '/' + 'Issued'\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTrayData(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n            fetchData()\r\n        }\r\n    }, [])\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/pmt-mmt/issued/view-item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: false,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta?.rowData[2],\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => {\r\n                                handelViewTray(e, value)\r\n                            }}\r\n                            style={{ backgroundColor: 'primery' }}\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'PMT and MMT', path: '/' },\r\n                        { name: 'Issued' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Pmt-mmt\\tray-close-request\\tray-requests.jsx",["3872","3873","3874","3875","3876","3877","3878","3879","3880","3881","3882","3883"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport {\r\n    Button,\r\n    MenuItem,\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContent,\r\n    DialogActions,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    TextField,\r\n    InputAdornment,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport * as Yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport SearchIcon from '@mui/icons-material/Search'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const navigate = useNavigate()\r\n    const [open, setOpen] = React.useState(false)\r\n    const [assingNewTray, setAssignNewTray] = useState(false)\r\n    const [trayData, setTrayData] = useState([])\r\n    const [counts, setCounts] = useState('')\r\n    const [botUsers, setBotUsers] = useState([])\r\n    const [trayId, setTrayId] = useState('')\r\n    const [userTray, setUserTray] = useState('')\r\n    const [trayStatus, setTrayStatus] = useState('')\r\n    const [trayIdCheck, setTrayIdCheck] = useState('')\r\n    const [loadingAssign, setLoadingAssign] = useState(false)\r\n    const [laodingRecieved, setLoadinRecieved] = useState(false)\r\n    const schema = Yup.object().shape({\r\n        user_name: Yup.string().required('Required*').nullable(),\r\n        tray_type: Yup.string().required('Required*').nullable(),\r\n        tray_Id: Yup.string().required('Required*').nullable(),\r\n    })\r\n    // ON SUBMIT FOR ASSIGN NEW TRAY\r\n    const onSubmit = async (values) => {\r\n        try {\r\n            setLoadingAssign(true)\r\n            let res = await axiosWarehouseIn.post('/assignNewTray', values)\r\n            if (res.status === 200) {\r\n                setLoadingAssign(false)\r\n                alert(res.data.message)\r\n                setAssignNewTray(false)\r\n                setUserTray('')\r\n                setTrayStatus('')\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n    const handelOpen = async () => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                let res = await axiosWarehouseIn.post('/botUsers/' + location)\r\n                if (res.status == 200) {\r\n                    setAssignNewTray(true)\r\n                    setBotUsers(res.data.data)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/trayCloseRequest/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTrayData(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [isAlive])\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    const handleCloseAssignNewTray = () => {\r\n        setAssignNewTray(false)\r\n        reset({\r\n            tray_Id: '',\r\n            tray_type: '',\r\n            user_name: '',\r\n        })\r\n        setUserTray('')\r\n        setTrayStatus('')\r\n    }\r\n\r\n    const handelTrayReceived = async () => {\r\n        setLoadinRecieved(true)\r\n        try {\r\n            let obj = {\r\n                trayId: trayId,\r\n                count: counts,\r\n            }\r\n            let res = await axiosWarehouseIn.post('/receivedTray', obj)\r\n            if (res.status == 200) {\r\n                setLoadinRecieved(false)\r\n                alert(res.data.message)\r\n                setOpen(false)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            } else {\r\n                setLoadinRecieved(false)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n            setLoadinRecieved(false)\r\n        }\r\n    }\r\n    // CHECK TRAY\r\n    const handelBotTrayCheck = async (username, trayType) => {\r\n        if (username === '') {\r\n            alert('Please select user')\r\n            reset({\r\n                user_name: null,\r\n            })\r\n        } else {\r\n            try {\r\n                setUserTray('')\r\n                let obj = {\r\n                    username: username,\r\n                    trayType: trayType,\r\n                }\r\n                let res = await axiosWarehouseIn.post('/checkBotUserTray', obj)\r\n                if (res.status === 200) {\r\n                } else {\r\n                    setUserTray(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handelTrayId = async (e) => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (\r\n                    getValues('user_name') === '' ||\r\n                    getValues('tray_type') === ''\r\n                ) {\r\n                    alert('Please select user and tray type')\r\n                } else if (trayIdCheck == '') {\r\n                    alert('Please add tray id')\r\n                } else {\r\n                    if (getValues('tray_type') == 'MMT') {\r\n                        let res = await axiosWarehouseIn.post(\r\n                            '/checkMmtTray/' + trayIdCheck + '/' + location\r\n                        )\r\n                        if (res.status == 200) {\r\n                            setTrayStatus(res.data.status)\r\n                        } else {\r\n                            alert(res.data.message)\r\n                        }\r\n                    } else if (getValues('tray_type') == 'PMT') {\r\n                        let res = await axiosWarehouseIn.post(\r\n                            '/checkPmtTray/' + trayIdCheck + '/' + location\r\n                        )\r\n                        if (res.status == 200) {\r\n                            setTrayStatus(res.data.status)\r\n                        } else {\r\n                            alert(res.data.message)\r\n                        }\r\n                    } else {\r\n                        let res = await axiosWarehouseIn.post(\r\n                            '/checkBotTray/' + trayIdCheck + '/' + location\r\n                        )\r\n                        if (res.status == 200) {\r\n                            setTrayStatus(res.data.status)\r\n                        } else {\r\n                            alert(res.data.message)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/tray/item/' + id)\r\n    }\r\n    const handelViewDetailTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/bot-done/tray-close/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'Closed Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                disabled={value === 'Closed By Bot'}\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) => {\r\n                                    handelViewTray(e, tableMeta.rowData[1])\r\n                                }}\r\n                            >\r\n                                View\r\n                            </Button>\r\n\r\n                            {value !== 'Received From BOT' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    disabled={laodingRecieved}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        setOpen(true)\r\n                                        setTrayId(tableMeta.rowData[1])\r\n                                    }}\r\n                                >\r\n                                    RECEIVE\r\n                                </Button>\r\n                            ) : (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'red' }}\r\n                                    onClick={(e) => {\r\n                                        handelViewDetailTray(\r\n                                            e,\r\n                                            tableMeta.rowData[1]\r\n                                        )\r\n                                    }}\r\n                                >\r\n                                    Close\r\n                                </Button>\r\n                            )}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Please verify the count of - {trayId}\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    {/* <h6>\r\n            {\" \"}\r\n            <Checkbox\r\n              onClick={(e) => {\r\n                receiveCheck == \"\"\r\n                  ? setReceiveCheck(\"I have validated the counts\")\r\n                  : receiveCheck(\"\");\r\n              }}\r\n              {...label}\r\n              sx={{ ml: 3 }}\r\n            />\r\n            I have validated the counts\r\n          </h6> */}\r\n                    <TextField\r\n                        label=\"Enter Item Count\"\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => {\r\n                            setCounts(e.target.value)\r\n                        }}\r\n                        inputProps={{ maxLength: 3 }}\r\n                        onKeyPress={(event) => {\r\n                            if (!/[0-9]/.test(event.key)) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        variant=\"contained\"\r\n                        disabled={counts === '' ? true : false}\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelTrayReceived(e)\r\n                        }}\r\n                    >\r\n                        RECEIVED\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={assingNewTray}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleCloseAssignNewTray}\r\n                >\r\n                    Assign new tray\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <FormControl fullWidth>\r\n                        <InputLabel\r\n                            sx={{ pt: 2 }}\r\n                            id=\"demo-simple-select-label\"\r\n                        >\r\n                            Bot users\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            fullWidth\r\n                            label=\"User Type\"\r\n                            onChange={(e) => {\r\n                                reset({ tray_type: null })\r\n                            }}\r\n                            {...register('user_name')}\r\n                            error={errors.user_name ? true : false}\r\n                            helperText={errors.user_name?.message}\r\n                            sx={{ mt: 2 }}\r\n                        >\r\n                            {botUsers.map((data) => (\r\n                                <MenuItem value={data.user_name}>\r\n                                    {data.user_name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <FormControl fullWidth>\r\n                        <InputLabel\r\n                            sx={{ pt: 2 }}\r\n                            id=\"demo-simple-select-label\"\r\n                        >\r\n                            Tray Type\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            fullWidth\r\n                            label=\"User Type\"\r\n                            {...register('tray_type')}\r\n                            error={errors.tray_type ? true : false}\r\n                            helperText={errors.tray_type?.message}\r\n                            sx={{ mt: 2 }}\r\n                        >\r\n                            <MenuItem value=\"\">Select</MenuItem>\r\n\r\n                            <MenuItem\r\n                                onClick={(e) =>\r\n                                    handelBotTrayCheck(\r\n                                        getValues('user_name'),\r\n                                        'PMT'\r\n                                    )\r\n                                }\r\n                                value=\"PMT\"\r\n                            >\r\n                                PMT\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                onClick={(e) =>\r\n                                    handelBotTrayCheck(\r\n                                        getValues('user_name'),\r\n                                        'MMT'\r\n                                    )\r\n                                }\r\n                                value=\"MMT\"\r\n                            >\r\n                                MMT\r\n                            </MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    {userTray != '' ? (\r\n                        <h6 style={{ marginTop: '4px', color: 'red' }}>\r\n                            {userTray}\r\n                        </h6>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n\r\n                    <TextField\r\n                        label=\"Tray Id\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        {...register('tray_Id')}\r\n                        error={errors.tray_Id ? true : false}\r\n                        helperText={\r\n                            errors.tray_Id ? errors.tray_Id.message : ''\r\n                        }\r\n                        onChange={(e) => setTrayIdCheck(e.target.value)}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment>\r\n                                    <IconButton\r\n                                        onClick={(e) => {\r\n                                            handelTrayId(e)\r\n                                        }}\r\n                                    >\r\n                                        <SearchIcon />\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                    {trayStatus !== '' ? (\r\n                        <TextField\r\n                            InputLabelProps={{ shrink: true }}\r\n                            label=\"Tray Status\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                            value={trayStatus}\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        disabled={\r\n                            (trayStatus !== 'Open' && trayStatus !== 'Inuse') ||\r\n                            userTray !== ''\r\n                                ? true\r\n                                : false || loadingAssign == true\r\n                                ? true\r\n                                : false\r\n                        }\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={handleSubmit(onSubmit)}\r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'PMT And MMT', path: '/' },\r\n                        { name: 'Tray-Close-Request' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Button\r\n                variant=\"contained\"\r\n                style={{ backgroundColor: 'primery' }}\r\n                onClick={(e) => {\r\n                    handelOpen()\r\n                }}\r\n            >\r\n                Assign new tray\r\n            </Button>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\view-tray-item.jsx",["3884","3885"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-scan.jsx",["3886","3887","3888","3889","3890","3891","3892","3893","3894","3895","3896","3897","3898","3899","3900","3901","3902","3903","3904","3905","3906","3907","3908","3909","3910","3911","3912","3913","3914","3915","3916","3917","3918"],"import {\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    TextField,\r\n    Checkbox,\r\n} from '@mui/material'\r\nimport React, { useState } from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../axios'\r\n\r\nconst StyledTable = styled(Table)(({ theme }) => ({\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& tr': {\r\n            '& th': {\r\n                paddingLeft: 0,\r\n                paddingRight: 0,\r\n            },\r\n        },\r\n    },\r\n    '& tbody': {\r\n        '& tr': {\r\n            '& td': {\r\n                paddingLeft: 0,\r\n                textTransform: 'capitalize',\r\n            },\r\n        },\r\n    },\r\n}))\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst PaginationTable = () => {\r\n    const [bagData, setBagData] = useState([])\r\n    /**************************************************************************** */\r\n    const [bagId, setBagId] = useState('')\r\n    const [bagSuccess, setbagSuccess] = useState(false)\r\n    const [awbn, setAwbn] = useState('')\r\n    const [uic, setUic] = useState(false)\r\n    const [sleaves, setSleaves] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [disAwbnText, SetDisAwbText] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n    const handelCheckBagId = async (e) => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                let obj = {\r\n                    location: location,\r\n                    bagId: bagId,\r\n                }\r\n                let res = await axiosWarehouseIn.post('/checkBagId', obj)\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    getitem()\r\n                    setbagSuccess(true)\r\n                } else {\r\n                    setbagSuccess(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            setbagSuccess(false)\r\n            alert(error.response.data.message)\r\n        }\r\n    }\r\n    const getitem = async () => {\r\n        try {\r\n            let response = await axiosWarehouseIn.post('/getBagItem/' + bagId)\r\n            if (response.status === 200) {\r\n                setBagData(response.data.data)\r\n                //   dataTableFun()\r\n            } else if (response.status == 201) {\r\n                setBagData(response.data.data)\r\n                alert(response.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelAwbn = async (e) => {\r\n        if (e.target.value.length >= 12) {\r\n            if (bagId == '') {\r\n                alert('Please Fill The Input')\r\n            } else {\r\n                try {\r\n                    SetDisAwbText(true)\r\n                    let admin = localStorage.getItem('prexo-authentication')\r\n                    if (admin) {\r\n                        let { location } = jwt_decode(admin)\r\n                        let obj = {\r\n                            awbn: e.target.value,\r\n                            bagId: bagId,\r\n                            location: location,\r\n                        }\r\n                        let res = await axiosWarehouseIn.post('/checkAwbn', obj)\r\n                        if (res.status == 200) {\r\n                            if (\r\n                                res.data.message == 'AWBN Number Is Duplicate'\r\n                            ) {\r\n                                setAwbn('')\r\n                                handelSubmitStock(res.data.data, 'Duplicate')\r\n                            } else if (\r\n                                res.data.message == 'AWBN Number Is Invalid'\r\n                            ) {\r\n                                setAwbn('')\r\n                                handelSubmitStock(res.data.data, 'Invalid')\r\n                            } else {\r\n                                setAwbn('')\r\n                                handelSubmitStock(res.data.data, 'Valid')\r\n                            }\r\n                        } else {\r\n                            SetDisAwbText(false)\r\n                            alert(res.data.message)\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    alert(error.response.data.message)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const handelSubmitStock = async (awbn, status) => {\r\n        if (bagId == '') {\r\n            alert('Please Fill the Input')\r\n        } else if (bagData[0]?.items != undefined) {\r\n            if (\r\n                bagData[0]?.items?.filter(function (item) {\r\n                    return item.status != 'Duplicate'\r\n                }).length == bagData[0]?.limit\r\n            ) {\r\n                alert('Bag Is Full')\r\n            } else {\r\n                try {\r\n                    let obj = {\r\n                        bag_id: bagId,\r\n                        awbn_number: awbn.tracking_id,\r\n                        order_id: awbn.order_id,\r\n                        order_date: awbn.order_date,\r\n                        status: status,\r\n                        sotckin_date: Date.now(),\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/stockInToWarehouse',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        SetDisAwbText(false)\r\n                        setAwbn('')\r\n                        getitem()\r\n                    } else {\r\n                        SetDisAwbText(false)\r\n                        alert(res.data.message)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const handeleUic = () => {\r\n        if (uic == false) {\r\n            setUic(true)\r\n        } else {\r\n            setUic(false)\r\n        }\r\n    }\r\n    const handeleSleaves = () => {\r\n        if (sleaves == false) {\r\n            setSleaves(true)\r\n        } else {\r\n            setSleaves(false)\r\n        }\r\n    }\r\n    const handelClose = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            if (\r\n                bagData[0]?.items.filter(function (item) {\r\n                    return item.status == 'Duplicate'\r\n                }).length != 0\r\n            ) {\r\n                alert('Please Remove Duplicate Items')\r\n                setLoading(false)\r\n            } else if (\r\n                bagData[0]?.items.filter(function (item) {\r\n                    return item.status == 'Invalid'\r\n                }).length != 0\r\n            ) {\r\n                alert('Invalid item found request to admin remove')\r\n                setLoading(false)\r\n            } else if (bagData[0]?.items.length == bagData[0]?.limit) {\r\n                let obj = {\r\n                    bagId: bagId,\r\n                    uic: uic,\r\n                    sleaves: sleaves,\r\n                    stage: 'Closed',\r\n                }\r\n                let res = await axiosWarehouseIn.post('/bagClosing', obj)\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    window.location.reload(false)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } else {\r\n                let obj = {\r\n                    bagId: bagId,\r\n                    uic: uic,\r\n                    sleaves: sleaves,\r\n                    stage: 'Pre-closure',\r\n                }\r\n                let res = await axiosWarehouseIn.post('/bagClosing', obj)\r\n                if (res.status == 200) {\r\n                    alert('Bag going to Pre-closure')\r\n                    setLoading(false)\r\n                    window.location.reload(false)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelDelete = async (id, awbn, state) => {\r\n        try {\r\n            let obj = {\r\n                id: id,\r\n                bagId: bagId,\r\n                awbn: awbn,\r\n                state: state,\r\n            }\r\n            let data = await axiosWarehouseIn.post('/stockin', obj)\r\n            if (data.status == 200) {\r\n                alert(data.data.message)\r\n                getitem()\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Bag', path: '/' },\r\n                        { name: 'Scan' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <SimpleCard title=\"Item\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                        mb: 3,\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            justifyContent: 'row',\r\n                        }}\r\n                    >\r\n                        <TextField\r\n                            size=\"medium\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            label=\"Bag ID\"\r\n                            onChange={(e) => setBagId(e.target.value)}\r\n                        />\r\n                        <Button\r\n                            sx={{ ml: 2, mb: 1, mt: 1, mr: 2, height: '37px' }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            disabled={bagId == ''}\r\n                            onClick={handelCheckBagId}\r\n                        >\r\n                            GO\r\n                        </Button>\r\n                        {bagSuccess ? (\r\n                            <>\r\n                                <TextField\r\n                                    id=\"outlined-password-input\"\r\n                                    type=\"text\"\r\n                                    inputRef={(input) => input && input.focus()}\r\n                                    name=\"doorsteps_diagnostics\"\r\n                                    label=\"SCAN AWBN\"\r\n                                    value={awbn}\r\n                                    disabled={disAwbnText}\r\n                                    onChange={(e) => {\r\n                                        setAwbn(e.target.value)\r\n                                        handelAwbn(e)\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            width: 'auto',\r\n                                        },\r\n                                    }}\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </Box>\r\n                    {bagData.length != 0 ? (\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'end',\r\n                            }}\r\n                        >\r\n                            <Box\r\n                                sx={{\r\n                                    m: 2,\r\n                                }}\r\n                            >\r\n                                <h4>Total </h4>\r\n                                <h4\r\n                                    style={{\r\n                                        marginLeft: '-2px',\r\n                                        fontSize: '24px',\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        bagData[0]?.items?.filter(function (\r\n                                            item\r\n                                        ) {\r\n                                            return item.status != 'Duplicate'\r\n                                        }).length\r\n                                    }\r\n                                    /{bagData[0]?.limit}\r\n                                </h4>\r\n                            </Box>\r\n\r\n                            <Box\r\n                                sx={{\r\n                                    m: 2,\r\n                                }}\r\n                            >\r\n                                <h4>Valid</h4>\r\n                                <h4\r\n                                    style={{\r\n                                        marginLeft: '13px',\r\n                                        fontSize: '24px',\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        bagData[0]?.items?.filter(function (\r\n                                            item\r\n                                        ) {\r\n                                            return item.status == 'Valid'\r\n                                        }).length\r\n                                    }\r\n                                </h4>\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    m: 2,\r\n                                }}\r\n                            >\r\n                                <h4>In Valid</h4>\r\n                                <h4\r\n                                    style={{\r\n                                        marginLeft: '13px',\r\n                                        fontSize: '24px',\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        bagData[0]?.items?.filter(function (\r\n                                            item\r\n                                        ) {\r\n                                            return item.status == 'Invalid'\r\n                                        }).length\r\n                                    }\r\n                                </h4>\r\n                            </Box>\r\n\r\n                            <Box\r\n                                sx={{\r\n                                    m: 2,\r\n                                }}\r\n                            >\r\n                                <h4>Duplicate</h4>\r\n                                <h4\r\n                                    style={{\r\n                                        marginLeft: '16px',\r\n                                        fontSize: '24px',\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        bagData[0]?.items?.filter(function (\r\n                                            item\r\n                                        ) {\r\n                                            return item.status == 'Duplicate'\r\n                                        }).length\r\n                                    }\r\n                                </h4>\r\n                            </Box>\r\n                        </Box>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </Box>\r\n\r\n                <StyledTable>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>S.NO</TableCell>\r\n                            <TableCell>AWBN Number</TableCell>\r\n                            <TableCell>Order ID</TableCell>\r\n                            <TableCell>Order Date</TableCell>\r\n                            <TableCell>Status</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {bagData[0]?.items?.map((data, index) => (\r\n                            <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                <TableCell>{index + 1}</TableCell>\r\n                                <TableCell>{data?.awbn_number}</TableCell>\r\n                                <TableCell>{data?.order_id}</TableCell>\r\n                                <TableCell>\r\n                                    {data?.order_date == null\r\n                                        ? 'No Order Date'\r\n                                        : new Date(\r\n                                              data?.order_date\r\n                                          ).toLocaleString('en-GB', {\r\n                                              year: 'numeric',\r\n                                              month: '2-digit',\r\n                                              day: '2-digit',\r\n                                          })}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    style={\r\n                                        data.status == 'Valid'\r\n                                            ? { color: 'green' }\r\n                                            : { color: 'red' }\r\n                                    }\r\n                                >\r\n                                    {data.status}\r\n                                </TableCell>\r\n                                {data.status == 'Valid' ||\r\n                                data.status == 'Invalid' ? null : (\r\n                                    <TableCell>\r\n                                        <Button\r\n                                            sx={{\r\n                                                ml: 2,\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            style={{ backgroundColor: 'red' }}\r\n                                            component=\"span\"\r\n                                            onClick={() => {\r\n                                                if (\r\n                                                    window.confirm(\r\n                                                        'You want to Remove?'\r\n                                                    )\r\n                                                ) {\r\n                                                    handelDelete(\r\n                                                        data._id,\r\n                                                        data?.awbn_number,\r\n                                                        data.status\r\n                                                    )\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            Remove\r\n                                        </Button>\r\n                                    </TableCell>\r\n                                )}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </StyledTable>\r\n                {bagData[0]?.items?.length != 0 && bagData.length != 0 ? (\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            justifyContent: 'end',\r\n                            mt: 2,\r\n                            mr: 3,\r\n                            ml: 3,\r\n                        }}\r\n                    >\r\n                        <Box>\r\n                            <Checkbox\r\n                                onClick={(e) => handeleUic()}\r\n                                sx={{ ml: 3 }}\r\n                            />\r\n                            <label>UIC Label</label>\r\n\r\n                            <Checkbox\r\n                                onClick={(e) => handeleSleaves()}\r\n                                sx={{ ml: 3 }}\r\n                            />\r\n                            <label>Sleeves</label>\r\n                            <Button\r\n                                sx={{\r\n                                    ml: 2,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: 'red' }}\r\n                                component=\"span\"\r\n                                disabled={loading == true ? true : false}\r\n                                onClick={(e) => {\r\n                                    if (window.confirm('You want to Close?')) {\r\n                                        handelClose(e)\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Close\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PaginationTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\close.jsx",["3919","3920","3921","3922","3923","3924","3925","3926","3927","3928","3929","3930","3931","3932","3933","3934","3935","3936","3937","3938","3939","3940","3941","3942","3943","3944","3945","3946","3947","3948"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport Checkbox from '@mui/material/Checkbox'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [employeeData, setEmployeeData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [awbn, setAwbn] = useState('')\r\n    const [bagReuse, setBagReuse] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [bagStatus, setBagStatus] = useState(0)\r\n    const [loading, setLoading] = useState(false)\r\n    /******************************************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getBagItemRequest/' + trayId + '/' + 'Received From BOT'\r\n                )\r\n                if (response.status === 200) {\r\n                    setEmployeeData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    useEffect(() => {\r\n        const checkBagValidation = async () => {\r\n            try {\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/bagValidation/' + employeeData[0]?.items[0]?.bag_id\r\n                )\r\n                if (res.status === 200) {\r\n                    setBagStatus(res.data.status)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        if (\r\n            employeeData[0]?.items[0]?.bag_id !== undefined &&\r\n            employeeData[0].type_taxanomy == 'BOT'\r\n        ) {\r\n            checkBagValidation()\r\n        } else {\r\n            setBagStatus(1)\r\n        }\r\n    }, [employeeData])\r\n    console.log(employeeData[0]?.items[0]?.bag_id)\r\n    /******************************************************************************** */\r\n    const getitem = async () => {\r\n        try {\r\n            let response = await axiosWarehouseIn.post(\r\n                '/getBagItemRequest/' + trayId + '/' + 'Received From BOT'\r\n            )\r\n            if (response.status === 200) {\r\n                setEmployeeData(response.data.data)\r\n\r\n                //   dataTableFun()\r\n            } else if (response.status == 201) {\r\n                setEmployeeData(response.data.data)\r\n                alert(response.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /******************************************************************************** */\r\n    const handelAwbn = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post('/check-uic', obj)\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else if (res.status == 202) {\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                setTextDisable(false)\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (uic) => {\r\n        if (\r\n            employeeData[0]?.actual_items?.filter(function (item) {\r\n                return item.status == 'Valid'\r\n            }).length +\r\n                employeeData[0]?.actual_items?.filter(function (item) {\r\n                    return item.status == 'Invalid'\r\n                }).length >=\r\n            employeeData[0].limit\r\n        ) {\r\n            alert('Bag Is Full')\r\n        } else {\r\n            let data = employeeData[0]?.items?.filter(function (item) {\r\n                return item.awbn_number == uic.awbn_number\r\n            })\r\n            setTextDisable(true)\r\n            try {\r\n                let obj = {\r\n                    bag_id: trayId,\r\n                    awbn_number: uic.awbn_number,\r\n                    order_id: uic.order_id,\r\n                    order_date: uic.order_date,\r\n                    uic: uic.uic,\r\n                    stock_in: new Date(),\r\n                    status: data[0].status,\r\n                }\r\n                let res = await axiosWarehouseIn.post('/addActualitem', obj)\r\n                if (res?.status == 200) {\r\n                    setAwbn('')\r\n                    setTextDisable(false)\r\n                    getitem()\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, bagId) => {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        try {\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (description == '') {\r\n                    alert('Please Add Description')\r\n                    setLoading(false)\r\n                } else if (\r\n                    employeeData[0]?.type_taxanomy == 'BOT' &&\r\n                    bagReuse == false\r\n                ) {\r\n                    alert('Please confirm bag release')\r\n                    setLoading(false)\r\n                } else if (\r\n                    employeeData[0]?.actual_items?.filter(function (item) {\r\n                        return item.status == 'Duplicate'\r\n                    })?.length != 0\r\n                ) {\r\n                    alert('Please Remove Duplicate Items')\r\n                    setLoading(false)\r\n                } else if (\r\n                    employeeData[0]?.actual_items?.length ==\r\n                    employeeData[0]?.items?.length\r\n                ) {\r\n                    let obj = {\r\n                        trayId: trayId,\r\n                        description: description,\r\n                        bagId: bagId,\r\n                        location: location,\r\n                    }\r\n                    if (employeeData?.[0]?.type_taxanomy != 'BOT') {\r\n                        let res = await axiosWarehouseIn.post('/trayclose', obj)\r\n                        if (res.status == 200) {\r\n                            alert(res.data.message)\r\n                            setLoading(false)\r\n                            navigate('/wareshouse/pmt-mmt/tray-close-request')\r\n                        } else {\r\n                            alert(res.data.message)\r\n                        }\r\n                    } else {\r\n                        let res = await axiosWarehouseIn.post(\r\n                            '/traycloseBot',\r\n                            obj\r\n                        )\r\n                        if (res.status == 200) {\r\n                            alert(res.data.message)\r\n                            setLoading(false)\r\n                            navigate('/wareshouse/bag/bag-close-requests')\r\n                        } else {\r\n                            alert(res.data.message)\r\n                        }\r\n                    }\r\n                } else {\r\n                    alert('Please Verify Actual Data')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /******************************************************************************** */\r\n    const handelDelete = async (id) => {\r\n        try {\r\n            let obj = {\r\n                bagId: trayId,\r\n                id: id,\r\n            }\r\n            let data = await axiosWarehouseIn.post('/actualBagItem', obj)\r\n            if (data.status == 200) {\r\n                alert(data.data.message)\r\n                getitem()\r\n            } else {\r\n                alert(data.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /***************************************************************************************** */\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    /******************************************************************************** */\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h4>Expected</h4>\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '1px', fontSize: '22px' }}>\r\n                                {employeeData[0]?.items?.length}/\r\n                                {employeeData[0]?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>Bag Id</TableCell>\r\n                                <TableCell>Order ID</TableCell>\r\n                                <TableCell>Order Date</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {employeeData[0]?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.bag_id}</TableCell>\r\n\r\n                                    <TableCell>{data?.order_id}</TableCell>\r\n                                    <TableCell>\r\n                                        {new Date(\r\n                                            data?.order_date\r\n                                        ).toLocaleString('en-GB', {\r\n                                            year: 'numeric',\r\n                                            month: '2-digit',\r\n                                            day: '2-digit',\r\n                                        })}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={\r\n                                            data.status == 'Valid'\r\n                                                ? { color: 'green' }\r\n                                                : { color: 'red' }\r\n                                        }\r\n                                    >\r\n                                        {data.status}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [employeeData[0]?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h4>ACTUAL</h4>\r\n                <TextField\r\n                    sx={{ m: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    name=\"doorsteps_diagnostics\"\r\n                    inputRef={(input) => input && input.focus()}\r\n                    disabled={textDisable}\r\n                    label=\"SCAN UIC\"\r\n                    value={awbn}\r\n                    onChange={(e) => {\r\n                        setAwbn(e.target.value)\r\n                        handelAwbn(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {employeeData[0]?.actual_items?.length}/\r\n                                {employeeData[0]?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>Bag Id</TableCell>\r\n                                <TableCell>Order ID</TableCell>\r\n                                <TableCell>Order Date</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {employeeData[0]?.actual_items?.map(\r\n                                (data, index) => (\r\n                                    <TableRow\r\n                                        hover\r\n                                        role=\"checkbox\"\r\n                                        tabIndex={-1}\r\n                                    >\r\n                                        <TableCell>{index + 1}</TableCell>\r\n                                        <TableCell>{data?.uic}</TableCell>\r\n                                        <TableCell>{data?.bag_id}</TableCell>\r\n                                        <TableCell>{data?.order_id}</TableCell>\r\n                                        <TableCell>\r\n                                            {new Date(\r\n                                                data?.order_date\r\n                                            ).toLocaleString('en-GB', {\r\n                                                year: 'numeric',\r\n                                                month: '2-digit',\r\n                                                day: '2-digit',\r\n                                            })}\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            style={\r\n                                                data.status == 'Valid'\r\n                                                    ? { color: 'green' }\r\n                                                    : { color: 'red' }\r\n                                            }\r\n                                        >\r\n                                            {data.status}\r\n                                        </TableCell>\r\n                                        {data.status !== 'Valid' ? (\r\n                                            <TableCell>\r\n                                                <Button\r\n                                                    sx={{\r\n                                                        ml: 2,\r\n                                                    }}\r\n                                                    variant=\"contained\"\r\n                                                    style={{\r\n                                                        backgroundColor: 'red',\r\n                                                    }}\r\n                                                    component=\"span\"\r\n                                                    onClick={() => {\r\n                                                        if (\r\n                                                            window.confirm(\r\n                                                                'Delete the item?'\r\n                                                            )\r\n                                                        ) {\r\n                                                            handelDelete(\r\n                                                                data._id\r\n                                                            )\r\n                                                        }\r\n                                                    }}\r\n                                                >\r\n                                                    Remove\r\n                                                </Button>\r\n                                            </TableCell>\r\n                                        ) : null}\r\n                                    </TableRow>\r\n                                )\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [employeeData[0]?.actual_items, textDisable, awbn])\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h3 style={{ marginLeft: '13px' }}>Tray ID - {trayId}</h3>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {employeeData[0]?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Closed On --{' '}\r\n                        {new Date(\r\n                            employeeData[0]?.closed_time_bot\r\n                        ).toLocaleString('en-GB', { hour12: true })}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n                    {employeeData[0]?.type_taxanomy == 'BOT' ? (\r\n                        <>\r\n                            <Checkbox\r\n                                checked={bagReuse}\r\n                                onClick={(e) => {\r\n                                    if (\r\n                                        window.confirm(\r\n                                            bagReuse\r\n                                                ? 'Already Added'\r\n                                                : 'You Want to Release Bag ?'\r\n                                        )\r\n                                    ) {\r\n                                        setBagReuse(true)\r\n                                    }\r\n                                }}\r\n                                {...label}\r\n                            />\r\n                            <label>Bag Release</label>\r\n                        </>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'primery' }}\r\n                        disabled={\r\n                            loading == true ||\r\n                            description == '' ||\r\n                            bagStatus !== 1\r\n                                ? true\r\n                                : false\r\n                        }\r\n                        onClick={(e) => {\r\n                            handelIssue(e, employeeData[0]?.items[0]?.bag_id)\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\summer.jsx",["3949","3950"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [bot, setBot] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    const { bagId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let botTray = await axiosWarehouseIn.post(\r\n                    '/summeryBotTrayBag/' + bagId\r\n                )\r\n                if (botTray.status == 200) {\r\n                    setBot(botTray.data.data)\r\n                } else {\r\n                    alert(botTray.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic_code',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => value.code,\r\n            },\r\n        },\r\n        {\r\n            name: 'tracking_id',\r\n            label: 'Tracking Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_id',\r\n            label: 'Tray id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_type',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_status',\r\n            label: 'Tray Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'bot?.[0]?.description',\r\n            label: 'Description',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return bot?.[0]?.description\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Bag', path: '/' },\r\n                        { name: 'Bag-Close-Request' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={bot[0]?.delivery}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\bag-close-requests.jsx",["3951","3952","3953"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    Button,\r\n} from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [bot, setBot] = useState([])\r\n    const [trayId, setTrayId] = useState('')\r\n    const [counts, setCounts] = useState('')\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let botTray = await axiosWarehouseIn.post(\r\n                        '/closeBotTray/' + location\r\n                    )\r\n                    if (botTray.status == 200) {\r\n                        setBot(botTray.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/tray/item/' + id)\r\n    }\r\n    const handelViewDetailTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/bot-done/tray-close/' + id)\r\n    }\r\n    const handelViewSummery = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/bag/bag-close-requests/summery/' + id)\r\n    }\r\n\r\n    const handelTrayReceived = async () => {\r\n        setLoading(true)\r\n        try {\r\n            let obj = {\r\n                trayId: trayId,\r\n                count: counts,\r\n            }\r\n            let res = await axiosWarehouseIn.post('/receivedTray', obj)\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setOpen(false)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            } else {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value[0]?.bag_id,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'Closed Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                disabled={value === 'Closed By Bot'}\r\n                                style={{ backgroundColor: '#21b6ae' }}\r\n                                onClick={(e) => {\r\n                                    handelViewSummery(\r\n                                        e,\r\n                                        tableMeta.rowData[2]?.[0]?.bag_id\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Summery\r\n                            </Button>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                disabled={value === 'Closed By Bot'}\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) => {\r\n                                    handelViewTray(e, tableMeta.rowData[1])\r\n                                }}\r\n                            >\r\n                                View\r\n                            </Button>\r\n\r\n                            {value !== 'Received From BOT' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    disabled={loading}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        setOpen(true)\r\n                                        setTrayId(tableMeta.rowData[1])\r\n                                    }}\r\n                                >\r\n                                    RECEIVE\r\n                                </Button>\r\n                            ) : (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'red' }}\r\n                                    onClick={(e) => {\r\n                                        handelViewDetailTray(\r\n                                            e,\r\n                                            tableMeta.rowData[1]\r\n                                        )\r\n                                    }}\r\n                                >\r\n                                    Close\r\n                                </Button>\r\n                            )}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Please verify the count of - {trayId}\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <TextField\r\n                        label=\"Enter Item Count\"\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => {\r\n                            setCounts(e.target.value)\r\n                        }}\r\n                        inputProps={{ maxLength: 3 }}\r\n                        onKeyPress={(event) => {\r\n                            if (!/[0-9]/.test(event.key)) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        variant=\"contained\"\r\n                        disabled={counts === '' ? true : false}\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelTrayReceived(e)\r\n                        }}\r\n                    >\r\n                        RECEIVED\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Bag', path: '/' },\r\n                        { name: 'Bag-Close-Request' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={bot}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-issue-request\\bag-issue-request.jsx",["3954","3955","3956","3957"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [userList, setRequests] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const fetchData = async () => {\r\n                try {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/getRequests/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setRequests(res.data.data)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelDetailPage = (e, bagId) => {\r\n      \r\n        navigate('/wareshouse/bag/bag-issue-request/approve/' + bagId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Max',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Valid',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Valid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Total',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            disabled={value == 'In Progress'}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => {\r\n                                handelDetailPage(e, value)\r\n                            }}\r\n                            style={{ backgroundColor: 'green' }}\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Bag', path: '/' },\r\n                        { name: 'Bag-Issue-Request' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={userList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Bag\\bag-issue-request\\ex-vs-act.jsx",["3958","3959","3960","3961","3962","3963","3964","3965","3966","3967","3968","3969","3970","3971","3972","3973","3974","3975","3976","3977","3978","3979","3980","3981","3982","3983","3984","3985","3986","3987","3988","3989","3990","3991","3992","3993","3994","3995","3996","3997"],"import { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    Card,\r\n    Box,\r\n    IconButton,\r\n    TextField,\r\n    Checkbox,\r\n    TableContainer,\r\n    Grid,\r\n    InputAdornment,\r\n    Paper,\r\n} from '@mui/material'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport SearchIcon from '@mui/icons-material/Search'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { H5 } from 'app/components/Typography'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const navigate = useNavigate()\r\n    const [bagData, setBagData] = useState([])\r\n    const { bagId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    /**************************************************************************** */\r\n    const [awbn, setAwbn] = useState('')\r\n    const [uic, setUic] = useState(false)\r\n    const [sleaves, setSleaves] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [readyForAssign, setReadyForAssign] = useState(0)\r\n    const [textBoxDis, setTextBoxDis] = useState(false)\r\n    /*********************************************************** */\r\n    const [botTray, setBotTray] = useState('')\r\n    const [pmtTray, setPmtTray] = useState(null)\r\n    const [autoTray, setAutoTray] = useState({\r\n        mmtTray: '',\r\n        pmtTray: '',\r\n        botTray: '',\r\n    })\r\n    const [mmtTray, setMmtTray] = useState(null)\r\n    const [trayId, setTrayid] = useState({\r\n        mmtTray: '',\r\n        pmtTray: '',\r\n        botTray: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getBagItemRequest/' +\r\n                        bagId +\r\n                        '/' +\r\n                        'Requested to Warehouse'\r\n                )\r\n                if (\r\n                    response.status === 200 &&\r\n                    response.data.data[0]?.sort_id != 'Issued'\r\n                ) {\r\n                    setBagData(response.data.data)\r\n                    setUic(response.data.data[0]?.uic === 'true')\r\n\r\n                    setSleaves(response.data.data[0]?.sleaves === 'true')\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/autoFetchAlreadyAssignedTray/' +\r\n                            response.data.data[0]?.issued_user_name\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setAutoTray({\r\n                            botTray: res.data.botTray,\r\n                            mmtTray: res.data.mmtTray,\r\n                            pmtTray: res.data.pmtTray,\r\n                        })\r\n                    } else {\r\n                        alert(res.data.message)\r\n                        navigate(-1)\r\n                    }\r\n                } else {\r\n                    navigate('/wareshouse/bag/bag-issue-request')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const fetchAgentStatus = async () => {\r\n            try {\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/checkBotUserStatus/' + bagData[0]?.issued_user_name\r\n                )\r\n                if (res.status === 200) {\r\n                    setReadyForAssign(res.data.data)\r\n                } else {\r\n                    alert(res.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        if (bagData[0]?.issued_user_name !== undefined) {\r\n            fetchAgentStatus()\r\n        }\r\n    }, [bagData])\r\n\r\n    const getitem = async () => {\r\n        try {\r\n            let response = await axiosWarehouseIn.post(\r\n                '/getBagItemRequest/' + bagId + '/' + 'Requested to Warehouse'\r\n            )\r\n            if (response.status === 200) {\r\n                setBagData(response.data.data)\r\n                setUic(response.data.data[0]?.uic === 'true')\r\n                setSleaves(response.data.data[0]?.sleaves === 'true')\r\n                //   dataTableFun()\r\n            } else if (response.status == 201) {\r\n                setBagData(response.data.data)\r\n                setUic(response.data.data[0]?.uic === 'true')\r\n                setSleaves(response.data.data[0]?.sleaves === 'true')\r\n                alert(response.data.message)\r\n            } else if (response.status == 202) {\r\n                alert(response.data.status)\r\n                navigate(-1)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelAwbn = async (e) => {\r\n        if (e.target.value.length >= 12) {\r\n            try {\r\n                let obj = {\r\n                    awbn: e.target.value,\r\n                    id: bagId,\r\n                }\r\n                setTextBoxDis(true)\r\n                let res = await axiosWarehouseIn.post('/actualCheckAwbn', obj)\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else if (res.status == 202) {\r\n                    setTextBoxDis(false)\r\n                    setAwbn('')\r\n                    alert(res.data.message)\r\n                } else if (res.status == 203) {\r\n                    setTextBoxDis(false)\r\n                    setAwbn('')\r\n                    alert('This Item Does Not Exist In This Bag')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    /************************************************************************** */\r\n    const addActualitem = async (awbn) => {\r\n        if (\r\n            bagData[0]?.actual_items?.filter(function (item) {\r\n                return item.status == 'Valid'\r\n            }).length +\r\n                bagData[0]?.actual_items?.filter(function (item) {\r\n                    return item.status == 'Invalid'\r\n                }).length >=\r\n            bagData[0].limit\r\n        ) {\r\n            alert('Bag Is Full')\r\n        } else {\r\n            setTextBoxDis(true)\r\n            let data = bagData[0]?.items?.filter(function (item) {\r\n                return item.awbn_number == awbn.tracking_id\r\n            })\r\n            try {\r\n                let obj = {\r\n                    bag_id: bagId,\r\n                    awbn_number: awbn.tracking_id,\r\n                    order_id: awbn.order_id,\r\n                    order_date: awbn.order_date,\r\n                    stock_in: new Date(),\r\n                    status: data[0].status,\r\n                }\r\n                let res = await axiosWarehouseIn.post('/addActualitem', obj)\r\n                if (res?.status == 200) {\r\n                    setAwbn('')\r\n                    setTextBoxDis(false)\r\n                    getitem()\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, type) => {\r\n        try {\r\n            setLoading(true)\r\n            if (uic == false) {\r\n                alert('Please Confirm UIC')\r\n                setLoading(false)\r\n            } else if (sleaves == false) {\r\n                alert('Please Confirm Sleeves')\r\n                setLoading(false)\r\n            } else if (readyForAssign !== 'User is free' && type == 'Issued') {\r\n                alert(readyForAssign)\r\n                setLoading(false)\r\n            } else if (\r\n                (pmtTray == null && type == 'Issued') ||\r\n                (mmtTray == null && type == 'Issued') ||\r\n                (botTray == '' && type == 'Issued')\r\n            ) {\r\n                alert('Please Assign Tray')\r\n                setLoading(false)\r\n            } else {\r\n                let obj = {\r\n                    bagId: bagId,\r\n                    description: description,\r\n                    sleaves: sleaves,\r\n                    uic: uic,\r\n                    try: [pmtTray, mmtTray, botTray],\r\n                    status: type,\r\n                }\r\n\r\n                let res = await axiosWarehouseIn.post('/issueToBot', obj)\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/wareshouse/bag/bag-issue-request')\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelDelete = async (id) => {\r\n        try {\r\n            let obj = {\r\n                bagId: bagId,\r\n                id: id,\r\n            }\r\n            let data = await axiosWarehouseIn.post('/actualBagItem', obj)\r\n            if (data.status == 200) {\r\n                alert(data.data.message)\r\n                getitem()\r\n            } else {\r\n                alert(data.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    /*********************************TRAY ASSIGNEMENT********************************** */\r\n    const handelBotTray = async (e, trayId) => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (trayId !== '') {\r\n                    setBotTray('')\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/checkBotTray/' + trayId + '/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        setBotTray(res.data.data)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                }\r\n            } else {\r\n                alert('Please enter tray id')\r\n            }\r\n        } catch (error) {\r\n            alert(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    const handelMmtTray = async (e, trayId) => {\r\n        try {\r\n            if (trayId !== '') {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    setMmtTray(null)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/checkMmtTray/' + trayId + '/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        setMmtTray(res.data.data)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                } else {\r\n                    alert('Please enter tray id')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    const handelPmtTray = async (e, trayId) => {\r\n        try {\r\n            if (trayId !== '') {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    setPmtTray(null)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/checkPmtTray/' + trayId + '/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        setPmtTray(res.data.data)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                }\r\n            } else {\r\n                alert('Please enter tray id')\r\n            }\r\n        } catch (error) {\r\n            alert(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    const tabelDataExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>Expected</h5>\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {\r\n                                    bagData[0]?.items?.filter(function (item) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{bagData[0]?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '14px', fontSize: '24px' }}>\r\n                                {\r\n                                    bagData[0]?.items?.filter(function (item) {\r\n                                        return item.status == 'Valid'\r\n                                    }).length\r\n                                }\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>AWBN Number</TableCell>\r\n                                <TableCell>Order ID</TableCell>\r\n                                <TableCell>Order Date</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {bagData[0]?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.awbn_number}</TableCell>\r\n                                    <TableCell>{data?.order_id}</TableCell>\r\n                                    <TableCell>\r\n                                        {new Date(\r\n                                            data?.order_date\r\n                                        ).toLocaleString('en-GB', {\r\n                                            year: 'numeric',\r\n                                            month: '2-digit',\r\n                                            day: '2-digit',\r\n                                        })}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={\r\n                                            data.status == 'Valid'\r\n                                                ? { color: 'green' }\r\n                                                : { color: 'red' }\r\n                                        }\r\n                                    >\r\n                                        {data.status}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [bagData[0]?.items])\r\n\r\n    const tableDataActul = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>ACTUAL</h5>\r\n                <TextField\r\n                    sx={{ m: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    disabled={textBoxDis}\r\n                    inputRef={(input) => input && input.focus()}\r\n                    name=\"doorsteps_diagnostics\"\r\n                    label=\"SCAN AWBN\"\r\n                    value={awbn}\r\n                    // onChange={(e) => setAwbn(e.target.value)}\r\n                    onChange={(e) => {\r\n                        setAwbn(e.target.value)\r\n                        handelAwbn(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {\r\n                                    bagData[0]?.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{bagData[0]?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '19px', fontSize: '24px' }}>\r\n                                {\r\n                                    bagData[0]?.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status == 'Valid'\r\n                                    }).length\r\n                                }\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>AWBN Number</TableCell>\r\n                                <TableCell>Order ID</TableCell>\r\n                                <TableCell>Order Date</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {bagData[0]?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.awbn_number}</TableCell>\r\n                                    <TableCell>{data?.order_id}</TableCell>\r\n                                    <TableCell>\r\n                                        {new Date(\r\n                                            data?.order_date\r\n                                        ).toLocaleString('en-GB', {\r\n                                            year: 'numeric',\r\n                                            month: '2-digit',\r\n                                            day: '2-digit',\r\n                                        })}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={\r\n                                            data.status == 'Valid'\r\n                                                ? { color: 'green' }\r\n                                                : { color: 'red' }\r\n                                        }\r\n                                    >\r\n                                        {data.status}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [bagData[0]?.actual_items, textBoxDis, awbn])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Bag', path: '/' },\r\n                        { name: 'Bag-Issue-Request' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                <Box\r\n                    sx={{\r\n                        height: 70,\r\n                        borderRadius: 1,\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                        }}\r\n                    >\r\n                        <h4 style={{ marginLeft: '13px' }}>BAG ID - {bagId}</h4>\r\n                        <H5 style={{ marginLeft: '13px' }}>\r\n                            AGENT NAME - {bagData[0]?.issued_user_name}\r\n                        </H5>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                        }}\r\n                    >\r\n                        <h4 style={{ marginRight: '13px' }}>\r\n                            Closed On --{' '}\r\n                            {new Date(\r\n                                bagData[0]?.status_change_time\r\n                            ).toLocaleString('en-GB', { hour12: true })}\r\n                        </h4>\r\n\r\n                        <Checkbox\r\n                            checked={uic}\r\n                            onClick={(e) => {\r\n                                if (\r\n                                    window.confirm(\r\n                                        uic\r\n                                            ? 'Already Added'\r\n                                            : 'You Want to add UIC ?'\r\n                                    )\r\n                                ) {\r\n                                    setUic(true)\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label>UIC Label</label>\r\n                        <Checkbox\r\n                            checked={sleaves}\r\n                            onClick={(e) => {\r\n                                if (\r\n                                    window.confirm(\r\n                                        sleaves\r\n                                            ? 'Already Added'\r\n                                            : 'You Want to add sleeves ?'\r\n                                    )\r\n                                ) {\r\n                                    setSleaves(true)\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label>Sleeves</label>\r\n                    </Box>\r\n                </Box>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={6}>\r\n                        {tabelDataExpected}\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        {tableDataActul}\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n            <Grid container spacing={3} sx={{ mt: 2 }}>\r\n                {bagData[0]?.sort_id !== 'Requested to Warehouse' ? (\r\n                    <Grid item xs={6}>\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                flexDirection: 'row',\r\n                            }}\r\n                        >\r\n                            <Box>\r\n                                <TextField\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    onChange={(e) =>\r\n                                        setTrayid({ botTray: e.target.value })\r\n                                    }\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment>\r\n                                                <IconButton\r\n                                                    onClick={(e) => {\r\n                                                        handelBotTray(\r\n                                                            e,\r\n                                                            trayId.botTray\r\n                                                        )\r\n                                                    }}\r\n                                                >\r\n                                                    <SearchIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    label=\"BOT Tray\"\r\n                                    id=\"standard-size-normal\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                                <p style={{ color: 'red', marginLeft: '8px' }}>\r\n                                    {autoTray.botTray}\r\n                                </p>\r\n                            </Box>\r\n                            <Box>\r\n                                <TextField\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    onChange={(e) =>\r\n                                        setTrayid({ pmtTray: e.target.value })\r\n                                    }\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment>\r\n                                                <IconButton\r\n                                                    onClick={(e) => {\r\n                                                        handelPmtTray(\r\n                                                            e,\r\n                                                            trayId.pmtTray\r\n                                                        )\r\n                                                    }}\r\n                                                >\r\n                                                    <SearchIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    label=\"PMT Tray\"\r\n                                    id=\"standard-size-normal\"\r\n                                    value={pmtTray}\r\n                                    variant=\"standard\"\r\n                                />\r\n                                <p style={{ color: 'red', marginLeft: '8px' }}>\r\n                                    {autoTray.pmtTray}\r\n                                </p>\r\n                            </Box>\r\n                            <Box>\r\n                                <TextField\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    onChange={(e) =>\r\n                                        setTrayid({ mmtTray: e.target.value })\r\n                                    }\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment>\r\n                                                <IconButton\r\n                                                    onClick={(e) => {\r\n                                                        handelMmtTray(\r\n                                                            e,\r\n                                                            trayId.mmtTray\r\n                                                        )\r\n                                                    }}\r\n                                                >\r\n                                                    <SearchIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    label=\"MMT Tray\"\r\n                                    value={mmtTray}\r\n                                    id=\"standard-size-normal\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                                <p style={{ color: 'red', marginLeft: '8px' }}>\r\n                                    {autoTray.mmtTray}\r\n                                </p>\r\n                            </Box>\r\n                        </Box>\r\n                    </Grid>\r\n                ) : (\r\n                    <Grid item xs={6}></Grid>\r\n                )}\r\n\r\n                <Grid item xs={6}>\r\n                    {bagData[0]?.sort_id !== 'Requested to Warehouse' ? (\r\n                        <Box sx={{ float: 'right', mb: 4 }}>\r\n                            <textarea\r\n                                onChange={(e) => {\r\n                                    setDescription(e.target.value)\r\n                                }}\r\n                                style={{ width: '300px', height: '60px' }}\r\n                                placeholder=\"Description\"\r\n                            ></textarea>\r\n                            <Button\r\n                                sx={{ m: 3, mb: 9 }}\r\n                                variant=\"contained\"\r\n                                disabled={\r\n                                    loading == true ||\r\n                                    description == '' ||\r\n                                    readyForAssign == ''\r\n                                }\r\n                                style={{ backgroundColor: 'primery' }}\r\n                                onClick={(e) => {\r\n                                    if (window.confirm('You Want to Issue?')) {\r\n                                        handelIssue(e, 'Issued')\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Handeover to Agent\r\n                            </Button>\r\n                        </Box>\r\n                    ) : (\r\n                        <Button\r\n                            sx={{ m: 3, mb: 9, float: 'right' }}\r\n                            variant=\"contained\"\r\n                            disabled={\r\n                                bagData[0]?.actual_items?.length !==\r\n                                bagData[0]?.items?.length\r\n                            }\r\n                            style={{ backgroundColor: 'primery' }}\r\n                            onClick={(e) => {\r\n                                handelIssue(e, 'Ready For Issue')\r\n                            }}\r\n                        >\r\n                            Save Data\r\n                        </Button>\r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Dashboard\\dashboard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\Bag\\view-assigned-all-bag.jsx",["3998"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosBot } from '../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [bag, setBag] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { user_name } = jwt_decode(token)\r\n                    let res = await axiosBot.post(\r\n                        '/getAssignedBag/' + user_name\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setBag(res.data.data)\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelView = (e, bagId) => {\r\n        navigate('/bot/bag/view/' + bagId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Max',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Valid',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Total',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) => value.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Date Of Closure',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => {\r\n                                handelView(e, value)\r\n                            }}\r\n                            style={{ backgroundColor: 'primery' }}\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Bag', path: '/' }]} />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Bag'}\r\n                data={bag}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\Dashboard\\dashboard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\Tray-merge\\tray.jsx",["3999","4000"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosSortingAgent } from '../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [tray, setTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { user_name } = jwt_decode(token)\r\n                const fetchData = async () => {\r\n                    let res = await axiosSortingAgent.post(\r\n                        '/getAssignedFromTray/' + user_name\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n\r\n    const handelApprove = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/sorting/merge/start/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[4],\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Sorting Agent',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'to_merge',\r\n            label: 'To Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'assigned_date',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelApprove(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Start Merge\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Tray-Merge', path: '/' }]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bqc-components\\Tray\\tray.jsx",["4001","4002","4003","4004"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosBqc } from '../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [tray, setTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { user_name } = jwt_decode(token)\r\n                    let res = await axiosBqc.post('/assigned-tray/' + user_name)\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelBqcIn = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/bqc/tray/item-verify/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'actual_items',\r\n            label: 'actu',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'temp_array',\r\n            label: 'temp',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    tableMeta.rowData[6].length == 0 &&\r\n                    tableMeta.rowData[7].length == 0\r\n                        ? value.length + '/' + tableMeta.rowData[5]\r\n                        : tableMeta.rowData[8] === 'BQC work inprogress'\r\n                        ? tableMeta.rowData[6].length +\r\n                          tableMeta.rowData[7].length +\r\n                          '/' +\r\n                          tableMeta.rowData[5]\r\n                        : tableMeta.rowData[6].length !== 0 ||\r\n                          tableMeta.rowData[7].length !== 0\r\n                        ? value.length +\r\n                          tableMeta.rowData[7].length +\r\n                          tableMeta.rowData[6].length +\r\n                          '/' +\r\n                          tableMeta.rowData[5]\r\n                        : '',\r\n            },\r\n        },\r\n        {\r\n            name: 'assigned_date',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{ m: 1 }}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            style={{ backgroundColor: 'green' }}\r\n                            onClick={(e) => {\r\n                                handelBqcIn(e, value)\r\n                            }}\r\n                        >\r\n                            Start BQC\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Bqc-Request', path: '/' }]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bqc-components\\Tray\\item-segrgation.jsx",["4005","4006","4007","4008","4009","4010","4011","4012","4013","4014","4015","4016","4017","4018","4019","4020","4021","4022","4023","4024","4025","4026","4027","4028","4029","4030","4031","4032","4033","4034","4035","4036"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\Sorting-request\\tray.jsx",["4037"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\nimport { axiosSortingAgent } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [botTray, setBotTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { user_name } = jwt_decode(admin)\r\n                    let response = await axiosSortingAgent.post(\r\n                        '/get-assigned-sorting-tray/' + user_name\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setBotTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelStartSorting = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/sorting/request/start-sorting/' + code)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[4],\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_wharehouse_from_bot',\r\n            label: 'Date Of Closure',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        year: 'numeric',\r\n                        month: '2-digit',\r\n                        day: '2-digit',\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        year: 'numeric',\r\n                        month: '2-digit',\r\n                        day: '2-digit',\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelStartSorting(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Start Sorting\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Sorting-Request', path: '/' }]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={botTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\Dashboard\\dashboard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\Sorting-request\\start-sorting.jsx",["4038","4039","4040","4041"],"import React, { useEffect, useMemo, useState } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    DialogTitle,\r\n    IconButton,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport { useParams } from 'react-router-dom'\r\n// import jwt from \"jsonwebtoken\" \r\nimport jwt_decode from 'jwt-decode'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport { styled } from '@mui/material/styles'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nimport { axiosSortingAgent } from '../../../../axios'\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [tray, setTray] = useState([])\r\n    const { trayId } = useParams()\r\n    /**************************************************************************** */\r\n    const [awbn, setAwbn] = useState('')\r\n    const [open, setOpen] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [itemDetails, setItemDetails] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [loading2, setLoading2] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { user_name } = jwt_decode(admin)\r\n                    let response = await axiosSortingAgent.post(\r\n                        '/get-data-for-start-sorting/' +\r\n                            user_name +\r\n                            '/' +\r\n                            trayId\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setTray(response.data.data)\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        setLoading(false)\r\n        setAwbn('')\r\n    }\r\n\r\n    const handelAwbn = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                    wht_tray: tray?.wht,\r\n                }\r\n                let res = await axiosSortingAgent.post(\r\n                    '/cheack-uic-for-sorting',\r\n                    obj\r\n                )\r\n                if (res?.status === 200) {\r\n                    setItemDetails(res.data.data)\r\n                    setOpen(true)\r\n                } else {\r\n                    setAwbn('')\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                setAwbn('')\r\n\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (e) => {\r\n        try {\r\n            if (e.keyCode === 32) {\r\n            } else {\r\n                setLoading(true)\r\n                setTextDisable(true)\r\n                let res = await axiosSortingAgent.post(\r\n                    '/item-move-to-wht',\r\n                    itemDetails\r\n                )\r\n                if (res?.status === 200) {\r\n                    setRefresh((refresh) => !refresh)\r\n                    setAwbn('')\r\n                    setTextDisable(false)\r\n                    handleClose()\r\n                    setLoading(false)\r\n                } else {\r\n                    setAwbn('')\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, trayId) => {\r\n        e.preventDefault()\r\n        try {\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n            } else {\r\n                setLoading2(true)\r\n                let obj = {\r\n                    wht: tray?.wht,\r\n                    trayId: trayId,\r\n                }\r\n                let res = await axiosSortingAgent.post(\r\n                    '/bot-and-wht-send-to-warehouse',\r\n                    obj\r\n                )\r\n                if (res.status === 200) {\r\n                    alert(res.data.message)\r\n                    setLoading2(false)\r\n                    navigate('/sorting/request')\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelViewItem = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/tray/item/' + code)\r\n    }\r\n\r\n    const tableFrom = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>BOT TRAY ITEM</h5>\r\n\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {tray?.bot?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [tray?.bot?.actual_items])\r\n\r\n    const tableTo = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>WHT TRAY</h5>\r\n                <TextField\r\n                    sx={{ m: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    name=\"doorsteps_diagnostics\"\r\n                    label=\"SCAN UIC\"\r\n                    disabled={textDisable}\r\n                    value={awbn}\r\n                    // onChange={(e) => setAwbn(e.target.value)}\r\n                    onChange={(e) => {\r\n                        setAwbn(e.target.value)\r\n                        handelAwbn(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>WHT TRay ID</TableCell>\r\n                                <TableCell>Brand</TableCell>\r\n                                <TableCell>Model</TableCell>\r\n                                <TableCell>Quantity</TableCell>\r\n                                <TableCell>Action</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {tray?.wht?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.code}</TableCell>\r\n                                    <TableCell>{data?.brand}</TableCell>\r\n                                    <TableCell>{data?.model}</TableCell>\r\n                                    <TableCell>\r\n                                        {data?.items.length}/{data.limit}\r\n                                    </TableCell>\r\n\r\n                                    <TableCell>\r\n                                        <Button\r\n                                            sx={{\r\n                                                m: 1,\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            onClick={(e) =>\r\n                                                handelViewItem(e, data.code)\r\n                                            }\r\n                                            style={{\r\n                                                backgroundColor: 'primery',\r\n                                            }}\r\n                                            component=\"span\"\r\n                                        >\r\n                                            View\r\n                                        </Button>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [tray?.wht, awbn, textDisable])\r\n\r\n    /***************************************************************************************** */\r\n    return (\r\n        <>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                    width=\"600px\"\r\n                >\r\n                    You are moving\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            alignItems: 'flex-start',\r\n                            flexDirection: 'column',\r\n                            p: 1,\r\n                            m: 1,\r\n                            bgcolor: 'background.paper',\r\n                            borderRadius: 1,\r\n                        }}\r\n                    >\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={6}>\r\n                                <h4>MUIC:-{itemDetails?.muic}</h4>\r\n                                <h4>UIC:-{itemDetails?.uic}</h4>\r\n                                <h4>From:-{itemDetails?.tray_id}</h4>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <h4>Model Name:-{itemDetails?.model}</h4>\r\n                                <h4>Brand Name:-{itemDetails?.brand}</h4>\r\n                                <h4>To:-{itemDetails?.wht_tray}</h4>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            ml: 2,\r\n                        }}\r\n                        fullwidth\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'primery' }}\r\n                        disabled={loading}\r\n                        component=\"span\"\r\n                        onClick={(e) => {\r\n                            addActualitem(e)\r\n                        }}\r\n                    >\r\n                        YES\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        BOT Tray Id - {trayId}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Assigned Date --{' '}\r\n                        {new Date(tray?.bot?.status_change_time).toLocaleString(\r\n                            'en-GB',\r\n                            {\r\n                                hour12: true,\r\n                            }\r\n                        )}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableFrom}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableTo}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            tray?.bot?.actual_items?.length !== 0\r\n                                ? true\r\n                                : loading2 == true\r\n                                ? true\r\n                                : false\r\n                        }\r\n                        style={{ backgroundColor: 'primery' }}\r\n                        onClick={(e) => {\r\n                            handelIssue(e, trayId)\r\n                        }}\r\n                    >\r\n                        Close BOT Tray\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bqc-components\\Dashboard\\dashboard.jsx",["4042","4043"],"import React from 'react'\r\nimport StatCard3 from './card'\r\nimport { H3 } from 'app/components/Typography'\r\nimport { styled } from '@mui/system'\r\n\r\nconst AnalyticsRoot = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n}))\r\n\r\nconst FlexBox = styled('div')(({ theme }) => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    marginBottom: '24px',\r\n}))\r\n\r\nconst Analytics2 = () => {\r\n    return (\r\n        <AnalyticsRoot>\r\n            {/* <FlexBox>\r\n                <H3 sx={{ m: 0 }}>DASHBOARD</H3>\r\n            </FlexBox> */}\r\n            <StatCard3 />\r\n        </AnalyticsRoot>\r\n    )\r\n}\r\n\r\nexport default Analytics2\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Charging-components\\Tray\\tray.jsx",["4044","4045","4046","4047"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\nimport { axiosCharging } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [tray, setTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { user_name } = jwt_decode(token)\r\n                const fetchData = async () => {\r\n                    let res = await axiosCharging.post(\r\n                        '/assigned-tray/' + user_name\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/charging/tray/charging-in/' + id)\r\n    }\r\n    const handelChargingDone = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/charging/tray/charging-out/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[4],\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'assigned_date',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return tableMeta.rowData[6] == 'Issued to Charging' ||\r\n                        tableMeta.rowData[6] == 'Issued to Recharging' ? (\r\n                        <Button\r\n                            sx={{ m: 1 }}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelViewTray(e, value)\r\n                            }}\r\n                        >\r\n                            Charging IN\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            sx={{ m: 1 }}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            style={{ backgroundColor: 'green' }}\r\n                            onClick={(e) => {\r\n                                handelChargingDone(e, value)\r\n                            }}\r\n                        >\r\n                            Charging Done\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Charging-Request', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Charging-components\\Tray\\charging-in.jsx",["4048","4049","4050","4051","4052","4053","4054","4055","4056","4057","4058","4059","4060"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\n// import jwt from \"jsonwebtoken\"\r\n\r\nimport { axiosCharging, axiosWarehouseIn } from '../../../../axios'\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    /**************************************************************************** */\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [resDataUic, setResDataUic] = useState({})\r\n    const [loading, setLoading] = useState(false)\r\n    const [textBoxDis, setTextBoxDis] = useState(false)\r\n\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getWhtTrayItem/' + trayId + '/' + 'Issued to Charging'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else if (response.status === 202) {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                } else {\r\n                    navigate('/bag-issue-request')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextBoxDis(true)\r\n                let res = await axiosWarehouseIn.post('/check-uic', obj)\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else if (res.status == 202) {\r\n                    setTextBoxDis(false)\r\n                    setUic('')\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData.limit <= trayData?.actual_items?.length) {\r\n            alert('All Items Scanned')\r\n        } else {\r\n            resDataUic.remark = description\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                setTextBoxDis(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/wht-add-actual-item',\r\n                    objData\r\n                )\r\n                if (res.status == 200) {\r\n                    setUic('')\r\n                    setTextBoxDis(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        try {\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n            } else if (\r\n                trayData?.actual_items?.length == trayData?.items?.length\r\n            ) {\r\n                setLoading(true)\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                }\r\n                let res = await axiosCharging.post('/charge-in', obj)\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/charging/tray')\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } else {\r\n                alert('Please Verify Actual Data')\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            alert(error)\r\n        }\r\n    }\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>Expected</h5>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {\r\n                                    trayData?.items?.filter(function (item) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                                {/* <TableCell>Tracking Number</TableCell> */}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items])\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>ACTUAL</h5>\r\n                        <TextField\r\n                            sx={{ mt: 1 }}\r\n                            id=\"outlined-password-input\"\r\n                            type=\"text\"\r\n                            disabled={textBoxDis}\r\n                            name=\"doorsteps_diagnostics\"\r\n                            label=\"SCAN UIC\"\r\n                            inputRef={(input) => input && input.focus()}\r\n                            value={uic}\r\n                            // onChange={(e) => setAwbn(e.target.value)}\r\n                            onChange={(e) => {\r\n                                setUic(e.target.value)\r\n                                handelUic(e)\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    width: 'auto',\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {\r\n                                    trayData.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textBoxDis, uic])\r\n\r\n    /***************************************************************************************** */\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>TRAY ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={loading}\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={() => {\r\n                            if (window.confirm('Are you want to charge IN?')) {\r\n                                handelIssue()\r\n                            }\r\n                        }}\r\n                    >\r\n                        Charging IN\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Charging-components\\Dashboard\\dashboard.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Mis-components\\Dashboard\\card.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Audit-request\\trayAssignMent.jsx",["4061","4062","4063","4064","4065","4066"],"import React, { useState } from 'react'\r\nimport {\r\n    Dialog,\r\n    Button,\r\n    TextField,\r\n    InputAdornment,\r\n    IconButton,\r\n} from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosMisUser, axiosWarehouseIn } from '../../../../../axios'\r\nimport SearchIcon from '@mui/icons-material/Search'\r\nimport jwt_decode from 'jwt-decode'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    handleClose,\r\n    open,\r\n    setOtherTrayAssign,\r\n    otherTrayAssign,\r\n    trayIdNotChangeAble,\r\n    brand,\r\n    model\r\n}) => {\r\n    const [err, setErr] = useState({\r\n        CTA: '',\r\n        CTB: '',\r\n        CTC: '',\r\n        CTD: '',\r\n    })\r\n    const [trayId, setTrayId] = useState({\r\n        cta: '',\r\n        ctb: '',\r\n        ctc: '',\r\n        ctd: '',\r\n    })\r\n\r\n    const handelTrayId = async (trayId, trayType) => {\r\n        try {\r\n            const user = localStorage.getItem('prexo-authentication')\r\n            if (user) {\r\n                const { location } = jwt_decode(user)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/trayIdCheckAuditApprovePage/' +\r\n                        trayId +\r\n                        '/' +\r\n                        trayType +\r\n                        '/' +\r\n                        location  +\r\n                        \"/\" + brand +  \"/\" + model\r\n                )\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setOtherTrayAssign((otherTrayAssign) => ({\r\n                        ...otherTrayAssign,\r\n                        [trayType]: res.data.trayId,\r\n                    }))\r\n                    setErr((err) => ({ ...err, [trayType]: '' }))\r\n                } else {\r\n                    setErr((err) => ({ ...err, [trayType]: res.data.message }))\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog fullWidth maxWidth=\"xs\" open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Assign Tray</H4>\r\n\r\n                <TextFieldCustOm\r\n                    onChange={(e) => {\r\n                        setTrayId((trayId) => ({\r\n                            ...trayId,\r\n                            cta: e.target.value,\r\n                        }))\r\n                    }}\r\n                    disabled={trayIdNotChangeAble.CTA !== ''}\r\n                    value={trayId.cta || otherTrayAssign.CTA}\r\n                    error={err.CTA !== ''}\r\n                    helperText={err.CTA}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment>\r\n                                <IconButton\r\n                                    disabled={trayId.cta == ''}\r\n                                    onClick={(e) => {\r\n                                        handelTrayId(trayId.cta, 'CTA')\r\n                                    }}\r\n                                >\r\n                                    <SearchIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                    label=\"CTA Tray\"\r\n                    fullWidth\r\n                    name=\"cta\"\r\n                />\r\n                <TextFieldCustOm\r\n                    onChange={(e) => {\r\n                        setTrayId((trayId) => ({\r\n                            ...trayId,\r\n                            ctb: e.target.value,\r\n                        }))\r\n                    }}\r\n                    disabled={trayIdNotChangeAble.CTB !== ''}\r\n                    value={trayId.ctb || otherTrayAssign.CTB}\r\n                    error={err.CTB !== ''}\r\n                    helperText={err.CTB}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment>\r\n                                <IconButton\r\n                                    disabled={trayId.ctb == ''}\r\n                                    onClick={(e) => {\r\n                                        handelTrayId(trayId.ctb, 'CTB')\r\n                                    }}\r\n                                >\r\n                                    <SearchIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                    label=\"CTB Tray\"\r\n                    fullWidth\r\n                    name=\"ctb\"\r\n                />\r\n                <TextFieldCustOm\r\n                    onChange={(e) => {\r\n                        setTrayId((trayId) => ({\r\n                            ...trayId,\r\n                            ctc: e.target.value,\r\n                        }))\r\n                    }}\r\n                    disabled={trayIdNotChangeAble.CTC !== ''}\r\n                    value={trayId.ctc || otherTrayAssign.CTC}\r\n                    error={err.CTC !== ''}\r\n                    helperText={err.CTC}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment>\r\n                                <IconButton\r\n                                    disabled={trayId.ctc == ''}\r\n                                    onClick={(e) => {\r\n                                        handelTrayId(trayId.ctc, 'CTC')\r\n                                    }}\r\n                                >\r\n                                    <SearchIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                    label=\"CTC Tray\"\r\n                    fullWidth\r\n                    name=\"ctc\"\r\n                />\r\n                <TextFieldCustOm\r\n                    onChange={(e) => {\r\n                        setTrayId((trayId) => ({\r\n                            ...trayId,\r\n                            ctd: e.target.value,\r\n                        }))\r\n                    }}\r\n                    disabled={trayIdNotChangeAble.CTD !== ''}\r\n                    value={trayId.ctd || otherTrayAssign.CTD}\r\n                    error={err.CTD !== ''}\r\n                    helperText={err.CTD}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment>\r\n                                <IconButton\r\n                                    disabled={trayId.ctd == ''}\r\n                                    onClick={(e) => {\r\n                                        handelTrayId(trayId.ctd, 'CTD')\r\n                                    }}\r\n                                >\r\n                                    <SearchIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                    label=\"CTD Tray\"\r\n                    fullWidth\r\n                    name=\"ctd\"\r\n                />\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={(e) => {\r\n                            handleClose()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Confirm\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\assign-tray.jsx",["4067","4068","4069","4070","4071","4072","4073"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n    Dialog,\r\n    Button,\r\n    TextField,\r\n    MenuItem,\r\n    InputAdornment,\r\n    IconButton,\r\n} from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosMisUser, axiosWarehouseIn } from '../../../../../axios'\r\nimport SearchIcon from '@mui/icons-material/Search'\r\nimport jwt_decode from 'jwt-decode'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({ handleClose, open, setIsAlive, auditUsers }) => {\r\n    const [auditUserName, setAuditUsername] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [state, setState] = useState({})\r\n    const [err, setErr] = useState('')\r\n    const [assignButDIs, setAssignButDis] = useState(true)\r\n    const [trayStatus, setTrayStatus] = useState('')\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        setState({\r\n            ...state,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const user = localStorage.getItem('prexo-authentication')\r\n        if (user) {\r\n            const { location } = jwt_decode(user)\r\n            setState({\r\n                ...state,\r\n                location: location,\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    const handelSendRequestConfirm = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosWarehouseIn.post('/oneTrayAssigToAudit', state)\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setIsAlive((isAlive) => !isAlive)\r\n                handleClose()\r\n            } else {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelTrayId = async () => {\r\n        try {\r\n            let res = await axiosWarehouseIn.post(\r\n                '/auditUserTrayForAssign',\r\n                state\r\n            )\r\n            if (res.status === 200) {\r\n                console.log(res.data)\r\n                setTrayStatus(res.data.trayStatus)\r\n                setErr('')\r\n                setAssignButDis(false)\r\n            } else {\r\n                console.log(res)\r\n                setTrayStatus(res.data.trayStatus)\r\n                setErr(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Dialog fullWidth maxWidth=\"xs\" onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Assign Tray</H4>\r\n                <TextFieldCustOm\r\n                    label=\"Username\"\r\n                    fullWidth\r\n                    select\r\n                    name=\"username\"\r\n                    onChange={handleChange}\r\n                >\r\n                    {auditUsers.map((data) => (\r\n                        <MenuItem\r\n                            key={data.user_name}\r\n                            value={data.user_name}\r\n                            onClick={(e) => {\r\n                                setAuditUsername(data.user_name)\r\n                            }}\r\n                        >\r\n                            {data.user_name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextFieldCustOm>\r\n                <TextFieldCustOm\r\n                    label=\"Tray Type\"\r\n                    fullWidth\r\n                    select\r\n                    name=\"tray_type\"\r\n                    onChange={handleChange}\r\n                >\r\n                    <MenuItem value={'CTA'}>CTA</MenuItem>\r\n                    <MenuItem value={'CTB'}>CTB</MenuItem>\r\n                    <MenuItem value={'CTC'}>CTC</MenuItem>\r\n                    <MenuItem value={'CTD'}>CTD</MenuItem>\r\n                </TextFieldCustOm>\r\n                <TextFieldCustOm\r\n                    label=\"Tray Id\"\r\n                    onChange={handleChange}\r\n                    type=\"text\"\r\n                    name=\"tray_id\"\r\n                    error={err !== ''}\r\n                    helperText={err}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment>\r\n                                <IconButton\r\n                                    disabled={\r\n                                        state?.username == '' ||\r\n                                        state?.tray_type == '' ||\r\n                                        state?.tray_id == ''\r\n                                    }\r\n                                    onClick={(e) => {\r\n                                        handelTrayId()\r\n                                    }}\r\n                                >\r\n                                    <SearchIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n                <TextFieldCustOm\r\n                    label=\"Tray Status\"\r\n                    disabled\r\n                    type=\"text\"\r\n                    value={trayStatus}\r\n                    name=\"tray_status\"\r\n                />\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading || assignButDIs}\r\n                        onClick={(e) => {\r\n                            handelSendRequestConfirm()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Dashboard\\card.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bot-components\\Dashboard\\card.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Sorting-agent-components\\Dashboard\\card.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Bqc-components\\Dashboard\\card.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Charging-components\\Dashboard\\card.jsx",[],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Ready-for-audit\\action.jsx",["4074","4075","4076","4077","4078","4079","4080","4081","4082","4083","4084","4085","4086","4087","4088","4089","4090","4091","4092"],"C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Report\\sales-bin.jsx",["4093","4094","4095","4096","4097","4098"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    TextField,\r\n    Box,\r\n    Button\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport * as FileSaver from 'file-saver'\r\nimport * as XLSX from 'xlsx'\r\nimport { axiosWarehouseIn } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const [tableMessage, setTableMessage] = useState('')\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((d, index) => {\r\n                    d.id = page * rowsPerPage + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const { location } = jwt_decode(admin)\r\n            const fetchData = async () => {\r\n                try {\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/salesBinItem/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        if (res.data.data?.length == 0) {\r\n                            setTableMessage('Sorry no records found')\r\n                        } else {\r\n                            setItem(res.data.data)\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [])\r\n\r\n\r\n    const download = (e) => {\r\n\r\n        const fileExtension = '.xlsx'\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n        const ws = XLSX.utils.json_to_sheet(item, {header: []})\r\n       \r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, 'sales-bin' + fileExtension)\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    console.log(item);\r\n\r\n    const searchItem = async (inputData) => {\r\n        try {\r\n            let res = await axiosWarehouseIn.post(\r\n                '/salesBinItem/search/' + inputData\r\n            )\r\n            if (res.status == 200) {\r\n                setRowsPerPage(10)\r\n                setPage(0)\r\n                setItem(res.data.data)\r\n            } else {\r\n                setTableMessage(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <Table id=\"example\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>UIC</TableCell>\r\n                        <TableCell>Grade</TableCell>\r\n                        <TableCell>Added Agent Name</TableCell>\r\n                        <TableCell>Added Time</TableCell>\r\n                        <TableCell>From Tray ID</TableCell>\r\n                        <TableCell>Description</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                {tableMessage !== '' ? (\r\n                    <h4 style={{ textAlign: 'center' }}>{tableMessage}</h4>\r\n                ) : (\r\n                    <TableBody>\r\n                        {data.map((data, index) => (\r\n                            <TableRow tabIndex={-1}>\r\n                                <TableCell>{data.id}</TableCell>\r\n\r\n                                <TableCell>{data.uic_code}</TableCell>\r\n                                <TableCell>{data.sales_bin_grade}</TableCell>\r\n\r\n                                <TableCell>\r\n                                    {data.sales_bin_wh_agent_name}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data?.sales_bin_date != undefined\r\n                                        ? new Date(\r\n                                              data?.sales_bin_date\r\n                                          ).toLocaleString('en-GB', {\r\n                                              hour12: true,\r\n                                          })\r\n                                        : ''}\r\n                                </TableCell>\r\n                                <TableCell>{data.wht_tray}</TableCell>\r\n                                <TableCell>\r\n                                    {data.sales_bin_desctiption}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                )}\r\n            </Table>\r\n        )\r\n    }, [item, data, tableMessage])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Report', path: '/' },\r\n                        { name: 'Sales Bin' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <TextField\r\n                    onChange={(e) => {\r\n                        searchItem(e.target.value)\r\n                    }}\r\n                    label=\"Search\"\r\n                    variant=\"outlined\"\r\n                    sx={{ mb: 1 }}\r\n                />\r\n                <Button\r\n                    sx={{ mb: 2 }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={(e) => {\r\n                        download(e)\r\n                    }}\r\n                >\r\n                    Download\r\n                </Button>\r\n            </Box>\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[50, 100, 150]}\r\n                component=\"div\"\r\n                count={item.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\Users\\USER\\Desktop\\pro\\prexo-frontend\\src\\app\\components\\Warehouse-components\\Wht\\Ready-for-audit\\wht-tray-view.jsx",["4099","4100"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Ready to Audit/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const handelDetailPage = (e, trayId) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/ready-for-audit/view/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[9],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelDetailPage(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Ready-for-audit', path: '/' },\r\n                        { name: 'Audit' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'WHT'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n",{"ruleId":"4101","replacedBy":"4102"},{"ruleId":"4103","replacedBy":"4104"},{"ruleId":"4105","severity":1,"message":"4106","line":22,"column":8,"nodeType":"4107","messageId":"4108","endLine":22,"endColumn":21},{"ruleId":"4105","severity":1,"message":"4109","line":1,"column":55,"nodeType":"4107","messageId":"4108","endLine":1,"endColumn":63},{"ruleId":"4105","severity":1,"message":"4110","line":2,"column":8,"nodeType":"4107","messageId":"4108","endLine":2,"endColumn":16},{"ruleId":"4111","severity":1,"message":"4112","line":50,"column":24,"nodeType":"4113","messageId":"4114","endLine":50,"endColumn":26},{"ruleId":"4105","severity":1,"message":"4115","line":3,"column":27,"nodeType":"4107","messageId":"4108","endLine":3,"endColumn":36},{"ruleId":"4105","severity":1,"message":"4116","line":6,"column":8,"nodeType":"4107","messageId":"4108","endLine":6,"endColumn":15},{"ruleId":"4105","severity":1,"message":"4117","line":62,"column":21,"nodeType":"4107","messageId":"4108","endLine":62,"endColumn":31},{"ruleId":"4105","severity":1,"message":"4118","line":64,"column":21,"nodeType":"4107","messageId":"4108","endLine":64,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4112","line":96,"column":37,"nodeType":"4113","messageId":"4114","endLine":96,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":98,"column":35,"nodeType":"4113","messageId":"4114","endLine":98,"endColumn":37},{"ruleId":"4111","severity":1,"message":"4112","line":100,"column":42,"nodeType":"4113","messageId":"4114","endLine":100,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":102,"column":42,"nodeType":"4113","messageId":"4114","endLine":102,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":104,"column":42,"nodeType":"4113","messageId":"4114","endLine":104,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":106,"column":42,"nodeType":"4113","messageId":"4114","endLine":106,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":108,"column":42,"nodeType":"4113","messageId":"4114","endLine":108,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":111,"column":44,"nodeType":"4113","messageId":"4114","endLine":111,"endColumn":46},{"ruleId":"4105","severity":1,"message":"4115","line":1,"column":17,"nodeType":"4107","messageId":"4108","endLine":1,"endColumn":26},{"ruleId":"4105","severity":1,"message":"4119","line":18,"column":10,"nodeType":"4107","messageId":"4108","endLine":18,"endColumn":12},{"ruleId":"4105","severity":1,"message":"4120","line":18,"column":18,"nodeType":"4107","messageId":"4108","endLine":18,"endColumn":20},{"ruleId":"4105","severity":1,"message":"4121","line":19,"column":27,"nodeType":"4107","messageId":"4108","endLine":19,"endColumn":47},{"ruleId":"4111","severity":1,"message":"4112","line":80,"column":31,"nodeType":"4113","messageId":"4114","endLine":80,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4112","line":91,"column":42,"nodeType":"4113","messageId":"4114","endLine":91,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":94,"column":42,"nodeType":"4113","messageId":"4114","endLine":94,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":95,"column":42,"nodeType":"4113","messageId":"4114","endLine":95,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":107,"column":32,"nodeType":"4113","messageId":"4114","endLine":107,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":111,"column":41,"nodeType":"4113","messageId":"4114","endLine":111,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":116,"column":48,"nodeType":"4113","messageId":"4114","endLine":116,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":151,"column":28,"nodeType":"4113","messageId":"4114","endLine":151,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":258,"column":51,"nodeType":"4113","messageId":"4114","endLine":258,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":262,"column":68,"nodeType":"4113","messageId":"4114","endLine":262,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4112","line":263,"column":62,"nodeType":"4113","messageId":"4114","endLine":263,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4112","line":271,"column":53,"nodeType":"4113","messageId":"4114","endLine":271,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":275,"column":68,"nodeType":"4113","messageId":"4114","endLine":275,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4112","line":276,"column":62,"nodeType":"4113","messageId":"4114","endLine":276,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4112","line":284,"column":53,"nodeType":"4113","messageId":"4114","endLine":284,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":288,"column":68,"nodeType":"4113","messageId":"4114","endLine":288,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4112","line":289,"column":62,"nodeType":"4113","messageId":"4114","endLine":289,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4112","line":297,"column":53,"nodeType":"4113","messageId":"4114","endLine":297,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":301,"column":68,"nodeType":"4113","messageId":"4114","endLine":301,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4112","line":302,"column":62,"nodeType":"4113","messageId":"4114","endLine":302,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4112","line":438,"column":42,"nodeType":"4113","messageId":"4114","endLine":438,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":456,"column":49,"nodeType":"4113","messageId":"4114","endLine":456,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":457,"column":50,"nodeType":"4113","messageId":"4114","endLine":457,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":458,"column":57,"nodeType":"4113","messageId":"4114","endLine":458,"endColumn":59},{"ruleId":"4111","severity":1,"message":"4112","line":459,"column":50,"nodeType":"4113","messageId":"4114","endLine":459,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":460,"column":58,"nodeType":"4113","messageId":"4114","endLine":460,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":461,"column":50,"nodeType":"4113","messageId":"4114","endLine":461,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":462,"column":54,"nodeType":"4113","messageId":"4114","endLine":462,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":463,"column":50,"nodeType":"4113","messageId":"4114","endLine":463,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":464,"column":59,"nodeType":"4113","messageId":"4114","endLine":464,"endColumn":61},{"ruleId":"4111","severity":1,"message":"4112","line":465,"column":50,"nodeType":"4113","messageId":"4114","endLine":465,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":466,"column":58,"nodeType":"4113","messageId":"4114","endLine":466,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":467,"column":50,"nodeType":"4113","messageId":"4114","endLine":467,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":468,"column":54,"nodeType":"4113","messageId":"4114","endLine":468,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":469,"column":50,"nodeType":"4113","messageId":"4114","endLine":469,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":470,"column":59,"nodeType":"4113","messageId":"4114","endLine":470,"endColumn":61},{"ruleId":"4111","severity":1,"message":"4112","line":471,"column":50,"nodeType":"4113","messageId":"4114","endLine":471,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":472,"column":59,"nodeType":"4113","messageId":"4114","endLine":472,"endColumn":61},{"ruleId":"4111","severity":1,"message":"4112","line":491,"column":77,"nodeType":"4113","messageId":"4114","endLine":491,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4112","line":493,"column":76,"nodeType":"4113","messageId":"4114","endLine":493,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4112","line":518,"column":67,"nodeType":"4113","messageId":"4114","endLine":518,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":519,"column":141,"nodeType":"4113","messageId":"4114","endLine":519,"endColumn":143},{"ruleId":"4111","severity":1,"message":"4112","line":36,"column":36,"nodeType":"4113","messageId":"4114","endLine":36,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":48,"column":8,"nodeType":"4124","endLine":48,"endColumn":17,"suggestions":"4125"},{"ruleId":"4105","severity":1,"message":"4126","line":4,"column":5,"nodeType":"4107","messageId":"4108","endLine":4,"endColumn":11},{"ruleId":"4105","severity":1,"message":"4127","line":28,"column":7,"nodeType":"4107","messageId":"4108","endLine":28,"endColumn":22},{"ruleId":"4122","severity":1,"message":"4128","line":95,"column":8,"nodeType":"4124","endLine":95,"endColumn":17,"suggestions":"4129"},{"ruleId":"4111","severity":1,"message":"4112","line":99,"column":32,"nodeType":"4113","messageId":"4114","endLine":99,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":131,"column":28,"nodeType":"4113","messageId":"4114","endLine":131,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":134,"column":26,"nodeType":"4113","messageId":"4114","endLine":134,"endColumn":28},{"ruleId":"4111","severity":1,"message":"4112","line":162,"column":43,"nodeType":"4113","messageId":"4114","endLine":162,"endColumn":45},{"ruleId":"4111","severity":1,"message":"4112","line":36,"column":36,"nodeType":"4113","messageId":"4114","endLine":36,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":48,"column":8,"nodeType":"4124","endLine":48,"endColumn":17,"suggestions":"4130"},{"ruleId":"4111","severity":1,"message":"4112","line":58,"column":28,"nodeType":"4113","messageId":"4114","endLine":58,"endColumn":30},{"ruleId":"4122","severity":1,"message":"4131","line":38,"column":8,"nodeType":"4124","endLine":38,"endColumn":10,"suggestions":"4132"},{"ruleId":"4105","severity":1,"message":"4133","line":5,"column":5,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4134","line":20,"column":7,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4135","line":25,"column":7,"nodeType":"4107","messageId":"4108","endLine":25,"endColumn":19},{"ruleId":"4111","severity":1,"message":"4112","line":69,"column":79,"nodeType":"4113","messageId":"4114","endLine":69,"endColumn":81},{"ruleId":"4105","severity":1,"message":"4133","line":5,"column":5,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4134","line":20,"column":7,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4135","line":25,"column":7,"nodeType":"4107","messageId":"4108","endLine":25,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4133","line":5,"column":5,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4134","line":20,"column":7,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4135","line":25,"column":7,"nodeType":"4107","messageId":"4108","endLine":25,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4133","line":5,"column":5,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4134","line":20,"column":7,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4135","line":25,"column":7,"nodeType":"4107","messageId":"4108","endLine":25,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4133","line":5,"column":5,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4134","line":20,"column":7,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4135","line":25,"column":7,"nodeType":"4107","messageId":"4108","endLine":25,"endColumn":19},{"ruleId":"4111","severity":1,"message":"4112","line":44,"column":57,"nodeType":"4113","messageId":"4114","endLine":44,"endColumn":59},{"ruleId":"4111","severity":1,"message":"4112","line":46,"column":56,"nodeType":"4113","messageId":"4114","endLine":46,"endColumn":58},{"ruleId":"4111","severity":1,"message":"4112","line":48,"column":56,"nodeType":"4113","messageId":"4114","endLine":48,"endColumn":58},{"ruleId":"4111","severity":1,"message":"4112","line":76,"column":79,"nodeType":"4113","messageId":"4114","endLine":76,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4112","line":92,"column":28,"nodeType":"4113","messageId":"4114","endLine":92,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":96,"column":88,"nodeType":"4113","messageId":"4114","endLine":96,"endColumn":90},{"ruleId":"4111","severity":1,"message":"4136","line":113,"column":82,"nodeType":"4113","messageId":"4114","endLine":113,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":126,"column":81,"nodeType":"4113","messageId":"4114","endLine":126,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":212,"column":85,"nodeType":"4113","messageId":"4114","endLine":212,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":229,"column":83,"nodeType":"4113","messageId":"4114","endLine":229,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":255,"column":74,"nodeType":"4113","messageId":"4114","endLine":255,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":267,"column":75,"nodeType":"4113","messageId":"4114","endLine":267,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":278,"column":75,"nodeType":"4113","messageId":"4114","endLine":278,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":289,"column":73,"nodeType":"4113","messageId":"4114","endLine":289,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":300,"column":73,"nodeType":"4113","messageId":"4114","endLine":300,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":324,"column":77,"nodeType":"4113","messageId":"4114","endLine":324,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":335,"column":76,"nodeType":"4113","messageId":"4114","endLine":335,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":350,"column":83,"nodeType":"4113","messageId":"4114","endLine":350,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":363,"column":85,"nodeType":"4113","messageId":"4114","endLine":363,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":380,"column":91,"nodeType":"4113","messageId":"4114","endLine":380,"endColumn":93},{"ruleId":"4111","severity":1,"message":"4136","line":397,"column":89,"nodeType":"4113","messageId":"4114","endLine":397,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":414,"column":76,"nodeType":"4113","messageId":"4114","endLine":414,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":425,"column":81,"nodeType":"4113","messageId":"4114","endLine":425,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":438,"column":80,"nodeType":"4113","messageId":"4114","endLine":438,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":451,"column":76,"nodeType":"4113","messageId":"4114","endLine":451,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":462,"column":75,"nodeType":"4113","messageId":"4114","endLine":462,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":477,"column":76,"nodeType":"4113","messageId":"4114","endLine":477,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":488,"column":80,"nodeType":"4113","messageId":"4114","endLine":488,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":501,"column":86,"nodeType":"4113","messageId":"4114","endLine":501,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":518,"column":81,"nodeType":"4113","messageId":"4114","endLine":518,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":531,"column":79,"nodeType":"4113","messageId":"4114","endLine":531,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":544,"column":78,"nodeType":"4113","messageId":"4114","endLine":544,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":557,"column":78,"nodeType":"4113","messageId":"4114","endLine":557,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":570,"column":80,"nodeType":"4113","messageId":"4114","endLine":570,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":583,"column":83,"nodeType":"4113","messageId":"4114","endLine":583,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":597,"column":134,"nodeType":"4113","messageId":"4114","endLine":597,"endColumn":136},{"ruleId":"4111","severity":1,"message":"4136","line":615,"column":89,"nodeType":"4113","messageId":"4114","endLine":615,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":632,"column":84,"nodeType":"4113","messageId":"4114","endLine":632,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":645,"column":82,"nodeType":"4113","messageId":"4114","endLine":645,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":658,"column":79,"nodeType":"4113","messageId":"4114","endLine":658,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":671,"column":84,"nodeType":"4113","messageId":"4114","endLine":671,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":688,"column":84,"nodeType":"4113","messageId":"4114","endLine":688,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":702,"column":86,"nodeType":"4113","messageId":"4114","endLine":702,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":719,"column":87,"nodeType":"4113","messageId":"4114","endLine":719,"endColumn":89},{"ruleId":"4111","severity":1,"message":"4136","line":736,"column":79,"nodeType":"4113","messageId":"4114","endLine":736,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":749,"column":86,"nodeType":"4113","messageId":"4114","endLine":749,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":766,"column":82,"nodeType":"4113","messageId":"4114","endLine":766,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":779,"column":86,"nodeType":"4113","messageId":"4114","endLine":779,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":796,"column":92,"nodeType":"4113","messageId":"4114","endLine":796,"endColumn":94},{"ruleId":"4111","severity":1,"message":"4136","line":813,"column":86,"nodeType":"4113","messageId":"4114","endLine":813,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":830,"column":80,"nodeType":"4113","messageId":"4114","endLine":830,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":843,"column":78,"nodeType":"4113","messageId":"4114","endLine":843,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":856,"column":76,"nodeType":"4113","messageId":"4114","endLine":856,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":880,"column":78,"nodeType":"4113","messageId":"4114","endLine":880,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":894,"column":31,"nodeType":"4113","messageId":"4114","endLine":894,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4136","line":898,"column":88,"nodeType":"4113","messageId":"4114","endLine":898,"endColumn":90},{"ruleId":"4111","severity":1,"message":"4136","line":915,"column":82,"nodeType":"4113","messageId":"4114","endLine":915,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":928,"column":81,"nodeType":"4113","messageId":"4114","endLine":928,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":1019,"column":85,"nodeType":"4113","messageId":"4114","endLine":1019,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":1036,"column":83,"nodeType":"4113","messageId":"4114","endLine":1036,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":1062,"column":74,"nodeType":"4113","messageId":"4114","endLine":1062,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":1074,"column":75,"nodeType":"4113","messageId":"4114","endLine":1074,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":1085,"column":75,"nodeType":"4113","messageId":"4114","endLine":1085,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":1096,"column":73,"nodeType":"4113","messageId":"4114","endLine":1096,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":1107,"column":73,"nodeType":"4113","messageId":"4114","endLine":1107,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":1131,"column":77,"nodeType":"4113","messageId":"4114","endLine":1131,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":1142,"column":76,"nodeType":"4113","messageId":"4114","endLine":1142,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1156,"column":83,"nodeType":"4113","messageId":"4114","endLine":1156,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":1169,"column":85,"nodeType":"4113","messageId":"4114","endLine":1169,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":1186,"column":91,"nodeType":"4113","messageId":"4114","endLine":1186,"endColumn":93},{"ruleId":"4111","severity":1,"message":"4136","line":1203,"column":89,"nodeType":"4113","messageId":"4114","endLine":1203,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":1220,"column":76,"nodeType":"4113","messageId":"4114","endLine":1220,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1231,"column":81,"nodeType":"4113","messageId":"4114","endLine":1231,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":1244,"column":80,"nodeType":"4113","messageId":"4114","endLine":1244,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":1257,"column":76,"nodeType":"4113","messageId":"4114","endLine":1257,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1268,"column":75,"nodeType":"4113","messageId":"4114","endLine":1268,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":1283,"column":76,"nodeType":"4113","messageId":"4114","endLine":1283,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1294,"column":80,"nodeType":"4113","messageId":"4114","endLine":1294,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":1307,"column":86,"nodeType":"4113","messageId":"4114","endLine":1307,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":1325,"column":81,"nodeType":"4113","messageId":"4114","endLine":1325,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":1338,"column":79,"nodeType":"4113","messageId":"4114","endLine":1338,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":1351,"column":78,"nodeType":"4113","messageId":"4114","endLine":1351,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":1364,"column":78,"nodeType":"4113","messageId":"4114","endLine":1364,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":1377,"column":80,"nodeType":"4113","messageId":"4114","endLine":1377,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":1390,"column":83,"nodeType":"4113","messageId":"4114","endLine":1390,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":1403,"column":134,"nodeType":"4113","messageId":"4114","endLine":1403,"endColumn":136},{"ruleId":"4111","severity":1,"message":"4136","line":1421,"column":89,"nodeType":"4113","messageId":"4114","endLine":1421,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":1438,"column":84,"nodeType":"4113","messageId":"4114","endLine":1438,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":1451,"column":82,"nodeType":"4113","messageId":"4114","endLine":1451,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":1464,"column":79,"nodeType":"4113","messageId":"4114","endLine":1464,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":1477,"column":84,"nodeType":"4113","messageId":"4114","endLine":1477,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":1493,"column":86,"nodeType":"4113","messageId":"4114","endLine":1493,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":1510,"column":84,"nodeType":"4113","messageId":"4114","endLine":1510,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":1523,"column":87,"nodeType":"4113","messageId":"4114","endLine":1523,"endColumn":89},{"ruleId":"4111","severity":1,"message":"4136","line":1540,"column":79,"nodeType":"4113","messageId":"4114","endLine":1540,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":1553,"column":86,"nodeType":"4113","messageId":"4114","endLine":1553,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":1570,"column":82,"nodeType":"4113","messageId":"4114","endLine":1570,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":1583,"column":86,"nodeType":"4113","messageId":"4114","endLine":1583,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":1600,"column":92,"nodeType":"4113","messageId":"4114","endLine":1600,"endColumn":94},{"ruleId":"4111","severity":1,"message":"4136","line":1617,"column":86,"nodeType":"4113","messageId":"4114","endLine":1617,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":1634,"column":80,"nodeType":"4113","messageId":"4114","endLine":1634,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":1647,"column":78,"nodeType":"4113","messageId":"4114","endLine":1647,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":1660,"column":76,"nodeType":"4113","messageId":"4114","endLine":1660,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1684,"column":78,"nodeType":"4113","messageId":"4114","endLine":1684,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1698,"column":31,"nodeType":"4113","messageId":"4114","endLine":1698,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4136","line":1702,"column":88,"nodeType":"4113","messageId":"4114","endLine":1702,"endColumn":90},{"ruleId":"4111","severity":1,"message":"4136","line":1719,"column":82,"nodeType":"4113","messageId":"4114","endLine":1719,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":1732,"column":81,"nodeType":"4113","messageId":"4114","endLine":1732,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":1823,"column":85,"nodeType":"4113","messageId":"4114","endLine":1823,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":1840,"column":83,"nodeType":"4113","messageId":"4114","endLine":1840,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":1866,"column":74,"nodeType":"4113","messageId":"4114","endLine":1866,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":1878,"column":75,"nodeType":"4113","messageId":"4114","endLine":1878,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":1889,"column":75,"nodeType":"4113","messageId":"4114","endLine":1889,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":1900,"column":73,"nodeType":"4113","messageId":"4114","endLine":1900,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":1911,"column":73,"nodeType":"4113","messageId":"4114","endLine":1911,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":1935,"column":77,"nodeType":"4113","messageId":"4114","endLine":1935,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":1946,"column":76,"nodeType":"4113","messageId":"4114","endLine":1946,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1957,"column":76,"nodeType":"4113","messageId":"4114","endLine":1957,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1971,"column":83,"nodeType":"4113","messageId":"4114","endLine":1971,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":1984,"column":85,"nodeType":"4113","messageId":"4114","endLine":1984,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":2001,"column":91,"nodeType":"4113","messageId":"4114","endLine":2001,"endColumn":93},{"ruleId":"4111","severity":1,"message":"4136","line":2018,"column":89,"nodeType":"4113","messageId":"4114","endLine":2018,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":2035,"column":76,"nodeType":"4113","messageId":"4114","endLine":2035,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2046,"column":81,"nodeType":"4113","messageId":"4114","endLine":2046,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":2059,"column":80,"nodeType":"4113","messageId":"4114","endLine":2059,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":2072,"column":75,"nodeType":"4113","messageId":"4114","endLine":2072,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":2086,"column":76,"nodeType":"4113","messageId":"4114","endLine":2086,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2097,"column":80,"nodeType":"4113","messageId":"4114","endLine":2097,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":2110,"column":86,"nodeType":"4113","messageId":"4114","endLine":2110,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2127,"column":81,"nodeType":"4113","messageId":"4114","endLine":2127,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":2140,"column":79,"nodeType":"4113","messageId":"4114","endLine":2140,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":2153,"column":78,"nodeType":"4113","messageId":"4114","endLine":2153,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":2166,"column":78,"nodeType":"4113","messageId":"4114","endLine":2166,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":2179,"column":80,"nodeType":"4113","messageId":"4114","endLine":2179,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":2192,"column":83,"nodeType":"4113","messageId":"4114","endLine":2192,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":2206,"column":134,"nodeType":"4113","messageId":"4114","endLine":2206,"endColumn":136},{"ruleId":"4111","severity":1,"message":"4136","line":2224,"column":89,"nodeType":"4113","messageId":"4114","endLine":2224,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":2241,"column":84,"nodeType":"4113","messageId":"4114","endLine":2241,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":2254,"column":82,"nodeType":"4113","messageId":"4114","endLine":2254,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":2267,"column":79,"nodeType":"4113","messageId":"4114","endLine":2267,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":2280,"column":84,"nodeType":"4113","messageId":"4114","endLine":2280,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":2296,"column":86,"nodeType":"4113","messageId":"4114","endLine":2296,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2313,"column":84,"nodeType":"4113","messageId":"4114","endLine":2313,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":2326,"column":87,"nodeType":"4113","messageId":"4114","endLine":2326,"endColumn":89},{"ruleId":"4111","severity":1,"message":"4136","line":2343,"column":79,"nodeType":"4113","messageId":"4114","endLine":2343,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":2356,"column":86,"nodeType":"4113","messageId":"4114","endLine":2356,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2373,"column":82,"nodeType":"4113","messageId":"4114","endLine":2373,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":2386,"column":86,"nodeType":"4113","messageId":"4114","endLine":2386,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2403,"column":92,"nodeType":"4113","messageId":"4114","endLine":2403,"endColumn":94},{"ruleId":"4111","severity":1,"message":"4136","line":2420,"column":86,"nodeType":"4113","messageId":"4114","endLine":2420,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2437,"column":80,"nodeType":"4113","messageId":"4114","endLine":2437,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":2450,"column":78,"nodeType":"4113","messageId":"4114","endLine":2450,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":2463,"column":76,"nodeType":"4113","messageId":"4114","endLine":2463,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2488,"column":78,"nodeType":"4113","messageId":"4114","endLine":2488,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":2502,"column":31,"nodeType":"4113","messageId":"4114","endLine":2502,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4136","line":2506,"column":88,"nodeType":"4113","messageId":"4114","endLine":2506,"endColumn":90},{"ruleId":"4111","severity":1,"message":"4136","line":2523,"column":82,"nodeType":"4113","messageId":"4114","endLine":2523,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":2536,"column":81,"nodeType":"4113","messageId":"4114","endLine":2536,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":2622,"column":85,"nodeType":"4113","messageId":"4114","endLine":2622,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":2639,"column":83,"nodeType":"4113","messageId":"4114","endLine":2639,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4112","line":2652,"column":80,"nodeType":"4113","messageId":"4114","endLine":2652,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4112","line":2654,"column":79,"nodeType":"4113","messageId":"4114","endLine":2654,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":2667,"column":74,"nodeType":"4113","messageId":"4114","endLine":2667,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":2679,"column":75,"nodeType":"4113","messageId":"4114","endLine":2679,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":2690,"column":75,"nodeType":"4113","messageId":"4114","endLine":2690,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":2701,"column":73,"nodeType":"4113","messageId":"4114","endLine":2701,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":2712,"column":73,"nodeType":"4113","messageId":"4114","endLine":2712,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":2736,"column":77,"nodeType":"4113","messageId":"4114","endLine":2736,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":2747,"column":76,"nodeType":"4113","messageId":"4114","endLine":2747,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2761,"column":83,"nodeType":"4113","messageId":"4114","endLine":2761,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":2774,"column":85,"nodeType":"4113","messageId":"4114","endLine":2774,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":2791,"column":91,"nodeType":"4113","messageId":"4114","endLine":2791,"endColumn":93},{"ruleId":"4111","severity":1,"message":"4136","line":2808,"column":89,"nodeType":"4113","messageId":"4114","endLine":2808,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":2825,"column":76,"nodeType":"4113","messageId":"4114","endLine":2825,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2836,"column":81,"nodeType":"4113","messageId":"4114","endLine":2836,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":2849,"column":80,"nodeType":"4113","messageId":"4114","endLine":2849,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":2862,"column":76,"nodeType":"4113","messageId":"4114","endLine":2862,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2873,"column":75,"nodeType":"4113","messageId":"4114","endLine":2873,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":2887,"column":76,"nodeType":"4113","messageId":"4114","endLine":2887,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2898,"column":80,"nodeType":"4113","messageId":"4114","endLine":2898,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":2911,"column":86,"nodeType":"4113","messageId":"4114","endLine":2911,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2928,"column":84,"nodeType":"4113","messageId":"4114","endLine":2928,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":2941,"column":79,"nodeType":"4113","messageId":"4114","endLine":2941,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":2954,"column":78,"nodeType":"4113","messageId":"4114","endLine":2954,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":2967,"column":78,"nodeType":"4113","messageId":"4114","endLine":2967,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":2980,"column":80,"nodeType":"4113","messageId":"4114","endLine":2980,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":2993,"column":83,"nodeType":"4113","messageId":"4114","endLine":2993,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":3006,"column":134,"nodeType":"4113","messageId":"4114","endLine":3006,"endColumn":136},{"ruleId":"4111","severity":1,"message":"4136","line":3024,"column":89,"nodeType":"4113","messageId":"4114","endLine":3024,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":3041,"column":84,"nodeType":"4113","messageId":"4114","endLine":3041,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":3055,"column":82,"nodeType":"4113","messageId":"4114","endLine":3055,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":3068,"column":79,"nodeType":"4113","messageId":"4114","endLine":3068,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":3081,"column":84,"nodeType":"4113","messageId":"4114","endLine":3081,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":3098,"column":86,"nodeType":"4113","messageId":"4114","endLine":3098,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":3115,"column":87,"nodeType":"4113","messageId":"4114","endLine":3115,"endColumn":89},{"ruleId":"4111","severity":1,"message":"4136","line":3132,"column":81,"nodeType":"4113","messageId":"4114","endLine":3132,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":3145,"column":79,"nodeType":"4113","messageId":"4114","endLine":3145,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":3158,"column":86,"nodeType":"4113","messageId":"4114","endLine":3158,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":3175,"column":82,"nodeType":"4113","messageId":"4114","endLine":3175,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":3188,"column":86,"nodeType":"4113","messageId":"4114","endLine":3188,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":3205,"column":92,"nodeType":"4113","messageId":"4114","endLine":3205,"endColumn":94},{"ruleId":"4111","severity":1,"message":"4136","line":3222,"column":86,"nodeType":"4113","messageId":"4114","endLine":3222,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":3240,"column":80,"nodeType":"4113","messageId":"4114","endLine":3240,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":3253,"column":78,"nodeType":"4113","messageId":"4114","endLine":3253,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":3266,"column":76,"nodeType":"4113","messageId":"4114","endLine":3266,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":3290,"column":78,"nodeType":"4113","messageId":"4114","endLine":3290,"endColumn":80},{"ruleId":"4105","severity":1,"message":"4133","line":5,"column":5,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4134","line":20,"column":7,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4135","line":25,"column":7,"nodeType":"4107","messageId":"4108","endLine":25,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4120","line":11,"column":10,"nodeType":"4107","messageId":"4108","endLine":11,"endColumn":12},{"ruleId":"4111","severity":1,"message":"4112","line":71,"column":27,"nodeType":"4113","messageId":"4114","endLine":71,"endColumn":29},{"ruleId":"4111","severity":1,"message":"4112","line":73,"column":34,"nodeType":"4113","messageId":"4114","endLine":73,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":75,"column":34,"nodeType":"4113","messageId":"4114","endLine":75,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":77,"column":34,"nodeType":"4113","messageId":"4114","endLine":77,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":79,"column":34,"nodeType":"4113","messageId":"4114","endLine":79,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":81,"column":34,"nodeType":"4113","messageId":"4114","endLine":81,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":83,"column":34,"nodeType":"4113","messageId":"4114","endLine":83,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":85,"column":34,"nodeType":"4113","messageId":"4114","endLine":85,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":87,"column":34,"nodeType":"4113","messageId":"4114","endLine":87,"endColumn":36},{"ruleId":"4122","severity":1,"message":"4123","line":93,"column":8,"nodeType":"4124","endLine":93,"endColumn":10,"suggestions":"4137"},{"ruleId":"4111","severity":1,"message":"4112","line":105,"column":33,"nodeType":"4113","messageId":"4114","endLine":105,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":110,"column":51,"nodeType":"4113","messageId":"4114","endLine":110,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":112,"column":58,"nodeType":"4113","messageId":"4114","endLine":112,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":114,"column":58,"nodeType":"4113","messageId":"4114","endLine":114,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":116,"column":58,"nodeType":"4113","messageId":"4114","endLine":116,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":118,"column":58,"nodeType":"4113","messageId":"4114","endLine":118,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":120,"column":58,"nodeType":"4113","messageId":"4114","endLine":120,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":122,"column":58,"nodeType":"4113","messageId":"4114","endLine":122,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":124,"column":58,"nodeType":"4113","messageId":"4114","endLine":124,"endColumn":60},{"ruleId":"4105","severity":1,"message":"4138","line":2,"column":18,"nodeType":"4107","messageId":"4108","endLine":2,"endColumn":23},{"ruleId":"4111","severity":1,"message":"4112","line":98,"column":36,"nodeType":"4113","messageId":"4114","endLine":98,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":99,"column":36,"nodeType":"4113","messageId":"4114","endLine":99,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":110,"column":36,"nodeType":"4113","messageId":"4114","endLine":110,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":111,"column":36,"nodeType":"4113","messageId":"4114","endLine":111,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":154,"column":40,"nodeType":"4113","messageId":"4114","endLine":154,"endColumn":42},{"ruleId":"4139","severity":1,"message":"4140","line":181,"column":55,"nodeType":"4113","messageId":"4141","endLine":181,"endColumn":56},{"ruleId":"4122","severity":1,"message":"4128","line":197,"column":8,"nodeType":"4124","endLine":197,"endColumn":17,"suggestions":"4142"},{"ruleId":"4111","severity":1,"message":"4112","line":208,"column":33,"nodeType":"4113","messageId":"4114","endLine":208,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":213,"column":69,"nodeType":"4113","messageId":"4114","endLine":213,"endColumn":71},{"ruleId":"4111","severity":1,"message":"4112","line":247,"column":36,"nodeType":"4113","messageId":"4114","endLine":247,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":248,"column":36,"nodeType":"4113","messageId":"4114","endLine":248,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":264,"column":32,"nodeType":"4113","messageId":"4114","endLine":264,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":280,"column":29,"nodeType":"4113","messageId":"4114","endLine":280,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4112","line":283,"column":48,"nodeType":"4113","messageId":"4114","endLine":283,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":292,"column":32,"nodeType":"4113","messageId":"4114","endLine":292,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4136","line":334,"column":60,"nodeType":"4113","messageId":"4114","endLine":334,"endColumn":62},{"ruleId":"4122","severity":1,"message":"4143","line":374,"column":8,"nodeType":"4124","endLine":374,"endColumn":25,"suggestions":"4144"},{"ruleId":"4111","severity":1,"message":"4136","line":420,"column":60,"nodeType":"4113","messageId":"4114","endLine":420,"endColumn":62},{"ruleId":"4122","severity":1,"message":"4145","line":460,"column":8,"nodeType":"4124","endLine":460,"endColumn":49,"suggestions":"4146"},{"ruleId":"4111","severity":1,"message":"4112","line":540,"column":33,"nodeType":"4113","messageId":"4114","endLine":540,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":540,"column":55,"nodeType":"4113","messageId":"4114","endLine":540,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4112","line":591,"column":54,"nodeType":"4113","messageId":"4114","endLine":591,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":626,"column":54,"nodeType":"4113","messageId":"4114","endLine":626,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":658,"column":58,"nodeType":"4113","messageId":"4114","endLine":658,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":698,"column":54,"nodeType":"4113","messageId":"4114","endLine":698,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":724,"column":55,"nodeType":"4113","messageId":"4114","endLine":724,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4112","line":734,"column":62,"nodeType":"4113","messageId":"4114","endLine":734,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4112","line":741,"column":67,"nodeType":"4113","messageId":"4114","endLine":741,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":754,"column":58,"nodeType":"4113","messageId":"4114","endLine":754,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":761,"column":67,"nodeType":"4113","messageId":"4114","endLine":761,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":775,"column":37,"nodeType":"4113","messageId":"4114","endLine":775,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":782,"column":54,"nodeType":"4113","messageId":"4114","endLine":782,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":796,"column":50,"nodeType":"4113","messageId":"4114","endLine":796,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":816,"column":50,"nodeType":"4113","messageId":"4114","endLine":816,"endColumn":52},{"ruleId":"4105","severity":1,"message":"4147","line":28,"column":12,"nodeType":"4107","messageId":"4108","endLine":28,"endColumn":16},{"ruleId":"4105","severity":1,"message":"4148","line":30,"column":12,"nodeType":"4107","messageId":"4108","endLine":30,"endColumn":23},{"ruleId":"4105","severity":1,"message":"4149","line":30,"column":25,"nodeType":"4107","messageId":"4108","endLine":30,"endColumn":39},{"ruleId":"4105","severity":1,"message":"4150","line":32,"column":12,"nodeType":"4107","messageId":"4108","endLine":32,"endColumn":19},{"ruleId":"4122","severity":1,"message":"4128","line":58,"column":8,"nodeType":"4124","endLine":58,"endColumn":17,"suggestions":"4151"},{"ruleId":"4111","severity":1,"message":"4112","line":116,"column":29,"nodeType":"4113","messageId":"4114","endLine":116,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4112","line":212,"column":72,"nodeType":"4113","messageId":"4114","endLine":212,"endColumn":74},{"ruleId":"4111","severity":1,"message":"4112","line":276,"column":68,"nodeType":"4113","messageId":"4114","endLine":276,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4112","line":304,"column":44,"nodeType":"4113","messageId":"4114","endLine":304,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":29,"column":32,"nodeType":"4113","messageId":"4114","endLine":29,"endColumn":34},{"ruleId":"4122","severity":1,"message":"4131","line":38,"column":8,"nodeType":"4124","endLine":38,"endColumn":17,"suggestions":"4152"},{"ruleId":"4111","severity":1,"message":"4112","line":96,"column":39,"nodeType":"4113","messageId":"4114","endLine":96,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":103,"column":43,"nodeType":"4113","messageId":"4114","endLine":103,"endColumn":45},{"ruleId":"4111","severity":1,"message":"4112","line":110,"column":43,"nodeType":"4113","messageId":"4114","endLine":110,"endColumn":45},{"ruleId":"4111","severity":1,"message":"4112","line":117,"column":39,"nodeType":"4113","messageId":"4114","endLine":117,"endColumn":41},{"ruleId":"4122","severity":1,"message":"4153","line":177,"column":8,"nodeType":"4124","endLine":177,"endColumn":17,"suggestions":"4154"},{"ruleId":"4111","severity":1,"message":"4112","line":188,"column":33,"nodeType":"4113","messageId":"4114","endLine":188,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":215,"column":41,"nodeType":"4113","messageId":"4114","endLine":215,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":235,"column":32,"nodeType":"4113","messageId":"4114","endLine":235,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":255,"column":48,"nodeType":"4113","messageId":"4114","endLine":255,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":263,"column":32,"nodeType":"4113","messageId":"4114","endLine":263,"endColumn":34},{"ruleId":"4122","severity":1,"message":"4143","line":360,"column":8,"nodeType":"4124","endLine":360,"endColumn":32,"suggestions":"4155"},{"ruleId":"4122","severity":1,"message":"4145","line":439,"column":8,"nodeType":"4124","endLine":439,"endColumn":42,"suggestions":"4156"},{"ruleId":"4111","severity":1,"message":"4112","line":681,"column":71,"nodeType":"4113","messageId":"4114","endLine":681,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4112","line":744,"column":41,"nodeType":"4113","messageId":"4114","endLine":744,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":34,"column":36,"nodeType":"4113","messageId":"4114","endLine":34,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":46,"column":8,"nodeType":"4124","endLine":46,"endColumn":17,"suggestions":"4157"},{"ruleId":"4105","severity":1,"message":"4158","line":99,"column":12,"nodeType":"4107","messageId":"4108","endLine":99,"endColumn":22},{"ruleId":"4111","severity":1,"message":"4112","line":123,"column":43,"nodeType":"4113","messageId":"4114","endLine":123,"endColumn":45},{"ruleId":"4122","severity":1,"message":"4159","line":144,"column":8,"nodeType":"4124","endLine":144,"endColumn":17,"suggestions":"4160"},{"ruleId":"4111","severity":1,"message":"4112","line":154,"column":45,"nodeType":"4113","messageId":"4114","endLine":154,"endColumn":47},{"ruleId":"4111","severity":1,"message":"4112","line":155,"column":56,"nodeType":"4113","messageId":"4114","endLine":155,"endColumn":58},{"ruleId":"4122","severity":1,"message":"4161","line":161,"column":8,"nodeType":"4124","endLine":161,"endColumn":17,"suggestions":"4162"},{"ruleId":"4111","severity":1,"message":"4112","line":201,"column":50,"nodeType":"4113","messageId":"4114","endLine":201,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":289,"column":40,"nodeType":"4113","messageId":"4114","endLine":289,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":289,"column":68,"nodeType":"4113","messageId":"4114","endLine":289,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4112","line":293,"column":30,"nodeType":"4113","messageId":"4114","endLine":293,"endColumn":32},{"ruleId":"4111","severity":1,"message":"4112","line":295,"column":46,"nodeType":"4113","messageId":"4114","endLine":295,"endColumn":48},{"ruleId":"4111","severity":1,"message":"4112","line":336,"column":67,"nodeType":"4113","messageId":"4114","endLine":336,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":341,"column":40,"nodeType":"4113","messageId":"4114","endLine":341,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":350,"column":47,"nodeType":"4113","messageId":"4114","endLine":350,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":363,"column":34,"nodeType":"4113","messageId":"4114","endLine":363,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":374,"column":34,"nodeType":"4113","messageId":"4114","endLine":374,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":376,"column":46,"nodeType":"4113","messageId":"4114","endLine":376,"endColumn":48},{"ruleId":"4111","severity":1,"message":"4112","line":413,"column":67,"nodeType":"4113","messageId":"4114","endLine":413,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":421,"column":40,"nodeType":"4113","messageId":"4114","endLine":421,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":432,"column":47,"nodeType":"4113","messageId":"4114","endLine":432,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":474,"column":28,"nodeType":"4113","messageId":"4114","endLine":474,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":528,"column":43,"nodeType":"4113","messageId":"4114","endLine":528,"endColumn":45},{"ruleId":"4111","severity":1,"message":"4112","line":529,"column":42,"nodeType":"4113","messageId":"4114","endLine":529,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":530,"column":42,"nodeType":"4113","messageId":"4114","endLine":530,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":587,"column":73,"nodeType":"4113","messageId":"4114","endLine":587,"endColumn":75},{"ruleId":"4122","severity":1,"message":"4163","line":605,"column":8,"nodeType":"4124","endLine":605,"endColumn":26,"suggestions":"4164"},{"ruleId":"4122","severity":1,"message":"4165","line":605,"column":9,"nodeType":"4166","endLine":605,"endColumn":25},{"ruleId":"4111","severity":1,"message":"4112","line":638,"column":72,"nodeType":"4113","messageId":"4114","endLine":638,"endColumn":74},{"ruleId":"4167","severity":1,"message":"4168","line":697,"column":33,"nodeType":"4169","endLine":710,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":702,"column":75,"nodeType":"4113","messageId":"4114","endLine":702,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4112","line":745,"column":48,"nodeType":"4113","messageId":"4114","endLine":745,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":758,"column":48,"nodeType":"4113","messageId":"4114","endLine":758,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":809,"column":37,"nodeType":"4113","messageId":"4114","endLine":809,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":835,"column":40,"nodeType":"4113","messageId":"4114","endLine":835,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":836,"column":40,"nodeType":"4113","messageId":"4114","endLine":836,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":884,"column":48,"nodeType":"4113","messageId":"4114","endLine":884,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":960,"column":48,"nodeType":"4113","messageId":"4114","endLine":960,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":972,"column":48,"nodeType":"4113","messageId":"4114","endLine":972,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":984,"column":51,"nodeType":"4113","messageId":"4114","endLine":984,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":1024,"column":37,"nodeType":"4113","messageId":"4114","endLine":1024,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":1129,"column":69,"nodeType":"4113","messageId":"4114","endLine":1129,"endColumn":71},{"ruleId":"4111","severity":1,"message":"4112","line":1147,"column":65,"nodeType":"4113","messageId":"4114","endLine":1147,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4112","line":1173,"column":77,"nodeType":"4113","messageId":"4114","endLine":1173,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":1200,"column":77,"nodeType":"4113","messageId":"4114","endLine":1200,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4112","line":61,"column":36,"nodeType":"4113","messageId":"4114","endLine":61,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4170","line":75,"column":8,"nodeType":"4124","endLine":75,"endColumn":23,"suggestions":"4171"},{"ruleId":"4111","severity":1,"message":"4112","line":122,"column":36,"nodeType":"4113","messageId":"4114","endLine":122,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":134,"column":36,"nodeType":"4113","messageId":"4114","endLine":134,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":212,"column":58,"nodeType":"4113","messageId":"4114","endLine":212,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":223,"column":62,"nodeType":"4113","messageId":"4114","endLine":223,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4112","line":225,"column":68,"nodeType":"4113","messageId":"4114","endLine":225,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":239,"column":62,"nodeType":"4113","messageId":"4114","endLine":239,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4112","line":250,"column":67,"nodeType":"4113","messageId":"4114","endLine":250,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":258,"column":64,"nodeType":"4113","messageId":"4114","endLine":258,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4136","line":268,"column":65,"nodeType":"4113","messageId":"4114","endLine":268,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4136","line":281,"column":68,"nodeType":"4113","messageId":"4114","endLine":281,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":290,"column":67,"nodeType":"4113","messageId":"4114","endLine":290,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":299,"column":70,"nodeType":"4113","messageId":"4114","endLine":299,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":306,"column":73,"nodeType":"4113","messageId":"4114","endLine":306,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":319,"column":71,"nodeType":"4113","messageId":"4114","endLine":319,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4136","line":330,"column":72,"nodeType":"4113","messageId":"4114","endLine":330,"endColumn":74},{"ruleId":"4111","severity":1,"message":"4136","line":340,"column":71,"nodeType":"4113","messageId":"4114","endLine":340,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4136","line":350,"column":69,"nodeType":"4113","messageId":"4114","endLine":350,"endColumn":71},{"ruleId":"4111","severity":1,"message":"4136","line":362,"column":74,"nodeType":"4113","messageId":"4114","endLine":362,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":372,"column":66,"nodeType":"4113","messageId":"4114","endLine":372,"endColumn":68},{"ruleId":"4111","severity":1,"message":"4136","line":381,"column":68,"nodeType":"4113","messageId":"4114","endLine":381,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":390,"column":72,"nodeType":"4113","messageId":"4114","endLine":390,"endColumn":74},{"ruleId":"4111","severity":1,"message":"4136","line":400,"column":69,"nodeType":"4113","messageId":"4114","endLine":400,"endColumn":71},{"ruleId":"4111","severity":1,"message":"4136","line":412,"column":69,"nodeType":"4113","messageId":"4114","endLine":412,"endColumn":71},{"ruleId":"4111","severity":1,"message":"4136","line":422,"column":62,"nodeType":"4113","messageId":"4114","endLine":422,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4136","line":431,"column":67,"nodeType":"4113","messageId":"4114","endLine":431,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":440,"column":64,"nodeType":"4113","messageId":"4114","endLine":440,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4136","line":449,"column":65,"nodeType":"4113","messageId":"4114","endLine":449,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4136","line":461,"column":65,"nodeType":"4113","messageId":"4114","endLine":461,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4136","line":470,"column":69,"nodeType":"4113","messageId":"4114","endLine":470,"endColumn":71},{"ruleId":"4122","severity":1,"message":"4172","line":483,"column":8,"nodeType":"4124","endLine":483,"endColumn":20,"suggestions":"4173"},{"ruleId":"4111","severity":1,"message":"4112","line":518,"column":47,"nodeType":"4113","messageId":"4114","endLine":518,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":74,"column":35,"nodeType":"4113","messageId":"4114","endLine":74,"endColumn":37},{"ruleId":"4105","severity":1,"message":"4174","line":72,"column":12,"nodeType":"4107","messageId":"4108","endLine":72,"endColumn":20},{"ruleId":"4105","severity":1,"message":"4175","line":72,"column":22,"nodeType":"4107","messageId":"4108","endLine":72,"endColumn":33},{"ruleId":"4139","severity":1,"message":"4140","line":91,"column":38,"nodeType":"4113","messageId":"4141","endLine":91,"endColumn":39},{"ruleId":"4122","severity":1,"message":"4123","line":104,"column":8,"nodeType":"4124","endLine":104,"endColumn":17,"suggestions":"4176"},{"ruleId":"4122","severity":1,"message":"4128","line":51,"column":8,"nodeType":"4124","endLine":51,"endColumn":17,"suggestions":"4177"},{"ruleId":"4111","severity":1,"message":"4112","line":68,"column":33,"nodeType":"4113","messageId":"4114","endLine":68,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":86,"column":29,"nodeType":"4113","messageId":"4114","endLine":86,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4112","line":98,"column":32,"nodeType":"4113","messageId":"4114","endLine":98,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":124,"column":33,"nodeType":"4113","messageId":"4114","endLine":124,"endColumn":35},{"ruleId":"4122","severity":1,"message":"4143","line":215,"column":8,"nodeType":"4124","endLine":215,"endColumn":25,"suggestions":"4178"},{"ruleId":"4122","severity":1,"message":"4145","line":316,"column":8,"nodeType":"4124","endLine":316,"endColumn":50,"suggestions":"4179"},{"ruleId":"4122","severity":1,"message":"4161","line":49,"column":8,"nodeType":"4124","endLine":49,"endColumn":17,"suggestions":"4180"},{"ruleId":"4111","severity":1,"message":"4112","line":60,"column":27,"nodeType":"4113","messageId":"4114","endLine":60,"endColumn":29},{"ruleId":"4111","severity":1,"message":"4112","line":132,"column":34,"nodeType":"4113","messageId":"4114","endLine":132,"endColumn":36},{"ruleId":"4105","severity":1,"message":"4181","line":40,"column":20,"nodeType":"4107","messageId":"4108","endLine":40,"endColumn":29},{"ruleId":"4111","severity":1,"message":"4112","line":54,"column":36,"nodeType":"4113","messageId":"4114","endLine":54,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4170","line":66,"column":8,"nodeType":"4124","endLine":66,"endColumn":23,"suggestions":"4182"},{"ruleId":"4111","severity":1,"message":"4112","line":104,"column":36,"nodeType":"4113","messageId":"4114","endLine":104,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":118,"column":36,"nodeType":"4113","messageId":"4114","endLine":118,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":196,"column":58,"nodeType":"4113","messageId":"4114","endLine":196,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":207,"column":62,"nodeType":"4113","messageId":"4114","endLine":207,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4112","line":209,"column":68,"nodeType":"4113","messageId":"4114","endLine":209,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":223,"column":62,"nodeType":"4113","messageId":"4114","endLine":223,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4112","line":234,"column":67,"nodeType":"4113","messageId":"4114","endLine":234,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":242,"column":64,"nodeType":"4113","messageId":"4114","endLine":242,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4136","line":252,"column":65,"nodeType":"4113","messageId":"4114","endLine":252,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4136","line":265,"column":68,"nodeType":"4113","messageId":"4114","endLine":265,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":274,"column":67,"nodeType":"4113","messageId":"4114","endLine":274,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":283,"column":70,"nodeType":"4113","messageId":"4114","endLine":283,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":290,"column":73,"nodeType":"4113","messageId":"4114","endLine":290,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":303,"column":71,"nodeType":"4113","messageId":"4114","endLine":303,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4136","line":314,"column":72,"nodeType":"4113","messageId":"4114","endLine":314,"endColumn":74},{"ruleId":"4111","severity":1,"message":"4136","line":324,"column":71,"nodeType":"4113","messageId":"4114","endLine":324,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4136","line":334,"column":69,"nodeType":"4113","messageId":"4114","endLine":334,"endColumn":71},{"ruleId":"4111","severity":1,"message":"4136","line":346,"column":74,"nodeType":"4113","messageId":"4114","endLine":346,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":356,"column":66,"nodeType":"4113","messageId":"4114","endLine":356,"endColumn":68},{"ruleId":"4111","severity":1,"message":"4136","line":365,"column":68,"nodeType":"4113","messageId":"4114","endLine":365,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":374,"column":72,"nodeType":"4113","messageId":"4114","endLine":374,"endColumn":74},{"ruleId":"4111","severity":1,"message":"4136","line":384,"column":69,"nodeType":"4113","messageId":"4114","endLine":384,"endColumn":71},{"ruleId":"4111","severity":1,"message":"4136","line":396,"column":69,"nodeType":"4113","messageId":"4114","endLine":396,"endColumn":71},{"ruleId":"4111","severity":1,"message":"4136","line":406,"column":62,"nodeType":"4113","messageId":"4114","endLine":406,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4136","line":415,"column":67,"nodeType":"4113","messageId":"4114","endLine":415,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":424,"column":64,"nodeType":"4113","messageId":"4114","endLine":424,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4136","line":433,"column":65,"nodeType":"4113","messageId":"4114","endLine":433,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4136","line":445,"column":65,"nodeType":"4113","messageId":"4114","endLine":445,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4136","line":454,"column":69,"nodeType":"4113","messageId":"4114","endLine":454,"endColumn":71},{"ruleId":"4122","severity":1,"message":"4172","line":467,"column":8,"nodeType":"4124","endLine":467,"endColumn":20,"suggestions":"4183"},{"ruleId":"4105","severity":1,"message":"4184","line":28,"column":12,"nodeType":"4107","messageId":"4108","endLine":28,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4185","line":31,"column":11,"nodeType":"4107","messageId":"4108","endLine":31,"endColumn":23},{"ruleId":"4111","severity":1,"message":"4112","line":77,"column":39,"nodeType":"4113","messageId":"4114","endLine":77,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":81,"column":35,"nodeType":"4113","messageId":"4114","endLine":81,"endColumn":37},{"ruleId":"4139","severity":1,"message":"4140","line":32,"column":55,"nodeType":"4113","messageId":"4141","endLine":32,"endColumn":56},{"ruleId":"4122","severity":1,"message":"4131","line":47,"column":8,"nodeType":"4124","endLine":47,"endColumn":17,"suggestions":"4186"},{"ruleId":"4105","severity":1,"message":"4187","line":49,"column":11,"nodeType":"4107","messageId":"4108","endLine":49,"endColumn":22},{"ruleId":"4111","severity":1,"message":"4112","line":79,"column":35,"nodeType":"4113","messageId":"4114","endLine":79,"endColumn":37},{"ruleId":"4122","severity":1,"message":"4131","line":40,"column":10,"nodeType":"4124","endLine":40,"endColumn":12,"suggestions":"4188"},{"ruleId":"4122","severity":1,"message":"4189","line":81,"column":8,"nodeType":"4124","endLine":81,"endColumn":42,"suggestions":"4190"},{"ruleId":"4139","severity":1,"message":"4140","line":86,"column":39,"nodeType":"4113","messageId":"4141","endLine":86,"endColumn":40},{"ruleId":"4111","severity":1,"message":"4112","line":88,"column":32,"nodeType":"4113","messageId":"4114","endLine":88,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":152,"column":37,"nodeType":"4113","messageId":"4114","endLine":152,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":155,"column":44,"nodeType":"4113","messageId":"4114","endLine":155,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":158,"column":44,"nodeType":"4113","messageId":"4114","endLine":158,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":161,"column":44,"nodeType":"4113","messageId":"4114","endLine":161,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":164,"column":44,"nodeType":"4113","messageId":"4114","endLine":164,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":167,"column":44,"nodeType":"4113","messageId":"4114","endLine":167,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":170,"column":44,"nodeType":"4113","messageId":"4114","endLine":170,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":173,"column":44,"nodeType":"4113","messageId":"4114","endLine":173,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":195,"column":28,"nodeType":"4113","messageId":"4114","endLine":195,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":217,"column":39,"nodeType":"4113","messageId":"4114","endLine":217,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":237,"column":28,"nodeType":"4113","messageId":"4114","endLine":237,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":277,"column":65,"nodeType":"4113","messageId":"4114","endLine":277,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4112","line":358,"column":34,"nodeType":"4113","messageId":"4114","endLine":358,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":385,"column":65,"nodeType":"4113","messageId":"4114","endLine":385,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4136","line":397,"column":34,"nodeType":"4113","messageId":"4114","endLine":397,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4136","line":423,"column":67,"nodeType":"4113","messageId":"4114","endLine":423,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":441,"column":67,"nodeType":"4113","messageId":"4114","endLine":441,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":479,"column":74,"nodeType":"4113","messageId":"4114","endLine":479,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":480,"column":62,"nodeType":"4113","messageId":"4114","endLine":480,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4136","line":481,"column":74,"nodeType":"4113","messageId":"4114","endLine":481,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":482,"column":62,"nodeType":"4113","messageId":"4114","endLine":482,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4136","line":486,"column":77,"nodeType":"4113","messageId":"4114","endLine":486,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":502,"column":78,"nodeType":"4113","messageId":"4114","endLine":502,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":504,"column":64,"nodeType":"4113","messageId":"4114","endLine":504,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4136","line":505,"column":76,"nodeType":"4113","messageId":"4114","endLine":505,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4112","line":507,"column":64,"nodeType":"4113","messageId":"4114","endLine":507,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4136","line":529,"column":74,"nodeType":"4113","messageId":"4114","endLine":529,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":530,"column":68,"nodeType":"4113","messageId":"4114","endLine":530,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":532,"column":74,"nodeType":"4113","messageId":"4114","endLine":532,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":533,"column":68,"nodeType":"4113","messageId":"4114","endLine":533,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":537,"column":77,"nodeType":"4113","messageId":"4114","endLine":537,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":554,"column":78,"nodeType":"4113","messageId":"4114","endLine":554,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":556,"column":70,"nodeType":"4113","messageId":"4114","endLine":556,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":558,"column":76,"nodeType":"4113","messageId":"4114","endLine":558,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4112","line":560,"column":70,"nodeType":"4113","messageId":"4114","endLine":560,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":595,"column":77,"nodeType":"4113","messageId":"4114","endLine":595,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":627,"column":77,"nodeType":"4113","messageId":"4114","endLine":627,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":656,"column":74,"nodeType":"4113","messageId":"4114","endLine":656,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":657,"column":68,"nodeType":"4113","messageId":"4114","endLine":657,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":659,"column":74,"nodeType":"4113","messageId":"4114","endLine":659,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":660,"column":68,"nodeType":"4113","messageId":"4114","endLine":660,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":664,"column":77,"nodeType":"4113","messageId":"4114","endLine":664,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":681,"column":78,"nodeType":"4113","messageId":"4114","endLine":681,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":683,"column":70,"nodeType":"4113","messageId":"4114","endLine":683,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":685,"column":76,"nodeType":"4113","messageId":"4114","endLine":685,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4112","line":687,"column":70,"nodeType":"4113","messageId":"4114","endLine":687,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":711,"column":77,"nodeType":"4113","messageId":"4114","endLine":711,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":742,"column":74,"nodeType":"4113","messageId":"4114","endLine":742,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":743,"column":71,"nodeType":"4113","messageId":"4114","endLine":743,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4136","line":745,"column":74,"nodeType":"4113","messageId":"4114","endLine":745,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":746,"column":71,"nodeType":"4113","messageId":"4114","endLine":746,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4136","line":750,"column":77,"nodeType":"4113","messageId":"4114","endLine":750,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":768,"column":78,"nodeType":"4113","messageId":"4114","endLine":768,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":770,"column":73,"nodeType":"4113","messageId":"4114","endLine":770,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":772,"column":76,"nodeType":"4113","messageId":"4114","endLine":772,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4112","line":774,"column":73,"nodeType":"4113","messageId":"4114","endLine":774,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":785,"column":75,"nodeType":"4113","messageId":"4114","endLine":785,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4112","line":787,"column":62,"nodeType":"4113","messageId":"4114","endLine":787,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4136","line":791,"column":74,"nodeType":"4113","messageId":"4114","endLine":791,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":792,"column":62,"nodeType":"4113","messageId":"4114","endLine":792,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4112","line":793,"column":78,"nodeType":"4113","messageId":"4114","endLine":793,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":795,"column":74,"nodeType":"4113","messageId":"4114","endLine":795,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":796,"column":66,"nodeType":"4113","messageId":"4114","endLine":796,"endColumn":68},{"ruleId":"4111","severity":1,"message":"4136","line":807,"column":74,"nodeType":"4113","messageId":"4114","endLine":807,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":808,"column":66,"nodeType":"4113","messageId":"4114","endLine":808,"endColumn":68},{"ruleId":"4111","severity":1,"message":"4136","line":809,"column":74,"nodeType":"4113","messageId":"4114","endLine":809,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":810,"column":68,"nodeType":"4113","messageId":"4114","endLine":810,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":812,"column":74,"nodeType":"4113","messageId":"4114","endLine":812,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":813,"column":68,"nodeType":"4113","messageId":"4114","endLine":813,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":814,"column":74,"nodeType":"4113","messageId":"4114","endLine":814,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":815,"column":68,"nodeType":"4113","messageId":"4114","endLine":815,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":817,"column":74,"nodeType":"4113","messageId":"4114","endLine":817,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":818,"column":68,"nodeType":"4113","messageId":"4114","endLine":818,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":819,"column":74,"nodeType":"4113","messageId":"4114","endLine":819,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":820,"column":71,"nodeType":"4113","messageId":"4114","endLine":820,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4136","line":822,"column":74,"nodeType":"4113","messageId":"4114","endLine":822,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":823,"column":71,"nodeType":"4113","messageId":"4114","endLine":823,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4112","line":829,"column":51,"nodeType":"4113","messageId":"4114","endLine":829,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":832,"column":51,"nodeType":"4113","messageId":"4114","endLine":832,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":835,"column":51,"nodeType":"4113","messageId":"4114","endLine":835,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4136","line":867,"column":37,"nodeType":"4113","messageId":"4114","endLine":867,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4136","line":881,"column":41,"nodeType":"4113","messageId":"4114","endLine":881,"endColumn":43},{"ruleId":"4122","severity":1,"message":"4131","line":47,"column":8,"nodeType":"4124","endLine":47,"endColumn":17,"suggestions":"4191"},{"ruleId":"4111","severity":1,"message":"4112","line":128,"column":44,"nodeType":"4113","messageId":"4114","endLine":128,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":140,"column":44,"nodeType":"4113","messageId":"4114","endLine":140,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":152,"column":44,"nodeType":"4113","messageId":"4114","endLine":152,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":78,"column":36,"nodeType":"4113","messageId":"4114","endLine":78,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":82,"column":45,"nodeType":"4113","messageId":"4114","endLine":82,"endColumn":47},{"ruleId":"4111","severity":1,"message":"4112","line":111,"column":33,"nodeType":"4113","messageId":"4114","endLine":111,"endColumn":35},{"ruleId":"4105","severity":1,"message":"4192","line":56,"column":12,"nodeType":"4107","messageId":"4108","endLine":56,"endColumn":23},{"ruleId":"4105","severity":1,"message":"4193","line":56,"column":25,"nodeType":"4107","messageId":"4108","endLine":56,"endColumn":39},{"ruleId":"4105","severity":1,"message":"4194","line":57,"column":12,"nodeType":"4107","messageId":"4108","endLine":57,"endColumn":16},{"ruleId":"4105","severity":1,"message":"4195","line":57,"column":18,"nodeType":"4107","messageId":"4108","endLine":57,"endColumn":25},{"ruleId":"4122","severity":1,"message":"4189","line":90,"column":8,"nodeType":"4124","endLine":90,"endColumn":42,"suggestions":"4196"},{"ruleId":"4139","severity":1,"message":"4140","line":96,"column":42,"nodeType":"4113","messageId":"4141","endLine":96,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":98,"column":32,"nodeType":"4113","messageId":"4114","endLine":98,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":155,"column":27,"nodeType":"4113","messageId":"4114","endLine":155,"endColumn":29},{"ruleId":"4111","severity":1,"message":"4112","line":167,"column":28,"nodeType":"4113","messageId":"4114","endLine":167,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":206,"column":28,"nodeType":"4113","messageId":"4114","endLine":206,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":246,"column":64,"nodeType":"4113","messageId":"4114","endLine":246,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4112","line":327,"column":34,"nodeType":"4113","messageId":"4114","endLine":327,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":353,"column":70,"nodeType":"4113","messageId":"4114","endLine":353,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":364,"column":34,"nodeType":"4113","messageId":"4114","endLine":364,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4136","line":393,"column":74,"nodeType":"4113","messageId":"4114","endLine":393,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":394,"column":62,"nodeType":"4113","messageId":"4114","endLine":394,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4136","line":395,"column":74,"nodeType":"4113","messageId":"4114","endLine":395,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":396,"column":62,"nodeType":"4113","messageId":"4114","endLine":396,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4136","line":400,"column":77,"nodeType":"4113","messageId":"4114","endLine":400,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":416,"column":78,"nodeType":"4113","messageId":"4114","endLine":416,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":418,"column":64,"nodeType":"4113","messageId":"4114","endLine":418,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4136","line":419,"column":76,"nodeType":"4113","messageId":"4114","endLine":419,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4112","line":421,"column":64,"nodeType":"4113","messageId":"4114","endLine":421,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4136","line":442,"column":74,"nodeType":"4113","messageId":"4114","endLine":442,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":443,"column":68,"nodeType":"4113","messageId":"4114","endLine":443,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":445,"column":74,"nodeType":"4113","messageId":"4114","endLine":445,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":446,"column":68,"nodeType":"4113","messageId":"4114","endLine":446,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":450,"column":77,"nodeType":"4113","messageId":"4114","endLine":450,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":466,"column":78,"nodeType":"4113","messageId":"4114","endLine":466,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":468,"column":70,"nodeType":"4113","messageId":"4114","endLine":468,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":470,"column":76,"nodeType":"4113","messageId":"4114","endLine":470,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4112","line":472,"column":70,"nodeType":"4113","messageId":"4114","endLine":472,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":504,"column":74,"nodeType":"4113","messageId":"4114","endLine":504,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":505,"column":75,"nodeType":"4113","messageId":"4114","endLine":505,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":507,"column":74,"nodeType":"4113","messageId":"4114","endLine":507,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":508,"column":75,"nodeType":"4113","messageId":"4114","endLine":508,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":513,"column":77,"nodeType":"4113","messageId":"4114","endLine":513,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":532,"column":78,"nodeType":"4113","messageId":"4114","endLine":532,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":534,"column":77,"nodeType":"4113","messageId":"4114","endLine":534,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":536,"column":76,"nodeType":"4113","messageId":"4114","endLine":536,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4112","line":538,"column":77,"nodeType":"4113","messageId":"4114","endLine":538,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":563,"column":77,"nodeType":"4113","messageId":"4114","endLine":563,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":595,"column":74,"nodeType":"4113","messageId":"4114","endLine":595,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":596,"column":70,"nodeType":"4113","messageId":"4114","endLine":596,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":598,"column":74,"nodeType":"4113","messageId":"4114","endLine":598,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":599,"column":70,"nodeType":"4113","messageId":"4114","endLine":599,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":603,"column":77,"nodeType":"4113","messageId":"4114","endLine":603,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":621,"column":78,"nodeType":"4113","messageId":"4114","endLine":621,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":623,"column":72,"nodeType":"4113","messageId":"4114","endLine":623,"endColumn":74},{"ruleId":"4111","severity":1,"message":"4136","line":625,"column":76,"nodeType":"4113","messageId":"4114","endLine":625,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4112","line":627,"column":72,"nodeType":"4113","messageId":"4114","endLine":627,"endColumn":74},{"ruleId":"4111","severity":1,"message":"4136","line":637,"column":75,"nodeType":"4113","messageId":"4114","endLine":637,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4112","line":639,"column":62,"nodeType":"4113","messageId":"4114","endLine":639,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4136","line":643,"column":74,"nodeType":"4113","messageId":"4114","endLine":643,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":644,"column":62,"nodeType":"4113","messageId":"4114","endLine":644,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4112","line":645,"column":78,"nodeType":"4113","messageId":"4114","endLine":645,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":647,"column":74,"nodeType":"4113","messageId":"4114","endLine":647,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":648,"column":68,"nodeType":"4113","messageId":"4114","endLine":648,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":650,"column":74,"nodeType":"4113","messageId":"4114","endLine":650,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":651,"column":68,"nodeType":"4113","messageId":"4114","endLine":651,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4136","line":652,"column":74,"nodeType":"4113","messageId":"4114","endLine":652,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":653,"column":75,"nodeType":"4113","messageId":"4114","endLine":653,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":655,"column":74,"nodeType":"4113","messageId":"4114","endLine":655,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":656,"column":75,"nodeType":"4113","messageId":"4114","endLine":656,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":658,"column":74,"nodeType":"4113","messageId":"4114","endLine":658,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":659,"column":70,"nodeType":"4113","messageId":"4114","endLine":659,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":661,"column":74,"nodeType":"4113","messageId":"4114","endLine":661,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":662,"column":70,"nodeType":"4113","messageId":"4114","endLine":662,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4112","line":665,"column":51,"nodeType":"4113","messageId":"4114","endLine":665,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":668,"column":51,"nodeType":"4113","messageId":"4114","endLine":668,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":671,"column":51,"nodeType":"4113","messageId":"4114","endLine":671,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":674,"column":51,"nodeType":"4113","messageId":"4114","endLine":674,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4136","line":705,"column":37,"nodeType":"4113","messageId":"4114","endLine":705,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4136","line":718,"column":56,"nodeType":"4113","messageId":"4114","endLine":718,"endColumn":58},{"ruleId":"4105","severity":1,"message":"4197","line":3,"column":8,"nodeType":"4107","messageId":"4108","endLine":3,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":48,"column":35,"nodeType":"4113","messageId":"4114","endLine":48,"endColumn":37},{"ruleId":"4111","severity":1,"message":"4112","line":48,"column":61,"nodeType":"4113","messageId":"4114","endLine":48,"endColumn":63},{"ruleId":"4111","severity":1,"message":"4112","line":56,"column":51,"nodeType":"4113","messageId":"4114","endLine":56,"endColumn":53},{"ruleId":"4122","severity":1,"message":"4123","line":85,"column":8,"nodeType":"4124","endLine":85,"endColumn":34,"suggestions":"4198"},{"ruleId":"4105","severity":1,"message":"4199","line":12,"column":21,"nodeType":"4107","messageId":"4108","endLine":12,"endColumn":25},{"ruleId":"4105","severity":1,"message":"4135","line":33,"column":7,"nodeType":"4107","messageId":"4108","endLine":33,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4200","line":75,"column":13,"nodeType":"4107","messageId":"4108","endLine":75,"endColumn":43},{"ruleId":"4105","severity":1,"message":"4201","line":75,"column":45,"nodeType":"4107","messageId":"4108","endLine":75,"endColumn":61},{"ruleId":"4105","severity":1,"message":"4202","line":83,"column":11,"nodeType":"4107","messageId":"4108","endLine":83,"endColumn":31},{"ruleId":"4105","severity":1,"message":"4133","line":5,"column":5,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4134","line":20,"column":7,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4135","line":25,"column":7,"nodeType":"4107","messageId":"4108","endLine":25,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4133","line":5,"column":5,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4134","line":20,"column":7,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4135","line":25,"column":7,"nodeType":"4107","messageId":"4108","endLine":25,"endColumn":19},{"ruleId":"4111","severity":1,"message":"4112","line":69,"column":79,"nodeType":"4113","messageId":"4114","endLine":69,"endColumn":81},{"ruleId":"4105","severity":1,"message":"4133","line":5,"column":5,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4134","line":20,"column":7,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4135","line":25,"column":7,"nodeType":"4107","messageId":"4108","endLine":25,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4133","line":5,"column":5,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4134","line":20,"column":7,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4135","line":25,"column":7,"nodeType":"4107","messageId":"4108","endLine":25,"endColumn":19},{"ruleId":"4111","severity":1,"message":"4112","line":44,"column":31,"nodeType":"4113","messageId":"4114","endLine":44,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4112","line":45,"column":30,"nodeType":"4113","messageId":"4114","endLine":45,"endColumn":32},{"ruleId":"4111","severity":1,"message":"4112","line":46,"column":30,"nodeType":"4113","messageId":"4114","endLine":46,"endColumn":32},{"ruleId":"4111","severity":1,"message":"4112","line":73,"column":79,"nodeType":"4113","messageId":"4114","endLine":73,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4112","line":89,"column":28,"nodeType":"4113","messageId":"4114","endLine":89,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":91,"column":88,"nodeType":"4113","messageId":"4114","endLine":91,"endColumn":90},{"ruleId":"4111","severity":1,"message":"4136","line":108,"column":82,"nodeType":"4113","messageId":"4114","endLine":108,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":121,"column":81,"nodeType":"4113","messageId":"4114","endLine":121,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":207,"column":85,"nodeType":"4113","messageId":"4114","endLine":207,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":224,"column":83,"nodeType":"4113","messageId":"4114","endLine":224,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":250,"column":74,"nodeType":"4113","messageId":"4114","endLine":250,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":262,"column":75,"nodeType":"4113","messageId":"4114","endLine":262,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":273,"column":75,"nodeType":"4113","messageId":"4114","endLine":273,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":284,"column":73,"nodeType":"4113","messageId":"4114","endLine":284,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":295,"column":73,"nodeType":"4113","messageId":"4114","endLine":295,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":319,"column":77,"nodeType":"4113","messageId":"4114","endLine":319,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":330,"column":76,"nodeType":"4113","messageId":"4114","endLine":330,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":341,"column":83,"nodeType":"4113","messageId":"4114","endLine":341,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":354,"column":86,"nodeType":"4113","messageId":"4114","endLine":354,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":371,"column":76,"nodeType":"4113","messageId":"4114","endLine":371,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":382,"column":80,"nodeType":"4113","messageId":"4114","endLine":382,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":395,"column":86,"nodeType":"4113","messageId":"4114","endLine":395,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":412,"column":84,"nodeType":"4113","messageId":"4114","endLine":412,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":425,"column":85,"nodeType":"4113","messageId":"4114","endLine":425,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":442,"column":91,"nodeType":"4113","messageId":"4114","endLine":442,"endColumn":93},{"ruleId":"4111","severity":1,"message":"4136","line":459,"column":89,"nodeType":"4113","messageId":"4114","endLine":459,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":476,"column":76,"nodeType":"4113","messageId":"4114","endLine":476,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":487,"column":87,"nodeType":"4113","messageId":"4114","endLine":487,"endColumn":89},{"ruleId":"4111","severity":1,"message":"4136","line":504,"column":81,"nodeType":"4113","messageId":"4114","endLine":504,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":517,"column":79,"nodeType":"4113","messageId":"4114","endLine":517,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":530,"column":86,"nodeType":"4113","messageId":"4114","endLine":530,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":547,"column":82,"nodeType":"4113","messageId":"4114","endLine":547,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":560,"column":86,"nodeType":"4113","messageId":"4114","endLine":560,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":578,"column":79,"nodeType":"4113","messageId":"4114","endLine":578,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":591,"column":78,"nodeType":"4113","messageId":"4114","endLine":591,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":604,"column":78,"nodeType":"4113","messageId":"4114","endLine":604,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":617,"column":80,"nodeType":"4113","messageId":"4114","endLine":617,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":630,"column":83,"nodeType":"4113","messageId":"4114","endLine":630,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":643,"column":81,"nodeType":"4113","messageId":"4114","endLine":643,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":656,"column":134,"nodeType":"4113","messageId":"4114","endLine":656,"endColumn":136},{"ruleId":"4111","severity":1,"message":"4136","line":674,"column":89,"nodeType":"4113","messageId":"4114","endLine":674,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":691,"column":84,"nodeType":"4113","messageId":"4114","endLine":691,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":704,"column":80,"nodeType":"4113","messageId":"4114","endLine":704,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":717,"column":92,"nodeType":"4113","messageId":"4114","endLine":717,"endColumn":94},{"ruleId":"4111","severity":1,"message":"4136","line":734,"column":86,"nodeType":"4113","messageId":"4114","endLine":734,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":751,"column":76,"nodeType":"4113","messageId":"4114","endLine":751,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":762,"column":80,"nodeType":"4113","messageId":"4114","endLine":762,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":775,"column":78,"nodeType":"4113","messageId":"4114","endLine":775,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":788,"column":76,"nodeType":"4113","messageId":"4114","endLine":788,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":799,"column":75,"nodeType":"4113","messageId":"4114","endLine":799,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":810,"column":82,"nodeType":"4113","messageId":"4114","endLine":810,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":823,"column":79,"nodeType":"4113","messageId":"4114","endLine":823,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":849,"column":84,"nodeType":"4113","messageId":"4114","endLine":849,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":862,"column":78,"nodeType":"4113","messageId":"4114","endLine":862,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":876,"column":31,"nodeType":"4113","messageId":"4114","endLine":876,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4136","line":878,"column":88,"nodeType":"4113","messageId":"4114","endLine":878,"endColumn":90},{"ruleId":"4111","severity":1,"message":"4136","line":895,"column":82,"nodeType":"4113","messageId":"4114","endLine":895,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":908,"column":81,"nodeType":"4113","messageId":"4114","endLine":908,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":999,"column":85,"nodeType":"4113","messageId":"4114","endLine":999,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":1016,"column":83,"nodeType":"4113","messageId":"4114","endLine":1016,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":1042,"column":74,"nodeType":"4113","messageId":"4114","endLine":1042,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":1054,"column":75,"nodeType":"4113","messageId":"4114","endLine":1054,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":1065,"column":75,"nodeType":"4113","messageId":"4114","endLine":1065,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":1076,"column":73,"nodeType":"4113","messageId":"4114","endLine":1076,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":1087,"column":73,"nodeType":"4113","messageId":"4114","endLine":1087,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":1111,"column":77,"nodeType":"4113","messageId":"4114","endLine":1111,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":1122,"column":76,"nodeType":"4113","messageId":"4114","endLine":1122,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1133,"column":83,"nodeType":"4113","messageId":"4114","endLine":1133,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":1146,"column":86,"nodeType":"4113","messageId":"4114","endLine":1146,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":1163,"column":76,"nodeType":"4113","messageId":"4114","endLine":1163,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1174,"column":80,"nodeType":"4113","messageId":"4114","endLine":1174,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":1187,"column":86,"nodeType":"4113","messageId":"4114","endLine":1187,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":1204,"column":84,"nodeType":"4113","messageId":"4114","endLine":1204,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":1217,"column":85,"nodeType":"4113","messageId":"4114","endLine":1217,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":1234,"column":91,"nodeType":"4113","messageId":"4114","endLine":1234,"endColumn":93},{"ruleId":"4111","severity":1,"message":"4136","line":1251,"column":89,"nodeType":"4113","messageId":"4114","endLine":1251,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":1268,"column":76,"nodeType":"4113","messageId":"4114","endLine":1268,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1279,"column":87,"nodeType":"4113","messageId":"4114","endLine":1279,"endColumn":89},{"ruleId":"4111","severity":1,"message":"4136","line":1296,"column":81,"nodeType":"4113","messageId":"4114","endLine":1296,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":1309,"column":79,"nodeType":"4113","messageId":"4114","endLine":1309,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":1322,"column":86,"nodeType":"4113","messageId":"4114","endLine":1322,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":1339,"column":82,"nodeType":"4113","messageId":"4114","endLine":1339,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":1352,"column":86,"nodeType":"4113","messageId":"4114","endLine":1352,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":1370,"column":79,"nodeType":"4113","messageId":"4114","endLine":1370,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":1383,"column":78,"nodeType":"4113","messageId":"4114","endLine":1383,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":1396,"column":78,"nodeType":"4113","messageId":"4114","endLine":1396,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":1409,"column":80,"nodeType":"4113","messageId":"4114","endLine":1409,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":1422,"column":83,"nodeType":"4113","messageId":"4114","endLine":1422,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":1435,"column":81,"nodeType":"4113","messageId":"4114","endLine":1435,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":1448,"column":134,"nodeType":"4113","messageId":"4114","endLine":1448,"endColumn":136},{"ruleId":"4111","severity":1,"message":"4136","line":1466,"column":89,"nodeType":"4113","messageId":"4114","endLine":1466,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":1483,"column":84,"nodeType":"4113","messageId":"4114","endLine":1483,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":1496,"column":80,"nodeType":"4113","messageId":"4114","endLine":1496,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":1509,"column":92,"nodeType":"4113","messageId":"4114","endLine":1509,"endColumn":94},{"ruleId":"4111","severity":1,"message":"4136","line":1526,"column":86,"nodeType":"4113","messageId":"4114","endLine":1526,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":1543,"column":76,"nodeType":"4113","messageId":"4114","endLine":1543,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1554,"column":80,"nodeType":"4113","messageId":"4114","endLine":1554,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":1567,"column":78,"nodeType":"4113","messageId":"4114","endLine":1567,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":1580,"column":76,"nodeType":"4113","messageId":"4114","endLine":1580,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1591,"column":75,"nodeType":"4113","messageId":"4114","endLine":1591,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":1602,"column":82,"nodeType":"4113","messageId":"4114","endLine":1602,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":1615,"column":79,"nodeType":"4113","messageId":"4114","endLine":1615,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":1641,"column":84,"nodeType":"4113","messageId":"4114","endLine":1641,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":1654,"column":78,"nodeType":"4113","messageId":"4114","endLine":1654,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1668,"column":31,"nodeType":"4113","messageId":"4114","endLine":1668,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4136","line":1670,"column":88,"nodeType":"4113","messageId":"4114","endLine":1670,"endColumn":90},{"ruleId":"4111","severity":1,"message":"4136","line":1687,"column":82,"nodeType":"4113","messageId":"4114","endLine":1687,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":1700,"column":81,"nodeType":"4113","messageId":"4114","endLine":1700,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":1791,"column":85,"nodeType":"4113","messageId":"4114","endLine":1791,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":1808,"column":83,"nodeType":"4113","messageId":"4114","endLine":1808,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":1834,"column":74,"nodeType":"4113","messageId":"4114","endLine":1834,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":1846,"column":75,"nodeType":"4113","messageId":"4114","endLine":1846,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":1857,"column":75,"nodeType":"4113","messageId":"4114","endLine":1857,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":1868,"column":73,"nodeType":"4113","messageId":"4114","endLine":1868,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":1879,"column":73,"nodeType":"4113","messageId":"4114","endLine":1879,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":1903,"column":77,"nodeType":"4113","messageId":"4114","endLine":1903,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":1914,"column":76,"nodeType":"4113","messageId":"4114","endLine":1914,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1925,"column":83,"nodeType":"4113","messageId":"4114","endLine":1925,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":1938,"column":86,"nodeType":"4113","messageId":"4114","endLine":1938,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":1955,"column":76,"nodeType":"4113","messageId":"4114","endLine":1955,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1966,"column":80,"nodeType":"4113","messageId":"4114","endLine":1966,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":1979,"column":86,"nodeType":"4113","messageId":"4114","endLine":1979,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":1996,"column":84,"nodeType":"4113","messageId":"4114","endLine":1996,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":2009,"column":85,"nodeType":"4113","messageId":"4114","endLine":2009,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":2026,"column":91,"nodeType":"4113","messageId":"4114","endLine":2026,"endColumn":93},{"ruleId":"4111","severity":1,"message":"4136","line":2043,"column":89,"nodeType":"4113","messageId":"4114","endLine":2043,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":2060,"column":76,"nodeType":"4113","messageId":"4114","endLine":2060,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2071,"column":87,"nodeType":"4113","messageId":"4114","endLine":2071,"endColumn":89},{"ruleId":"4111","severity":1,"message":"4136","line":2088,"column":81,"nodeType":"4113","messageId":"4114","endLine":2088,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":2101,"column":79,"nodeType":"4113","messageId":"4114","endLine":2101,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":2114,"column":86,"nodeType":"4113","messageId":"4114","endLine":2114,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2131,"column":82,"nodeType":"4113","messageId":"4114","endLine":2131,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":2144,"column":86,"nodeType":"4113","messageId":"4114","endLine":2144,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2162,"column":79,"nodeType":"4113","messageId":"4114","endLine":2162,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":2175,"column":78,"nodeType":"4113","messageId":"4114","endLine":2175,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":2188,"column":78,"nodeType":"4113","messageId":"4114","endLine":2188,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":2201,"column":80,"nodeType":"4113","messageId":"4114","endLine":2201,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":2214,"column":83,"nodeType":"4113","messageId":"4114","endLine":2214,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":2227,"column":81,"nodeType":"4113","messageId":"4114","endLine":2227,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":2240,"column":134,"nodeType":"4113","messageId":"4114","endLine":2240,"endColumn":136},{"ruleId":"4111","severity":1,"message":"4136","line":2258,"column":89,"nodeType":"4113","messageId":"4114","endLine":2258,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":2275,"column":84,"nodeType":"4113","messageId":"4114","endLine":2275,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":2288,"column":80,"nodeType":"4113","messageId":"4114","endLine":2288,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":2301,"column":92,"nodeType":"4113","messageId":"4114","endLine":2301,"endColumn":94},{"ruleId":"4111","severity":1,"message":"4136","line":2318,"column":86,"nodeType":"4113","messageId":"4114","endLine":2318,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2335,"column":76,"nodeType":"4113","messageId":"4114","endLine":2335,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2346,"column":80,"nodeType":"4113","messageId":"4114","endLine":2346,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":2359,"column":78,"nodeType":"4113","messageId":"4114","endLine":2359,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":2372,"column":76,"nodeType":"4113","messageId":"4114","endLine":2372,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2383,"column":75,"nodeType":"4113","messageId":"4114","endLine":2383,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":2394,"column":82,"nodeType":"4113","messageId":"4114","endLine":2394,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":2407,"column":79,"nodeType":"4113","messageId":"4114","endLine":2407,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":2433,"column":84,"nodeType":"4113","messageId":"4114","endLine":2433,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":2446,"column":78,"nodeType":"4113","messageId":"4114","endLine":2446,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":2460,"column":31,"nodeType":"4113","messageId":"4114","endLine":2460,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4136","line":2462,"column":88,"nodeType":"4113","messageId":"4114","endLine":2462,"endColumn":90},{"ruleId":"4111","severity":1,"message":"4136","line":2479,"column":82,"nodeType":"4113","messageId":"4114","endLine":2479,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":2492,"column":81,"nodeType":"4113","messageId":"4114","endLine":2492,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":2578,"column":85,"nodeType":"4113","messageId":"4114","endLine":2578,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":2595,"column":83,"nodeType":"4113","messageId":"4114","endLine":2595,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4112","line":2608,"column":80,"nodeType":"4113","messageId":"4114","endLine":2608,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4112","line":2610,"column":79,"nodeType":"4113","messageId":"4114","endLine":2610,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":2623,"column":74,"nodeType":"4113","messageId":"4114","endLine":2623,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":2635,"column":75,"nodeType":"4113","messageId":"4114","endLine":2635,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":2646,"column":75,"nodeType":"4113","messageId":"4114","endLine":2646,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":2657,"column":73,"nodeType":"4113","messageId":"4114","endLine":2657,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":2668,"column":73,"nodeType":"4113","messageId":"4114","endLine":2668,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":2692,"column":77,"nodeType":"4113","messageId":"4114","endLine":2692,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":2703,"column":76,"nodeType":"4113","messageId":"4114","endLine":2703,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2714,"column":83,"nodeType":"4113","messageId":"4114","endLine":2714,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":2727,"column":86,"nodeType":"4113","messageId":"4114","endLine":2727,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2744,"column":76,"nodeType":"4113","messageId":"4114","endLine":2744,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2755,"column":80,"nodeType":"4113","messageId":"4114","endLine":2755,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":2768,"column":86,"nodeType":"4113","messageId":"4114","endLine":2768,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2785,"column":84,"nodeType":"4113","messageId":"4114","endLine":2785,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":2798,"column":85,"nodeType":"4113","messageId":"4114","endLine":2798,"endColumn":87},{"ruleId":"4111","severity":1,"message":"4136","line":2815,"column":91,"nodeType":"4113","messageId":"4114","endLine":2815,"endColumn":93},{"ruleId":"4111","severity":1,"message":"4136","line":2832,"column":89,"nodeType":"4113","messageId":"4114","endLine":2832,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":2849,"column":76,"nodeType":"4113","messageId":"4114","endLine":2849,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":2860,"column":87,"nodeType":"4113","messageId":"4114","endLine":2860,"endColumn":89},{"ruleId":"4111","severity":1,"message":"4136","line":2877,"column":81,"nodeType":"4113","messageId":"4114","endLine":2877,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":2890,"column":79,"nodeType":"4113","messageId":"4114","endLine":2890,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":2903,"column":86,"nodeType":"4113","messageId":"4114","endLine":2903,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2920,"column":82,"nodeType":"4113","messageId":"4114","endLine":2920,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":2933,"column":86,"nodeType":"4113","messageId":"4114","endLine":2933,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":2951,"column":79,"nodeType":"4113","messageId":"4114","endLine":2951,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":2964,"column":78,"nodeType":"4113","messageId":"4114","endLine":2964,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":2977,"column":78,"nodeType":"4113","messageId":"4114","endLine":2977,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":2990,"column":80,"nodeType":"4113","messageId":"4114","endLine":2990,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":3003,"column":83,"nodeType":"4113","messageId":"4114","endLine":3003,"endColumn":85},{"ruleId":"4111","severity":1,"message":"4136","line":3016,"column":81,"nodeType":"4113","messageId":"4114","endLine":3016,"endColumn":83},{"ruleId":"4111","severity":1,"message":"4136","line":3029,"column":134,"nodeType":"4113","messageId":"4114","endLine":3029,"endColumn":136},{"ruleId":"4111","severity":1,"message":"4136","line":3047,"column":89,"nodeType":"4113","messageId":"4114","endLine":3047,"endColumn":91},{"ruleId":"4111","severity":1,"message":"4136","line":3064,"column":84,"nodeType":"4113","messageId":"4114","endLine":3064,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":3077,"column":80,"nodeType":"4113","messageId":"4114","endLine":3077,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":3090,"column":92,"nodeType":"4113","messageId":"4114","endLine":3090,"endColumn":94},{"ruleId":"4111","severity":1,"message":"4136","line":3107,"column":86,"nodeType":"4113","messageId":"4114","endLine":3107,"endColumn":88},{"ruleId":"4111","severity":1,"message":"4136","line":3124,"column":76,"nodeType":"4113","messageId":"4114","endLine":3124,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":3135,"column":80,"nodeType":"4113","messageId":"4114","endLine":3135,"endColumn":82},{"ruleId":"4111","severity":1,"message":"4136","line":3148,"column":78,"nodeType":"4113","messageId":"4114","endLine":3148,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":3161,"column":76,"nodeType":"4113","messageId":"4114","endLine":3161,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":3172,"column":75,"nodeType":"4113","messageId":"4114","endLine":3172,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":3183,"column":82,"nodeType":"4113","messageId":"4114","endLine":3183,"endColumn":84},{"ruleId":"4111","severity":1,"message":"4136","line":3196,"column":79,"nodeType":"4113","messageId":"4114","endLine":3196,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":3222,"column":84,"nodeType":"4113","messageId":"4114","endLine":3222,"endColumn":86},{"ruleId":"4111","severity":1,"message":"4136","line":3235,"column":78,"nodeType":"4113","messageId":"4114","endLine":3235,"endColumn":80},{"ruleId":"4105","severity":1,"message":"4133","line":5,"column":5,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4134","line":20,"column":7,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4135","line":25,"column":7,"nodeType":"4107","messageId":"4108","endLine":25,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4133","line":5,"column":5,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4134","line":20,"column":7,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":17},{"ruleId":"4105","severity":1,"message":"4135","line":25,"column":7,"nodeType":"4107","messageId":"4108","endLine":25,"endColumn":19},{"ruleId":"4111","severity":1,"message":"4112","line":40,"column":32,"nodeType":"4113","messageId":"4114","endLine":40,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":44,"column":37,"nodeType":"4113","messageId":"4114","endLine":44,"endColumn":39},{"ruleId":"4122","severity":1,"message":"4203","line":62,"column":8,"nodeType":"4124","endLine":62,"endColumn":10,"suggestions":"4204"},{"ruleId":"4111","severity":1,"message":"4112","line":68,"column":28,"nodeType":"4113","messageId":"4114","endLine":68,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":70,"column":26,"nodeType":"4113","messageId":"4114","endLine":70,"endColumn":28},{"ruleId":"4111","severity":1,"message":"4112","line":80,"column":33,"nodeType":"4113","messageId":"4114","endLine":80,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":90,"column":33,"nodeType":"4113","messageId":"4114","endLine":90,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":100,"column":33,"nodeType":"4113","messageId":"4114","endLine":100,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":130,"column":33,"nodeType":"4113","messageId":"4114","endLine":130,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":180,"column":28,"nodeType":"4113","messageId":"4114","endLine":180,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":203,"column":33,"nodeType":"4113","messageId":"4114","endLine":203,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":241,"column":33,"nodeType":"4113","messageId":"4114","endLine":241,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":302,"column":60,"nodeType":"4113","messageId":"4114","endLine":302,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":348,"column":60,"nodeType":"4113","messageId":"4114","endLine":348,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":371,"column":60,"nodeType":"4113","messageId":"4114","endLine":371,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":389,"column":60,"nodeType":"4113","messageId":"4114","endLine":389,"endColumn":62},{"ruleId":"4105","severity":1,"message":"4199","line":3,"column":14,"nodeType":"4107","messageId":"4108","endLine":3,"endColumn":18},{"ruleId":"4105","severity":1,"message":"4205","line":21,"column":13,"nodeType":"4107","messageId":"4108","endLine":21,"endColumn":20},{"ruleId":"4111","severity":1,"message":"4112","line":77,"column":36,"nodeType":"4113","messageId":"4114","endLine":77,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":81,"column":45,"nodeType":"4113","messageId":"4114","endLine":81,"endColumn":47},{"ruleId":"4111","severity":1,"message":"4112","line":122,"column":33,"nodeType":"4113","messageId":"4114","endLine":122,"endColumn":35},{"ruleId":"4122","severity":1,"message":"4161","line":47,"column":8,"nodeType":"4124","endLine":47,"endColumn":17,"suggestions":"4206"},{"ruleId":"4111","severity":1,"message":"4112","line":128,"column":44,"nodeType":"4113","messageId":"4114","endLine":128,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":140,"column":44,"nodeType":"4113","messageId":"4114","endLine":140,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":152,"column":44,"nodeType":"4113","messageId":"4114","endLine":152,"endColumn":46},{"ruleId":"4105","severity":1,"message":"4207","line":114,"column":13,"nodeType":"4107","messageId":"4108","endLine":114,"endColumn":39},{"ruleId":"4105","severity":1,"message":"4201","line":114,"column":41,"nodeType":"4107","messageId":"4108","endLine":114,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4112","line":59,"column":33,"nodeType":"4113","messageId":"4114","endLine":59,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":86,"column":41,"nodeType":"4113","messageId":"4114","endLine":86,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":88,"column":32,"nodeType":"4113","messageId":"4114","endLine":88,"endColumn":34},{"ruleId":"4122","severity":1,"message":"4189","line":113,"column":8,"nodeType":"4124","endLine":113,"endColumn":42,"suggestions":"4208"},{"ruleId":"4111","severity":1,"message":"4136","line":169,"column":66,"nodeType":"4113","messageId":"4114","endLine":169,"endColumn":68},{"ruleId":"4111","severity":1,"message":"4112","line":180,"column":28,"nodeType":"4113","messageId":"4114","endLine":180,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":211,"column":28,"nodeType":"4113","messageId":"4114","endLine":211,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":298,"column":34,"nodeType":"4113","messageId":"4114","endLine":298,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4136","line":336,"column":30,"nodeType":"4113","messageId":"4114","endLine":336,"endColumn":32},{"ruleId":"4111","severity":1,"message":"4136","line":365,"column":73,"nodeType":"4113","messageId":"4114","endLine":365,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4112","line":387,"column":47,"nodeType":"4113","messageId":"4114","endLine":387,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4136","line":420,"column":33,"nodeType":"4113","messageId":"4114","endLine":420,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4136","line":431,"column":52,"nodeType":"4113","messageId":"4114","endLine":431,"endColumn":54},{"ruleId":"4111","severity":1,"message":"4112","line":59,"column":33,"nodeType":"4113","messageId":"4114","endLine":59,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":82,"column":41,"nodeType":"4113","messageId":"4114","endLine":82,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":42,"column":39,"nodeType":"4113","messageId":"4114","endLine":42,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":63,"column":19,"nodeType":"4113","messageId":"4114","endLine":63,"endColumn":21},{"ruleId":"4111","severity":1,"message":"4136","line":64,"column":28,"nodeType":"4113","messageId":"4114","endLine":64,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":77,"column":33,"nodeType":"4113","messageId":"4114","endLine":77,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":111,"column":36,"nodeType":"4113","messageId":"4114","endLine":111,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":115,"column":45,"nodeType":"4113","messageId":"4114","endLine":115,"endColumn":47},{"ruleId":"4111","severity":1,"message":"4112","line":61,"column":40,"nodeType":"4113","messageId":"4114","endLine":61,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":82,"column":28,"nodeType":"4113","messageId":"4114","endLine":82,"endColumn":30},{"ruleId":"4209","severity":1,"message":"4210","line":191,"column":25,"nodeType":"4169","endLine":201,"endColumn":27},{"ruleId":"4111","severity":1,"message":"4112","line":195,"column":39,"nodeType":"4113","messageId":"4114","endLine":195,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":63,"column":33,"nodeType":"4113","messageId":"4114","endLine":63,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":92,"column":41,"nodeType":"4113","messageId":"4114","endLine":92,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":122,"column":41,"nodeType":"4113","messageId":"4114","endLine":122,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":232,"column":31,"nodeType":"4113","messageId":"4114","endLine":232,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4112","line":262,"column":36,"nodeType":"4113","messageId":"4114","endLine":262,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4211","line":47,"column":8,"nodeType":"4124","endLine":47,"endColumn":17,"suggestions":"4212"},{"ruleId":"4111","severity":1,"message":"4112","line":133,"column":31,"nodeType":"4113","messageId":"4114","endLine":133,"endColumn":33},{"ruleId":"4105","severity":1,"message":"4213","line":2,"column":5,"nodeType":"4107","messageId":"4108","endLine":2,"endColumn":15},{"ruleId":"4105","severity":1,"message":"4133","line":8,"column":5,"nodeType":"4107","messageId":"4108","endLine":8,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4214","line":9,"column":5,"nodeType":"4107","messageId":"4108","endLine":9,"endColumn":20},{"ruleId":"4122","severity":1,"message":"4189","line":99,"column":8,"nodeType":"4124","endLine":99,"endColumn":42,"suggestions":"4215"},{"ruleId":"4216","severity":1,"message":"4217","line":143,"column":22,"nodeType":"4107","messageId":"4218","endLine":143,"endColumn":23},{"ruleId":"4111","severity":1,"message":"4112","line":162,"column":28,"nodeType":"4113","messageId":"4114","endLine":162,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":198,"column":28,"nodeType":"4113","messageId":"4114","endLine":198,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":244,"column":62,"nodeType":"4113","messageId":"4114","endLine":244,"endColumn":64},{"ruleId":"4111","severity":1,"message":"4112","line":305,"column":34,"nodeType":"4113","messageId":"4114","endLine":305,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4136","line":342,"column":34,"nodeType":"4113","messageId":"4114","endLine":342,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4136","line":374,"column":77,"nodeType":"4113","messageId":"4114","endLine":374,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":410,"column":77,"nodeType":"4113","messageId":"4114","endLine":410,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4136","line":447,"column":77,"nodeType":"4113","messageId":"4114","endLine":447,"endColumn":79},{"ruleId":"4111","severity":1,"message":"4112","line":481,"column":51,"nodeType":"4113","messageId":"4114","endLine":481,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":484,"column":51,"nodeType":"4113","messageId":"4114","endLine":484,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":487,"column":51,"nodeType":"4113","messageId":"4114","endLine":487,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4136","line":521,"column":37,"nodeType":"4113","messageId":"4114","endLine":521,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4136","line":534,"column":45,"nodeType":"4113","messageId":"4114","endLine":534,"endColumn":47},{"ruleId":"4111","severity":1,"message":"4136","line":534,"column":61,"nodeType":"4113","messageId":"4114","endLine":534,"endColumn":63},{"ruleId":"4111","severity":1,"message":"4112","line":93,"column":36,"nodeType":"4113","messageId":"4114","endLine":93,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":104,"column":8,"nodeType":"4124","endLine":104,"endColumn":17,"suggestions":"4219"},{"ruleId":"4111","severity":1,"message":"4112","line":29,"column":32,"nodeType":"4113","messageId":"4114","endLine":29,"endColumn":34},{"ruleId":"4122","severity":1,"message":"4131","line":38,"column":8,"nodeType":"4124","endLine":38,"endColumn":17,"suggestions":"4220"},{"ruleId":"4111","severity":1,"message":"4112","line":66,"column":36,"nodeType":"4113","messageId":"4114","endLine":66,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4170","line":78,"column":8,"nodeType":"4124","endLine":78,"endColumn":23,"suggestions":"4221"},{"ruleId":"4111","severity":1,"message":"4112","line":130,"column":28,"nodeType":"4113","messageId":"4114","endLine":130,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":137,"column":51,"nodeType":"4113","messageId":"4114","endLine":137,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":146,"column":44,"nodeType":"4113","messageId":"4114","endLine":146,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":169,"column":28,"nodeType":"4113","messageId":"4114","endLine":169,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":191,"column":36,"nodeType":"4113","messageId":"4114","endLine":191,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":207,"column":36,"nodeType":"4113","messageId":"4114","endLine":207,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":232,"column":49,"nodeType":"4113","messageId":"4114","endLine":232,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":312,"column":53,"nodeType":"4113","messageId":"4114","endLine":312,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":314,"column":59,"nodeType":"4113","messageId":"4114","endLine":314,"endColumn":61},{"ruleId":"4111","severity":1,"message":"4112","line":324,"column":60,"nodeType":"4113","messageId":"4114","endLine":324,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":334,"column":54,"nodeType":"4113","messageId":"4114","endLine":334,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":404,"column":59,"nodeType":"4113","messageId":"4114","endLine":404,"endColumn":61},{"ruleId":"4122","severity":1,"message":"4222","line":497,"column":8,"nodeType":"4124","endLine":497,"endColumn":29,"suggestions":"4223"},{"ruleId":"4111","severity":1,"message":"4112","line":535,"column":43,"nodeType":"4113","messageId":"4114","endLine":535,"endColumn":45},{"ruleId":"4111","severity":1,"message":"4112","line":66,"column":36,"nodeType":"4113","messageId":"4114","endLine":66,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4170","line":78,"column":8,"nodeType":"4124","endLine":78,"endColumn":23,"suggestions":"4224"},{"ruleId":"4111","severity":1,"message":"4112","line":130,"column":28,"nodeType":"4113","messageId":"4114","endLine":130,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":137,"column":51,"nodeType":"4113","messageId":"4114","endLine":137,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":146,"column":44,"nodeType":"4113","messageId":"4114","endLine":146,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":169,"column":28,"nodeType":"4113","messageId":"4114","endLine":169,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":192,"column":36,"nodeType":"4113","messageId":"4114","endLine":192,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":208,"column":36,"nodeType":"4113","messageId":"4114","endLine":208,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":233,"column":49,"nodeType":"4113","messageId":"4114","endLine":233,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":313,"column":53,"nodeType":"4113","messageId":"4114","endLine":313,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":315,"column":59,"nodeType":"4113","messageId":"4114","endLine":315,"endColumn":61},{"ruleId":"4111","severity":1,"message":"4112","line":325,"column":60,"nodeType":"4113","messageId":"4114","endLine":325,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":335,"column":54,"nodeType":"4113","messageId":"4114","endLine":335,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":405,"column":59,"nodeType":"4113","messageId":"4114","endLine":405,"endColumn":61},{"ruleId":"4122","severity":1,"message":"4222","line":498,"column":8,"nodeType":"4124","endLine":498,"endColumn":29,"suggestions":"4225"},{"ruleId":"4111","severity":1,"message":"4112","line":536,"column":47,"nodeType":"4113","messageId":"4114","endLine":536,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":66,"column":36,"nodeType":"4113","messageId":"4114","endLine":66,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4170","line":78,"column":8,"nodeType":"4124","endLine":78,"endColumn":23,"suggestions":"4226"},{"ruleId":"4111","severity":1,"message":"4112","line":127,"column":28,"nodeType":"4113","messageId":"4114","endLine":127,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":137,"column":57,"nodeType":"4113","messageId":"4114","endLine":137,"endColumn":59},{"ruleId":"4111","severity":1,"message":"4112","line":152,"column":44,"nodeType":"4113","messageId":"4114","endLine":152,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":161,"column":31,"nodeType":"4113","messageId":"4114","endLine":161,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4112","line":178,"column":28,"nodeType":"4113","messageId":"4114","endLine":178,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":185,"column":51,"nodeType":"4113","messageId":"4114","endLine":185,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":194,"column":44,"nodeType":"4113","messageId":"4114","endLine":194,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":217,"column":28,"nodeType":"4113","messageId":"4114","endLine":217,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":240,"column":36,"nodeType":"4113","messageId":"4114","endLine":240,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":256,"column":36,"nodeType":"4113","messageId":"4114","endLine":256,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":281,"column":49,"nodeType":"4113","messageId":"4114","endLine":281,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":361,"column":53,"nodeType":"4113","messageId":"4114","endLine":361,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":363,"column":59,"nodeType":"4113","messageId":"4114","endLine":363,"endColumn":61},{"ruleId":"4111","severity":1,"message":"4112","line":373,"column":60,"nodeType":"4113","messageId":"4114","endLine":373,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":383,"column":54,"nodeType":"4113","messageId":"4114","endLine":383,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":453,"column":59,"nodeType":"4113","messageId":"4114","endLine":453,"endColumn":61},{"ruleId":"4122","severity":1,"message":"4222","line":546,"column":8,"nodeType":"4124","endLine":546,"endColumn":29,"suggestions":"4227"},{"ruleId":"4111","severity":1,"message":"4112","line":585,"column":47,"nodeType":"4113","messageId":"4114","endLine":585,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":67,"column":36,"nodeType":"4113","messageId":"4114","endLine":67,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4170","line":79,"column":8,"nodeType":"4124","endLine":79,"endColumn":23,"suggestions":"4228"},{"ruleId":"4111","severity":1,"message":"4112","line":131,"column":28,"nodeType":"4113","messageId":"4114","endLine":131,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":138,"column":51,"nodeType":"4113","messageId":"4114","endLine":138,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4112","line":147,"column":44,"nodeType":"4113","messageId":"4114","endLine":147,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":170,"column":28,"nodeType":"4113","messageId":"4114","endLine":170,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":188,"column":28,"nodeType":"4113","messageId":"4114","endLine":188,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":198,"column":57,"nodeType":"4113","messageId":"4114","endLine":198,"endColumn":59},{"ruleId":"4111","severity":1,"message":"4112","line":213,"column":44,"nodeType":"4113","messageId":"4114","endLine":213,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":222,"column":31,"nodeType":"4113","messageId":"4114","endLine":222,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4112","line":239,"column":36,"nodeType":"4113","messageId":"4114","endLine":239,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":253,"column":36,"nodeType":"4113","messageId":"4114","endLine":253,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":278,"column":49,"nodeType":"4113","messageId":"4114","endLine":278,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":358,"column":53,"nodeType":"4113","messageId":"4114","endLine":358,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":360,"column":59,"nodeType":"4113","messageId":"4114","endLine":360,"endColumn":61},{"ruleId":"4111","severity":1,"message":"4112","line":370,"column":60,"nodeType":"4113","messageId":"4114","endLine":370,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":380,"column":54,"nodeType":"4113","messageId":"4114","endLine":380,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":450,"column":59,"nodeType":"4113","messageId":"4114","endLine":450,"endColumn":61},{"ruleId":"4122","severity":1,"message":"4222","line":543,"column":8,"nodeType":"4124","endLine":543,"endColumn":29,"suggestions":"4229"},{"ruleId":"4111","severity":1,"message":"4112","line":581,"column":47,"nodeType":"4113","messageId":"4114","endLine":581,"endColumn":49},{"ruleId":"4105","severity":1,"message":"4230","line":6,"column":5,"nodeType":"4107","messageId":"4108","endLine":6,"endColumn":13},{"ruleId":"4105","severity":1,"message":"4231","line":14,"column":5,"nodeType":"4107","messageId":"4108","endLine":14,"endColumn":14},{"ruleId":"4105","severity":1,"message":"4232","line":15,"column":5,"nodeType":"4107","messageId":"4108","endLine":15,"endColumn":8},{"ruleId":"4105","severity":1,"message":"4181","line":41,"column":20,"nodeType":"4107","messageId":"4108","endLine":41,"endColumn":29},{"ruleId":"4111","severity":1,"message":"4112","line":61,"column":36,"nodeType":"4113","messageId":"4114","endLine":61,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4170","line":73,"column":8,"nodeType":"4124","endLine":73,"endColumn":23,"suggestions":"4233"},{"ruleId":"4105","severity":1,"message":"4234","line":105,"column":11,"nodeType":"4107","messageId":"4108","endLine":105,"endColumn":23},{"ruleId":"4111","severity":1,"message":"4112","line":111,"column":36,"nodeType":"4113","messageId":"4114","endLine":111,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":122,"column":36,"nodeType":"4113","messageId":"4114","endLine":122,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":196,"column":58,"nodeType":"4113","messageId":"4114","endLine":196,"endColumn":60},{"ruleId":"4122","severity":1,"message":"4172","line":344,"column":8,"nodeType":"4124","endLine":344,"endColumn":20,"suggestions":"4235"},{"ruleId":"4236","severity":1,"message":"4237","line":369,"column":17,"nodeType":"4238","messageId":"4239","endLine":369,"endColumn":39},{"ruleId":"4236","severity":1,"message":"4237","line":370,"column":17,"nodeType":"4238","messageId":"4239","endLine":370,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":61,"column":36,"nodeType":"4113","messageId":"4114","endLine":61,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4170","line":73,"column":8,"nodeType":"4124","endLine":73,"endColumn":23,"suggestions":"4240"},{"ruleId":"4111","severity":1,"message":"4112","line":111,"column":36,"nodeType":"4113","messageId":"4114","endLine":111,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":123,"column":36,"nodeType":"4113","messageId":"4114","endLine":123,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":197,"column":58,"nodeType":"4113","messageId":"4114","endLine":197,"endColumn":60},{"ruleId":"4122","severity":1,"message":"4172","line":345,"column":8,"nodeType":"4124","endLine":345,"endColumn":20,"suggestions":"4241"},{"ruleId":"4111","severity":1,"message":"4112","line":384,"column":47,"nodeType":"4113","messageId":"4114","endLine":384,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":68,"column":36,"nodeType":"4113","messageId":"4114","endLine":68,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4170","line":79,"column":8,"nodeType":"4124","endLine":79,"endColumn":23,"suggestions":"4242"},{"ruleId":"4111","severity":1,"message":"4112","line":118,"column":36,"nodeType":"4113","messageId":"4114","endLine":118,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":127,"column":36,"nodeType":"4113","messageId":"4114","endLine":127,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4136","line":170,"column":56,"nodeType":"4113","messageId":"4114","endLine":170,"endColumn":58},{"ruleId":"4111","severity":1,"message":"4136","line":175,"column":53,"nodeType":"4113","messageId":"4114","endLine":175,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":189,"column":53,"nodeType":"4113","messageId":"4114","endLine":189,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":191,"column":59,"nodeType":"4113","messageId":"4114","endLine":191,"endColumn":61},{"ruleId":"4111","severity":1,"message":"4112","line":212,"column":41,"nodeType":"4113","messageId":"4114","endLine":212,"endColumn":43},{"ruleId":"4122","severity":1,"message":"4172","line":262,"column":8,"nodeType":"4124","endLine":262,"endColumn":20,"suggestions":"4243"},{"ruleId":"4111","severity":1,"message":"4112","line":299,"column":47,"nodeType":"4113","messageId":"4114","endLine":299,"endColumn":49},{"ruleId":"4105","severity":1,"message":"4244","line":3,"column":38,"nodeType":"4107","messageId":"4108","endLine":3,"endColumn":45},{"ruleId":"4111","severity":1,"message":"4112","line":59,"column":36,"nodeType":"4113","messageId":"4114","endLine":59,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":70,"column":8,"nodeType":"4124","endLine":70,"endColumn":17,"suggestions":"4245"},{"ruleId":"4111","severity":1,"message":"4112","line":124,"column":36,"nodeType":"4113","messageId":"4114","endLine":124,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":126,"column":40,"nodeType":"4113","messageId":"4114","endLine":126,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":135,"column":36,"nodeType":"4113","messageId":"4114","endLine":135,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":182,"column":47,"nodeType":"4113","messageId":"4114","endLine":182,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":252,"column":47,"nodeType":"4113","messageId":"4114","endLine":252,"endColumn":49},{"ruleId":"4122","severity":1,"message":"4189","line":105,"column":8,"nodeType":"4124","endLine":105,"endColumn":42,"suggestions":"4246"},{"ruleId":"4105","severity":1,"message":"4247","line":107,"column":13,"nodeType":"4107","messageId":"4108","endLine":107,"endColumn":15},{"ruleId":"4111","severity":1,"message":"4112","line":169,"column":38,"nodeType":"4113","messageId":"4114","endLine":169,"endColumn":40},{"ruleId":"4111","severity":1,"message":"4112","line":170,"column":38,"nodeType":"4113","messageId":"4114","endLine":170,"endColumn":40},{"ruleId":"4111","severity":1,"message":"4112","line":176,"column":39,"nodeType":"4113","messageId":"4114","endLine":176,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":177,"column":39,"nodeType":"4113","messageId":"4114","endLine":177,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":188,"column":36,"nodeType":"4113","messageId":"4114","endLine":188,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":189,"column":36,"nodeType":"4113","messageId":"4114","endLine":189,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":198,"column":35,"nodeType":"4113","messageId":"4114","endLine":198,"endColumn":37},{"ruleId":"4111","severity":1,"message":"4112","line":199,"column":35,"nodeType":"4113","messageId":"4114","endLine":199,"endColumn":37},{"ruleId":"4111","severity":1,"message":"4112","line":207,"column":40,"nodeType":"4113","messageId":"4114","endLine":207,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":208,"column":40,"nodeType":"4113","messageId":"4114","endLine":208,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":215,"column":38,"nodeType":"4113","messageId":"4114","endLine":215,"endColumn":40},{"ruleId":"4111","severity":1,"message":"4112","line":216,"column":38,"nodeType":"4113","messageId":"4114","endLine":216,"endColumn":40},{"ruleId":"4111","severity":1,"message":"4112","line":221,"column":39,"nodeType":"4113","messageId":"4114","endLine":221,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":222,"column":39,"nodeType":"4113","messageId":"4114","endLine":222,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":231,"column":36,"nodeType":"4113","messageId":"4114","endLine":231,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":232,"column":36,"nodeType":"4113","messageId":"4114","endLine":232,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":239,"column":35,"nodeType":"4113","messageId":"4114","endLine":239,"endColumn":37},{"ruleId":"4111","severity":1,"message":"4112","line":240,"column":35,"nodeType":"4113","messageId":"4114","endLine":240,"endColumn":37},{"ruleId":"4111","severity":1,"message":"4112","line":247,"column":40,"nodeType":"4113","messageId":"4114","endLine":247,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":248,"column":40,"nodeType":"4113","messageId":"4114","endLine":248,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":257,"column":28,"nodeType":"4113","messageId":"4114","endLine":257,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":270,"column":30,"nodeType":"4113","messageId":"4114","endLine":270,"endColumn":32},{"ruleId":"4111","severity":1,"message":"4112","line":286,"column":36,"nodeType":"4113","messageId":"4114","endLine":286,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4136","line":321,"column":66,"nodeType":"4113","messageId":"4114","endLine":321,"endColumn":68},{"ruleId":"4111","severity":1,"message":"4112","line":394,"column":34,"nodeType":"4113","messageId":"4114","endLine":394,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4136","line":432,"column":34,"nodeType":"4113","messageId":"4114","endLine":432,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4136","line":492,"column":78,"nodeType":"4113","messageId":"4114","endLine":492,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":494,"column":74,"nodeType":"4113","messageId":"4114","endLine":494,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":496,"column":78,"nodeType":"4113","messageId":"4114","endLine":496,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":498,"column":74,"nodeType":"4113","messageId":"4114","endLine":498,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":506,"column":67,"nodeType":"4113","messageId":"4114","endLine":506,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":538,"column":67,"nodeType":"4113","messageId":"4114","endLine":538,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":539,"column":76,"nodeType":"4113","messageId":"4114","endLine":539,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":542,"column":67,"nodeType":"4113","messageId":"4114","endLine":542,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":543,"column":76,"nodeType":"4113","messageId":"4114","endLine":543,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":578,"column":78,"nodeType":"4113","messageId":"4114","endLine":578,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":580,"column":71,"nodeType":"4113","messageId":"4114","endLine":580,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4136","line":582,"column":78,"nodeType":"4113","messageId":"4114","endLine":582,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":584,"column":71,"nodeType":"4113","messageId":"4114","endLine":584,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4136","line":591,"column":67,"nodeType":"4113","messageId":"4114","endLine":591,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":612,"column":67,"nodeType":"4113","messageId":"4114","endLine":612,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":613,"column":74,"nodeType":"4113","messageId":"4114","endLine":613,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":616,"column":67,"nodeType":"4113","messageId":"4114","endLine":616,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":617,"column":73,"nodeType":"4113","messageId":"4114","endLine":617,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":673,"column":78,"nodeType":"4113","messageId":"4114","endLine":673,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":675,"column":71,"nodeType":"4113","messageId":"4114","endLine":675,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4136","line":677,"column":78,"nodeType":"4113","messageId":"4114","endLine":677,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":679,"column":71,"nodeType":"4113","messageId":"4114","endLine":679,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4136","line":686,"column":67,"nodeType":"4113","messageId":"4114","endLine":686,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":706,"column":67,"nodeType":"4113","messageId":"4114","endLine":706,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":707,"column":73,"nodeType":"4113","messageId":"4114","endLine":707,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":710,"column":67,"nodeType":"4113","messageId":"4114","endLine":710,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":711,"column":73,"nodeType":"4113","messageId":"4114","endLine":711,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":790,"column":78,"nodeType":"4113","messageId":"4114","endLine":790,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":792,"column":76,"nodeType":"4113","messageId":"4114","endLine":792,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":794,"column":78,"nodeType":"4113","messageId":"4114","endLine":794,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":796,"column":76,"nodeType":"4113","messageId":"4114","endLine":796,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":804,"column":67,"nodeType":"4113","messageId":"4114","endLine":804,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":825,"column":67,"nodeType":"4113","messageId":"4114","endLine":825,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":826,"column":78,"nodeType":"4113","messageId":"4114","endLine":826,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":829,"column":67,"nodeType":"4113","messageId":"4114","endLine":829,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":830,"column":78,"nodeType":"4113","messageId":"4114","endLine":830,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":925,"column":79,"nodeType":"4113","messageId":"4114","endLine":925,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4112","line":927,"column":75,"nodeType":"4113","messageId":"4114","endLine":927,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":932,"column":78,"nodeType":"4113","messageId":"4114","endLine":932,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":934,"column":72,"nodeType":"4113","messageId":"4114","endLine":934,"endColumn":74},{"ruleId":"4111","severity":1,"message":"4136","line":935,"column":78,"nodeType":"4113","messageId":"4114","endLine":935,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":937,"column":71,"nodeType":"4113","messageId":"4114","endLine":937,"endColumn":73},{"ruleId":"4111","severity":1,"message":"4136","line":938,"column":78,"nodeType":"4113","messageId":"4114","endLine":938,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":940,"column":76,"nodeType":"4113","messageId":"4114","endLine":940,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4112","line":944,"column":55,"nodeType":"4113","messageId":"4114","endLine":944,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4136","line":945,"column":78,"nodeType":"4113","messageId":"4114","endLine":945,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":947,"column":75,"nodeType":"4113","messageId":"4114","endLine":947,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4112","line":951,"column":55,"nodeType":"4113","messageId":"4114","endLine":951,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4136","line":952,"column":78,"nodeType":"4113","messageId":"4114","endLine":952,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":954,"column":72,"nodeType":"4113","messageId":"4114","endLine":954,"endColumn":74},{"ruleId":"4111","severity":1,"message":"4112","line":958,"column":55,"nodeType":"4113","messageId":"4114","endLine":958,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4136","line":959,"column":78,"nodeType":"4113","messageId":"4114","endLine":959,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":961,"column":70,"nodeType":"4113","messageId":"4114","endLine":961,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4112","line":965,"column":55,"nodeType":"4113","messageId":"4114","endLine":965,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4136","line":966,"column":78,"nodeType":"4113","messageId":"4114","endLine":966,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":968,"column":75,"nodeType":"4113","messageId":"4114","endLine":968,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":1003,"column":53,"nodeType":"4113","messageId":"4114","endLine":1003,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4136","line":1051,"column":37,"nodeType":"4113","messageId":"4114","endLine":1051,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":59,"column":36,"nodeType":"4113","messageId":"4114","endLine":59,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":70,"column":8,"nodeType":"4124","endLine":70,"endColumn":17,"suggestions":"4248"},{"ruleId":"4111","severity":1,"message":"4112","line":122,"column":36,"nodeType":"4113","messageId":"4114","endLine":122,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":131,"column":36,"nodeType":"4113","messageId":"4114","endLine":131,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":183,"column":47,"nodeType":"4113","messageId":"4114","endLine":183,"endColumn":49},{"ruleId":"4105","severity":1,"message":"4213","line":2,"column":5,"nodeType":"4107","messageId":"4108","endLine":2,"endColumn":15},{"ruleId":"4105","severity":1,"message":"4133","line":8,"column":5,"nodeType":"4107","messageId":"4108","endLine":8,"endColumn":9},{"ruleId":"4105","severity":1,"message":"4249","line":9,"column":5,"nodeType":"4107","messageId":"4108","endLine":9,"endColumn":9},{"ruleId":"4122","severity":1,"message":"4189","line":98,"column":8,"nodeType":"4124","endLine":98,"endColumn":42,"suggestions":"4250"},{"ruleId":"4111","severity":1,"message":"4112","line":153,"column":32,"nodeType":"4113","messageId":"4114","endLine":153,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":184,"column":36,"nodeType":"4113","messageId":"4114","endLine":184,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":185,"column":36,"nodeType":"4113","messageId":"4114","endLine":185,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":196,"column":38,"nodeType":"4113","messageId":"4114","endLine":196,"endColumn":40},{"ruleId":"4111","severity":1,"message":"4112","line":197,"column":38,"nodeType":"4113","messageId":"4114","endLine":197,"endColumn":40},{"ruleId":"4111","severity":1,"message":"4112","line":205,"column":40,"nodeType":"4113","messageId":"4114","endLine":205,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":206,"column":40,"nodeType":"4113","messageId":"4114","endLine":206,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":212,"column":35,"nodeType":"4113","messageId":"4114","endLine":212,"endColumn":37},{"ruleId":"4111","severity":1,"message":"4112","line":213,"column":35,"nodeType":"4113","messageId":"4114","endLine":213,"endColumn":37},{"ruleId":"4111","severity":1,"message":"4112","line":221,"column":61,"nodeType":"4113","messageId":"4114","endLine":221,"endColumn":63},{"ruleId":"4111","severity":1,"message":"4112","line":222,"column":61,"nodeType":"4113","messageId":"4114","endLine":222,"endColumn":63},{"ruleId":"4111","severity":1,"message":"4112","line":230,"column":61,"nodeType":"4113","messageId":"4114","endLine":230,"endColumn":63},{"ruleId":"4111","severity":1,"message":"4112","line":231,"column":61,"nodeType":"4113","messageId":"4114","endLine":231,"endColumn":63},{"ruleId":"4111","severity":1,"message":"4112","line":238,"column":36,"nodeType":"4113","messageId":"4114","endLine":238,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":239,"column":38,"nodeType":"4113","messageId":"4114","endLine":239,"endColumn":40},{"ruleId":"4111","severity":1,"message":"4112","line":241,"column":32,"nodeType":"4113","messageId":"4114","endLine":241,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":242,"column":31,"nodeType":"4113","messageId":"4114","endLine":242,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4112","line":252,"column":39,"nodeType":"4113","messageId":"4114","endLine":252,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":255,"column":40,"nodeType":"4113","messageId":"4114","endLine":255,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":256,"column":40,"nodeType":"4113","messageId":"4114","endLine":256,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":265,"column":42,"nodeType":"4113","messageId":"4114","endLine":265,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":266,"column":42,"nodeType":"4113","messageId":"4114","endLine":266,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":273,"column":44,"nodeType":"4113","messageId":"4114","endLine":273,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":274,"column":44,"nodeType":"4113","messageId":"4114","endLine":274,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":279,"column":39,"nodeType":"4113","messageId":"4114","endLine":279,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":280,"column":39,"nodeType":"4113","messageId":"4114","endLine":280,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":287,"column":65,"nodeType":"4113","messageId":"4114","endLine":287,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4112","line":288,"column":65,"nodeType":"4113","messageId":"4114","endLine":288,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4112","line":295,"column":65,"nodeType":"4113","messageId":"4114","endLine":295,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4112","line":296,"column":65,"nodeType":"4113","messageId":"4114","endLine":296,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4112","line":302,"column":40,"nodeType":"4113","messageId":"4114","endLine":302,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":303,"column":42,"nodeType":"4113","messageId":"4114","endLine":303,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":305,"column":36,"nodeType":"4113","messageId":"4114","endLine":305,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":306,"column":35,"nodeType":"4113","messageId":"4114","endLine":306,"endColumn":37},{"ruleId":"4111","severity":1,"message":"4112","line":317,"column":28,"nodeType":"4113","messageId":"4114","endLine":317,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":345,"column":66,"nodeType":"4113","messageId":"4114","endLine":345,"endColumn":68},{"ruleId":"4111","severity":1,"message":"4112","line":407,"column":34,"nodeType":"4113","messageId":"4114","endLine":407,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4136","line":445,"column":34,"nodeType":"4113","messageId":"4114","endLine":445,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4136","line":549,"column":78,"nodeType":"4113","messageId":"4114","endLine":549,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":551,"column":74,"nodeType":"4113","messageId":"4114","endLine":551,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":553,"column":78,"nodeType":"4113","messageId":"4114","endLine":553,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":555,"column":74,"nodeType":"4113","messageId":"4114","endLine":555,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":563,"column":67,"nodeType":"4113","messageId":"4114","endLine":563,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":585,"column":67,"nodeType":"4113","messageId":"4114","endLine":585,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":586,"column":76,"nodeType":"4113","messageId":"4114","endLine":586,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":589,"column":67,"nodeType":"4113","messageId":"4114","endLine":589,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":590,"column":76,"nodeType":"4113","messageId":"4114","endLine":590,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":620,"column":67,"nodeType":"4113","messageId":"4114","endLine":620,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":668,"column":67,"nodeType":"4113","messageId":"4114","endLine":668,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":707,"column":78,"nodeType":"4113","messageId":"4114","endLine":707,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":717,"column":67,"nodeType":"4113","messageId":"4114","endLine":717,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":726,"column":78,"nodeType":"4113","messageId":"4114","endLine":726,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":774,"column":78,"nodeType":"4113","messageId":"4114","endLine":774,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":776,"column":76,"nodeType":"4113","messageId":"4114","endLine":776,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":778,"column":78,"nodeType":"4113","messageId":"4114","endLine":778,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":780,"column":76,"nodeType":"4113","messageId":"4114","endLine":780,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":788,"column":67,"nodeType":"4113","messageId":"4114","endLine":788,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":809,"column":67,"nodeType":"4113","messageId":"4114","endLine":809,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":810,"column":78,"nodeType":"4113","messageId":"4114","endLine":810,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":813,"column":67,"nodeType":"4113","messageId":"4114","endLine":813,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":814,"column":78,"nodeType":"4113","messageId":"4114","endLine":814,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":862,"column":78,"nodeType":"4113","messageId":"4114","endLine":862,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":864,"column":78,"nodeType":"4113","messageId":"4114","endLine":864,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":866,"column":78,"nodeType":"4113","messageId":"4114","endLine":866,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":868,"column":78,"nodeType":"4113","messageId":"4114","endLine":868,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":876,"column":67,"nodeType":"4113","messageId":"4114","endLine":876,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":898,"column":67,"nodeType":"4113","messageId":"4114","endLine":898,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":899,"column":76,"nodeType":"4113","messageId":"4114","endLine":899,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":929,"column":78,"nodeType":"4113","messageId":"4114","endLine":929,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":931,"column":73,"nodeType":"4113","messageId":"4114","endLine":931,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":933,"column":78,"nodeType":"4113","messageId":"4114","endLine":933,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":935,"column":73,"nodeType":"4113","messageId":"4114","endLine":935,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":943,"column":67,"nodeType":"4113","messageId":"4114","endLine":943,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":964,"column":67,"nodeType":"4113","messageId":"4114","endLine":964,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":965,"column":75,"nodeType":"4113","messageId":"4114","endLine":965,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":968,"column":67,"nodeType":"4113","messageId":"4114","endLine":968,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":969,"column":75,"nodeType":"4113","messageId":"4114","endLine":969,"endColumn":77},{"ruleId":"4111","severity":1,"message":"4136","line":1010,"column":78,"nodeType":"4113","messageId":"4114","endLine":1010,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1014,"column":74,"nodeType":"4113","messageId":"4114","endLine":1014,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":1016,"column":78,"nodeType":"4113","messageId":"4114","endLine":1016,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1020,"column":74,"nodeType":"4113","messageId":"4114","endLine":1020,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":1028,"column":67,"nodeType":"4113","messageId":"4114","endLine":1028,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":1040,"column":67,"nodeType":"4113","messageId":"4114","endLine":1040,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":1043,"column":76,"nodeType":"4113","messageId":"4114","endLine":1043,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1046,"column":67,"nodeType":"4113","messageId":"4114","endLine":1046,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":1049,"column":76,"nodeType":"4113","messageId":"4114","endLine":1049,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1057,"column":67,"nodeType":"4113","messageId":"4114","endLine":1057,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":1093,"column":67,"nodeType":"4113","messageId":"4114","endLine":1093,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":1096,"column":76,"nodeType":"4113","messageId":"4114","endLine":1096,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1099,"column":67,"nodeType":"4113","messageId":"4114","endLine":1099,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":1102,"column":76,"nodeType":"4113","messageId":"4114","endLine":1102,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1113,"column":67,"nodeType":"4113","messageId":"4114","endLine":1113,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":1116,"column":76,"nodeType":"4113","messageId":"4114","endLine":1116,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1119,"column":67,"nodeType":"4113","messageId":"4114","endLine":1119,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":1122,"column":76,"nodeType":"4113","messageId":"4114","endLine":1122,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4112","line":1152,"column":68,"nodeType":"4113","messageId":"4114","endLine":1152,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4112","line":1154,"column":70,"nodeType":"4113","messageId":"4114","endLine":1154,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":1157,"column":78,"nodeType":"4113","messageId":"4114","endLine":1157,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1159,"column":70,"nodeType":"4113","messageId":"4114","endLine":1159,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":1161,"column":78,"nodeType":"4113","messageId":"4114","endLine":1161,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1163,"column":70,"nodeType":"4113","messageId":"4114","endLine":1163,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":1170,"column":67,"nodeType":"4113","messageId":"4114","endLine":1170,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":1181,"column":68,"nodeType":"4113","messageId":"4114","endLine":1181,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4112","line":1183,"column":70,"nodeType":"4113","messageId":"4114","endLine":1183,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":1195,"column":67,"nodeType":"4113","messageId":"4114","endLine":1195,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":1196,"column":72,"nodeType":"4113","messageId":"4114","endLine":1196,"endColumn":74},{"ruleId":"4111","severity":1,"message":"4136","line":1199,"column":67,"nodeType":"4113","messageId":"4114","endLine":1199,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":1200,"column":72,"nodeType":"4113","messageId":"4114","endLine":1200,"endColumn":74},{"ruleId":"4111","severity":1,"message":"4136","line":1301,"column":67,"nodeType":"4113","messageId":"4114","endLine":1301,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":1351,"column":67,"nodeType":"4113","messageId":"4114","endLine":1351,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":1479,"column":67,"nodeType":"4113","messageId":"4114","endLine":1479,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4136","line":1646,"column":79,"nodeType":"4113","messageId":"4114","endLine":1646,"endColumn":81},{"ruleId":"4111","severity":1,"message":"4136","line":1650,"column":78,"nodeType":"4113","messageId":"4114","endLine":1650,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1652,"column":76,"nodeType":"4113","messageId":"4114","endLine":1652,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4136","line":1654,"column":78,"nodeType":"4113","messageId":"4114","endLine":1654,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1656,"column":74,"nodeType":"4113","messageId":"4114","endLine":1656,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":1658,"column":78,"nodeType":"4113","messageId":"4114","endLine":1658,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1660,"column":78,"nodeType":"4113","messageId":"4114","endLine":1660,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4136","line":1662,"column":78,"nodeType":"4113","messageId":"4114","endLine":1662,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1664,"column":73,"nodeType":"4113","messageId":"4114","endLine":1664,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4136","line":1666,"column":78,"nodeType":"4113","messageId":"4114","endLine":1666,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1670,"column":74,"nodeType":"4113","messageId":"4114","endLine":1670,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":1672,"column":78,"nodeType":"4113","messageId":"4114","endLine":1672,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1676,"column":74,"nodeType":"4113","messageId":"4114","endLine":1676,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4136","line":1678,"column":78,"nodeType":"4113","messageId":"4114","endLine":1678,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1680,"column":70,"nodeType":"4113","messageId":"4114","endLine":1680,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4112","line":1695,"column":55,"nodeType":"4113","messageId":"4114","endLine":1695,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4136","line":1696,"column":78,"nodeType":"4113","messageId":"4114","endLine":1696,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1698,"column":74,"nodeType":"4113","messageId":"4114","endLine":1698,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":1702,"column":55,"nodeType":"4113","messageId":"4114","endLine":1702,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4136","line":1703,"column":78,"nodeType":"4113","messageId":"4114","endLine":1703,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1705,"column":76,"nodeType":"4113","messageId":"4114","endLine":1705,"endColumn":78},{"ruleId":"4111","severity":1,"message":"4112","line":1709,"column":55,"nodeType":"4113","messageId":"4114","endLine":1709,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4136","line":1710,"column":78,"nodeType":"4113","messageId":"4114","endLine":1710,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1712,"column":78,"nodeType":"4113","messageId":"4114","endLine":1712,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1716,"column":55,"nodeType":"4113","messageId":"4114","endLine":1716,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4136","line":1717,"column":78,"nodeType":"4113","messageId":"4114","endLine":1717,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1719,"column":73,"nodeType":"4113","messageId":"4114","endLine":1719,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4112","line":1725,"column":55,"nodeType":"4113","messageId":"4114","endLine":1725,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4136","line":1726,"column":78,"nodeType":"4113","messageId":"4114","endLine":1726,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1730,"column":74,"nodeType":"4113","messageId":"4114","endLine":1730,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":1736,"column":55,"nodeType":"4113","messageId":"4114","endLine":1736,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4136","line":1737,"column":78,"nodeType":"4113","messageId":"4114","endLine":1737,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1741,"column":74,"nodeType":"4113","messageId":"4114","endLine":1741,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":1745,"column":68,"nodeType":"4113","messageId":"4114","endLine":1745,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4112","line":1747,"column":70,"nodeType":"4113","messageId":"4114","endLine":1747,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":1750,"column":78,"nodeType":"4113","messageId":"4114","endLine":1750,"endColumn":80},{"ruleId":"4111","severity":1,"message":"4112","line":1752,"column":70,"nodeType":"4113","messageId":"4114","endLine":1752,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4136","line":1787,"column":53,"nodeType":"4113","messageId":"4114","endLine":1787,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4136","line":1835,"column":37,"nodeType":"4113","messageId":"4114","endLine":1835,"endColumn":39},{"ruleId":"4105","severity":1,"message":"4251","line":33,"column":12,"nodeType":"4107","messageId":"4108","endLine":33,"endColumn":21},{"ruleId":"4105","severity":1,"message":"4252","line":33,"column":23,"nodeType":"4107","messageId":"4108","endLine":33,"endColumn":35},{"ruleId":"4122","severity":1,"message":"4253","line":60,"column":8,"nodeType":"4124","endLine":60,"endColumn":17,"suggestions":"4254"},{"ruleId":"4122","severity":1,"message":"4255","line":106,"column":8,"nodeType":"4124","endLine":106,"endColumn":28,"suggestions":"4256"},{"ruleId":"4111","severity":1,"message":"4112","line":330,"column":95,"nodeType":"4113","messageId":"4114","endLine":330,"endColumn":97},{"ruleId":"4122","severity":1,"message":"4257","line":52,"column":8,"nodeType":"4124","endLine":52,"endColumn":17,"suggestions":"4258"},{"ruleId":"4105","severity":1,"message":"4259","line":55,"column":11,"nodeType":"4107","messageId":"4108","endLine":55,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4112","line":92,"column":36,"nodeType":"4113","messageId":"4114","endLine":92,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":44,"column":36,"nodeType":"4113","messageId":"4114","endLine":44,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":56,"column":8,"nodeType":"4124","endLine":56,"endColumn":17,"suggestions":"4260"},{"ruleId":"4111","severity":1,"message":"4112","line":69,"column":32,"nodeType":"4113","messageId":"4114","endLine":69,"endColumn":34},{"ruleId":"4105","severity":1,"message":"4261","line":85,"column":11,"nodeType":"4107","messageId":"4108","endLine":85,"endColumn":16},{"ruleId":"4111","severity":1,"message":"4136","line":201,"column":38,"nodeType":"4113","messageId":"4114","endLine":201,"endColumn":40},{"ruleId":"4111","severity":1,"message":"4112","line":201,"column":56,"nodeType":"4113","messageId":"4114","endLine":201,"endColumn":58},{"ruleId":"4111","severity":1,"message":"4112","line":237,"column":44,"nodeType":"4113","messageId":"4114","endLine":237,"endColumn":46},{"ruleId":"4122","severity":1,"message":"4253","line":53,"column":8,"nodeType":"4124","endLine":53,"endColumn":10,"suggestions":"4262"},{"ruleId":"4139","severity":1,"message":"4140","line":39,"column":38,"nodeType":"4113","messageId":"4141","endLine":39,"endColumn":39},{"ruleId":"4122","severity":1,"message":"4123","line":53,"column":8,"nodeType":"4124","endLine":53,"endColumn":17,"suggestions":"4263"},{"ruleId":"4139","severity":1,"message":"4140","line":80,"column":48,"nodeType":"4113","messageId":"4141","endLine":80,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":82,"column":36,"nodeType":"4113","messageId":"4114","endLine":82,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":51,"column":32,"nodeType":"4113","messageId":"4114","endLine":51,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":53,"column":39,"nodeType":"4113","messageId":"4114","endLine":53,"endColumn":41},{"ruleId":"4122","severity":1,"message":"4264","line":62,"column":8,"nodeType":"4124","endLine":62,"endColumn":17,"suggestions":"4265"},{"ruleId":"4111","severity":1,"message":"4112","line":87,"column":28,"nodeType":"4113","messageId":"4114","endLine":87,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":99,"column":74,"nodeType":"4113","messageId":"4114","endLine":99,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":116,"column":44,"nodeType":"4113","messageId":"4114","endLine":116,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":125,"column":31,"nodeType":"4113","messageId":"4114","endLine":125,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4112","line":142,"column":28,"nodeType":"4113","messageId":"4114","endLine":142,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":150,"column":68,"nodeType":"4113","messageId":"4114","endLine":150,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4112","line":161,"column":44,"nodeType":"4113","messageId":"4114","endLine":161,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":185,"column":28,"nodeType":"4113","messageId":"4114","endLine":185,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":229,"column":65,"nodeType":"4113","messageId":"4114","endLine":229,"endColumn":67},{"ruleId":"4111","severity":1,"message":"4112","line":271,"column":54,"nodeType":"4113","messageId":"4114","endLine":271,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":273,"column":60,"nodeType":"4113","messageId":"4114","endLine":273,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":283,"column":61,"nodeType":"4113","messageId":"4114","endLine":283,"endColumn":63},{"ruleId":"4111","severity":1,"message":"4112","line":293,"column":54,"nodeType":"4113","messageId":"4114","endLine":293,"endColumn":56},{"ruleId":"4122","severity":1,"message":"4266","line":335,"column":8,"nodeType":"4124","endLine":335,"endColumn":23,"suggestions":"4267"},{"ruleId":"4105","severity":1,"message":"4232","line":6,"column":18,"nodeType":"4107","messageId":"4108","endLine":6,"endColumn":21},{"ruleId":"4111","severity":1,"message":"4112","line":39,"column":36,"nodeType":"4113","messageId":"4114","endLine":39,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":68,"column":36,"nodeType":"4113","messageId":"4114","endLine":68,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":133,"column":44,"nodeType":"4113","messageId":"4114","endLine":133,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":144,"column":44,"nodeType":"4113","messageId":"4114","endLine":144,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":156,"column":44,"nodeType":"4113","messageId":"4114","endLine":156,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":186,"column":53,"nodeType":"4113","messageId":"4114","endLine":186,"endColumn":55},{"ruleId":"4139","severity":1,"message":"4140","line":39,"column":38,"nodeType":"4113","messageId":"4141","endLine":39,"endColumn":39},{"ruleId":"4122","severity":1,"message":"4123","line":53,"column":8,"nodeType":"4124","endLine":53,"endColumn":17,"suggestions":"4268"},{"ruleId":"4139","severity":1,"message":"4140","line":80,"column":48,"nodeType":"4113","messageId":"4141","endLine":80,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":82,"column":36,"nodeType":"4113","messageId":"4114","endLine":82,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":259,"column":42,"nodeType":"4113","messageId":"4114","endLine":259,"endColumn":44},{"ruleId":"4139","severity":1,"message":"4140","line":39,"column":38,"nodeType":"4113","messageId":"4141","endLine":39,"endColumn":39},{"ruleId":"4122","severity":1,"message":"4123","line":53,"column":8,"nodeType":"4124","endLine":53,"endColumn":17,"suggestions":"4269"},{"ruleId":"4139","severity":1,"message":"4140","line":80,"column":48,"nodeType":"4113","messageId":"4141","endLine":80,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":82,"column":36,"nodeType":"4113","messageId":"4114","endLine":82,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":250,"column":42,"nodeType":"4113","messageId":"4114","endLine":250,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":38,"column":37,"nodeType":"4113","messageId":"4114","endLine":38,"endColumn":39},{"ruleId":"4122","severity":1,"message":"4203","line":55,"column":8,"nodeType":"4124","endLine":55,"endColumn":10,"suggestions":"4270"},{"ruleId":"4111","severity":1,"message":"4112","line":59,"column":21,"nodeType":"4113","messageId":"4114","endLine":59,"endColumn":23},{"ruleId":"4111","severity":1,"message":"4112","line":63,"column":32,"nodeType":"4113","messageId":"4114","endLine":63,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":66,"column":28,"nodeType":"4113","messageId":"4114","endLine":66,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":70,"column":32,"nodeType":"4113","messageId":"4114","endLine":70,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":81,"column":33,"nodeType":"4113","messageId":"4114","endLine":81,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":145,"column":33,"nodeType":"4113","messageId":"4114","endLine":145,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":185,"column":33,"nodeType":"4113","messageId":"4114","endLine":185,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":37,"column":28,"nodeType":"4113","messageId":"4114","endLine":37,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":76,"column":63,"nodeType":"4113","messageId":"4114","endLine":76,"endColumn":65},{"ruleId":"4111","severity":1,"message":"4112","line":37,"column":28,"nodeType":"4113","messageId":"4114","endLine":37,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":76,"column":58,"nodeType":"4113","messageId":"4114","endLine":76,"endColumn":60},{"ruleId":"4105","severity":1,"message":"4115","line":1,"column":27,"nodeType":"4107","messageId":"4108","endLine":1,"endColumn":36},{"ruleId":"4105","severity":1,"message":"4271","line":2,"column":26,"nodeType":"4107","messageId":"4108","endLine":2,"endColumn":30},{"ruleId":"4105","severity":1,"message":"4272","line":5,"column":8,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":12},{"ruleId":"4111","severity":1,"message":"4112","line":41,"column":28,"nodeType":"4113","messageId":"4114","endLine":41,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":79,"column":54,"nodeType":"4113","messageId":"4114","endLine":79,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":37,"column":28,"nodeType":"4113","messageId":"4114","endLine":37,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":75,"column":60,"nodeType":"4113","messageId":"4114","endLine":75,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":50,"column":39,"nodeType":"4113","messageId":"4114","endLine":50,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":88,"column":63,"nodeType":"4113","messageId":"4114","endLine":88,"endColumn":65},{"ruleId":"4122","severity":1,"message":"4203","line":58,"column":8,"nodeType":"4124","endLine":58,"endColumn":10,"suggestions":"4273"},{"ruleId":"4216","severity":1,"message":"4217","line":100,"column":18,"nodeType":"4107","messageId":"4218","endLine":100,"endColumn":19},{"ruleId":"4111","severity":1,"message":"4112","line":117,"column":33,"nodeType":"4113","messageId":"4114","endLine":117,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":156,"column":33,"nodeType":"4113","messageId":"4114","endLine":156,"endColumn":35},{"ruleId":"4209","severity":1,"message":"4210","line":198,"column":17,"nodeType":"4169","endLine":203,"endColumn":19},{"ruleId":"4111","severity":1,"message":"4112","line":41,"column":37,"nodeType":"4113","messageId":"4114","endLine":41,"endColumn":39},{"ruleId":"4122","severity":1,"message":"4274","line":60,"column":8,"nodeType":"4124","endLine":60,"endColumn":10,"suggestions":"4275"},{"ruleId":"4111","severity":1,"message":"4112","line":123,"column":28,"nodeType":"4113","messageId":"4114","endLine":123,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":126,"column":37,"nodeType":"4113","messageId":"4114","endLine":126,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":173,"column":33,"nodeType":"4113","messageId":"4114","endLine":173,"endColumn":35},{"ruleId":"4122","severity":1,"message":"4276","line":39,"column":8,"nodeType":"4124","endLine":39,"endColumn":10,"suggestions":"4277"},{"ruleId":"4111","severity":1,"message":"4112","line":55,"column":33,"nodeType":"4113","messageId":"4114","endLine":55,"endColumn":35},{"ruleId":"4209","severity":1,"message":"4210","line":100,"column":17,"nodeType":"4169","endLine":105,"endColumn":19},{"ruleId":"4111","severity":1,"message":"4112","line":121,"column":54,"nodeType":"4113","messageId":"4114","endLine":121,"endColumn":56},{"ruleId":"4105","severity":1,"message":"4271","line":2,"column":26,"nodeType":"4107","messageId":"4108","endLine":2,"endColumn":30},{"ruleId":"4122","severity":1,"message":"4203","line":37,"column":8,"nodeType":"4124","endLine":37,"endColumn":10,"suggestions":"4278"},{"ruleId":"4111","severity":1,"message":"4112","line":63,"column":33,"nodeType":"4113","messageId":"4114","endLine":63,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":99,"column":33,"nodeType":"4113","messageId":"4114","endLine":99,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":36,"column":32,"nodeType":"4113","messageId":"4114","endLine":36,"endColumn":34},{"ruleId":"4122","severity":1,"message":"4203","line":48,"column":8,"nodeType":"4124","endLine":48,"endColumn":10,"suggestions":"4279"},{"ruleId":"4111","severity":1,"message":"4112","line":104,"column":33,"nodeType":"4113","messageId":"4114","endLine":104,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":136,"column":33,"nodeType":"4113","messageId":"4114","endLine":136,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":19,"column":32,"nodeType":"4113","messageId":"4114","endLine":19,"endColumn":34},{"ruleId":"4122","severity":1,"message":"4203","line":36,"column":8,"nodeType":"4124","endLine":36,"endColumn":10,"suggestions":"4280"},{"ruleId":"4111","severity":1,"message":"4112","line":90,"column":33,"nodeType":"4113","messageId":"4114","endLine":90,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":126,"column":33,"nodeType":"4113","messageId":"4114","endLine":126,"endColumn":35},{"ruleId":"4105","severity":1,"message":"4281","line":15,"column":5,"nodeType":"4107","messageId":"4108","endLine":15,"endColumn":16},{"ruleId":"4105","severity":1,"message":"4282","line":16,"column":5,"nodeType":"4107","messageId":"4108","endLine":16,"endColumn":15},{"ruleId":"4105","severity":1,"message":"4283","line":17,"column":5,"nodeType":"4107","messageId":"4108","endLine":17,"endColumn":11},{"ruleId":"4111","severity":1,"message":"4112","line":72,"column":36,"nodeType":"4113","messageId":"4114","endLine":72,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4170","line":89,"column":8,"nodeType":"4124","endLine":89,"endColumn":23,"suggestions":"4284"},{"ruleId":"4105","severity":1,"message":"4285","line":100,"column":11,"nodeType":"4107","messageId":"4108","endLine":100,"endColumn":27},{"ruleId":"4111","severity":1,"message":"4112","line":110,"column":36,"nodeType":"4113","messageId":"4114","endLine":110,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":121,"column":36,"nodeType":"4113","messageId":"4114","endLine":121,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":189,"column":47,"nodeType":"4113","messageId":"4114","endLine":189,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":258,"column":62,"nodeType":"4113","messageId":"4114","endLine":258,"endColumn":64},{"ruleId":"4105","severity":1,"message":"4199","line":3,"column":14,"nodeType":"4107","messageId":"4108","endLine":3,"endColumn":18},{"ruleId":"4105","severity":1,"message":"4205","line":21,"column":13,"nodeType":"4107","messageId":"4108","endLine":21,"endColumn":20},{"ruleId":"4122","severity":1,"message":"4131","line":38,"column":8,"nodeType":"4124","endLine":38,"endColumn":10,"suggestions":"4286"},{"ruleId":"4122","severity":1,"message":"4123","line":55,"column":8,"nodeType":"4124","endLine":55,"endColumn":17,"suggestions":"4287"},{"ruleId":"4105","severity":1,"message":"4230","line":14,"column":5,"nodeType":"4107","messageId":"4108","endLine":14,"endColumn":13},{"ruleId":"4111","severity":1,"message":"4112","line":68,"column":36,"nodeType":"4113","messageId":"4114","endLine":68,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":79,"column":8,"nodeType":"4124","endLine":79,"endColumn":10,"suggestions":"4288"},{"ruleId":"4111","severity":1,"message":"4112","line":97,"column":32,"nodeType":"4113","messageId":"4114","endLine":97,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4136","line":143,"column":61,"nodeType":"4113","messageId":"4114","endLine":143,"endColumn":63},{"ruleId":"4111","severity":1,"message":"4136","line":152,"column":54,"nodeType":"4113","messageId":"4114","endLine":152,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4136","line":173,"column":56,"nodeType":"4113","messageId":"4114","endLine":173,"endColumn":58},{"ruleId":"4122","severity":1,"message":"4172","line":195,"column":8,"nodeType":"4124","endLine":195,"endColumn":20,"suggestions":"4289"},{"ruleId":"4111","severity":1,"message":"4112","line":235,"column":44,"nodeType":"4113","messageId":"4114","endLine":235,"endColumn":46},{"ruleId":"4105","severity":1,"message":"4290","line":20,"column":8,"nodeType":"4107","messageId":"4108","endLine":20,"endColumn":16},{"ruleId":"4111","severity":1,"message":"4112","line":89,"column":36,"nodeType":"4113","messageId":"4114","endLine":89,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":100,"column":8,"nodeType":"4124","endLine":100,"endColumn":17,"suggestions":"4291"},{"ruleId":"4111","severity":1,"message":"4112","line":120,"column":32,"nodeType":"4113","messageId":"4114","endLine":120,"endColumn":34},{"ruleId":"4139","severity":1,"message":"4140","line":157,"column":48,"nodeType":"4113","messageId":"4141","endLine":157,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":159,"column":36,"nodeType":"4113","messageId":"4114","endLine":159,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4136","line":255,"column":51,"nodeType":"4113","messageId":"4114","endLine":255,"endColumn":53},{"ruleId":"4105","severity":1,"message":"4230","line":14,"column":5,"nodeType":"4107","messageId":"4108","endLine":14,"endColumn":13},{"ruleId":"4111","severity":1,"message":"4112","line":68,"column":36,"nodeType":"4113","messageId":"4114","endLine":68,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":79,"column":8,"nodeType":"4124","endLine":79,"endColumn":10,"suggestions":"4292"},{"ruleId":"4111","severity":1,"message":"4112","line":97,"column":32,"nodeType":"4113","messageId":"4114","endLine":97,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4136","line":141,"column":61,"nodeType":"4113","messageId":"4114","endLine":141,"endColumn":63},{"ruleId":"4111","severity":1,"message":"4136","line":150,"column":54,"nodeType":"4113","messageId":"4114","endLine":150,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4136","line":171,"column":56,"nodeType":"4113","messageId":"4114","endLine":171,"endColumn":58},{"ruleId":"4122","severity":1,"message":"4172","line":193,"column":8,"nodeType":"4124","endLine":193,"endColumn":20,"suggestions":"4293"},{"ruleId":"4111","severity":1,"message":"4112","line":231,"column":44,"nodeType":"4113","messageId":"4114","endLine":231,"endColumn":46},{"ruleId":"4105","severity":1,"message":"4126","line":8,"column":10,"nodeType":"4107","messageId":"4108","endLine":8,"endColumn":16},{"ruleId":"4122","severity":1,"message":"4294","line":53,"column":8,"nodeType":"4124","endLine":53,"endColumn":10,"suggestions":"4295"},{"ruleId":"4105","severity":1,"message":"4296","line":55,"column":11,"nodeType":"4107","messageId":"4108","endLine":55,"endColumn":25},{"ruleId":"4122","severity":1,"message":"4131","line":51,"column":8,"nodeType":"4124","endLine":51,"endColumn":10,"suggestions":"4297"},{"ruleId":"4139","severity":1,"message":"4140","line":33,"column":48,"nodeType":"4113","messageId":"4141","endLine":33,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":35,"column":36,"nodeType":"4113","messageId":"4114","endLine":35,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":46,"column":8,"nodeType":"4124","endLine":46,"endColumn":10,"suggestions":"4298"},{"ruleId":"4139","severity":1,"message":"4140","line":49,"column":55,"nodeType":"4113","messageId":"4141","endLine":49,"endColumn":56},{"ruleId":"4122","severity":1,"message":"4128","line":62,"column":8,"nodeType":"4124","endLine":62,"endColumn":17,"suggestions":"4299"},{"ruleId":"4111","severity":1,"message":"4112","line":72,"column":38,"nodeType":"4113","messageId":"4114","endLine":72,"endColumn":40},{"ruleId":"4122","severity":1,"message":"4131","line":92,"column":8,"nodeType":"4124","endLine":92,"endColumn":18,"suggestions":"4300"},{"ruleId":"4111","severity":1,"message":"4112","line":104,"column":33,"nodeType":"4113","messageId":"4114","endLine":104,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":131,"column":32,"nodeType":"4113","messageId":"4114","endLine":131,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":147,"column":37,"nodeType":"4113","messageId":"4114","endLine":147,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":148,"column":37,"nodeType":"4113","messageId":"4114","endLine":148,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":149,"column":37,"nodeType":"4113","messageId":"4114","endLine":149,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":150,"column":37,"nodeType":"4113","messageId":"4114","endLine":150,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":155,"column":52,"nodeType":"4113","messageId":"4114","endLine":155,"endColumn":54},{"ruleId":"4111","severity":1,"message":"4112","line":166,"column":36,"nodeType":"4113","messageId":"4114","endLine":166,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4136","line":213,"column":60,"nodeType":"4113","messageId":"4114","endLine":213,"endColumn":62},{"ruleId":"4122","severity":1,"message":"4143","line":252,"column":8,"nodeType":"4124","endLine":252,"endColumn":25,"suggestions":"4301"},{"ruleId":"4111","severity":1,"message":"4136","line":297,"column":60,"nodeType":"4113","messageId":"4114","endLine":297,"endColumn":62},{"ruleId":"4122","severity":1,"message":"4145","line":337,"column":8,"nodeType":"4124","endLine":337,"endColumn":50,"suggestions":"4302"},{"ruleId":"4111","severity":1,"message":"4112","line":412,"column":37,"nodeType":"4113","messageId":"4114","endLine":412,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":412,"column":60,"nodeType":"4113","messageId":"4114","endLine":412,"endColumn":62},{"ruleId":"4122","severity":1,"message":"4128","line":51,"column":8,"nodeType":"4124","endLine":51,"endColumn":17,"suggestions":"4303"},{"ruleId":"4111","severity":1,"message":"4112","line":68,"column":33,"nodeType":"4113","messageId":"4114","endLine":68,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":85,"column":29,"nodeType":"4113","messageId":"4114","endLine":85,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4112","line":98,"column":32,"nodeType":"4113","messageId":"4114","endLine":98,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":124,"column":33,"nodeType":"4113","messageId":"4114","endLine":124,"endColumn":35},{"ruleId":"4122","severity":1,"message":"4143","line":206,"column":8,"nodeType":"4124","endLine":206,"endColumn":32,"suggestions":"4304"},{"ruleId":"4122","severity":1,"message":"4145","line":296,"column":8,"nodeType":"4124","endLine":296,"endColumn":43,"suggestions":"4305"},{"ruleId":"4105","severity":1,"message":"4306","line":5,"column":10,"nodeType":"4107","messageId":"4108","endLine":5,"endColumn":21},{"ruleId":"4122","severity":1,"message":"4131","line":38,"column":8,"nodeType":"4124","endLine":38,"endColumn":10,"suggestions":"4307"},{"ruleId":"4111","severity":1,"message":"4112","line":83,"column":36,"nodeType":"4113","messageId":"4114","endLine":83,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":94,"column":8,"nodeType":"4124","endLine":94,"endColumn":17,"suggestions":"4308"},{"ruleId":"4111","severity":1,"message":"4112","line":108,"column":28,"nodeType":"4113","messageId":"4114","endLine":108,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":212,"column":51,"nodeType":"4113","messageId":"4114","endLine":212,"endColumn":53},{"ruleId":"4139","severity":1,"message":"4140","line":33,"column":48,"nodeType":"4113","messageId":"4141","endLine":33,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":35,"column":36,"nodeType":"4113","messageId":"4114","endLine":35,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":46,"column":8,"nodeType":"4124","endLine":46,"endColumn":10,"suggestions":"4309"},{"ruleId":"4139","severity":1,"message":"4140","line":36,"column":55,"nodeType":"4113","messageId":"4141","endLine":36,"endColumn":56},{"ruleId":"4122","severity":1,"message":"4128","line":49,"column":8,"nodeType":"4124","endLine":49,"endColumn":17,"suggestions":"4310"},{"ruleId":"4111","severity":1,"message":"4112","line":61,"column":33,"nodeType":"4113","messageId":"4114","endLine":61,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":88,"column":32,"nodeType":"4113","messageId":"4114","endLine":88,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":101,"column":48,"nodeType":"4113","messageId":"4114","endLine":101,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":112,"column":32,"nodeType":"4113","messageId":"4114","endLine":112,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":114,"column":43,"nodeType":"4113","messageId":"4114","endLine":114,"endColumn":45},{"ruleId":"4111","severity":1,"message":"4136","line":158,"column":60,"nodeType":"4113","messageId":"4114","endLine":158,"endColumn":62},{"ruleId":"4122","severity":1,"message":"4143","line":197,"column":8,"nodeType":"4124","endLine":197,"endColumn":25,"suggestions":"4311"},{"ruleId":"4111","severity":1,"message":"4136","line":242,"column":60,"nodeType":"4113","messageId":"4114","endLine":242,"endColumn":62},{"ruleId":"4122","severity":1,"message":"4145","line":282,"column":8,"nodeType":"4124","endLine":282,"endColumn":50,"suggestions":"4312"},{"ruleId":"4111","severity":1,"message":"4112","line":338,"column":37,"nodeType":"4113","messageId":"4114","endLine":338,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":338,"column":60,"nodeType":"4113","messageId":"4114","endLine":338,"endColumn":62},{"ruleId":"4122","severity":1,"message":"4128","line":51,"column":8,"nodeType":"4124","endLine":51,"endColumn":17,"suggestions":"4313"},{"ruleId":"4111","severity":1,"message":"4112","line":68,"column":33,"nodeType":"4113","messageId":"4114","endLine":68,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":86,"column":29,"nodeType":"4113","messageId":"4114","endLine":86,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4112","line":99,"column":32,"nodeType":"4113","messageId":"4114","endLine":99,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":125,"column":33,"nodeType":"4113","messageId":"4114","endLine":125,"endColumn":35},{"ruleId":"4122","severity":1,"message":"4143","line":206,"column":8,"nodeType":"4124","endLine":206,"endColumn":32,"suggestions":"4314"},{"ruleId":"4122","severity":1,"message":"4145","line":296,"column":8,"nodeType":"4124","endLine":296,"endColumn":43,"suggestions":"4315"},{"ruleId":"4122","severity":1,"message":"4128","line":43,"column":8,"nodeType":"4124","endLine":43,"endColumn":10,"suggestions":"4316"},{"ruleId":"4105","severity":1,"message":"4317","line":23,"column":12,"nodeType":"4107","messageId":"4108","endLine":23,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4318","line":23,"column":21,"nodeType":"4107","messageId":"4108","endLine":23,"endColumn":31},{"ruleId":"4139","severity":1,"message":"4140","line":34,"column":38,"nodeType":"4113","messageId":"4141","endLine":34,"endColumn":39},{"ruleId":"4122","severity":1,"message":"4123","line":47,"column":8,"nodeType":"4124","endLine":47,"endColumn":10,"suggestions":"4319"},{"ruleId":"4105","severity":1,"message":"4317","line":67,"column":12,"nodeType":"4107","messageId":"4108","endLine":67,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4318","line":67,"column":21,"nodeType":"4107","messageId":"4108","endLine":67,"endColumn":31},{"ruleId":"4320","severity":1,"message":"4321","line":72,"column":44,"nodeType":"4107","messageId":"4322","endLine":72,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":84,"column":36,"nodeType":"4113","messageId":"4114","endLine":84,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":95,"column":8,"nodeType":"4124","endLine":95,"endColumn":17,"suggestions":"4323"},{"ruleId":"4111","severity":1,"message":"4112","line":110,"column":28,"nodeType":"4113","messageId":"4114","endLine":110,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":215,"column":51,"nodeType":"4113","messageId":"4114","endLine":215,"endColumn":53},{"ruleId":"4111","severity":1,"message":"4136","line":216,"column":50,"nodeType":"4113","messageId":"4114","endLine":216,"endColumn":52},{"ruleId":"4139","severity":1,"message":"4140","line":33,"column":48,"nodeType":"4113","messageId":"4141","endLine":33,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":35,"column":36,"nodeType":"4113","messageId":"4114","endLine":35,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":46,"column":8,"nodeType":"4124","endLine":46,"endColumn":10,"suggestions":"4324"},{"ruleId":"4139","severity":1,"message":"4140","line":36,"column":45,"nodeType":"4113","messageId":"4141","endLine":36,"endColumn":46},{"ruleId":"4122","severity":1,"message":"4128","line":49,"column":6,"nodeType":"4124","endLine":49,"endColumn":15,"suggestions":"4325"},{"ruleId":"4111","severity":1,"message":"4112","line":62,"column":25,"nodeType":"4113","messageId":"4114","endLine":62,"endColumn":27},{"ruleId":"4111","severity":1,"message":"4112","line":86,"column":24,"nodeType":"4113","messageId":"4114","endLine":86,"endColumn":26},{"ruleId":"4111","severity":1,"message":"4112","line":99,"column":41,"nodeType":"4113","messageId":"4114","endLine":99,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":107,"column":24,"nodeType":"4113","messageId":"4114","endLine":107,"endColumn":26},{"ruleId":"4111","severity":1,"message":"4112","line":109,"column":33,"nodeType":"4113","messageId":"4114","endLine":109,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4136","line":151,"column":40,"nodeType":"4113","messageId":"4114","endLine":151,"endColumn":42},{"ruleId":"4122","severity":1,"message":"4143","line":190,"column":6,"nodeType":"4124","endLine":190,"endColumn":23,"suggestions":"4326"},{"ruleId":"4111","severity":1,"message":"4136","line":233,"column":40,"nodeType":"4113","messageId":"4114","endLine":233,"endColumn":42},{"ruleId":"4122","severity":1,"message":"4145","line":273,"column":6,"nodeType":"4124","endLine":273,"endColumn":47,"suggestions":"4327"},{"ruleId":"4111","severity":1,"message":"4112","line":322,"column":31,"nodeType":"4113","messageId":"4114","endLine":322,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4112","line":322,"column":55,"nodeType":"4113","messageId":"4114","endLine":322,"endColumn":57},{"ruleId":"4105","severity":1,"message":"4317","line":23,"column":12,"nodeType":"4107","messageId":"4108","endLine":23,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4318","line":23,"column":21,"nodeType":"4107","messageId":"4108","endLine":23,"endColumn":31},{"ruleId":"4139","severity":1,"message":"4140","line":34,"column":38,"nodeType":"4113","messageId":"4141","endLine":34,"endColumn":39},{"ruleId":"4122","severity":1,"message":"4123","line":47,"column":8,"nodeType":"4124","endLine":47,"endColumn":10,"suggestions":"4328"},{"ruleId":"4139","severity":1,"message":"4140","line":33,"column":38,"nodeType":"4113","messageId":"4141","endLine":33,"endColumn":39},{"ruleId":"4122","severity":1,"message":"4123","line":46,"column":8,"nodeType":"4124","endLine":46,"endColumn":10,"suggestions":"4329"},{"ruleId":"4139","severity":1,"message":"4140","line":28,"column":55,"nodeType":"4113","messageId":"4141","endLine":28,"endColumn":56},{"ruleId":"4111","severity":1,"message":"4112","line":31,"column":59,"nodeType":"4113","messageId":"4114","endLine":31,"endColumn":61},{"ruleId":"4122","severity":1,"message":"4131","line":42,"column":8,"nodeType":"4124","endLine":42,"endColumn":10,"suggestions":"4330"},{"ruleId":"4105","severity":1,"message":"4317","line":23,"column":12,"nodeType":"4107","messageId":"4108","endLine":23,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4318","line":23,"column":21,"nodeType":"4107","messageId":"4108","endLine":23,"endColumn":31},{"ruleId":"4139","severity":1,"message":"4140","line":34,"column":54,"nodeType":"4113","messageId":"4141","endLine":34,"endColumn":55},{"ruleId":"4122","severity":1,"message":"4123","line":47,"column":8,"nodeType":"4124","endLine":47,"endColumn":10,"suggestions":"4331"},{"ruleId":"4111","severity":1,"message":"4112","line":101,"column":39,"nodeType":"4113","messageId":"4114","endLine":101,"endColumn":41},{"ruleId":"4122","severity":1,"message":"4128","line":52,"column":8,"nodeType":"4124","endLine":52,"endColumn":10,"suggestions":"4332"},{"ruleId":"4139","severity":1,"message":"4140","line":57,"column":54,"nodeType":"4113","messageId":"4141","endLine":57,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":63,"column":40,"nodeType":"4113","messageId":"4114","endLine":63,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":66,"column":40,"nodeType":"4113","messageId":"4114","endLine":66,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":84,"column":33,"nodeType":"4113","messageId":"4114","endLine":84,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":109,"column":29,"nodeType":"4113","messageId":"4114","endLine":109,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4136","line":179,"column":60,"nodeType":"4113","messageId":"4114","endLine":179,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":223,"column":57,"nodeType":"4113","messageId":"4114","endLine":223,"endColumn":59},{"ruleId":"4122","severity":1,"message":"4333","line":237,"column":8,"nodeType":"4124","endLine":237,"endColumn":32,"suggestions":"4334"},{"ruleId":"4122","severity":1,"message":"4165","line":237,"column":9,"nodeType":"4166","endLine":237,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4136","line":279,"column":64,"nodeType":"4113","messageId":"4114","endLine":279,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4112","line":328,"column":61,"nodeType":"4113","messageId":"4114","endLine":328,"endColumn":63},{"ruleId":"4122","severity":1,"message":"4335","line":343,"column":8,"nodeType":"4124","endLine":343,"endColumn":58,"suggestions":"4336"},{"ruleId":"4122","severity":1,"message":"4165","line":343,"column":9,"nodeType":"4166","endLine":343,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":418,"column":37,"nodeType":"4113","messageId":"4114","endLine":418,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":419,"column":41,"nodeType":"4113","messageId":"4114","endLine":419,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":420,"column":38,"nodeType":"4113","messageId":"4114","endLine":420,"endColumn":40},{"ruleId":"4122","severity":1,"message":"4337","line":46,"column":8,"nodeType":"4124","endLine":46,"endColumn":10,"suggestions":"4338"},{"ruleId":"4111","severity":1,"message":"4112","line":84,"column":26,"nodeType":"4113","messageId":"4114","endLine":84,"endColumn":28},{"ruleId":"4111","severity":1,"message":"4112","line":94,"column":36,"nodeType":"4113","messageId":"4114","endLine":94,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":169,"column":63,"nodeType":"4113","messageId":"4114","endLine":169,"endColumn":65},{"ruleId":"4111","severity":1,"message":"4112","line":171,"column":68,"nodeType":"4113","messageId":"4114","endLine":171,"endColumn":70},{"ruleId":"4111","severity":1,"message":"4112","line":173,"column":74,"nodeType":"4113","messageId":"4114","endLine":173,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":177,"column":74,"nodeType":"4113","messageId":"4114","endLine":177,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":35,"column":36,"nodeType":"4113","messageId":"4114","endLine":35,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":46,"column":8,"nodeType":"4124","endLine":46,"endColumn":10,"suggestions":"4339"},{"ruleId":"4105","severity":1,"message":"4317","line":22,"column":12,"nodeType":"4107","messageId":"4108","endLine":22,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4318","line":22,"column":21,"nodeType":"4107","messageId":"4108","endLine":22,"endColumn":31},{"ruleId":"4122","severity":1,"message":"4131","line":43,"column":8,"nodeType":"4124","endLine":43,"endColumn":10,"suggestions":"4340"},{"ruleId":"4111","severity":1,"message":"4112","line":80,"column":26,"nodeType":"4113","messageId":"4114","endLine":80,"endColumn":28},{"ruleId":"4111","severity":1,"message":"4112","line":90,"column":36,"nodeType":"4113","messageId":"4114","endLine":90,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":156,"column":34,"nodeType":"4113","messageId":"4114","endLine":156,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":157,"column":46,"nodeType":"4113","messageId":"4114","endLine":157,"endColumn":48},{"ruleId":"4111","severity":1,"message":"4112","line":159,"column":48,"nodeType":"4113","messageId":"4114","endLine":159,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":162,"column":48,"nodeType":"4113","messageId":"4114","endLine":162,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":175,"column":49,"nodeType":"4113","messageId":"4114","endLine":175,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":176,"column":47,"nodeType":"4113","messageId":"4114","endLine":176,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":278,"column":40,"nodeType":"4113","messageId":"4114","endLine":278,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":286,"column":43,"nodeType":"4113","messageId":"4114","endLine":286,"endColumn":45},{"ruleId":"4111","severity":1,"message":"4112","line":301,"column":56,"nodeType":"4113","messageId":"4114","endLine":301,"endColumn":58},{"ruleId":"4105","severity":1,"message":"4341","line":14,"column":5,"nodeType":"4107","messageId":"4108","endLine":14,"endColumn":14},{"ruleId":"4122","severity":1,"message":"4128","line":51,"column":8,"nodeType":"4124","endLine":51,"endColumn":17,"suggestions":"4342"},{"ruleId":"4111","severity":1,"message":"4112","line":67,"column":33,"nodeType":"4113","messageId":"4114","endLine":67,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":85,"column":29,"nodeType":"4113","messageId":"4114","endLine":85,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4112","line":94,"column":32,"nodeType":"4113","messageId":"4114","endLine":94,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":116,"column":33,"nodeType":"4113","messageId":"4114","endLine":116,"endColumn":35},{"ruleId":"4122","severity":1,"message":"4143","line":197,"column":8,"nodeType":"4124","endLine":197,"endColumn":25,"suggestions":"4343"},{"ruleId":"4122","severity":1,"message":"4145","line":289,"column":8,"nodeType":"4124","endLine":289,"endColumn":50,"suggestions":"4344"},{"ruleId":"4111","severity":1,"message":"4112","line":354,"column":37,"nodeType":"4113","messageId":"4114","endLine":354,"endColumn":39},{"ruleId":"4105","severity":1,"message":"4290","line":17,"column":8,"nodeType":"4107","messageId":"4108","endLine":17,"endColumn":16},{"ruleId":"4111","severity":1,"message":"4112","line":86,"column":36,"nodeType":"4113","messageId":"4114","endLine":86,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":97,"column":8,"nodeType":"4124","endLine":97,"endColumn":17,"suggestions":"4345"},{"ruleId":"4111","severity":1,"message":"4112","line":111,"column":28,"nodeType":"4113","messageId":"4114","endLine":111,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":196,"column":49,"nodeType":"4113","messageId":"4114","endLine":196,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4136","line":197,"column":46,"nodeType":"4113","messageId":"4114","endLine":197,"endColumn":48},{"ruleId":"4105","severity":1,"message":"4290","line":19,"column":8,"nodeType":"4107","messageId":"4108","endLine":19,"endColumn":16},{"ruleId":"4111","severity":1,"message":"4112","line":85,"column":36,"nodeType":"4113","messageId":"4114","endLine":85,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":96,"column":8,"nodeType":"4124","endLine":96,"endColumn":17,"suggestions":"4346"},{"ruleId":"4111","severity":1,"message":"4112","line":105,"column":28,"nodeType":"4113","messageId":"4114","endLine":105,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":198,"column":51,"nodeType":"4113","messageId":"4114","endLine":198,"endColumn":53},{"ruleId":"4105","severity":1,"message":"4317","line":23,"column":12,"nodeType":"4107","messageId":"4108","endLine":23,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4318","line":23,"column":21,"nodeType":"4107","messageId":"4108","endLine":23,"endColumn":31},{"ruleId":"4139","severity":1,"message":"4140","line":34,"column":64,"nodeType":"4113","messageId":"4141","endLine":34,"endColumn":65},{"ruleId":"4122","severity":1,"message":"4123","line":50,"column":8,"nodeType":"4124","endLine":50,"endColumn":10,"suggestions":"4347"},{"ruleId":"4111","severity":1,"message":"4112","line":130,"column":34,"nodeType":"4113","messageId":"4114","endLine":130,"endColumn":36},{"ruleId":"4105","severity":1,"message":"4348","line":21,"column":19,"nodeType":"4107","messageId":"4108","endLine":21,"endColumn":25},{"ruleId":"4122","severity":1,"message":"4128","line":44,"column":6,"nodeType":"4124","endLine":44,"endColumn":15,"suggestions":"4349"},{"ruleId":"4111","severity":1,"message":"4112","line":139,"column":34,"nodeType":"4113","messageId":"4114","endLine":139,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":145,"column":34,"nodeType":"4113","messageId":"4114","endLine":145,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":158,"column":36,"nodeType":"4113","messageId":"4114","endLine":158,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":164,"column":36,"nodeType":"4113","messageId":"4114","endLine":164,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4350","line":176,"column":6,"nodeType":"4124","endLine":176,"endColumn":23,"suggestions":"4351"},{"ruleId":"4111","severity":1,"message":"4112","line":237,"column":34,"nodeType":"4113","messageId":"4114","endLine":237,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":243,"column":34,"nodeType":"4113","messageId":"4114","endLine":243,"endColumn":36},{"ruleId":"4111","severity":1,"message":"4112","line":257,"column":36,"nodeType":"4113","messageId":"4114","endLine":257,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":263,"column":36,"nodeType":"4113","messageId":"4114","endLine":263,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4352","line":275,"column":6,"nodeType":"4124","endLine":275,"endColumn":47,"suggestions":"4353"},{"ruleId":"4105","severity":1,"message":"4318","line":21,"column":21,"nodeType":"4107","messageId":"4108","endLine":21,"endColumn":31},{"ruleId":"4122","severity":1,"message":"4131","line":38,"column":8,"nodeType":"4124","endLine":38,"endColumn":17,"suggestions":"4354"},{"ruleId":"4122","severity":1,"message":"4123","line":53,"column":8,"nodeType":"4124","endLine":53,"endColumn":17,"suggestions":"4355"},{"ruleId":"4111","severity":1,"message":"4112","line":29,"column":32,"nodeType":"4113","messageId":"4114","endLine":29,"endColumn":34},{"ruleId":"4122","severity":1,"message":"4131","line":38,"column":8,"nodeType":"4124","endLine":38,"endColumn":17,"suggestions":"4356"},{"ruleId":"4105","severity":1,"message":"4357","line":27,"column":15,"nodeType":"4107","messageId":"4108","endLine":27,"endColumn":24},{"ruleId":"4139","severity":1,"message":"4140","line":33,"column":60,"nodeType":"4113","messageId":"4141","endLine":33,"endColumn":61},{"ruleId":"4111","severity":1,"message":"4112","line":35,"column":36,"nodeType":"4113","messageId":"4114","endLine":35,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":46,"column":8,"nodeType":"4124","endLine":46,"endColumn":10,"suggestions":"4358"},{"ruleId":"4111","severity":1,"message":"4112","line":128,"column":32,"nodeType":"4113","messageId":"4114","endLine":128,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":146,"column":36,"nodeType":"4113","messageId":"4114","endLine":146,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":157,"column":8,"nodeType":"4124","endLine":157,"endColumn":17,"suggestions":"4359"},{"ruleId":"4111","severity":1,"message":"4112","line":180,"column":28,"nodeType":"4113","messageId":"4114","endLine":180,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":229,"column":40,"nodeType":"4113","messageId":"4114","endLine":229,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":232,"column":48,"nodeType":"4113","messageId":"4114","endLine":232,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":236,"column":40,"nodeType":"4113","messageId":"4114","endLine":236,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":241,"column":55,"nodeType":"4113","messageId":"4114","endLine":241,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4112","line":245,"column":40,"nodeType":"4113","messageId":"4114","endLine":245,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":254,"column":40,"nodeType":"4113","messageId":"4114","endLine":254,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4136","line":542,"column":31,"nodeType":"4113","messageId":"4114","endLine":542,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4112","line":597,"column":58,"nodeType":"4113","messageId":"4114","endLine":597,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":29,"column":32,"nodeType":"4113","messageId":"4114","endLine":29,"endColumn":34},{"ruleId":"4122","severity":1,"message":"4131","line":38,"column":8,"nodeType":"4124","endLine":38,"endColumn":17,"suggestions":"4360"},{"ruleId":"4111","severity":1,"message":"4112","line":72,"column":32,"nodeType":"4113","messageId":"4114","endLine":72,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":94,"column":40,"nodeType":"4113","messageId":"4114","endLine":94,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":104,"column":23,"nodeType":"4113","messageId":"4114","endLine":104,"endColumn":25},{"ruleId":"4111","severity":1,"message":"4112","line":118,"column":40,"nodeType":"4113","messageId":"4114","endLine":118,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":120,"column":50,"nodeType":"4113","messageId":"4114","endLine":120,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":125,"column":50,"nodeType":"4113","messageId":"4114","endLine":125,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":145,"column":19,"nodeType":"4113","messageId":"4114","endLine":145,"endColumn":21},{"ruleId":"4111","severity":1,"message":"4136","line":147,"column":38,"nodeType":"4113","messageId":"4114","endLine":147,"endColumn":40},{"ruleId":"4111","severity":1,"message":"4136","line":150,"column":40,"nodeType":"4113","messageId":"4114","endLine":150,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":151,"column":27,"nodeType":"4113","messageId":"4114","endLine":151,"endColumn":29},{"ruleId":"4111","severity":1,"message":"4112","line":168,"column":36,"nodeType":"4113","messageId":"4114","endLine":168,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":183,"column":17,"nodeType":"4113","messageId":"4114","endLine":183,"endColumn":19},{"ruleId":"4111","severity":1,"message":"4112","line":190,"column":21,"nodeType":"4113","messageId":"4114","endLine":190,"endColumn":23},{"ruleId":"4111","severity":1,"message":"4112","line":201,"column":40,"nodeType":"4113","messageId":"4114","endLine":201,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4136","line":202,"column":27,"nodeType":"4113","messageId":"4114","endLine":202,"endColumn":29},{"ruleId":"4111","severity":1,"message":"4112","line":208,"column":40,"nodeType":"4113","messageId":"4114","endLine":208,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4136","line":209,"column":27,"nodeType":"4113","messageId":"4114","endLine":209,"endColumn":29},{"ruleId":"4111","severity":1,"message":"4112","line":213,"column":49,"nodeType":"4113","messageId":"4114","endLine":213,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":221,"column":32,"nodeType":"4113","messageId":"4114","endLine":221,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":236,"column":32,"nodeType":"4113","messageId":"4114","endLine":236,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":255,"column":29,"nodeType":"4113","messageId":"4114","endLine":255,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4112","line":300,"column":45,"nodeType":"4113","messageId":"4114","endLine":300,"endColumn":47},{"ruleId":"4111","severity":1,"message":"4136","line":330,"column":37,"nodeType":"4113","messageId":"4114","endLine":330,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4136","line":353,"column":64,"nodeType":"4113","messageId":"4114","endLine":353,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4112","line":376,"column":64,"nodeType":"4113","messageId":"4114","endLine":376,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4112","line":397,"column":64,"nodeType":"4113","messageId":"4114","endLine":397,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4112","line":419,"column":64,"nodeType":"4113","messageId":"4114","endLine":419,"endColumn":66},{"ruleId":"4111","severity":1,"message":"4112","line":459,"column":53,"nodeType":"4113","messageId":"4114","endLine":459,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":466,"column":46,"nodeType":"4113","messageId":"4114","endLine":466,"endColumn":48},{"ruleId":"4111","severity":1,"message":"4112","line":467,"column":45,"nodeType":"4113","messageId":"4114","endLine":467,"endColumn":47},{"ruleId":"4111","severity":1,"message":"4136","line":498,"column":44,"nodeType":"4113","messageId":"4114","endLine":498,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4136","line":498,"column":67,"nodeType":"4113","messageId":"4114","endLine":498,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":527,"column":51,"nodeType":"4113","messageId":"4114","endLine":527,"endColumn":53},{"ruleId":"4139","severity":1,"message":"4140","line":39,"column":58,"nodeType":"4113","messageId":"4141","endLine":39,"endColumn":59},{"ruleId":"4122","severity":1,"message":"4128","line":52,"column":8,"nodeType":"4124","endLine":52,"endColumn":10,"suggestions":"4361"},{"ruleId":"4111","severity":1,"message":"4112","line":70,"column":43,"nodeType":"4113","messageId":"4114","endLine":70,"endColumn":45},{"ruleId":"4139","severity":1,"message":"4140","line":82,"column":54,"nodeType":"4113","messageId":"4141","endLine":82,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":88,"column":40,"nodeType":"4113","messageId":"4114","endLine":88,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":106,"column":33,"nodeType":"4113","messageId":"4114","endLine":106,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":108,"column":39,"nodeType":"4113","messageId":"4114","endLine":108,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":122,"column":36,"nodeType":"4113","messageId":"4114","endLine":122,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":125,"column":40,"nodeType":"4113","messageId":"4114","endLine":125,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":132,"column":41,"nodeType":"4113","messageId":"4114","endLine":132,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":146,"column":33,"nodeType":"4113","messageId":"4114","endLine":146,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":166,"column":33,"nodeType":"4113","messageId":"4114","endLine":166,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":170,"column":52,"nodeType":"4113","messageId":"4114","endLine":170,"endColumn":54},{"ruleId":"4111","severity":1,"message":"4112","line":171,"column":30,"nodeType":"4113","messageId":"4114","endLine":171,"endColumn":32},{"ruleId":"4111","severity":1,"message":"4112","line":177,"column":44,"nodeType":"4113","messageId":"4114","endLine":177,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4136","line":178,"column":32,"nodeType":"4113","messageId":"4114","endLine":178,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":183,"column":59,"nodeType":"4113","messageId":"4114","endLine":183,"endColumn":61},{"ruleId":"4111","severity":1,"message":"4136","line":192,"column":58,"nodeType":"4113","messageId":"4114","endLine":192,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":194,"column":40,"nodeType":"4113","messageId":"4114","endLine":194,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":206,"column":40,"nodeType":"4113","messageId":"4114","endLine":206,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":230,"column":29,"nodeType":"4113","messageId":"4114","endLine":230,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4112","line":304,"column":57,"nodeType":"4113","messageId":"4114","endLine":304,"endColumn":59},{"ruleId":"4122","severity":1,"message":"4333","line":318,"column":8,"nodeType":"4124","endLine":318,"endColumn":32,"suggestions":"4362"},{"ruleId":"4122","severity":1,"message":"4165","line":318,"column":9,"nodeType":"4166","endLine":318,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4112","line":403,"column":61,"nodeType":"4113","messageId":"4114","endLine":403,"endColumn":63},{"ruleId":"4122","severity":1,"message":"4363","line":445,"column":8,"nodeType":"4124","endLine":445,"endColumn":58,"suggestions":"4364"},{"ruleId":"4122","severity":1,"message":"4165","line":445,"column":9,"nodeType":"4166","endLine":445,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":495,"column":53,"nodeType":"4113","messageId":"4114","endLine":495,"endColumn":55},{"ruleId":"4111","severity":1,"message":"4112","line":522,"column":37,"nodeType":"4113","messageId":"4114","endLine":522,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":523,"column":41,"nodeType":"4113","messageId":"4114","endLine":523,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":34,"column":36,"nodeType":"4113","messageId":"4114","endLine":34,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4264","line":45,"column":8,"nodeType":"4124","endLine":45,"endColumn":10,"suggestions":"4365"},{"ruleId":"4111","severity":1,"message":"4112","line":85,"column":40,"nodeType":"4113","messageId":"4114","endLine":85,"endColumn":42},{"ruleId":"4122","severity":1,"message":"4123","line":97,"column":8,"nodeType":"4124","endLine":97,"endColumn":17,"suggestions":"4366"},{"ruleId":"4111","severity":1,"message":"4112","line":120,"column":28,"nodeType":"4113","messageId":"4114","endLine":120,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":36,"column":36,"nodeType":"4113","messageId":"4114","endLine":36,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":48,"column":8,"nodeType":"4124","endLine":48,"endColumn":17,"suggestions":"4367"},{"ruleId":"4111","severity":1,"message":"4112","line":116,"column":44,"nodeType":"4113","messageId":"4114","endLine":116,"endColumn":46},{"ruleId":"4111","severity":1,"message":"4112","line":139,"column":45,"nodeType":"4113","messageId":"4114","endLine":139,"endColumn":47},{"ruleId":"4111","severity":1,"message":"4136","line":78,"column":52,"nodeType":"4113","messageId":"4114","endLine":78,"endColumn":54},{"ruleId":"4111","severity":1,"message":"4112","line":88,"column":36,"nodeType":"4113","messageId":"4114","endLine":88,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4264","line":106,"column":8,"nodeType":"4124","endLine":106,"endColumn":10,"suggestions":"4368"},{"ruleId":"4122","severity":1,"message":"4123","line":127,"column":8,"nodeType":"4124","endLine":127,"endColumn":17,"suggestions":"4369"},{"ruleId":"4139","severity":1,"message":"4140","line":132,"column":53,"nodeType":"4113","messageId":"4141","endLine":132,"endColumn":54},{"ruleId":"4111","severity":1,"message":"4112","line":139,"column":40,"nodeType":"4113","messageId":"4114","endLine":139,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":144,"column":40,"nodeType":"4113","messageId":"4114","endLine":144,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":162,"column":33,"nodeType":"4113","messageId":"4114","endLine":162,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":164,"column":39,"nodeType":"4113","messageId":"4114","endLine":164,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":168,"column":39,"nodeType":"4113","messageId":"4114","endLine":168,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":183,"column":36,"nodeType":"4113","messageId":"4114","endLine":183,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":186,"column":40,"nodeType":"4113","messageId":"4114","endLine":186,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":194,"column":41,"nodeType":"4113","messageId":"4114","endLine":194,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":206,"column":33,"nodeType":"4113","messageId":"4114","endLine":206,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":223,"column":21,"nodeType":"4113","messageId":"4114","endLine":223,"endColumn":23},{"ruleId":"4111","severity":1,"message":"4112","line":226,"column":32,"nodeType":"4113","messageId":"4114","endLine":226,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":229,"column":66,"nodeType":"4113","messageId":"4114","endLine":229,"endColumn":68},{"ruleId":"4111","severity":1,"message":"4112","line":233,"column":42,"nodeType":"4113","messageId":"4114","endLine":233,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":234,"column":42,"nodeType":"4113","messageId":"4114","endLine":234,"endColumn":44},{"ruleId":"4111","severity":1,"message":"4112","line":235,"column":26,"nodeType":"4113","messageId":"4114","endLine":235,"endColumn":28},{"ruleId":"4111","severity":1,"message":"4112","line":235,"column":40,"nodeType":"4113","messageId":"4114","endLine":235,"endColumn":42},{"ruleId":"4111","severity":1,"message":"4112","line":250,"column":32,"nodeType":"4113","messageId":"4114","endLine":250,"endColumn":34},{"ruleId":"4105","severity":1,"message":"4370","line":263,"column":11,"nodeType":"4107","messageId":"4108","endLine":263,"endColumn":23},{"ruleId":"4111","severity":1,"message":"4112","line":270,"column":29,"nodeType":"4113","messageId":"4114","endLine":270,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4112","line":292,"column":36,"nodeType":"4113","messageId":"4114","endLine":292,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":317,"column":36,"nodeType":"4113","messageId":"4114","endLine":317,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":342,"column":36,"nodeType":"4113","messageId":"4114","endLine":342,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4136","line":378,"column":60,"nodeType":"4113","messageId":"4114","endLine":378,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":395,"column":60,"nodeType":"4113","messageId":"4114","endLine":395,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":435,"column":57,"nodeType":"4113","messageId":"4114","endLine":435,"endColumn":59},{"ruleId":"4122","severity":1,"message":"4163","line":449,"column":8,"nodeType":"4124","endLine":449,"endColumn":27,"suggestions":"4371"},{"ruleId":"4122","severity":1,"message":"4165","line":449,"column":9,"nodeType":"4166","endLine":449,"endColumn":26},{"ruleId":"4111","severity":1,"message":"4136","line":494,"column":60,"nodeType":"4113","messageId":"4114","endLine":494,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":513,"column":60,"nodeType":"4113","messageId":"4114","endLine":513,"endColumn":62},{"ruleId":"4111","severity":1,"message":"4112","line":554,"column":57,"nodeType":"4113","messageId":"4114","endLine":554,"endColumn":59},{"ruleId":"4122","severity":1,"message":"4372","line":568,"column":8,"nodeType":"4124","endLine":568,"endColumn":52,"suggestions":"4373"},{"ruleId":"4122","severity":1,"message":"4165","line":568,"column":9,"nodeType":"4166","endLine":568,"endColumn":33},{"ruleId":"4111","severity":1,"message":"4112","line":781,"column":45,"nodeType":"4113","messageId":"4114","endLine":781,"endColumn":47},{"ruleId":"4111","severity":1,"message":"4112","line":782,"column":49,"nodeType":"4113","messageId":"4114","endLine":782,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":783,"column":52,"nodeType":"4113","messageId":"4114","endLine":783,"endColumn":54},{"ruleId":"4111","severity":1,"message":"4112","line":36,"column":36,"nodeType":"4113","messageId":"4114","endLine":36,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":35,"column":36,"nodeType":"4113","messageId":"4114","endLine":35,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":46,"column":8,"nodeType":"4124","endLine":46,"endColumn":10,"suggestions":"4374"},{"ruleId":"4111","severity":1,"message":"4112","line":33,"column":36,"nodeType":"4113","messageId":"4114","endLine":33,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":44,"column":8,"nodeType":"4124","endLine":44,"endColumn":10,"suggestions":"4375"},{"ruleId":"4111","severity":1,"message":"4112","line":130,"column":49,"nodeType":"4113","messageId":"4114","endLine":130,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":131,"column":49,"nodeType":"4113","messageId":"4114","endLine":131,"endColumn":51},{"ruleId":"4105","severity":1,"message":"4376","line":72,"column":12,"nodeType":"4107","messageId":"4108","endLine":72,"endColumn":23},{"ruleId":"4105","severity":1,"message":"4377","line":72,"column":25,"nodeType":"4107","messageId":"4108","endLine":72,"endColumn":39},{"ruleId":"4105","severity":1,"message":"4150","line":76,"column":12,"nodeType":"4107","messageId":"4108","endLine":76,"endColumn":19},{"ruleId":"4105","severity":1,"message":"4117","line":76,"column":21,"nodeType":"4107","messageId":"4108","endLine":76,"endColumn":31},{"ruleId":"4122","severity":1,"message":"4128","line":129,"column":8,"nodeType":"4124","endLine":129,"endColumn":17,"suggestions":"4378"},{"ruleId":"4111","severity":1,"message":"4112","line":143,"column":33,"nodeType":"4113","messageId":"4114","endLine":143,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":185,"column":36,"nodeType":"4113","messageId":"4114","endLine":185,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4143","line":273,"column":8,"nodeType":"4124","endLine":273,"endColumn":32,"suggestions":"4379"},{"ruleId":"4122","severity":1,"message":"4143","line":332,"column":8,"nodeType":"4124","endLine":332,"endColumn":42,"suggestions":"4380"},{"ruleId":"4111","severity":1,"message":"4112","line":364,"column":49,"nodeType":"4113","messageId":"4114","endLine":364,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":365,"column":49,"nodeType":"4113","messageId":"4114","endLine":365,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":377,"column":56,"nodeType":"4113","messageId":"4114","endLine":377,"endColumn":58},{"ruleId":"4111","severity":1,"message":"4112","line":378,"column":56,"nodeType":"4113","messageId":"4114","endLine":378,"endColumn":58},{"ruleId":"4111","severity":1,"message":"4112","line":389,"column":70,"nodeType":"4113","messageId":"4114","endLine":389,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4112","line":390,"column":70,"nodeType":"4113","messageId":"4114","endLine":390,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4112","line":402,"column":73,"nodeType":"4113","messageId":"4114","endLine":402,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4112","line":403,"column":73,"nodeType":"4113","messageId":"4114","endLine":403,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4112","line":415,"column":70,"nodeType":"4113","messageId":"4114","endLine":415,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4112","line":416,"column":70,"nodeType":"4113","messageId":"4114","endLine":416,"endColumn":72},{"ruleId":"4111","severity":1,"message":"4112","line":428,"column":73,"nodeType":"4113","messageId":"4114","endLine":428,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4112","line":429,"column":73,"nodeType":"4113","messageId":"4114","endLine":429,"endColumn":75},{"ruleId":"4111","severity":1,"message":"4112","line":441,"column":67,"nodeType":"4113","messageId":"4114","endLine":441,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":442,"column":67,"nodeType":"4113","messageId":"4114","endLine":442,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":453,"column":74,"nodeType":"4113","messageId":"4114","endLine":453,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":455,"column":74,"nodeType":"4113","messageId":"4114","endLine":455,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":466,"column":74,"nodeType":"4113","messageId":"4114","endLine":466,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":468,"column":74,"nodeType":"4113","messageId":"4114","endLine":468,"endColumn":76},{"ruleId":"4111","severity":1,"message":"4112","line":475,"column":67,"nodeType":"4113","messageId":"4114","endLine":475,"endColumn":69},{"ruleId":"4111","severity":1,"message":"4112","line":481,"column":69,"nodeType":"4113","messageId":"4114","endLine":481,"endColumn":71},{"ruleId":"4111","severity":1,"message":"4112","line":482,"column":69,"nodeType":"4113","messageId":"4114","endLine":482,"endColumn":71},{"ruleId":"4111","severity":1,"message":"4112","line":598,"column":48,"nodeType":"4113","messageId":"4114","endLine":598,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":598,"column":74,"nodeType":"4113","messageId":"4114","endLine":598,"endColumn":76},{"ruleId":"4122","severity":1,"message":"4123","line":46,"column":8,"nodeType":"4124","endLine":46,"endColumn":10,"suggestions":"4381"},{"ruleId":"4122","severity":1,"message":"4128","line":105,"column":8,"nodeType":"4124","endLine":105,"endColumn":17,"suggestions":"4382"},{"ruleId":"4111","severity":1,"message":"4112","line":169,"column":29,"nodeType":"4113","messageId":"4114","endLine":169,"endColumn":31},{"ruleId":"4122","severity":1,"message":"4383","line":311,"column":8,"nodeType":"4124","endLine":311,"endColumn":38,"suggestions":"4384"},{"ruleId":"4111","severity":1,"message":"4112","line":427,"column":44,"nodeType":"4113","messageId":"4114","endLine":427,"endColumn":46},{"ruleId":"4105","severity":1,"message":"4385","line":3,"column":10,"nodeType":"4107","messageId":"4108","endLine":3,"endColumn":12},{"ruleId":"4105","severity":1,"message":"4386","line":13,"column":7,"nodeType":"4107","messageId":"4108","endLine":13,"endColumn":14},{"ruleId":"4111","severity":1,"message":"4112","line":35,"column":36,"nodeType":"4113","messageId":"4114","endLine":35,"endColumn":38},{"ruleId":"4122","severity":1,"message":"4123","line":46,"column":8,"nodeType":"4124","endLine":46,"endColumn":10,"suggestions":"4387"},{"ruleId":"4111","severity":1,"message":"4112","line":132,"column":49,"nodeType":"4113","messageId":"4114","endLine":132,"endColumn":51},{"ruleId":"4111","severity":1,"message":"4112","line":133,"column":46,"nodeType":"4113","messageId":"4114","endLine":133,"endColumn":48},{"ruleId":"4105","severity":1,"message":"4388","line":27,"column":24,"nodeType":"4107","messageId":"4108","endLine":27,"endColumn":37},{"ruleId":"4139","severity":1,"message":"4140","line":37,"column":55,"nodeType":"4113","messageId":"4141","endLine":37,"endColumn":56},{"ruleId":"4122","severity":1,"message":"4128","line":52,"column":8,"nodeType":"4124","endLine":52,"endColumn":17,"suggestions":"4389"},{"ruleId":"4111","severity":1,"message":"4112","line":63,"column":33,"nodeType":"4113","messageId":"4114","endLine":63,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":65,"column":39,"nodeType":"4113","messageId":"4114","endLine":65,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":91,"column":32,"nodeType":"4113","messageId":"4114","endLine":91,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":104,"column":29,"nodeType":"4113","messageId":"4114","endLine":104,"endColumn":31},{"ruleId":"4111","severity":1,"message":"4112","line":107,"column":48,"nodeType":"4113","messageId":"4114","endLine":107,"endColumn":50},{"ruleId":"4111","severity":1,"message":"4112","line":115,"column":32,"nodeType":"4113","messageId":"4114","endLine":115,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4136","line":153,"column":60,"nodeType":"4113","messageId":"4114","endLine":153,"endColumn":62},{"ruleId":"4122","severity":1,"message":"4143","line":193,"column":8,"nodeType":"4124","endLine":193,"endColumn":25,"suggestions":"4390"},{"ruleId":"4111","severity":1,"message":"4136","line":239,"column":60,"nodeType":"4113","messageId":"4114","endLine":239,"endColumn":62},{"ruleId":"4122","severity":1,"message":"4145","line":279,"column":8,"nodeType":"4124","endLine":279,"endColumn":49,"suggestions":"4391"},{"ruleId":"4105","severity":1,"message":"4392","line":11,"column":10,"nodeType":"4107","messageId":"4108","endLine":11,"endColumn":22},{"ruleId":"4111","severity":1,"message":"4112","line":62,"column":32,"nodeType":"4113","messageId":"4114","endLine":62,"endColumn":34},{"ruleId":"4111","severity":1,"message":"4112","line":98,"column":58,"nodeType":"4113","messageId":"4114","endLine":98,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":127,"column":58,"nodeType":"4113","messageId":"4114","endLine":127,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":156,"column":58,"nodeType":"4113","messageId":"4114","endLine":156,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":185,"column":58,"nodeType":"4113","messageId":"4114","endLine":185,"endColumn":60},{"ruleId":"4105","severity":1,"message":"4392","line":12,"column":10,"nodeType":"4107","messageId":"4108","endLine":12,"endColumn":22},{"ruleId":"4105","severity":1,"message":"4393","line":28,"column":12,"nodeType":"4107","messageId":"4108","endLine":28,"endColumn":25},{"ruleId":"4122","severity":1,"message":"4394","line":50,"column":8,"nodeType":"4124","endLine":50,"endColumn":10,"suggestions":"4395"},{"ruleId":"4111","severity":1,"message":"4112","line":56,"column":28,"nodeType":"4113","messageId":"4114","endLine":56,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4112","line":136,"column":57,"nodeType":"4113","messageId":"4114","endLine":136,"endColumn":59},{"ruleId":"4111","severity":1,"message":"4112","line":137,"column":58,"nodeType":"4113","messageId":"4114","endLine":137,"endColumn":60},{"ruleId":"4111","severity":1,"message":"4112","line":138,"column":56,"nodeType":"4113","messageId":"4114","endLine":138,"endColumn":58},{"ruleId":"4105","severity":1,"message":"4376","line":74,"column":12,"nodeType":"4107","messageId":"4108","endLine":74,"endColumn":23},{"ruleId":"4105","severity":1,"message":"4377","line":74,"column":25,"nodeType":"4107","messageId":"4108","endLine":74,"endColumn":39},{"ruleId":"4105","severity":1,"message":"4396","line":79,"column":11,"nodeType":"4107","messageId":"4108","endLine":79,"endColumn":19},{"ruleId":"4139","severity":1,"message":"4140","line":87,"column":58,"nodeType":"4113","messageId":"4141","endLine":87,"endColumn":59},{"ruleId":"4122","severity":1,"message":"4128","line":100,"column":8,"nodeType":"4124","endLine":100,"endColumn":17,"suggestions":"4397"},{"ruleId":"4111","severity":1,"message":"4112","line":115,"column":33,"nodeType":"4113","messageId":"4114","endLine":115,"endColumn":35},{"ruleId":"4111","severity":1,"message":"4112","line":146,"column":41,"nodeType":"4113","messageId":"4114","endLine":146,"endColumn":43},{"ruleId":"4111","severity":1,"message":"4112","line":155,"column":36,"nodeType":"4113","messageId":"4114","endLine":155,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":209,"column":28,"nodeType":"4113","messageId":"4114","endLine":209,"endColumn":30},{"ruleId":"4122","severity":1,"message":"4143","line":277,"column":8,"nodeType":"4124","endLine":277,"endColumn":30,"suggestions":"4398"},{"ruleId":"4111","severity":1,"message":"4136","line":303,"column":60,"nodeType":"4113","messageId":"4114","endLine":303,"endColumn":62},{"ruleId":"4122","severity":1,"message":"4143","line":343,"column":8,"nodeType":"4124","endLine":343,"endColumn":50,"suggestions":"4399"},{"ruleId":"4111","severity":1,"message":"4112","line":380,"column":39,"nodeType":"4113","messageId":"4114","endLine":380,"endColumn":41},{"ruleId":"4111","severity":1,"message":"4112","line":417,"column":47,"nodeType":"4113","messageId":"4114","endLine":417,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":418,"column":50,"nodeType":"4113","messageId":"4114","endLine":418,"endColumn":52},{"ruleId":"4111","severity":1,"message":"4112","line":419,"column":47,"nodeType":"4113","messageId":"4114","endLine":419,"endColumn":49},{"ruleId":"4111","severity":1,"message":"4112","line":420,"column":55,"nodeType":"4113","messageId":"4114","endLine":420,"endColumn":57},{"ruleId":"4111","severity":1,"message":"4112","line":421,"column":46,"nodeType":"4113","messageId":"4114","endLine":421,"endColumn":48},{"ruleId":"4111","severity":1,"message":"4112","line":497,"column":37,"nodeType":"4113","messageId":"4114","endLine":497,"endColumn":39},{"ruleId":"4111","severity":1,"message":"4112","line":63,"column":36,"nodeType":"4113","messageId":"4114","endLine":63,"endColumn":38},{"ruleId":"4111","severity":1,"message":"4112","line":64,"column":51,"nodeType":"4113","messageId":"4114","endLine":64,"endColumn":53},{"ruleId":"4122","severity":1,"message":"4123","line":78,"column":8,"nodeType":"4124","endLine":78,"endColumn":10,"suggestions":"4400"},{"ruleId":"4111","severity":1,"message":"4112","line":105,"column":28,"nodeType":"4113","messageId":"4114","endLine":105,"endColumn":30},{"ruleId":"4111","severity":1,"message":"4136","line":146,"column":59,"nodeType":"4113","messageId":"4114","endLine":146,"endColumn":61},{"ruleId":"4122","severity":1,"message":"4172","line":164,"column":8,"nodeType":"4124","endLine":164,"endColumn":34,"suggestions":"4401"},{"ruleId":"4139","severity":1,"message":"4140","line":36,"column":38,"nodeType":"4113","messageId":"4141","endLine":36,"endColumn":39},{"ruleId":"4122","severity":1,"message":"4123","line":50,"column":8,"nodeType":"4124","endLine":50,"endColumn":17,"suggestions":"4402"},"no-native-reassign",["4403"],"no-negated-in-lhs",["4404"],"no-unused-vars","'sessionRoutes' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'firebase' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'useAuth' is defined but never used.","'setLoading' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'H1' is defined but never used.","'H4' is defined but never used.","'axiosSuperAdminPrexo' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["4405"],"'Button' is defined but never used.","'BootstrapDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'navigate' and 'trayId'. Either include them or remove the dependency array.",["4406"],["4407"],"React Hook useEffect has a missing dependency: 'trayId'. Either include it or remove the dependency array.",["4408"],"'Icon' is defined but never used.","'ContentBox' is assigned a value but never used.","'StyledButton' is assigned a value but never used.","Expected '!==' and instead saw '!='.",["4409"],"'alpha' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",["4410"],"React Hook useMemo has a missing dependency: 'trayData?.limit'. Either include it or remove the dependency array.",["4411"],"React Hook useMemo has missing dependencies: 'handelUic' and 'trayData?.limit'. Either include them or remove the dependency array.",["4412"],"'open' is assigned a value but never used.","'itemDetails' is assigned a value but never used.","'setItemDetails' is assigned a value but never used.","'loading' is assigned a value but never used.",["4413"],["4414"],"React Hook useEffect has missing dependencies: 'navigate', 'trayId', and 'user_name1'. Either include them or remove the dependency array.",["4415"],["4416"],["4417"],["4418"],"'textBoxDis' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'bagId', 'navigate', and 'user_name1'. Either include them or remove the dependency array.",["4419"],"React Hook useEffect has a missing dependency: 'bagId'. Either include it or remove the dependency array.",["4420"],"React Hook useMemo has a missing dependency: 'bagData'. Either include it or remove the dependency array.",["4421"],"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","ChainExpression","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'navigate' and 'rowsPerPage'. Either include them or remove the dependency array.",["4422"],"React Hook useMemo has an unnecessary dependency: 'item'. Either exclude it or remove the dependency array.",["4423"],"'userList' is assigned a value but never used.","'setUserList' is assigned a value but never used.",["4424"],["4425"],["4426"],["4427"],["4428"],"'setSearch' is assigned a value but never used.",["4429"],["4430"],"'value' is assigned a value but never used.","'handleChange' is assigned a value but never used.",["4431"],"'handleClick' is assigned a value but never used.",["4432"],"React Hook useEffect has a missing dependency: 'pagination.size'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setItem' needs the current value of 'pagination.size'.",["4433"],["4434"],"'rowsPerPage' is assigned a value but never used.","'setRowsPerPage' is assigned a value but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.",["4435"],"'SecondarySidebarToggle' is defined but never used.",["4436"],"'Span' is defined but never used.","'createUserWithEmailAndPassword' is assigned a value but never used.","'signInWithGoogle' is assigned a value but never used.","'handleGoogleRegister' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'editFetchData', 'open', and 'reset'. Either include them or remove the dependency array. If 'open' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["4437"],"'palette' is assigned a value but never used.",["4438"],"'signInWithEmailAndPassword' is assigned a value but never used.",["4439"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'username'. Either include it or remove the dependency array.",["4440"],"'IconButton' is defined but never used.","'TablePagination' is defined but never used.",["4441"],"no-redeclare","'i' is already defined.","redeclared",["4442"],["4443"],["4444"],"React Hook useMemo has missing dependencies: 'handleClick', 'handleSelectAll', and 'label'. Either include them or remove the dependency array.",["4445"],["4446"],["4447"],["4448"],["4449"],["4450"],["4451"],"'MenuItem' is defined but never used.","'TextField' is defined but never used.","'Box' is defined but never used.",["4452"],"'searchOrders' is assigned a value but never used.",["4453"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps",["4454"],["4455"],["4456"],["4457"],"'useMemo' is defined but never used.",["4458"],["4459"],"'aa' is assigned a value but never used.",["4460"],"'Card' is defined but never used.",["4461"],"'whtTrayId' is assigned a value but never used.","'setWhtTrayId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isCheck', 'muic', and 'navigate'. Either include them or remove the dependency array.",["4462"],"React Hook useEffect has missing dependencies: 'handeTrayGet', 'isCheck', and 'navigate'. Either include them or remove the dependency array.",["4463"],"React Hook useEffect has a missing dependency: 'isCheck'. Either include it or remove the dependency array.",["4464"],"'handelAssignForSorting' is assigned a value but never used.",["4465"],"'label' is assigned a value but never used.",["4466"],["4467"],"React Hook useEffect has missing dependencies: 'bagId' and 'navigate'. Either include them or remove the dependency array.",["4468"],"React Hook useMemo has missing dependencies: 'handleClick' and 'handleSelectAll'. Either include them or remove the dependency array.",["4469"],["4470"],["4471"],["4472"],"'Grid' is defined but never used.","'Swal' is defined but never used.",["4473"],"React Hook useEffect has missing dependencies: 'editFetchData', 'open', 'profile', and 'reset'. Either include them or remove the dependency array. If 'open' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["4474"],"React Hook useEffect has missing dependencies: 'editFetchData', 'open', and 'productImage'. Either include them or remove the dependency array. If 'open' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["4475"],["4476"],["4477"],["4478"],"'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.",["4479"],"'handleChangePage' is assigned a value but never used.",["4480"],["4481"],["4482"],["4483"],"'Checkbox' is defined but never used.",["4484"],["4485"],["4486"],"React Hook useEffect has missing dependencies: 'muic', 'navigate', and 'trayId'. Either include them or remove the dependency array.",["4487"],"'handelViewTray' is assigned a value but never used.",["4488"],["4489"],["4490"],["4491"],["4492"],["4493"],["4494"],["4495"],["4496"],"'useNavigate' is defined but never used.",["4497"],["4498"],["4499"],["4500"],["4501"],["4502"],["4503"],["4504"],["4505"],["4506"],"'isAlive' is assigned a value but never used.","'setIsAlive' is assigned a value but never used.",["4507"],"no-use-before-define","'refresh' was used before it was defined.","usedBeforeDefined",["4508"],["4509"],["4510"],["4511"],["4512"],["4513"],["4514"],["4515"],["4516"],["4517"],"React Hook useMemo has a missing dependency: 'employeeData'. Either include it or remove the dependency array.",["4518"],"React Hook useMemo has missing dependencies: 'employeeData' and 'handelAwbn'. Either include them or remove the dependency array.",["4519"],"React Hook useEffect has missing dependencies: 'mmtTrayId' and 'navigate'. Either include them or remove the dependency array.",["4520"],["4521"],["4522"],"'Container' is defined but never used.",["4523"],["4524"],["4525"],["4526"],["4527"],["4528"],"'sortId' is assigned a value but never used.",["4529"],"React Hook useMemo has missing dependencies: 'trayData?.limit', 'trayData?.prefix', and 'trayData?.type_taxanomy'. Either include them or remove the dependency array.",["4530"],"React Hook useMemo has missing dependencies: 'handelUic', 'trayData?.limit', 'trayData?.prefix', and 'trayData?.type_taxanomy'. Either include them or remove the dependency array.",["4531"],["4532"],["4533"],["4534"],"'fetchData' is assigned a value but never used.",["4535"],["4536"],["4537"],["4538"],["4539"],"React Hook useMemo has missing dependencies: 'employeeData', 'handelAwbn', and 'handelDelete'. Either include them or remove the dependency array.",["4540"],["4541"],["4542"],["4543"],["4544"],["4545"],"'handelDelete' is assigned a value but never used.",["4546"],"React Hook useMemo has missing dependencies: 'bagData' and 'handelAwbn'. Either include them or remove the dependency array.",["4547"],["4548"],["4549"],"'description' is assigned a value but never used.","'setDescription' is assigned a value but never used.",["4550"],["4551"],["4552"],["4553"],["4554"],"React Hook useMemo has missing dependencies: 'handelAwbn' and 'handelViewItem'. Either include them or remove the dependency array.",["4555"],"'H3' is defined but never used.","'FlexBox' is assigned a value but never used.",["4556"],"'setResDataUic' is assigned a value but never used.",["4557"],["4558"],["4559"],"'axiosMisUser' is defined but never used.","'auditUserName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["4560"],"'inputRef' is assigned a value but never used.",["4561"],["4562"],["4563"],["4564"],["4565"],["4566"],"no-global-assign","no-unsafe-negation",{"desc":"4567","fix":"4568"},{"desc":"4569","fix":"4570"},{"desc":"4567","fix":"4571"},{"desc":"4572","fix":"4573"},{"desc":"4574","fix":"4575"},{"desc":"4569","fix":"4576"},{"desc":"4577","fix":"4578"},{"desc":"4579","fix":"4580"},{"desc":"4569","fix":"4581"},{"desc":"4582","fix":"4583"},{"desc":"4584","fix":"4585"},{"desc":"4586","fix":"4587"},{"desc":"4588","fix":"4589"},{"desc":"4567","fix":"4590"},{"desc":"4591","fix":"4592"},{"desc":"4593","fix":"4594"},{"desc":"4595","fix":"4596"},{"desc":"4597","fix":"4598"},{"desc":"4599","fix":"4600"},{"desc":"4567","fix":"4601"},{"desc":"4569","fix":"4602"},{"desc":"4577","fix":"4603"},{"desc":"4604","fix":"4605"},{"desc":"4606","fix":"4607"},{"desc":"4597","fix":"4608"},{"desc":"4599","fix":"4609"},{"desc":"4582","fix":"4610"},{"desc":"4572","fix":"4611"},{"desc":"4612","fix":"4613"},{"desc":"4582","fix":"4614"},{"desc":"4612","fix":"4615"},{"desc":"4616","fix":"4617"},{"desc":"4618","fix":"4619"},{"desc":"4606","fix":"4620"},{"desc":"4612","fix":"4621"},{"desc":"4622","fix":"4623"},{"desc":"4612","fix":"4624"},{"desc":"4567","fix":"4625"},{"desc":"4582","fix":"4626"},{"desc":"4627","fix":"4628"},{"desc":"4629","fix":"4630"},{"desc":"4627","fix":"4631"},{"desc":"4629","fix":"4632"},{"desc":"4627","fix":"4633"},{"desc":"4629","fix":"4634"},{"desc":"4627","fix":"4635"},{"desc":"4629","fix":"4636"},{"desc":"4627","fix":"4637"},{"desc":"4599","fix":"4638"},{"desc":"4627","fix":"4639"},{"desc":"4599","fix":"4640"},{"desc":"4641","fix":"4642"},{"desc":"4599","fix":"4643"},{"desc":"4644","fix":"4645"},{"desc":"4612","fix":"4646"},{"desc":"4644","fix":"4647"},{"desc":"4612","fix":"4648"},{"desc":"4649","fix":"4650"},{"desc":"4651","fix":"4652"},{"desc":"4653","fix":"4654"},{"desc":"4567","fix":"4655"},{"desc":"4656","fix":"4657"},{"desc":"4567","fix":"4658"},{"desc":"4659","fix":"4660"},{"desc":"4661","fix":"4662"},{"desc":"4567","fix":"4663"},{"desc":"4567","fix":"4664"},{"desc":"4618","fix":"4665"},{"desc":"4618","fix":"4666"},{"desc":"4667","fix":"4668"},{"desc":"4669","fix":"4670"},{"desc":"4618","fix":"4671"},{"desc":"4618","fix":"4672"},{"desc":"4618","fix":"4673"},{"desc":"4674","fix":"4675"},{"desc":"4572","fix":"4676"},{"desc":"4567","fix":"4677"},{"desc":"4574","fix":"4678"},{"desc":"4599","fix":"4679"},{"desc":"4567","fix":"4680"},{"desc":"4574","fix":"4681"},{"desc":"4599","fix":"4682"},{"desc":"4683","fix":"4684"},{"desc":"4572","fix":"4685"},{"desc":"4574","fix":"4686"},{"desc":"4569","fix":"4687"},{"desc":"4688","fix":"4689"},{"desc":"4577","fix":"4690"},{"desc":"4691","fix":"4692"},{"desc":"4569","fix":"4693"},{"desc":"4586","fix":"4694"},{"desc":"4695","fix":"4696"},{"desc":"4572","fix":"4697"},{"desc":"4567","fix":"4698"},{"desc":"4574","fix":"4699"},{"desc":"4569","fix":"4700"},{"desc":"4577","fix":"4701"},{"desc":"4691","fix":"4702"},{"desc":"4569","fix":"4703"},{"desc":"4586","fix":"4704"},{"desc":"4695","fix":"4705"},{"desc":"4706","fix":"4707"},{"desc":"4574","fix":"4708"},{"desc":"4644","fix":"4709"},{"desc":"4574","fix":"4710"},{"desc":"4569","fix":"4711"},{"desc":"4577","fix":"4712"},{"desc":"4691","fix":"4713"},{"desc":"4574","fix":"4714"},{"desc":"4574","fix":"4715"},{"desc":"4572","fix":"4716"},{"desc":"4574","fix":"4717"},{"desc":"4706","fix":"4718"},{"desc":"4719","fix":"4720"},{"desc":"4721","fix":"4722"},{"desc":"4723","fix":"4724"},{"desc":"4574","fix":"4725"},{"desc":"4572","fix":"4726"},{"desc":"4569","fix":"4727"},{"desc":"4577","fix":"4728"},{"desc":"4604","fix":"4729"},{"desc":"4644","fix":"4730"},{"desc":"4644","fix":"4731"},{"desc":"4574","fix":"4732"},{"desc":"4569","fix":"4733"},{"desc":"4734","fix":"4735"},{"desc":"4736","fix":"4737"},{"desc":"4582","fix":"4738"},{"desc":"4567","fix":"4739"},{"desc":"4582","fix":"4740"},{"desc":"4574","fix":"4741"},{"desc":"4567","fix":"4742"},{"desc":"4582","fix":"4743"},{"desc":"4706","fix":"4744"},{"desc":"4719","fix":"4745"},{"desc":"4746","fix":"4747"},{"desc":"4748","fix":"4749"},{"desc":"4567","fix":"4750"},{"desc":"4567","fix":"4751"},{"desc":"4748","fix":"4752"},{"desc":"4753","fix":"4754"},{"desc":"4595","fix":"4755"},{"desc":"4756","fix":"4757"},{"desc":"4574","fix":"4758"},{"desc":"4574","fix":"4759"},{"desc":"4569","fix":"4760"},{"desc":"4586","fix":"4761"},{"desc":"4762","fix":"4763"},{"desc":"4574","fix":"4764"},{"desc":"4569","fix":"4765"},{"desc":"4766","fix":"4767"},{"desc":"4574","fix":"4768"},{"desc":"4569","fix":"4769"},{"desc":"4577","fix":"4770"},{"desc":"4579","fix":"4771"},{"desc":"4772","fix":"4773"},{"desc":"4569","fix":"4774"},{"desc":"4775","fix":"4776"},{"desc":"4777","fix":"4778"},{"desc":"4574","fix":"4779"},{"desc":"4780","fix":"4781"},{"desc":"4567","fix":"4782"},"Update the dependencies array to be: [isAlive, navigate]",{"range":"4783","text":"4784"},"Update the dependencies array to be: [navigate, refresh, trayId]",{"range":"4785","text":"4786"},{"range":"4787","text":"4784"},"Update the dependencies array to be: [trayId]",{"range":"4788","text":"4789"},"Update the dependencies array to be: [navigate]",{"range":"4790","text":"4791"},{"range":"4792","text":"4786"},"Update the dependencies array to be: [trayData?.items, trayData?.limit]",{"range":"4793","text":"4794"},"Update the dependencies array to be: [textBoxDis, uic, trayData.actual_items, trayData?.limit, handelUic]",{"range":"4795","text":"4796"},{"range":"4797","text":"4786"},"Update the dependencies array to be: [isAlive, trayId]",{"range":"4798","text":"4799"},"Update the dependencies array to be: [navigate, refresh, trayId, user_name1]",{"range":"4800","text":"4801"},"Update the dependencies array to be: [trayData?.actual_items, trayData?.limit]",{"range":"4802","text":"4803"},"Update the dependencies array to be: [textBoxDis, uic, trayData.items, trayData?.limit, handelUic]",{"range":"4804","text":"4805"},{"range":"4806","text":"4784"},"Update the dependencies array to be: [bagId, navigate, refresh, user_name1]",{"range":"4807","text":"4808"},"Update the dependencies array to be: [bagData, bagId]",{"range":"4809","text":"4810"},"Update the dependencies array to be: [bagData]",{"range":"4811","text":"4812"},"Update the dependencies array to be: [refresh, page, rowsPerPage, navigate]",{"range":"4813","text":"4814"},"Update the dependencies array to be: [data]",{"range":"4815","text":"4816"},{"range":"4817","text":"4784"},{"range":"4818","text":"4786"},{"range":"4819","text":"4794"},"Update the dependencies array to be: [textDisable, uic, trayData?.actual_items, trayData?.limit, handelUic]",{"range":"4820","text":"4821"},"Update the dependencies array to be: [bagId, isAlive]",{"range":"4822","text":"4823"},{"range":"4824","text":"4814"},{"range":"4825","text":"4816"},{"range":"4826","text":"4799"},{"range":"4827","text":"4789"},"Update the dependencies array to be: [pagination.page, pagination.item, pagination.size]",{"range":"4828","text":"4829"},{"range":"4830","text":"4799"},{"range":"4831","text":"4829"},"Update the dependencies array to be: [navigate, pathname, previouseRoute]",{"range":"4832","text":"4833"},"Update the dependencies array to be: [editFetchData, open, reset]",{"range":"4834","text":"4835"},{"range":"4836","text":"4823"},{"range":"4837","text":"4829"},"Update the dependencies array to be: [isAlive, username]",{"range":"4838","text":"4839"},{"range":"4840","text":"4829"},{"range":"4841","text":"4784"},{"range":"4842","text":"4799"},"Update the dependencies array to be: [page, isAlive, rowsPerPage, navigate]",{"range":"4843","text":"4844"},"Update the dependencies array to be: [data, handleClick, handleSelectAll, isCheck, item.length, label]",{"range":"4845","text":"4846"},{"range":"4847","text":"4844"},{"range":"4848","text":"4846"},{"range":"4849","text":"4844"},{"range":"4850","text":"4846"},{"range":"4851","text":"4844"},{"range":"4852","text":"4846"},{"range":"4853","text":"4844"},{"range":"4854","text":"4816"},{"range":"4855","text":"4844"},{"range":"4856","text":"4816"},"Update the dependencies array to be: [navigate, page, refresh, rowsPerPage]",{"range":"4857","text":"4858"},{"range":"4859","text":"4816"},"Update the dependencies array to be: [navigate, refresh]",{"range":"4860","text":"4861"},{"range":"4862","text":"4829"},{"range":"4863","text":"4861"},{"range":"4864","text":"4829"},"Update the dependencies array to be: [isCheck, muic, navigate, refresh]",{"range":"4865","text":"4866"},"Update the dependencies array to be: [refresh, clubModel, isCheck, handeTrayGet, navigate]",{"range":"4867","text":"4868"},"Update the dependencies array to be: [isAlive, isCheck]",{"range":"4869","text":"4870"},{"range":"4871","text":"4784"},"Update the dependencies array to be: [isCheck, muic, navigate]",{"range":"4872","text":"4873"},{"range":"4874","text":"4784"},"Update the dependencies array to be: [bagId, isAlive, navigate]",{"range":"4875","text":"4876"},"Update the dependencies array to be: [handleClick, handleSelectAll, isCheck, item]",{"range":"4877","text":"4878"},{"range":"4879","text":"4784"},{"range":"4880","text":"4784"},{"range":"4881","text":"4835"},{"range":"4882","text":"4835"},"Update the dependencies array to be: [editFetchData, open, profile, reset]",{"range":"4883","text":"4884"},"Update the dependencies array to be: [editFetchData, open, productImage]",{"range":"4885","text":"4886"},{"range":"4887","text":"4835"},{"range":"4888","text":"4835"},{"range":"4889","text":"4835"},"Update the dependencies array to be: [isAlive, navigate, page, rowsPerPage]",{"range":"4890","text":"4891"},{"range":"4892","text":"4789"},{"range":"4893","text":"4784"},{"range":"4894","text":"4791"},{"range":"4895","text":"4816"},{"range":"4896","text":"4784"},{"range":"4897","text":"4791"},{"range":"4898","text":"4816"},"Update the dependencies array to be: [muic, navigate, trayId]",{"range":"4899","text":"4900"},{"range":"4901","text":"4789"},{"range":"4902","text":"4791"},{"range":"4903","text":"4786"},"Update the dependencies array to be: [trayData, trayId]",{"range":"4904","text":"4905"},{"range":"4906","text":"4794"},"Update the dependencies array to be: [textDisable, uic, trayData.actual_items, trayData?.limit, handelUic]",{"range":"4907","text":"4908"},{"range":"4909","text":"4786"},{"range":"4910","text":"4803"},"Update the dependencies array to be: [textDisable, uic, trayData?.items, trayData?.limit, handelUic]",{"range":"4911","text":"4912"},{"range":"4913","text":"4789"},{"range":"4914","text":"4784"},{"range":"4915","text":"4791"},{"range":"4916","text":"4786"},{"range":"4917","text":"4794"},{"range":"4918","text":"4908"},{"range":"4919","text":"4786"},{"range":"4920","text":"4803"},{"range":"4921","text":"4912"},"Update the dependencies array to be: [navigate, trayId]",{"range":"4922","text":"4923"},{"range":"4924","text":"4791"},{"range":"4925","text":"4861"},{"range":"4926","text":"4791"},{"range":"4927","text":"4786"},{"range":"4928","text":"4794"},{"range":"4929","text":"4908"},{"range":"4930","text":"4791"},{"range":"4931","text":"4791"},{"range":"4932","text":"4789"},{"range":"4933","text":"4791"},{"range":"4934","text":"4923"},"Update the dependencies array to be: [employeeData]",{"range":"4935","text":"4936"},"Update the dependencies array to be: [textDisable, awbn, employeeData, handelAwbn]",{"range":"4937","text":"4938"},"Update the dependencies array to be: [mmtTrayId, navigate]",{"range":"4939","text":"4940"},{"range":"4941","text":"4791"},{"range":"4942","text":"4789"},{"range":"4943","text":"4786"},{"range":"4944","text":"4794"},{"range":"4945","text":"4821"},{"range":"4946","text":"4861"},{"range":"4947","text":"4861"},{"range":"4948","text":"4791"},{"range":"4949","text":"4786"},"Update the dependencies array to be: [trayData?.items, trayData?.limit, trayData?.prefix, trayData?.type_taxanomy]",{"range":"4950","text":"4951"},"Update the dependencies array to be: [textDisable, uic, trayData.actual_items, trayData?.limit, trayData?.type_taxanomy, trayData?.prefix, handelUic]",{"range":"4952","text":"4953"},{"range":"4954","text":"4799"},{"range":"4955","text":"4784"},{"range":"4956","text":"4799"},{"range":"4957","text":"4791"},{"range":"4958","text":"4784"},{"range":"4959","text":"4799"},{"range":"4960","text":"4923"},{"range":"4961","text":"4936"},"Update the dependencies array to be: [textDisable, awbn, employeeData, handelAwbn, handelDelete]",{"range":"4962","text":"4963"},"Update the dependencies array to be: [bagId, navigate]",{"range":"4964","text":"4965"},{"range":"4966","text":"4784"},{"range":"4967","text":"4784"},{"range":"4968","text":"4965"},"Update the dependencies array to be: [bagData, navigate]",{"range":"4969","text":"4970"},{"range":"4971","text":"4812"},"Update the dependencies array to be: [textBoxDis, awbn, bagData, handelAwbn]",{"range":"4972","text":"4973"},{"range":"4974","text":"4791"},{"range":"4975","text":"4791"},{"range":"4976","text":"4786"},{"range":"4977","text":"4803"},"Update the dependencies array to be: [trayData.temp_array, trayData?.limit]",{"range":"4978","text":"4979"},{"range":"4980","text":"4791"},{"range":"4981","text":"4786"},"Update the dependencies array to be: [textDisable, awbn, tray?.wht, handelAwbn, handelViewItem]",{"range":"4982","text":"4983"},{"range":"4984","text":"4791"},{"range":"4985","text":"4786"},{"range":"4986","text":"4794"},{"range":"4987","text":"4796"},"Update the dependencies array to be: [state]",{"range":"4988","text":"4989"},{"range":"4990","text":"4786"},"Update the dependencies array to be: [trayData?.limit, trayData?.temp_array]",{"range":"4991","text":"4992"},"Update the dependencies array to be: [trayData.actual_items, trayData?.limit]",{"range":"4993","text":"4994"},{"range":"4995","text":"4791"},"Update the dependencies array to be: [data, tableMessage]",{"range":"4996","text":"4997"},{"range":"4998","text":"4784"},[1571,1580],"[isAlive, navigate]",[2942,2951],"[navigate, refresh, trayId]",[1578,1587],[1149,1151],"[trayId]",[3075,3077],"[navigate]",[6885,6894],[13538,13555],"[trayData?.items, trayData?.limit]",[17312,17353],"[textBoxDis, uic, trayData.actual_items, trayData?.limit, handelUic]",[1964,1973],[1168,1177],"[isAlive, trayId]",[5985,5994],"[navigate, refresh, trayId, user_name1]",[12689,12713],"[trayData?.actual_items, trayData?.limit]",[16138,16172],"[textBoxDis, uic, trayData.items, trayData?.limit, handelUic]",[1508,1517],[5052,5061],"[bagId, navigate, refresh, user_name1]",[5644,5653],"[bagData, bagId]",[25669,25687],"[bagData]",[2195,2210],"[refresh, page, rowsPerPage, navigate]",[22496,22508],"[data]",[3178,3187],[1651,1660],[7966,7983],[12061,12103],"[textDisable, uic, trayData?.actual_items, trayData?.limit, handelUic]",[1543,1552],"[bagId, isAlive]",[1938,1953],[22106,22118],[1474,1483],[1162,1164],[2306,2340],"[pagination.page, pagination.item, pagination.size]",[1383,1392],[2511,2545],[3296,3322],"[navigate, pathname, previouseRoute]",[1996,1998],"[editFetchData, open, reset]",[1381,1390],[3138,3172],[1436,1445],"[isAlive, username]",[2636,2670],[3086,3095],[1171,1180],[2369,2384],"[page, isAlive, rowsPerPage, navigate]",[21807,21828],"[data, handleClick, handleSelectAll, isCheck, item.length, label]",[2370,2385],[21810,21831],[2370,2385],[23598,23619],[2371,2386],[23552,23573],[2175,2190],[14744,14756],[2175,2190],[14797,14809],[2429,2444],"[navigate, page, refresh, rowsPerPage]",[10448,10460],[1978,1987],"[navigate, refresh]",[2813,2847],[1955,1964],[2563,2597],[1952,1961],"[isCheck, muic, navigate, refresh]",[3652,3672],"[refresh, clubModel, isCheck, handeTrayGet, navigate]",[1686,1695],"[isAlive, isCheck]",[1908,1917],[1648,1650],"[isCheck, muic, navigate]",[1854,1863],[1860,1869],"[bagId, isAlive, navigate]",[13290,13305],"[handleClick, handleSelectAll, isCheck, item]",[1858,1867],[1852,1861],[1689,1691],[1722,1724],[1831,1833],"[editFetchData, open, profile, reset]",[1023,1025],"[editFetchData, open, productImage]",[1033,1035],[1453,1455],[1013,1015],[2704,2719],"[isAlive, navigate, page, rowsPerPage]",[1152,1154],[1725,1734],[2305,2307],[7530,7542],[3140,3149],[2303,2305],[7522,7534],[1801,1803],"[muic, navigate, trayId]",[1699,1701],[1524,1526],[2019,2028],[3287,3297],"[trayData, trayId]",[9322,9339],[13004,13046],"[textDisable, uic, trayData.actual_items, trayData?.limit, handelUic]",[1649,1658],[7588,7612],[11290,11325],"[textDisable, uic, trayData?.items, trayData?.limit, handelUic]",[1092,1094],[2895,2904],[1522,1524],[1568,1577],[7172,7189],[10873,10915],[1654,1663],[7518,7542],[11284,11319],[1326,1328],"[navigate, trayId]",[1562,1564],[2953,2962],[1527,1529],[1457,1466],[5625,5642],[8191,8232],[1569,1571],[1501,1503],[1371,1373],[1562,1564],[1732,1734],[9193,9217],"[employeeData]",[13986,14036],"[textDisable, awbn, employeeData, handelAwbn]",[1507,1509],"[mmtTrayId, navigate]",[1458,1460],[1407,1409],[1666,1675],[7354,7371],[11178,11220],[2941,2950],[2945,2954],[1702,1704],[1261,1270],[5418,5435],"[trayData?.items, trayData?.limit, trayData?.prefix, trayData?.type_taxanomy]",[8632,8673],"[textDisable, uic, trayData.actual_items, trayData?.limit, trayData?.type_taxanomy, trayData?.prefix, handelUic]",[1139,1148],[1792,1801],[1171,1180],[1505,1507],[5100,5109],[1171,1180],[1776,1778],[12526,12550],[18742,18792],"[textDisable, awbn, employeeData, handelAwbn, handelDelete]",[1331,1333],"[bagId, navigate]",[2990,2999],[1558,1567],[3550,3552],[4214,4223],"[bagData, navigate]",[16600,16619],[21744,21788],"[textBoxDis, awbn, bagData, handelAwbn]",[1463,1465],[1407,1409],[4152,4161],[9837,9861],[12376,12410],"[trayData.temp_array, trayData?.limit]",[1508,1510],[3366,3375],[11354,11384],"[textDisable, awbn, tray?.wht, handelAwbn, handelViewItem]",[1449,1451],[1740,1749],[7213,7230],[10989,11030],[1509,1511],"[state]",[3164,3173],[9456,9478],"[trayData?.limit, trayData?.temp_array]",[12317,12359],"[trayData.actual_items, trayData?.limit]",[2369,2371],[5716,5742],"[data, tableMessage]",[1660,1669]]