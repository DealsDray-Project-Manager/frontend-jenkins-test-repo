[{"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\index.jsx":"1","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\serviceWorker.js":"2","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\App.jsx":"3","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\Store.js":"4","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\routes\\routes.jsx":"5","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\index.js":"6","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\index.js":"7","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\contexts\\SettingsContext.js":"8","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\contexts\\FirebaseAuthContext.js":"9","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\RootReducer.js":"10","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\MatxLayout.jsx":"11","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\ecommerce.js":"12","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\icons\\GoogleIcon.jsx":"13","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\NavigationReducer.js":"14","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\config.js":"15","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\sessions\\SessionRoutes.js":"16","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\mock.js":"17","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxSuspense\\MatxSuspense.jsx":"18","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\actions\\NavigationAction.js":"19","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\hooks\\useSettings.js":"20","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\sessions\\ForgotPassword.jsx":"21","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\sessions\\NotFound.jsx":"22","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\sessions\\register\\FirebaseRegister.jsx":"23","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\sessions\\login\\FirebaseLogin.jsx":"24","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\Loadable\\Loadable.jsx":"25","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLoading\\MatxLoading.jsx":"26","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\Typography.js":"27","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\hooks\\useAuth.js":"28","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\index.js":"29","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\navigations.js":"30","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\EcommerceReducer.js":"31","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\NotificationReducer.js":"32","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\ScrumBoardReducer.js":"33","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\icons\\FacebookIcon.jsx":"34","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLogo\\MatxLogo.jsx":"35","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\cards\\SimpleCard.jsx":"36","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2.jsx":"37","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1.jsx":"38","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\scrumBoard.js":"39","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\notification.js":"40","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\list.js":"41","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\todos.js":"42","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\chat.js":"43","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\inbox.js":"44","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\users.js":"45","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\calendarEvents.js":"46","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\invoice.js":"47","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxProgressBar\\MatxProgressBar.jsx":"48","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\settings.js":"49","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\auth.js":"50","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\ConfirmationDialog\\ConfirmationDialog.jsx":"51","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\charts\\RechartCreator.jsx":"52","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\charts\\EchartCreator.jsx":"53","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\MatxTheme.jsx":"54","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\EchartTheme.jsx":"55","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\AddToCartButton\\AddToCartButton.jsx":"56","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\ChatHead\\ChatHead.jsx":"57","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxSnackbar\\MatxSnackbar.jsx":"58","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\actions\\EcommerceActions.js":"59","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\actions\\NotificationActions.js":"60","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxListItem1\\MatxListItem1.jsx":"61","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\actions\\ScrumBoardActions.js":"62","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\RectangleAvatar\\RectangleAvatar.jsx":"63","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\ChatAvatar\\ChatAvatar.jsx":"64","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\chat-box-2\\Chatbox.jsx":"65","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxSidenav\\MatxSidenavContent.jsx":"66","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxSidenav\\MatxSidenavContainer.jsx":"67","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxSidenav\\MatxSidenav.jsx":"68","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxHorizontalNav\\MatxHorizontalNav.jsx":"69","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxVerticalNav\\MatxVerticalNavExpansionPanel.jsx":"70","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxVerticalNav\\MatxVerticalNav.jsx":"71","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxSearchBox\\MatxSearchBox.jsx":"72","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxToolbarMenu\\MatxToolbarMenu.jsx":"73","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxMenu\\MatxMenu.jsx":"74","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxDivider\\MatxDivider.jsx":"75","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\Breadcrumb\\Breadcrumb.jsx":"76","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\auth\\authRoles.js":"77","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\DragAndDropRoute.js":"78","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\PageLayoutRoutees.js":"79","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardRoutes.js":"80","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\DashboardRoutes.js":"81","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\MaterialRoutes.js":"82","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\data-table\\dataTableRoutes.js":"83","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Settings.js":"84","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\initThemes.js":"85","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\EcommerceRoutes.js":"86","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\calendar\\CalendarRoutes.js":"87","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Settings.js":"88","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoioceRoutes.js":"89","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\PricingRoutes.js":"90","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Sidenav.jsx":"91","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\layout2.style.js":"92","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Topbar.jsx":"93","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\SecondarySidebar\\SecondarySidebar.jsx":"94","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\SidenavTheme\\SidenavTheme.jsx":"95","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\Footer\\Footer.jsx":"96","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Topbar.jsx":"97","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Navbar.jsx":"98","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\pagesRoutes.js":"99","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\map\\MapRoutes.js":"100","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\FormsRoutes.js":"101","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxRoutes.js":"102","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\list\\ListRoute.js":"103","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\CrudRoutes.js":"104","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoRoutes.js":"105","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatRoutes.js":"106","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\utils\\constant.js":"107","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\utils\\utils.js":"108","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\themeColors.js":"109","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\ChartsRoute.js":"110","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\AppDragAndDrop.jsx":"111","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\AppScrumBoard.jsx":"112","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\InventoryManagement.jsx":"113","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\Analytics3.jsx":"114","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\data-table\\SimpleMuiTable.jsx":"115","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\data-table\\ExpandableMuiDataTable.jsx":"116","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Checkout.jsx":"117","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\calendar\\MatxCalendar.jsx":"118","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\auth\\AuthGuard.jsx":"119","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceDetails.jsx":"120","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing3.jsx":"121","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing4.jsx":"122","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\UserProfile.jsx":"123","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing2.jsx":"124","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing1.jsx":"125","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\AppExpansionPanel.jsx":"126","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceList.jsx":"127","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Cart.jsx":"128","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Shop.jsx":"129","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\SecondarySidebar\\SecondarySidebarContent.jsx":"130","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\SecondarySidebar\\SecondarySidebarToggle.jsx":"131","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\SecondarySidenavTheme\\SecondarySidenavTheme.jsx":"132","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\ShoppingCart\\ShoppingCart.jsx":"133","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\NotificationBar\\NotificationBar.jsx":"134","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\Sidenav\\Sidenav.jsx":"135","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\map\\AppMap.jsx":"136","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\CrudTable.jsx":"137","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\AppInbox.jsx":"138","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\list\\AppList.jsx":"139","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoEditor.jsx":"140","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\AppChat.jsx":"141","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerViewer.jsx":"142","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\CustomerForm.jsx":"143","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\contexts\\NotificationContext.js":"144","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Country.js":"145","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\calendar\\CalendarService.js":"146","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceService.js":"147","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\ApexCharts.jsx":"148","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\PaymentDialog.jsx":"149","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\calendar\\EventEditorDialog.jsx":"150","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\AppEchart.jsx":"151","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\AppRechart.jsx":"152","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\calendar\\CalendarHeader.jsx":"153","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceEditor.jsx":"154","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing3.jsx":"155","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing4.jsx":"156","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\UserProfileSidenav.jsx":"157","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\UserProfileContent.jsx":"158","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\ShopContainer.jsx":"159","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxService.js":"160","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\list\\ListService.js":"161","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoService.js":"162","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxCustomizer\\MatxCustomizer.jsx":"163","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatService.js":"164","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\TagDialog.jsx":"165","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\list\\ListView.jsx":"166","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\list\\GridView.jsx":"167","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\list\\ListTopbar.jsx":"168","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\AddressForm.jsx":"169","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\ContactPersonForm.jsx":"170","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\OtherDetailsForm.jsx":"171","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatSidenav.jsx":"172","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerDetails.jsx":"173","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerLogs.jsx":"174","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerInvoice.jsx":"175","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatContainer.jsx":"176","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxTopbar.jsx":"177","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\hooks\\useNotification.js":"178","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\AdvanceLineChart2.jsx":"179","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\AdvanceAreaChart.jsx":"180","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\AdvanceLineChart.jsx":"181","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleTreeMap.jsx":"182","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleRadialBar.jsx":"183","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleRadarChart.jsx":"184","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\ProfileBarChart.jsx":"185","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\DummyChart.jsx":"186","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\TwoSimplePieChart.jsx":"187","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\LineBarAreaComposedChart.jsx":"188","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleScatterChart.jsx":"189","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleLineChart.jsx":"190","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\ComparisonChart.jsx":"191","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\Doughnut.jsx":"192","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\StackedAreaChart.jsx":"193","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleBarChart.jsx":"194","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\LineChart.jsx":"195","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\AreaChart.jsx":"196","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\ListProductCard.jsx":"197","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxCustomizer\\BadgeSelected.jsx":"198","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerEmailSender.jsx":"199","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerActions.jsx":"200","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerInfo.jsx":"201","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\EmptyMessage.jsx":"202","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerBillings.jsx":"203","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\GridProductCard.jsx":"204","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\HeatmapChart.jsx":"205","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\PeiChart.jsx":"206","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\TableService.js":"207","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxSidenav.jsx":"208","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxMessagList.jsx":"209","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\MemberEditorDialog.jsx":"210","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\map\\BasicMap.jsx":"211","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\map\\MarkerMap.jsx":"212","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\ShopSidenav.jsx":"213","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxComposeDialog.jsx":"214","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\ControlledAccordion.jsx":"215","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\DetailedExpansionPanel.jsx":"216","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\CustomizedExpansionPanel.jsx":"217","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\SimpleExpansionPanel.jsx":"218","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceViewer.jsx":"219","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing2.jsx":"220","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing1.jsx":"221","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\AdvanceLineChart.jsx":"222","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\RecentUpdates.jsx":"223","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\InventoryDashboard.jsx":"224","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\HeatmapChart.jsx":"225","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\AdvanceAreaChart.jsx":"226","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\AdvanceLineChart2.jsx":"227","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\SimpleHorizontalList.jsx":"228","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\SimpleListDnD.jsx":"229","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\TwoListDnD.jsx":"230","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\AppTodo.jsx":"231","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\TopSellingTable.jsx":"232","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCard5.jsx":"233","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\InventoryDoughnutChart.jsx":"234","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\InventoryLineChart.jsx":"235","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\RecentUpdateCard.jsx":"236","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoList.jsx":"237","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoItem.jsx":"238","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\PropertyListingForm.jsx":"239","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\invoice-form\\InvoiceForm.jsx":"240","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\WizardForm.jsx":"241","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\UploadForm.jsx":"242","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\BasicForm.jsx":"243","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\order-form\\OrderForm.jsx":"244","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\CustomerList.jsx":"245","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList2.jsx":"246","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList1.jsx":"247","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList3.jsx":"248","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList4.jsx":"249","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\orders\\OrderList.jsx":"250","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\products\\ProductViewer.jsx":"251","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\products\\ProductForm.jsx":"252","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\products\\ProductList.jsx":"253","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\faq\\Faq1.jsx":"254","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\faq\\Faq2.jsx":"255","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\NotificationBar2\\NotificationBar2.jsx":"256","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\invoice-form\\InvoiceFormService.js":"257","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\invoice-form\\InvoiceItemTable.jsx":"258","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\themeOptions.js":"259","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\VerticalStepper.jsx":"260","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\HorizontalStepper.jsx":"261","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\forms\\SimpleForm.jsx":"262","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\order-form\\InvoiceCustomer.jsx":"263","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\order-form\\InvoiceOverview.jsx":"264","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\ProfileCard2.jsx":"265","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\ProfileCard1.jsx":"266","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\forms\\AppForm.jsx":"267","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\AppProgress.jsx":"268","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\Analytics.jsx":"269","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\Board.jsx":"270","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\Analytics2.jsx":"271","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\Brand\\Brand.jsx":"272","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\AppAutoComplete.jsx":"273","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\AppSnackbar.jsx":"274","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\AppSlider.jsx":"275","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\AppRadio.jsx":"276","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\AppSwitch.jsx":"277","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\AppDialog.jsx":"278","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\NotificationBar2\\NotificationCard.jsx":"279","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\AppCheckbox.jsx":"280","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\LeftSidebarCard.jsx":"281","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\AppMenu.jsx":"282","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\icons\\AppIcon.jsx":"283","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\buttons\\AppButton.jsx":"284","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\tables\\AppTable.jsx":"285","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\components.js":"286","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\forms\\StepperForm.jsx":"287","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\RowCards.jsx":"288","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\Doughnut.jsx":"289","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\Campaigns.jsx":"290","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCards.jsx":"291","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\UpgradeCard.jsx":"292","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCard4.jsx":"293","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCard3.jsx":"294","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\ModifiedAreaChart.jsx":"295","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\FollowerCard2.jsx":"296","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\ComparisonChart2.jsx":"297","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCards2.jsx":"298","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\FollowerCard.jsx":"299","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardContainer.jsx":"300","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\GuageProgressCard.jsx":"301","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\AsyncAutocomplete.jsx":"302","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\BadgeAutocomplete.jsx":"303","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\PositionedSnackbar.jsx":"304","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\AutocompleteCombo.jsx":"305","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\TransitionSnackbar.jsx":"306","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\CustomizedSnackbar.jsx":"307","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\SimpleSnackbar.jsx":"308","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\RangeSlider.jsx":"309","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\LongLengthSnackbar.jsx":"310","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\ConsecutiveSnackbar.jsx":"311","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\DirectionSnackbar.jsx":"312","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\StackedSnackbar.jsx":"313","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\DiscreteSlider.jsx":"314","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\PlacingRadioLabel.jsx":"315","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\ContinuousSlider.jsx":"316","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\InputSlider.jsx":"317","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\VerticalSlider.jsx":"318","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\SimpleRadio.jsx":"319","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\StandaloneRadio.jsx":"320","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\CustomizedSwitch.jsx":"321","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\LabelledSwitch.jsx":"322","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\FormGroupSwitch.jsx":"323","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\PlacingSwitchLabel.jsx":"324","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\SijmpleSwitch.jsx":"325","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\SimpleMenu.jsx":"326","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\MaxHeightMenu.jsx":"327","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\CustomizedMenu.jsx":"328","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\SelectedMenu.jsx":"329","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\FormGroupCheckbox.jsx":"330","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\LabelledCheckbox.jsx":"331","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\ResponsiveDialog.jsx":"332","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\PlacingCheckboxLabel.jsx":"333","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\FormDialog.jsx":"334","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\ConfirmationDialog.jsx":"335","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\DialogTransition.jsx":"336","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\SimpleCheckbox.jsx":"337","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\OptimalSizeDialog.jsx":"338","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\CustomizedDialog.jsx":"339","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\FullScreenDialog.jsx":"340","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\SimpleAlerts.jsx":"341","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\SimpleDialog.jsx":"342","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\tables\\SimpleTable.jsx":"343","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\tables\\PaginationTable.jsx":"344","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\CardEditorDialog.jsx":"345","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\BoardList.jsx":"346","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardCard.jsx":"347","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardLabelBar.jsx":"348","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\index.jsx":"349","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\serviceWorker.js":"350","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\App.jsx":"351","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\Store.js":"352","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\routes\\routes.jsx":"353","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\index.js":"354","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\index.js":"355","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\contexts\\SettingsContext.js":"356","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\RootReducer.js":"357","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\MatxLayout.jsx":"358","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\ecommerce.js":"359","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\icons\\GoogleIcon.jsx":"360","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\NavigationReducer.js":"361","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\DashboardRoutes.js":"362","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\sessions\\SessionRoutes.js":"363","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\PageLayoutRoutees.js":"364","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\settings.js":"365","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\mock.js":"366","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxSuspense\\MatxSuspense.jsx":"367","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\actions\\NavigationAction.js":"368","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\hooks\\useSettings.js":"369","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\InventoryManagement.jsx":"370","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\sessions\\ForgotPassword.jsx":"371","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\sessions\\register\\FirebaseRegister.jsx":"372","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\sessions\\login\\FirebaseLogin.jsx":"373","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\UserProfile.jsx":"374","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\initThemes.js":"375","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Settings.js":"376","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Settings.js":"377","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\sessions\\NotFound.jsx":"378","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\LeftSidebarCard.jsx":"379","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\Analytics3.jsx":"380","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\Analytics.jsx":"381","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\auth\\authRoles.js":"382","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Loadable\\Loadable.jsx":"383","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\themeColors.js":"384","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\themeOptions.js":"385","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\InventoryDashboard.jsx":"386","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\RecentUpdates.jsx":"387","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\UserProfileSidenav.jsx":"388","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\UserProfileContent.jsx":"389","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\HeatmapChart.jsx":"390","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\AdvanceAreaChart.jsx":"391","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\AdvanceLineChart2.jsx":"392","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\AdvanceLineChart.jsx":"393","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\ModifiedAreaChart.jsx":"394","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\TopSellingTable.jsx":"395","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\UpgradeCard.jsx":"396","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLoading\\MatxLoading.jsx":"397","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Typography.js":"398","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\hooks\\useAuth.js":"399","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\components.js":"400","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\RecentUpdateCard.jsx":"401","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\InventoryLineChart.jsx":"402","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\InventoryDoughnutChart.jsx":"403","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCard5.jsx":"404","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\ProfileBarChart.jsx":"405","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\DummyChart.jsx":"406","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\Doughnut.jsx":"407","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCards2.jsx":"408","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\Campaigns.jsx":"409","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\RowCards.jsx":"410","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCards.jsx":"411","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\GuageProgressCard.jsx":"412","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\ComparisonChart2.jsx":"413","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\FollowerCard2.jsx":"414","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\FollowerCard.jsx":"415","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCard4.jsx":"416","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCard3.jsx":"417","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\utils\\utils.js":"418","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\index.js":"419","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\EcommerceReducer.js":"420","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\NotificationReducer.js":"421","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\ScrumBoardReducer.js":"422","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\navigations.js":"423","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\icons\\FacebookIcon.jsx":"424","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLogo\\MatxLogo.jsx":"425","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\notification.js":"426","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\cards\\SimpleCard.jsx":"427","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\EchartTheme.jsx":"428","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxProgressBar\\MatxProgressBar.jsx":"429","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\list.js":"430","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\todos.js":"431","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\scrumBoard.js":"432","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\chat.js":"433","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\inbox.js":"434","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\ConfirmationDialog\\ConfirmationDialog.jsx":"435","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\MatxTheme.jsx":"436","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\charts\\RechartCreator.jsx":"437","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\charts\\EchartCreator.jsx":"438","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\users.js":"439","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\calendarEvents.js":"440","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\invoice.js":"441","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\auth.js":"442","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\AddToCartButton\\AddToCartButton.jsx":"443","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\ChatHead\\ChatHead.jsx":"444","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxSnackbar\\MatxSnackbar.jsx":"445","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxListItem1\\MatxListItem1.jsx":"446","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\RectangleAvatar\\RectangleAvatar.jsx":"447","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxSidenav\\MatxSidenavContent.jsx":"448","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxSidenav\\MatxSidenavContainer.jsx":"449","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxSidenav\\MatxSidenav.jsx":"450","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\chat-box-2\\Chatbox.jsx":"451","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\ChatAvatar\\ChatAvatar.jsx":"452","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxHorizontalNav\\MatxHorizontalNav.jsx":"453","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxVerticalNav\\MatxVerticalNavExpansionPanel.jsx":"454","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxVerticalNav\\MatxVerticalNav.jsx":"455","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\actions\\EcommerceActions.js":"456","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\actions\\NotificationActions.js":"457","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxSearchBox\\MatxSearchBox.jsx":"458","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\actions\\ScrumBoardActions.js":"459","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxToolbarMenu\\MatxToolbarMenu.jsx":"460","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxMenu\\MatxMenu.jsx":"461","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1.jsx":"462","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2.jsx":"463","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxDivider\\MatxDivider.jsx":"464","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Breadcrumb\\Breadcrumb.jsx":"465","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardRoutes.js":"466","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\DragAndDropRoute.js":"467","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\MaterialRoutes.js":"468","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\data-table\\dataTableRoutes.js":"469","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\EcommerceRoutes.js":"470","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\calendar\\CalendarRoutes.js":"471","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoioceRoutes.js":"472","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\PricingRoutes.js":"473","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxRoutes.js":"474","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoRoutes.js":"475","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\pagesRoutes.js":"476","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\map\\MapRoutes.js":"477","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\list\\ListRoute.js":"478","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\FormsRoutes.js":"479","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\CrudRoutes.js":"480","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatRoutes.js":"481","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\ChartsRoute.js":"482","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\layout2.style.js":"483","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\auth\\AuthGuard.jsx":"484","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Footer\\Footer.jsx":"485","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\SidenavTheme\\SidenavTheme.jsx":"486","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\SecondarySidebar\\SecondarySidebar.jsx":"487","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Navbar.jsx":"488","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Topbar.jsx":"489","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Topbar.jsx":"490","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Sidenav.jsx":"491","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\utils\\constant.js":"492","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\Board.jsx":"493","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\AppScrumBoard.jsx":"494","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\AppDragAndDrop.jsx":"495","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\data-table\\SimpleMuiTable.jsx":"496","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\data-table\\ExpandableMuiDataTable.jsx":"497","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Checkout.jsx":"498","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceDetails.jsx":"499","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceList.jsx":"500","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\calendar\\MatxCalendar.jsx":"501","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing4.jsx":"502","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\AppInbox.jsx":"503","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing3.jsx":"504","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing2.jsx":"505","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing1.jsx":"506","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\tables\\AppTable.jsx":"507","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\AppExpansionPanel.jsx":"508","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\AppSnackbar.jsx":"509","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\AppAutoComplete.jsx":"510","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Shop.jsx":"511","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Cart.jsx":"512","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\AppSlider.jsx":"513","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\AppDialog.jsx":"514","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoEditor.jsx":"515","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\map\\AppMap.jsx":"516","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\AppRadio.jsx":"517","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\CrudTable.jsx":"518","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\list\\AppList.jsx":"519","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\AppChat.jsx":"520","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\AppRechart.jsx":"521","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\ApexCharts.jsx":"522","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\AppEchart.jsx":"523","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\PropertyListingForm.jsx":"524","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerViewer.jsx":"525","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\CustomerForm.jsx":"526","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\invoice-form\\InvoiceForm.jsx":"527","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\WizardForm.jsx":"528","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\UploadForm.jsx":"529","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\BasicForm.jsx":"530","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\order-form\\OrderForm.jsx":"531","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sidenav\\Sidenav.jsx":"532","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceService.js":"533","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxService.js":"534","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatService.js":"535","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\list\\ListService.js":"536","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\TableService.js":"537","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardContainer.jsx":"538","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Country.js":"539","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceEditor.jsx":"540","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceViewer.jsx":"541","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxTopbar.jsx":"542","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxSidenav.jsx":"543","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing2.jsx":"544","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing4.jsx":"545","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing3.jsx":"546","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing1.jsx":"547","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxMessagList.jsx":"548","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\ShopContainer.jsx":"549","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\invoice-form\\InvoiceFormService.js":"550","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\map\\MarkerMap.jsx":"551","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatContainer.jsx":"552","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatSidenav.jsx":"553","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\list\\ListView.jsx":"554","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\list\\ListTopbar.jsx":"555","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\list\\GridView.jsx":"556","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\PlacingRadioLabel.jsx":"557","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\MemberEditorDialog.jsx":"558","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\StandaloneRadio.jsx":"559","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\VerticalStepper.jsx":"560","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\HorizontalStepper.jsx":"561","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\invoice-form\\InvoiceItemTable.jsx":"562","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\ContactPersonForm.jsx":"563","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\OtherDetailsForm.jsx":"564","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerLogs.jsx":"565","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\AddressForm.jsx":"566","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\forms\\SimpleForm.jsx":"567","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\order-form\\InvoiceCustomer.jsx":"568","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\order-form\\InvoiceOverview.jsx":"569","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerInvoice.jsx":"570","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerDetails.jsx":"571","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\ComparisonChart.jsx":"572","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\Doughnut.jsx":"573","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\LineChart.jsx":"574","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\AreaChart.jsx":"575","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\AdvanceLineChart2.jsx":"576","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\AdvanceAreaChart.jsx":"577","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\PeiChart.jsx":"578","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\AdvanceLineChart.jsx":"579","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\HeatmapChart.jsx":"580","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleTreeMap.jsx":"581","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleRadialBar.jsx":"582","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleScatterChart.jsx":"583","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\LineBarAreaComposedChart.jsx":"584","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleRadarChart.jsx":"585","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\TwoSimplePieChart.jsx":"586","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleBarChart.jsx":"587","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\StackedAreaChart.jsx":"588","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleLineChart.jsx":"589","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\SimpleRadio.jsx":"590","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoService.js":"591","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\BoardList.jsx":"592","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\CardEditorDialog.jsx":"593","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\map\\BasicMap.jsx":"594","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\TagDialog.jsx":"595","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxComposeDialog.jsx":"596","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\ConfirmationDialog.jsx":"597","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\ResponsiveDialog.jsx":"598","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\OptimalSizeDialog.jsx":"599","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\FullScreenDialog.jsx":"600","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\CustomizedDialog.jsx":"601","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\FormDialog.jsx":"602","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\ListProductCard.jsx":"603","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\DialogTransition.jsx":"604","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\GridProductCard.jsx":"605","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\SimpleDialog.jsx":"606","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\SimpleAlerts.jsx":"607","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\VerticalSlider.jsx":"608","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\InputSlider.jsx":"609","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\RangeSlider.jsx":"610","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\EmptyMessage.jsx":"611","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\DiscreteSlider.jsx":"612","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\ContinuousSlider.jsx":"613","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\ShopSidenav.jsx":"614","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\BadgeAutocomplete.jsx":"615","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\AsyncAutocomplete.jsx":"616","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\AutocompleteCombo.jsx":"617","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\TransitionSnackbar.jsx":"618","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\StackedSnackbar.jsx":"619","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\DirectionSnackbar.jsx":"620","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\PositionedSnackbar.jsx":"621","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\ConsecutiveSnackbar.jsx":"622","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\LongLengthSnackbar.jsx":"623","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\CustomizedSnackbar.jsx":"624","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\SimpleSnackbar.jsx":"625","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\CustomizedExpansionPanel.jsx":"626","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\DetailedExpansionPanel.jsx":"627","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\tables\\PaginationTable.jsx":"628","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\ControlledAccordion.jsx":"629","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\SimpleExpansionPanel.jsx":"630","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\tables\\SimpleTable.jsx":"631","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerActions.jsx":"632","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerInfo.jsx":"633","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerEmailSender.jsx":"634","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerBillings.jsx":"635","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardCard.jsx":"636","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardLabelBar.jsx":"637","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\calendar\\CalendarService.js":"638","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\calendar\\EventEditorDialog.jsx":"639","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\calendar\\CalendarHeader.jsx":"640","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\PaymentDialog.jsx":"641","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\SimpleHorizontalList.jsx":"642","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\SimpleListDnD.jsx":"643","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\TwoListDnD.jsx":"644","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Brand\\Brand.jsx":"645","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\NotificationBar2\\NotificationBar2.jsx":"646","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\ShoppingCart\\ShoppingCart.jsx":"647","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\NotificationBar2\\NotificationCard.jsx":"648","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\NotificationBar\\NotificationBar.jsx":"649","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\contexts\\NotificationContext.js":"650","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\hooks\\useNotification.js":"651","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\SecondarySidebar\\SecondarySidebarToggle.jsx":"652","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\SecondarySidebar\\SecondarySidebarContent.jsx":"653","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\SecondarySidenavTheme\\SecondarySidenavTheme.jsx":"654","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\AppProgress.jsx":"655","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\CustomerList.jsx":"656","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\AppTodo.jsx":"657","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\products\\ProductForm.jsx":"658","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList3.jsx":"659","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\products\\ProductViewer.jsx":"660","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\products\\ProductList.jsx":"661","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList2.jsx":"662","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList4.jsx":"663","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList1.jsx":"664","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\orders\\OrderList.jsx":"665","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\forms\\AppForm.jsx":"666","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\faq\\Faq2.jsx":"667","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\faq\\Faq1.jsx":"668","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\AppMenu.jsx":"669","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\AppCheckbox.jsx":"670","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\AppSwitch.jsx":"671","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\buttons\\AppButton.jsx":"672","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\icons\\AppIcon.jsx":"673","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxCustomizer\\MatxCustomizer.jsx":"674","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\ProfileCard1.jsx":"675","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoList.jsx":"676","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\ProfileCard2.jsx":"677","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\forms\\StepperForm.jsx":"678","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\SelectedMenu.jsx":"679","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\LabelledCheckbox.jsx":"680","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\SimpleMenu.jsx":"681","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\SimpleCheckbox.jsx":"682","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\CustomizedMenu.jsx":"683","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\MaxHeightMenu.jsx":"684","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\PlacingCheckboxLabel.jsx":"685","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\LabelledSwitch.jsx":"686","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\FormGroupCheckbox.jsx":"687","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\SijmpleSwitch.jsx":"688","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\PlacingSwitchLabel.jsx":"689","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\CustomizedSwitch.jsx":"690","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\FormGroupSwitch.jsx":"691","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxCustomizer\\BadgeSelected.jsx":"692","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoItem.jsx":"693","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\sup-admin-dshboard.jsx":"694","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\sup-admin-routers.js":"695","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-products\\view-products.jsx":"696","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-users\\view-users.jsx":"697","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-users\\new-users.jsx":"698","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\dashboard\\dashboard.jsx":"699","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\dashboard\\card.jsx":"700","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Mis-routers.js":"701","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Dashboard\\dashboard.jsx":"702","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Dashboard\\card.jsx":"703","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-products\\add-products.jsx":"704","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-location\\view-location.jsx":"705","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-location\\add-location.jsx":"706","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-warehouse\\view-warehouse.jsx":"707","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-brands\\view-brands.jsx":"708","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-brands\\add-brand.jsx":"709","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-warehouse\\add-warehouse.jsx":"710","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-bag\\view-bag.jsx":"711","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-bag\\add-bag.jsx":"712","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-tray\\view-tray.jsx":"713","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-tray\\add-tray.jsx":"714","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\ready-for-charging\\view-wht-tray.jsx":"715","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Dashboard\\dashboard.jsx":"716","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Dashboard\\card.jsx":"717","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-warehouse\\view-warehouse.jsx":"718","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bag\\view-bag.jsx":"719","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-location\\view-location.jsx":"720","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-users\\view-users.jsx":"721","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-brands\\view-brands.jsx":"722","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-products\\view-products.jsx":"723","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-tray\\view-tray.jsx":"724","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Ready-for-charging\\view-wht-tray.jsx":"725","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-location\\add-location.jsx":"726","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-users\\new-users.jsx":"727","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bag\\add-bag.jsx":"728","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-brands\\add-brand.jsx":"729","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-warehouse\\add-warehouse.jsx":"730","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-products\\add-products.jsx":"731","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-tray\\add-tray.jsx":"732","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Remove-invalid-item-from-bag\\bag.jsx":"733","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Track-item\\track-item.jsx":"734","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Delivery\\badDelivery.jsx":"735","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Delivery\\delivery.jsx":"736","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Order\\view-bad-order.jsx":"737","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Order\\order.jsx":"738","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Recon-sheet\\delivered-orders.jsx":"739","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Recon-sheet\\not-delivered-orders.jsx":"740","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Uic-manage\\uic-not-generated.jsx":"741","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Uic-manage\\all.jsx":"742","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Uic-manage\\uic-generated.jsx":"743","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Uic-manage\\uic-downloaded.jsx":"744","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bqc\\view-wht-tray.jsx":"745","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-audit\\view-wht-tray.jsx":"746","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-charging\\view-wht-tray.jsx":"747","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\bot-tray.jsx":"748","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Merge\\Mmt-merge\\mmt-tray.jsx":"749","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Merge\\Wht-merge\\wht-tray.jsx":"750","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Order\\bulk-import-order.jsx":"751","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Delivery\\bulk-import-delivery.jsx":"752","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-brands\\bulk-add-brand.jsx":"753","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-products\\add-bulk-products.jsx":"754","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bag\\add-bulk-bag.jsx":"755","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-tray\\add-bulk-tray.jsx":"756","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\WarehouseRouter.js":"757","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-scan.jsx":"758","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Dashboard\\dashboard.jsx":"759","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Dashboard\\card.jsx":"760","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-issue-request\\bag-issue-request.jsx":"761","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\bag-close-requests.jsx":"762","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Pmt-mmt\\tray-close-request\\tray-requests.jsx":"763","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Pmt-mmt\\issued-pmt-mmt\\issue-pmt-mmt.jsx":"764","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bot\\bot-to-release\\bot-tray.jsx":"765","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\wht-tray\\tray.jsx":"766","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\In-sorting\\tray.jsx":"767","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Charging-request\\requests.jsx":"768","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\In-charging\\tray.jsx":"769","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-charging\\tray.jsx":"770","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\In-use-wht\\tray.jsx":"771","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Bqc-request\\tray.jsx":"772","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-bqc\\tray.jsx":"773","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Sorting\\Sorting-requests\\tray.jsx":"774","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Sorting\\Return-from-sorting\\tray.jsx":"775","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Merge\\Merge-request\\tray.jsx":"776","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Merge\\Return-from-merge\\tray.jsx":"777","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Report\\pmt-report.jsx":"778","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Report\\Bot-report\\tray.jsx":"779","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\BotRoutes.js":"780","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\Bag\\view-assigned-all-bag.jsx":"781","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\Tray\\assigned-all-tray.jsx":"782","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\Dashboard\\dashboard.jsx":"783","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\Dashboard\\card.jsx":"784","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\SortingRoutes.js":"785","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\Dashboard\\dashboard.jsx":"786","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\Sorting-request\\tray.jsx":"787","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\Dashboard\\card.jsx":"788","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Charging-components\\ChargingRoutes.js":"789","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Charging-components\\Dashboard\\dashboard.jsx":"790","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Charging-components\\Tray\\tray.jsx":"791","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Charging-components\\Dashboard\\card.jsx":"792","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bqc-components\\BqcRoutes.js":"793","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bqc-components\\Dashboard\\dashboard.jsx":"794","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bqc-components\\Tray\\tray.jsx":"795","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bqc-components\\Dashboard\\card.jsx":"796","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\Login\\loginRouter.js":"797","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\Login\\login.jsx":"798","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\contexts\\PrexoAuthContext.js":"799","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\axios.js":"800","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-products\\edit-product.jsx":"801","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-users\\user-history.jsx":"802","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bag\\bag-audit.jsx":"803","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Ready-for-charging\\view-item.jsx":"804","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Remove-invalid-item-from-bag\\view-item.jsx":"805","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-tray\\tray-audit.jsx":"806","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bot\\assign-dialog.jsx":"807","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bot\\uic-gen.jsx":"808","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bot\\view-bot-tray.jsx":"809","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-charging\\user-dailog.jsx":"810","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bqc\\user-dailog.jsx":"811","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\assign-for-sorting.jsx":"812","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\assign-dailog.jsx":"813","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-issue-request\\ex-vs-act.jsx":"814","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Track\\item-track.jsx":"815","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\Tray\\view-item-tray.jsx":"816","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\Bag\\bot-tray-transcation.jsx":"817","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\summer.jsx":"818","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\view-tray-item.jsx":"819","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\close.jsx":"820","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Pmt-mmt\\issued-pmt-mmt\\view-item.jsx":"821","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\wht-assignment.jsx":"822","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Merge\\Mmt-merge\\view-item.jsx":"823","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bot\\bot-to-release\\view-tray-item.jsx":"824","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\wht-tray\\wht-tray-item.jsx":"825","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Sorting\\Sorting-requests\\detailed-view.jsx":"826","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Sorting\\Sorting-requests\\ex-vs-act.jsx":"827","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\Sorting-request\\start-sorting.jsx":"828","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Merge\\Merge-request\\approve-request.jsx":"829","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Merge\\Return-from-merge\\close.jsx":"830","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Sorting\\Return-from-sorting\\close.jsx":"831","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Charging-request\\approve.jsx":"832","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Bqc-request\\approve.jsx":"833","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Charging-components\\Tray\\charging-in.jsx":"834","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Charging-components\\Tray\\charging-out.jsx":"835","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bqc-components\\Tray\\item-segrgation.jsx":"836","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bqc-components\\Tray\\bqc-out.jsx":"837","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-charging\\close.jsx":"838","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-bqc\\close.jsx":"839","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\view-clubed-item.jsx":"840","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-charging\\view-item.jsx":"841","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-bqc\\view-item.jsx":"842","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Report\\Bot-report\\sku-summery.jsx":"843","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Report\\Bot-report\\from-sku-summery-view-item.jsx":"844","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-tray\\history.jsx":"845","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Report\\mmt-report.jsx":"846","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Change-password\\change-password-router.js":"847","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Change-password\\change -password.jsx":"848","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\Tray-merge\\start-merge.jsx":"849","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\Tray-merge\\tray.jsx":"850","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Report\\sales-bin.jsx":"851","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Ready-for-audit\\wht-tray-view.jsx":"852","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Ready-for-audit\\action.jsx":"853","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\AuditRouter.js":"854","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\start-segrigation.jsx":"855","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Audit-requests.jsx":"856","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\report-data-display.jsx":"857","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Assigned-other-tray\\view-item.jsx":"858","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Dashboard\\dashboard.jsx":"859","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Assigned-other-tray\\assigned-other-tray.jsx":"860","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Dashboard\\card.jsx":"861","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bqc-all-api-report.jsx":"862","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bqc-user-report.jsx":"863","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Report\\amazon-data.jsx":"864","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bot-user-rport.jsx":"865","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bqc-api-data.jsx":"866","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Report\\charging-user-report.jsx":"867","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Ready-for-rdl\\wht-tray.jsx":"868","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\search.jsx":"869","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\AmazonDetails.jsx":"870","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\Bot-user-report.jsx":"871","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\Bqc-api-data-summery.jsx":"872","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\BqcReport.jsx":"873","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\BqcUserReport.jsx":"874","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\ChargingDetails.jsx":"875","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-audit\\user-dailog.jsx":"876","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Ready-for-charging\\bqc-tray.jsx":"877","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\close-tray.jsx":"878","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\handel-view-tray-item.jsx":"879","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Audit-request\\tray.jsx":"880","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\other-tray-return-from-audit.jsx":"881","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Audit-request\\request-approve.jsx":"882","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\wht-tray-release.jsx":"883","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\assign-tray.jsx":"884","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Audit-request\\trayAssignMent.jsx":"885","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Imei-search\\search.jsx":"886","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\view-tray.jsx":"887"},{"size":891,"mtime":1669895873295,"results":"888","hashOfConfig":"889"},{"size":5771,"mtime":1669895873332,"results":"890","hashOfConfig":"889"},{"size":746,"mtime":1669895873390,"results":"891","hashOfConfig":"889"},{"size":520,"mtime":1669895885034,"results":"892","hashOfConfig":"889"},{"size":2515,"mtime":1669895885379,"results":"893","hashOfConfig":"889"},{"size":299,"mtime":1669895885455,"results":"894","hashOfConfig":"889"},{"size":2236,"mtime":1669895873827,"results":"895","hashOfConfig":"889"},{"size":878,"mtime":1669895873574,"results":"896","hashOfConfig":"889"},{"size":3273,"mtime":1669895873547,"results":"897","hashOfConfig":"889"},{"size":464,"mtime":1669895885201,"results":"898","hashOfConfig":"889"},{"size":424,"mtime":1669895874747,"results":"899","hashOfConfig":"889"},{"size":15049,"mtime":1669895885723,"results":"900","hashOfConfig":"889"},{"size":550,"mtime":1669895875330,"results":"901","hashOfConfig":"889"},{"size":433,"mtime":1669895885272,"results":"902","hashOfConfig":"889"},{"size":507,"mtime":1669895873236,"results":"903","hashOfConfig":"889"},{"size":956,"mtime":1669895880597,"results":"904","hashOfConfig":"889"},{"size":137,"mtime":1669895885489,"results":"905","hashOfConfig":"889"},{"size":248,"mtime":1669895876107,"results":"906","hashOfConfig":"889"},{"size":875,"mtime":1669895885070,"results":"907","hashOfConfig":"889"},{"size":177,"mtime":1669895876251,"results":"908","hashOfConfig":"889"},{"size":3800,"mtime":1669895880662,"results":"909","hashOfConfig":"889"},{"size":1176,"mtime":1669895880630,"results":"910","hashOfConfig":"889"},{"size":8896,"mtime":1669895880729,"results":"911","hashOfConfig":"889"},{"size":11859,"mtime":1669895880828,"results":"912","hashOfConfig":"889"},{"size":247,"mtime":1669895874130,"results":"913","hashOfConfig":"889"},{"size":793,"mtime":1669895875502,"results":"914","hashOfConfig":"889"},{"size":5476,"mtime":1669895873767,"results":"915","hashOfConfig":"889"},{"size":285,"mtime":1669895876222,"results":"916","hashOfConfig":"889"},{"size":178,"mtime":1669895874680,"results":"917","hashOfConfig":"889"},{"size":11193,"mtime":1669895873420,"results":"918","hashOfConfig":"889"},{"size":1747,"mtime":1669895885241,"results":"919","hashOfConfig":"889"},{"size":717,"mtime":1669895885345,"results":"920","hashOfConfig":"889"},{"size":2765,"mtime":1669895885308,"results":"921","hashOfConfig":"889"},{"size":472,"mtime":1669895875299,"results":"922","hashOfConfig":"889"},{"size":2909,"mtime":1669895874420,"results":"923","hashOfConfig":"889"},{"size":713,"mtime":1669895874206,"results":"924","hashOfConfig":"889"},{"size":3747,"mtime":1669895874816,"results":"925","hashOfConfig":"889"},{"size":5442,"mtime":1669895874993,"results":"926","hashOfConfig":"889"},{"size":23589,"mtime":1669895885758,"results":"927","hashOfConfig":"889"},{"size":1884,"mtime":1669895885526,"results":"928","hashOfConfig":"889"},{"size":3155,"mtime":1669895885659,"results":"929","hashOfConfig":"889"},{"size":4738,"mtime":1669895885589,"results":"930","hashOfConfig":"889"},{"size":9661,"mtime":1669895885793,"results":"931","hashOfConfig":"889"},{"size":21535,"mtime":1669895885862,"results":"932","hashOfConfig":"889"},{"size":40017,"mtime":1669895885629,"results":"933","hashOfConfig":"889"},{"size":2321,"mtime":1669895885823,"results":"934","hashOfConfig":"889"},{"size":5225,"mtime":1669895885690,"results":"935","hashOfConfig":"889"},{"size":1288,"mtime":1669895874385,"results":"936","hashOfConfig":"889"},{"size":920,"mtime":1669895874714,"results":"937","hashOfConfig":"889"},{"size":3683,"mtime":1669895885557,"results":"938","hashOfConfig":"889"},{"size":2339,"mtime":1669895874281,"results":"939","hashOfConfig":"889"},{"size":324,"mtime":1669895874319,"results":"940","hashOfConfig":"889"},{"size":720,"mtime":1669895874351,"results":"941","hashOfConfig":"889"},{"size":445,"mtime":1669895875874,"results":"942","hashOfConfig":"889"},{"size":1945,"mtime":1669895875906,"results":"943","hashOfConfig":"889"},{"size":2287,"mtime":1669895874581,"results":"944","hashOfConfig":"889"},{"size":1358,"mtime":1669895874000,"results":"945","hashOfConfig":"889"},{"size":991,"mtime":1669895875580,"results":"946","hashOfConfig":"889"},{"size":2536,"mtime":1669895885098,"results":"947","hashOfConfig":"889"},{"size":1191,"mtime":1669895885167,"results":"948","hashOfConfig":"889"},{"size":1747,"mtime":1669895875542,"results":"949","hashOfConfig":"889"},{"size":6164,"mtime":1669895885135,"results":"950","hashOfConfig":"889"},{"size":1104,"mtime":1669895873930,"results":"951","hashOfConfig":"889"},{"size":793,"mtime":1669895876020,"results":"952","hashOfConfig":"889"},{"size":13330,"mtime":1669895876184,"results":"953","hashOfConfig":"889"},{"size":296,"mtime":1669895874482,"results":"954","hashOfConfig":"889"},{"size":310,"mtime":1669895874453,"results":"955","hashOfConfig":"889"},{"size":1157,"mtime":1669895874511,"results":"956","hashOfConfig":"889"},{"size":1807,"mtime":1669895875695,"results":"957","hashOfConfig":"889"},{"size":5070,"mtime":1669895874614,"results":"958","hashOfConfig":"889"},{"size":7766,"mtime":1669895874642,"results":"959","hashOfConfig":"889"},{"size":1960,"mtime":1669895875654,"results":"960","hashOfConfig":"889"},{"size":1210,"mtime":1669895874546,"results":"961","hashOfConfig":"889"},{"size":2069,"mtime":1669895874168,"results":"962","hashOfConfig":"889"},{"size":841,"mtime":1669895873964,"results":"963","hashOfConfig":"889"},{"size":2501,"mtime":1669895875616,"results":"964","hashOfConfig":"889"},{"size":702,"mtime":1669895873636,"results":"965","hashOfConfig":"889"},{"size":319,"mtime":1669895877818,"results":"966","hashOfConfig":"889"},{"size":503,"mtime":1669895876375,"results":"967","hashOfConfig":"889"},{"size":437,"mtime":1669895879239,"results":"968","hashOfConfig":"889"},{"size":863,"mtime":1669895879580,"results":"969","hashOfConfig":"889"},{"size":2299,"mtime":1669895882391,"results":"970","hashOfConfig":"889"},{"size":521,"mtime":1669895884979,"results":"971","hashOfConfig":"889"},{"size":440,"mtime":1669895874895,"results":"972","hashOfConfig":"889"},{"size":399,"mtime":1669895875735,"results":"973","hashOfConfig":"889"},{"size":549,"mtime":1669895877555,"results":"974","hashOfConfig":"889"},{"size":297,"mtime":1669895876653,"results":"975","hashOfConfig":"889"},{"size":470,"mtime":1669895874963,"results":"976","hashOfConfig":"889"},{"size":600,"mtime":1669895884751,"results":"977","hashOfConfig":"889"},{"size":707,"mtime":1669895882351,"results":"978","hashOfConfig":"889"},{"size":3137,"mtime":1669895875023,"results":"979","hashOfConfig":"889"},{"size":3254,"mtime":1669895874927,"results":"980","hashOfConfig":"889"},{"size":5902,"mtime":1669895875055,"results":"981","hashOfConfig":"889"},{"size":840,"mtime":1669895874035,"results":"982","hashOfConfig":"889"},{"size":448,"mtime":1669895875940,"results":"983","hashOfConfig":"889"},{"size":2022,"mtime":1669895873860,"results":"984","hashOfConfig":"889"},{"size":4671,"mtime":1669895874787,"results":"985","hashOfConfig":"889"},{"size":870,"mtime":1669895874842,"results":"986","hashOfConfig":"889"},{"size":2182,"mtime":1669895881190,"results":"987","hashOfConfig":"889"},{"size":264,"mtime":1669895880560,"results":"988","hashOfConfig":"889"},{"size":1261,"mtime":1669895877210,"results":"989","hashOfConfig":"889"},{"size":274,"mtime":1669895876947,"results":"990","hashOfConfig":"889"},{"size":273,"mtime":1669895880924,"results":"991","hashOfConfig":"889"},{"size":280,"mtime":1669895881124,"results":"992","hashOfConfig":"889"},{"size":415,"mtime":1669895879312,"results":"993","hashOfConfig":"889"},{"size":270,"mtime":1669895878028,"results":"994","hashOfConfig":"889"},{"size":173,"mtime":1669895873668,"results":"995","hashOfConfig":"889"},{"size":5030,"mtime":1669895873701,"results":"996","hashOfConfig":"889"},{"size":8580,"mtime":1669895875803,"results":"997","hashOfConfig":"889"},{"size":610,"mtime":1669895878199,"results":"998","hashOfConfig":"889"},{"size":1472,"mtime":1669895877880,"results":"999","hashOfConfig":"889"},{"size":5504,"mtime":1669895879169,"results":"1000","hashOfConfig":"889"},{"size":1346,"mtime":1669895879547,"results":"1001","hashOfConfig":"889"},{"size":22864,"mtime":1669895879617,"results":"1002","hashOfConfig":"889"},{"size":2577,"mtime":1669895884910,"results":"1003","hashOfConfig":"889"},{"size":3075,"mtime":1669895884943,"results":"1004","hashOfConfig":"889"},{"size":10568,"mtime":1669895877716,"results":"1005","hashOfConfig":"889"},{"size":5750,"mtime":1669895876708,"results":"1006","hashOfConfig":"889"},{"size":1606,"mtime":1669895873606,"results":"1007","hashOfConfig":"889"},{"size":1284,"mtime":1669895884685,"results":"1008","hashOfConfig":"889"},{"size":654,"mtime":1669895882284,"results":"1009","hashOfConfig":"889"},{"size":8988,"mtime":1669895882156,"results":"1010","hashOfConfig":"889"},{"size":1946,"mtime":1669895876512,"results":"1011","hashOfConfig":"889"},{"size":12798,"mtime":1669895882316,"results":"1012","hashOfConfig":"889"},{"size":5368,"mtime":1669895882219,"results":"1013","hashOfConfig":"889"},{"size":1684,"mtime":1669895884647,"results":"1014","hashOfConfig":"889"},{"size":5801,"mtime":1669895884716,"results":"1015","hashOfConfig":"889"},{"size":7314,"mtime":1669895877654,"results":"1016","hashOfConfig":"889"},{"size":7363,"mtime":1669895877751,"results":"1017","hashOfConfig":"889"},{"size":2411,"mtime":1669895874069,"results":"1018","hashOfConfig":"889"},{"size":1487,"mtime":1669895874093,"results":"1019","hashOfConfig":"889"},{"size":251,"mtime":1669895875979,"results":"1020","hashOfConfig":"889"},{"size":8524,"mtime":1669895875369,"results":"1021","hashOfConfig":"889"},{"size":7160,"mtime":1669895876145,"results":"1022","hashOfConfig":"889"},{"size":1861,"mtime":1669895873895,"results":"1023","hashOfConfig":"889"},{"size":911,"mtime":1669895880462,"results":"1024","hashOfConfig":"889"},{"size":7615,"mtime":1669895881059,"results":"1025","hashOfConfig":"889"},{"size":3023,"mtime":1669895876879,"results":"1026","hashOfConfig":"889"},{"size":2316,"mtime":1669895880896,"results":"1027","hashOfConfig":"889"},{"size":16397,"mtime":1669895879479,"results":"1028","hashOfConfig":"889"},{"size":5251,"mtime":1669895878124,"results":"1029","hashOfConfig":"889"},{"size":1895,"mtime":1669895881621,"results":"1030","hashOfConfig":"889"},{"size":13846,"mtime":1669895881291,"results":"1031","hashOfConfig":"889"},{"size":2852,"mtime":1669895873518,"results":"1032","hashOfConfig":"889"},{"size":10004,"mtime":1669895877684,"results":"1033","hashOfConfig":"889"},{"size":420,"mtime":1669895876680,"results":"1034","hashOfConfig":"889"},{"size":499,"mtime":1669895884808,"results":"1035","hashOfConfig":"889"},{"size":6560,"mtime":1669895878578,"results":"1036","hashOfConfig":"889"},{"size":5035,"mtime":1669895877587,"results":"1037","hashOfConfig":"889"},{"size":6385,"mtime":1669895876619,"results":"1038","hashOfConfig":"889"},{"size":2444,"mtime":1669895878412,"results":"1039","hashOfConfig":"889"},{"size":2615,"mtime":1669895878651,"results":"1040","hashOfConfig":"889"},{"size":3052,"mtime":1669895876740,"results":"1041","hashOfConfig":"889"},{"size":20475,"mtime":1669895884875,"results":"1042","hashOfConfig":"889"},{"size":7733,"mtime":1669895882186,"results":"1043","hashOfConfig":"889"},{"size":9527,"mtime":1669895882252,"results":"1044","hashOfConfig":"889"},{"size":4338,"mtime":1669895876480,"results":"1045","hashOfConfig":"889"},{"size":17472,"mtime":1669895876444,"results":"1046","hashOfConfig":"889"},{"size":5112,"mtime":1669895877622,"results":"1047","hashOfConfig":"889"},{"size":487,"mtime":1669895876982,"results":"1048","hashOfConfig":"889"},{"size":101,"mtime":1669895880867,"results":"1049","hashOfConfig":"889"},{"size":863,"mtime":1669895879276,"results":"1050","hashOfConfig":"889"},{"size":11523,"mtime":1669895875265,"results":"1051","hashOfConfig":"889"},{"size":812,"mtime":1669895878062,"results":"1052","hashOfConfig":"889"},{"size":4028,"mtime":1669895879447,"results":"1053","hashOfConfig":"889"},{"size":6020,"mtime":1669895880992,"results":"1054","hashOfConfig":"889"},{"size":4905,"mtime":1669895880957,"results":"1055","hashOfConfig":"889"},{"size":2397,"mtime":1669895881022,"results":"1056","hashOfConfig":"889"},{"size":11981,"mtime":1669895881355,"results":"1057","hashOfConfig":"889"},{"size":9222,"mtime":1669895881323,"results":"1058","hashOfConfig":"889"},{"size":3805,"mtime":1669895881261,"results":"1059","hashOfConfig":"889"},{"size":3445,"mtime":1669895878093,"results":"1060","hashOfConfig":"889"},{"size":918,"mtime":1669895881394,"results":"1061","hashOfConfig":"889"},{"size":3254,"mtime":1669895881589,"results":"1062","hashOfConfig":"889"},{"size":4353,"mtime":1669895881522,"results":"1063","hashOfConfig":"889"},{"size":7257,"mtime":1669895878157,"results":"1064","hashOfConfig":"889"},{"size":1726,"mtime":1669895876779,"results":"1065","hashOfConfig":"889"},{"size":197,"mtime":1669895876290,"results":"1066","hashOfConfig":"889"},{"size":2165,"mtime":1669895878614,"results":"1067","hashOfConfig":"889"},{"size":1984,"mtime":1669895878450,"results":"1068","hashOfConfig":"889"},{"size":2084,"mtime":1669895878479,"results":"1069","hashOfConfig":"889"},{"size":5386,"mtime":1669895878814,"results":"1070","hashOfConfig":"889"},{"size":1860,"mtime":1669895878906,"results":"1071","hashOfConfig":"889"},{"size":1408,"mtime":1669895878939,"results":"1072","hashOfConfig":"889"},{"size":1885,"mtime":1669895876575,"results":"1073","hashOfConfig":"889"},{"size":1368,"mtime":1669895876544,"results":"1074","hashOfConfig":"889"},{"size":1524,"mtime":1669895878846,"results":"1075","hashOfConfig":"889"},{"size":2438,"mtime":1669895878877,"results":"1076","hashOfConfig":"889"},{"size":1257,"mtime":1669895878681,"results":"1077","hashOfConfig":"889"},{"size":2380,"mtime":1669895878714,"results":"1078","hashOfConfig":"889"},{"size":2185,"mtime":1669895878382,"results":"1079","hashOfConfig":"889"},{"size":3223,"mtime":1669895878291,"results":"1080","hashOfConfig":"889"},{"size":2668,"mtime":1669895878780,"results":"1081","hashOfConfig":"889"},{"size":2135,"mtime":1669895878747,"results":"1082","hashOfConfig":"889"},{"size":2488,"mtime":1669895878349,"results":"1083","hashOfConfig":"889"},{"size":931,"mtime":1669895878259,"results":"1084","hashOfConfig":"889"},{"size":4255,"mtime":1669895877453,"results":"1085","hashOfConfig":"889"},{"size":249,"mtime":1669895875230,"results":"1086","hashOfConfig":"889"},{"size":2443,"mtime":1669895881556,"results":"1087","hashOfConfig":"889"},{"size":1976,"mtime":1669895881430,"results":"1088","hashOfConfig":"889"},{"size":2980,"mtime":1669895881491,"results":"1089","hashOfConfig":"889"},{"size":671,"mtime":1669895877988,"results":"1090","hashOfConfig":"889"},{"size":2272,"mtime":1669895881460,"results":"1091","hashOfConfig":"889"},{"size":2770,"mtime":1669895877521,"results":"1092","hashOfConfig":"889"},{"size":2552,"mtime":1669895878509,"results":"1093","hashOfConfig":"889"},{"size":1276,"mtime":1669895878544,"results":"1094","hashOfConfig":"889"},{"size":449,"mtime":1669895881151,"results":"1095","hashOfConfig":"889"},{"size":2729,"mtime":1669895876913,"results":"1096","hashOfConfig":"889"},{"size":6221,"mtime":1669895876846,"results":"1097","hashOfConfig":"889"},{"size":6905,"mtime":1669895881090,"results":"1098","hashOfConfig":"889"},{"size":558,"mtime":1669895880498,"results":"1099","hashOfConfig":"889"},{"size":835,"mtime":1669895880529,"results":"1100","hashOfConfig":"889"},{"size":10065,"mtime":1669895877487,"results":"1101","hashOfConfig":"889"},{"size":3697,"mtime":1669895876812,"results":"1102","hashOfConfig":"889"},{"size":4491,"mtime":1669895884509,"results":"1103","hashOfConfig":"889"},{"size":3021,"mtime":1669895884616,"results":"1104","hashOfConfig":"889"},{"size":4369,"mtime":1669895884545,"results":"1105","hashOfConfig":"889"},{"size":2590,"mtime":1669895884578,"results":"1106","hashOfConfig":"889"},{"size":8515,"mtime":1669895884785,"results":"1107","hashOfConfig":"889"},{"size":7732,"mtime":1669895882122,"results":"1108","hashOfConfig":"889"},{"size":7727,"mtime":1669895882086,"results":"1109","hashOfConfig":"889"},{"size":2084,"mtime":1669895880029,"results":"1110","hashOfConfig":"889"},{"size":2393,"mtime":1669895879691,"results":"1111","hashOfConfig":"889"},{"size":5605,"mtime":1669895880266,"results":"1112","hashOfConfig":"889"},{"size":2588,"mtime":1669895880060,"results":"1113","hashOfConfig":"889"},{"size":1984,"mtime":1669895879717,"results":"1114","hashOfConfig":"889"},{"size":2165,"mtime":1669895880426,"results":"1115","hashOfConfig":"889"},{"size":3993,"mtime":1669895877847,"results":"1116","hashOfConfig":"889"},{"size":4263,"mtime":1669895877914,"results":"1117","hashOfConfig":"889"},{"size":7044,"mtime":1669895877790,"results":"1118","hashOfConfig":"889"},{"size":2215,"mtime":1669895879344,"results":"1119","hashOfConfig":"889"},{"size":6471,"mtime":1669895879917,"results":"1120","hashOfConfig":"889"},{"size":2266,"mtime":1669895879777,"results":"1121","hashOfConfig":"889"},{"size":964,"mtime":1669895880326,"results":"1122","hashOfConfig":"889"},{"size":1867,"mtime":1669895880131,"results":"1123","hashOfConfig":"889"},{"size":1572,"mtime":1669895879751,"results":"1124","hashOfConfig":"889"},{"size":13667,"mtime":1669895879377,"results":"1125","hashOfConfig":"889"},{"size":4371,"mtime":1669895879413,"results":"1126","hashOfConfig":"889"},{"size":9636,"mtime":1669895877178,"results":"1127","hashOfConfig":"889"},{"size":24850,"mtime":1669895877316,"results":"1128","hashOfConfig":"889"},{"size":747,"mtime":1669895877053,"results":"1129","hashOfConfig":"889"},{"size":12984,"mtime":1669895877116,"results":"1130","hashOfConfig":"889"},{"size":1082,"mtime":1669895877022,"results":"1131","hashOfConfig":"889"},{"size":2337,"mtime":1669895877387,"results":"1132","hashOfConfig":"889"},{"size":7302,"mtime":1669895881225,"results":"1133","hashOfConfig":"889"},{"size":4102,"mtime":1669895881940,"results":"1134","hashOfConfig":"889"},{"size":6993,"mtime":1669895882004,"results":"1135","hashOfConfig":"889"},{"size":5824,"mtime":1669895881975,"results":"1136","hashOfConfig":"889"},{"size":5575,"mtime":1669895881906,"results":"1137","hashOfConfig":"889"},{"size":9874,"mtime":1669895882044,"results":"1138","hashOfConfig":"889"},{"size":6313,"mtime":1669895881696,"results":"1139","hashOfConfig":"889"},{"size":15202,"mtime":1669895881661,"results":"1140","hashOfConfig":"889"},{"size":9040,"mtime":1669895881725,"results":"1141","hashOfConfig":"889"},{"size":6946,"mtime":1669895881765,"results":"1142","hashOfConfig":"889"},{"size":11394,"mtime":1669895881797,"results":"1143","hashOfConfig":"889"},{"size":3479,"mtime":1669895875424,"results":"1144","hashOfConfig":"889"},{"size":483,"mtime":1669895877283,"results":"1145","hashOfConfig":"889"},{"size":9100,"mtime":1669895877251,"results":"1146","hashOfConfig":"889"},{"size":341,"mtime":1669895875767,"results":"1147","hashOfConfig":"889"},{"size":3586,"mtime":1669895877138,"results":"1148","hashOfConfig":"889"},{"size":3848,"mtime":1669895877088,"results":"1149","hashOfConfig":"889"},{"size":8223,"mtime":1669895882775,"results":"1150","hashOfConfig":"889"},{"size":2396,"mtime":1669895877353,"results":"1151","hashOfConfig":"889"},{"size":11453,"mtime":1669895877416,"results":"1152","hashOfConfig":"889"},{"size":4216,"mtime":1669895881837,"results":"1153","hashOfConfig":"889"},{"size":3773,"mtime":1669895881873,"results":"1154","hashOfConfig":"889"},{"size":1114,"mtime":1669895882806,"results":"1155","hashOfConfig":"889"},{"size":2992,"mtime":1669895882423,"results":"1156","hashOfConfig":"889"},{"size":3911,"mtime":1669895879519,"results":"1157","hashOfConfig":"889"},{"size":5446,"mtime":1669895879040,"results":"1158","hashOfConfig":"889"},{"size":2686,"mtime":1669895879653,"results":"1159","hashOfConfig":"889"},{"size":1221,"mtime":1669895874245,"results":"1160","hashOfConfig":"889"},{"size":1436,"mtime":1669895883014,"results":"1161","hashOfConfig":"889"},{"size":2376,"mtime":1669895883150,"results":"1162","hashOfConfig":"889"},{"size":1695,"mtime":1669895883616,"results":"1163","hashOfConfig":"889"},{"size":1346,"mtime":1669895882703,"results":"1164","hashOfConfig":"889"},{"size":1751,"mtime":1669895884310,"results":"1165","hashOfConfig":"889"},{"size":2476,"mtime":1669895883790,"results":"1166","hashOfConfig":"889"},{"size":2914,"mtime":1669895875461,"results":"1167","hashOfConfig":"889"},{"size":1595,"mtime":1669895883449,"results":"1168","hashOfConfig":"889"},{"size":7738,"mtime":1669895876403,"results":"1169","hashOfConfig":"889"},{"size":1487,"mtime":1669895884240,"results":"1170","hashOfConfig":"889"},{"size":19499,"mtime":1669895884118,"results":"1171","hashOfConfig":"889"},{"size":7323,"mtime":1669895882846,"results":"1172","hashOfConfig":"889"},{"size":1137,"mtime":1669895882495,"results":"1173","hashOfConfig":"889"},{"size":3102,"mtime":1669895875841,"results":"1174","hashOfConfig":"889"},{"size":5093,"mtime":1669895882744,"results":"1175","hashOfConfig":"889"},{"size":3862,"mtime":1669895880097,"results":"1176","hashOfConfig":"889"},{"size":3223,"mtime":1669895879941,"results":"1177","hashOfConfig":"889"},{"size":2543,"mtime":1669895880198,"results":"1178","hashOfConfig":"889"},{"size":3943,"mtime":1669895879973,"results":"1179","hashOfConfig":"889"},{"size":1634,"mtime":1669895880231,"results":"1180","hashOfConfig":"889"},{"size":2246,"mtime":1669895879844,"results":"1181","hashOfConfig":"889"},{"size":2259,"mtime":1669895879882,"results":"1182","hashOfConfig":"889"},{"size":2233,"mtime":1669895880166,"results":"1183","hashOfConfig":"889"},{"size":2965,"mtime":1669895880294,"results":"1184","hashOfConfig":"889"},{"size":3001,"mtime":1669895880000,"results":"1185","hashOfConfig":"889"},{"size":3125,"mtime":1669895880364,"results":"1186","hashOfConfig":"889"},{"size":3427,"mtime":1669895879812,"results":"1187","hashOfConfig":"889"},{"size":8364,"mtime":1669895878978,"results":"1188","hashOfConfig":"889"},{"size":3722,"mtime":1669895880396,"results":"1189","hashOfConfig":"889"},{"size":2595,"mtime":1669895882949,"results":"1190","hashOfConfig":"889"},{"size":7466,"mtime":1669895882979,"results":"1191","hashOfConfig":"889"},{"size":2077,"mtime":1669895883280,"results":"1192","hashOfConfig":"889"},{"size":4101,"mtime":1669895882917,"results":"1193","hashOfConfig":"889"},{"size":1331,"mtime":1669895883182,"results":"1194","hashOfConfig":"889"},{"size":2602,"mtime":1669895883089,"results":"1195","hashOfConfig":"889"},{"size":1735,"mtime":1669895883120,"results":"1196","hashOfConfig":"889"},{"size":762,"mtime":1669895883510,"results":"1197","hashOfConfig":"889"},{"size":1298,"mtime":1669895883245,"results":"1198","hashOfConfig":"889"},{"size":2917,"mtime":1669895883053,"results":"1199","hashOfConfig":"889"},{"size":1592,"mtime":1669895883217,"results":"1200","hashOfConfig":"889"},{"size":906,"mtime":1669895883312,"results":"1201","hashOfConfig":"889"},{"size":2467,"mtime":1669895883645,"results":"1202","hashOfConfig":"889"},{"size":1571,"mtime":1669895882671,"results":"1203","hashOfConfig":"889"},{"size":1206,"mtime":1669895883704,"results":"1204","hashOfConfig":"889"},{"size":1859,"mtime":1669895883546,"results":"1205","hashOfConfig":"889"},{"size":1440,"mtime":1669895883671,"results":"1206","hashOfConfig":"889"},{"size":3566,"mtime":1669895882637,"results":"1207","hashOfConfig":"889"},{"size":2120,"mtime":1669895882602,"results":"1208","hashOfConfig":"889"},{"size":4480,"mtime":1669895884344,"results":"1209","hashOfConfig":"889"},{"size":1651,"mtime":1669895884471,"results":"1210","hashOfConfig":"889"},{"size":1967,"mtime":1669895884437,"results":"1211","hashOfConfig":"889"},{"size":1734,"mtime":1669895884407,"results":"1212","hashOfConfig":"889"},{"size":1552,"mtime":1669895884377,"results":"1213","hashOfConfig":"889"},{"size":1045,"mtime":1669895884186,"results":"1214","hashOfConfig":"889"},{"size":1646,"mtime":1669895884274,"results":"1215","hashOfConfig":"889"},{"size":2601,"mtime":1669895884214,"results":"1216","hashOfConfig":"889"},{"size":2130,"mtime":1669895884152,"results":"1217","hashOfConfig":"889"},{"size":3883,"mtime":1669895883387,"results":"1218","hashOfConfig":"889"},{"size":3610,"mtime":1669895883353,"results":"1219","hashOfConfig":"889"},{"size":2042,"mtime":1669895884080,"results":"1220","hashOfConfig":"889"},{"size":1750,"mtime":1669895883477,"results":"1221","hashOfConfig":"889"},{"size":2109,"mtime":1669895883914,"results":"1222","hashOfConfig":"889"},{"size":4880,"mtime":1669895884049,"results":"1223","hashOfConfig":"889"},{"size":2152,"mtime":1669895884017,"results":"1224","hashOfConfig":"889"},{"size":2127,"mtime":1669895883419,"results":"1225","hashOfConfig":"889"},{"size":4245,"mtime":1669895883836,"results":"1226","hashOfConfig":"889"},{"size":3970,"mtime":1669895883750,"results":"1227","hashOfConfig":"889"},{"size":2889,"mtime":1669895883952,"results":"1228","hashOfConfig":"889"},{"size":1881,"mtime":1669895883986,"results":"1229","hashOfConfig":"889"},{"size":3395,"mtime":1669895883881,"results":"1230","hashOfConfig":"889"},{"size":3262,"mtime":1669895882563,"results":"1231","hashOfConfig":"889"},{"size":4939,"mtime":1669895882529,"results":"1232","hashOfConfig":"889"},{"size":27925,"mtime":1669895879076,"results":"1233","hashOfConfig":"889"},{"size":11885,"mtime":1669895879109,"results":"1234","hashOfConfig":"889"},{"size":4262,"mtime":1669895879133,"results":"1235","hashOfConfig":"889"},{"size":459,"mtime":1669895879006,"results":"1236","hashOfConfig":"889"},{"size":923,"mtime":1676378876138,"results":"1237","hashOfConfig":"1238"},{"size":5771,"mtime":1669895873332,"results":"1239","hashOfConfig":"1238"},{"size":743,"mtime":1671706881214,"results":"1240","hashOfConfig":"1238"},{"size":520,"mtime":1669895885034,"results":"1241","hashOfConfig":"1238"},{"size":3652,"mtime":1676369346964,"results":"1242","hashOfConfig":"1238"},{"size":299,"mtime":1669895885455,"results":"1243","hashOfConfig":"1238"},{"size":2236,"mtime":1669895873827,"results":"1244","hashOfConfig":"1238"},{"size":878,"mtime":1669895873574,"results":"1245","hashOfConfig":"1238"},{"size":464,"mtime":1669895885201,"results":"1246","hashOfConfig":"1238"},{"size":424,"mtime":1669895874747,"results":"1247","hashOfConfig":"1238"},{"size":15049,"mtime":1669895885723,"results":"1248","hashOfConfig":"1238"},{"size":550,"mtime":1669895875330,"results":"1249","hashOfConfig":"1238"},{"size":433,"mtime":1669895885272,"results":"1250","hashOfConfig":"1238"},{"size":871,"mtime":1671181929922,"results":"1251","hashOfConfig":"1238"},{"size":956,"mtime":1671705653906,"results":"1252","hashOfConfig":"1238"},{"size":503,"mtime":1669895876375,"results":"1253","hashOfConfig":"1238"},{"size":920,"mtime":1671183984371,"results":"1254","hashOfConfig":"1238"},{"size":137,"mtime":1669895885489,"results":"1255","hashOfConfig":"1238"},{"size":248,"mtime":1669895876107,"results":"1256","hashOfConfig":"1238"},{"size":900,"mtime":1671709794914,"results":"1257","hashOfConfig":"1238"},{"size":177,"mtime":1669895876251,"results":"1258","hashOfConfig":"1238"},{"size":1346,"mtime":1669895879547,"results":"1259","hashOfConfig":"1238"},{"size":3800,"mtime":1669895880662,"results":"1260","hashOfConfig":"1238"},{"size":8875,"mtime":1671702525149,"results":"1261","hashOfConfig":"1238"},{"size":11865,"mtime":1671704120839,"results":"1262","hashOfConfig":"1238"},{"size":1946,"mtime":1669895876512,"results":"1263","hashOfConfig":"1238"},{"size":399,"mtime":1669895875735,"results":"1264","hashOfConfig":"1238"},{"size":440,"mtime":1669895874895,"results":"1265","hashOfConfig":"1238"},{"size":470,"mtime":1669895874963,"results":"1266","hashOfConfig":"1238"},{"size":1176,"mtime":1669895880630,"results":"1267","hashOfConfig":"1238"},{"size":7738,"mtime":1669895876403,"results":"1268","hashOfConfig":"1238"},{"size":22864,"mtime":1669895879617,"results":"1269","hashOfConfig":"1238"},{"size":3911,"mtime":1669895879519,"results":"1270","hashOfConfig":"1238"},{"size":802,"mtime":1676369346670,"results":"1271","hashOfConfig":"1238"},{"size":247,"mtime":1669895874130,"results":"1272","hashOfConfig":"1238"},{"size":8580,"mtime":1669895875803,"results":"1273","hashOfConfig":"1238"},{"size":341,"mtime":1669895875767,"results":"1274","hashOfConfig":"1238"},{"size":5605,"mtime":1669895880266,"results":"1275","hashOfConfig":"1238"},{"size":2393,"mtime":1669895879691,"results":"1276","hashOfConfig":"1238"},{"size":4338,"mtime":1669895876480,"results":"1277","hashOfConfig":"1238"},{"size":17472,"mtime":1669895876444,"results":"1278","hashOfConfig":"1238"},{"size":2588,"mtime":1669895880060,"results":"1279","hashOfConfig":"1238"},{"size":1984,"mtime":1669895879717,"results":"1280","hashOfConfig":"1238"},{"size":2165,"mtime":1669895880426,"results":"1281","hashOfConfig":"1238"},{"size":2084,"mtime":1669895880029,"results":"1282","hashOfConfig":"1238"},{"size":2233,"mtime":1669895880166,"results":"1283","hashOfConfig":"1238"},{"size":6471,"mtime":1669895879917,"results":"1284","hashOfConfig":"1238"},{"size":1634,"mtime":1669895880231,"results":"1285","hashOfConfig":"1238"},{"size":793,"mtime":1669895875502,"results":"1286","hashOfConfig":"1238"},{"size":5476,"mtime":1671516053497,"results":"1287","hashOfConfig":"1238"},{"size":282,"mtime":1671706881217,"results":"1288","hashOfConfig":"1238"},{"size":3102,"mtime":1669895875841,"results":"1289","hashOfConfig":"1238"},{"size":1572,"mtime":1669895879751,"results":"1290","hashOfConfig":"1238"},{"size":1867,"mtime":1669895880131,"results":"1291","hashOfConfig":"1238"},{"size":964,"mtime":1669895880326,"results":"1292","hashOfConfig":"1238"},{"size":2266,"mtime":1669895879777,"results":"1293","hashOfConfig":"1238"},{"size":1885,"mtime":1669895876575,"results":"1294","hashOfConfig":"1238"},{"size":1368,"mtime":1669895876544,"results":"1295","hashOfConfig":"1238"},{"size":3223,"mtime":1669895879941,"results":"1296","hashOfConfig":"1238"},{"size":3125,"mtime":1669895880364,"results":"1297","hashOfConfig":"1238"},{"size":2543,"mtime":1669895880198,"results":"1298","hashOfConfig":"1238"},{"size":3862,"mtime":1669895880097,"results":"1299","hashOfConfig":"1238"},{"size":3943,"mtime":1669895879973,"results":"1300","hashOfConfig":"1238"},{"size":3722,"mtime":1669895880396,"results":"1301","hashOfConfig":"1238"},{"size":3001,"mtime":1669895880000,"results":"1302","hashOfConfig":"1238"},{"size":2965,"mtime":1669895880294,"results":"1303","hashOfConfig":"1238"},{"size":3427,"mtime":1669895879812,"results":"1304","hashOfConfig":"1238"},{"size":2246,"mtime":1669895879844,"results":"1305","hashOfConfig":"1238"},{"size":2259,"mtime":1669895879882,"results":"1306","hashOfConfig":"1238"},{"size":5030,"mtime":1669895873701,"results":"1307","hashOfConfig":"1238"},{"size":178,"mtime":1669895874680,"results":"1308","hashOfConfig":"1238"},{"size":1747,"mtime":1669895885241,"results":"1309","hashOfConfig":"1238"},{"size":717,"mtime":1669895885345,"results":"1310","hashOfConfig":"1238"},{"size":2765,"mtime":1669895885308,"results":"1311","hashOfConfig":"1238"},{"size":25316,"mtime":1676378876132,"results":"1312","hashOfConfig":"1238"},{"size":472,"mtime":1669895875299,"results":"1313","hashOfConfig":"1238"},{"size":2909,"mtime":1669895874420,"results":"1314","hashOfConfig":"1238"},{"size":1884,"mtime":1669895885526,"results":"1315","hashOfConfig":"1238"},{"size":713,"mtime":1669895874206,"results":"1316","hashOfConfig":"1238"},{"size":1945,"mtime":1669895875906,"results":"1317","hashOfConfig":"1238"},{"size":1288,"mtime":1669895874385,"results":"1318","hashOfConfig":"1238"},{"size":3155,"mtime":1669895885659,"results":"1319","hashOfConfig":"1238"},{"size":4738,"mtime":1669895885589,"results":"1320","hashOfConfig":"1238"},{"size":23589,"mtime":1669895885758,"results":"1321","hashOfConfig":"1238"},{"size":9661,"mtime":1669895885793,"results":"1322","hashOfConfig":"1238"},{"size":21535,"mtime":1669895885862,"results":"1323","hashOfConfig":"1238"},{"size":2339,"mtime":1669895874281,"results":"1324","hashOfConfig":"1238"},{"size":445,"mtime":1669895875874,"results":"1325","hashOfConfig":"1238"},{"size":324,"mtime":1669895874319,"results":"1326","hashOfConfig":"1238"},{"size":720,"mtime":1669895874351,"results":"1327","hashOfConfig":"1238"},{"size":40017,"mtime":1669895885629,"results":"1328","hashOfConfig":"1238"},{"size":2321,"mtime":1669895885823,"results":"1329","hashOfConfig":"1238"},{"size":5225,"mtime":1669895885690,"results":"1330","hashOfConfig":"1238"},{"size":3683,"mtime":1669895885557,"results":"1331","hashOfConfig":"1238"},{"size":2287,"mtime":1669895874581,"results":"1332","hashOfConfig":"1238"},{"size":1358,"mtime":1669895874000,"results":"1333","hashOfConfig":"1238"},{"size":991,"mtime":1669895875580,"results":"1334","hashOfConfig":"1238"},{"size":1747,"mtime":1669895875542,"results":"1335","hashOfConfig":"1238"},{"size":1104,"mtime":1669895873930,"results":"1336","hashOfConfig":"1238"},{"size":296,"mtime":1669895874482,"results":"1337","hashOfConfig":"1238"},{"size":310,"mtime":1669895874453,"results":"1338","hashOfConfig":"1238"},{"size":1157,"mtime":1669895874511,"results":"1339","hashOfConfig":"1238"},{"size":13330,"mtime":1669895876184,"results":"1340","hashOfConfig":"1238"},{"size":793,"mtime":1669895876020,"results":"1341","hashOfConfig":"1238"},{"size":1807,"mtime":1669895875695,"results":"1342","hashOfConfig":"1238"},{"size":5070,"mtime":1669895874614,"results":"1343","hashOfConfig":"1238"},{"size":7766,"mtime":1669895874642,"results":"1344","hashOfConfig":"1238"},{"size":2536,"mtime":1669895885098,"results":"1345","hashOfConfig":"1238"},{"size":1191,"mtime":1669895885167,"results":"1346","hashOfConfig":"1238"},{"size":1960,"mtime":1669895875654,"results":"1347","hashOfConfig":"1238"},{"size":6164,"mtime":1669895885135,"results":"1348","hashOfConfig":"1238"},{"size":1210,"mtime":1669895874546,"results":"1349","hashOfConfig":"1238"},{"size":2069,"mtime":1669895874168,"results":"1350","hashOfConfig":"1238"},{"size":5442,"mtime":1669895874993,"results":"1351","hashOfConfig":"1238"},{"size":3747,"mtime":1669895874816,"results":"1352","hashOfConfig":"1238"},{"size":841,"mtime":1669895873964,"results":"1353","hashOfConfig":"1238"},{"size":2501,"mtime":1671683954762,"results":"1354","hashOfConfig":"1238"},{"size":437,"mtime":1669895879239,"results":"1355","hashOfConfig":"1238"},{"size":319,"mtime":1669895877818,"results":"1356","hashOfConfig":"1238"},{"size":2299,"mtime":1669895882391,"results":"1357","hashOfConfig":"1238"},{"size":521,"mtime":1669895884979,"results":"1358","hashOfConfig":"1238"},{"size":549,"mtime":1669895877555,"results":"1359","hashOfConfig":"1238"},{"size":297,"mtime":1669895876653,"results":"1360","hashOfConfig":"1238"},{"size":600,"mtime":1669895884751,"results":"1361","hashOfConfig":"1238"},{"size":707,"mtime":1669895882351,"results":"1362","hashOfConfig":"1238"},{"size":274,"mtime":1669895876947,"results":"1363","hashOfConfig":"1238"},{"size":415,"mtime":1669895879312,"results":"1364","hashOfConfig":"1238"},{"size":2182,"mtime":1669895881190,"results":"1365","hashOfConfig":"1238"},{"size":264,"mtime":1669895880560,"results":"1366","hashOfConfig":"1238"},{"size":273,"mtime":1669895880924,"results":"1367","hashOfConfig":"1238"},{"size":1261,"mtime":1669895877210,"results":"1368","hashOfConfig":"1238"},{"size":280,"mtime":1669895881124,"results":"1369","hashOfConfig":"1238"},{"size":270,"mtime":1669895878028,"results":"1370","hashOfConfig":"1238"},{"size":610,"mtime":1669895878199,"results":"1371","hashOfConfig":"1238"},{"size":3254,"mtime":1669895874927,"results":"1372","hashOfConfig":"1238"},{"size":3508,"mtime":1675084227093,"results":"1373","hashOfConfig":"1238"},{"size":1756,"mtime":1671183562025,"results":"1374","hashOfConfig":"1238"},{"size":448,"mtime":1669895875940,"results":"1375","hashOfConfig":"1238"},{"size":848,"mtime":1671518770494,"results":"1376","hashOfConfig":"1238"},{"size":870,"mtime":1669895874842,"results":"1377","hashOfConfig":"1238"},{"size":6227,"mtime":1676369346725,"results":"1378","hashOfConfig":"1238"},{"size":4671,"mtime":1669895874787,"results":"1379","hashOfConfig":"1238"},{"size":3137,"mtime":1669895875023,"results":"1380","hashOfConfig":"1238"},{"size":173,"mtime":1669895873668,"results":"1381","hashOfConfig":"1238"},{"size":5446,"mtime":1669895879040,"results":"1382","hashOfConfig":"1238"},{"size":5504,"mtime":1669895879169,"results":"1383","hashOfConfig":"1238"},{"size":1472,"mtime":1669895877880,"results":"1384","hashOfConfig":"1238"},{"size":2608,"mtime":1671195349402,"results":"1385","hashOfConfig":"1238"},{"size":3075,"mtime":1669895884943,"results":"1386","hashOfConfig":"1238"},{"size":10568,"mtime":1669895877716,"results":"1387","hashOfConfig":"1238"},{"size":1284,"mtime":1669895884685,"results":"1388","hashOfConfig":"1238"},{"size":5801,"mtime":1669895884716,"results":"1389","hashOfConfig":"1238"},{"size":5750,"mtime":1669895876708,"results":"1390","hashOfConfig":"1238"},{"size":8988,"mtime":1669895882156,"results":"1391","hashOfConfig":"1238"},{"size":3023,"mtime":1669895876879,"results":"1392","hashOfConfig":"1238"},{"size":654,"mtime":1669895882284,"results":"1393","hashOfConfig":"1238"},{"size":12798,"mtime":1669895882316,"results":"1394","hashOfConfig":"1238"},{"size":5368,"mtime":1669895882219,"results":"1395","hashOfConfig":"1238"},{"size":1137,"mtime":1669895882495,"results":"1396","hashOfConfig":"1238"},{"size":1684,"mtime":1669895884647,"results":"1397","hashOfConfig":"1238"},{"size":2376,"mtime":1669895883150,"results":"1398","hashOfConfig":"1238"},{"size":1436,"mtime":1669895883014,"results":"1399","hashOfConfig":"1238"},{"size":7363,"mtime":1669895877751,"results":"1400","hashOfConfig":"1238"},{"size":7314,"mtime":1669895877654,"results":"1401","hashOfConfig":"1238"},{"size":1695,"mtime":1669895883616,"results":"1402","hashOfConfig":"1238"},{"size":2476,"mtime":1669895883790,"results":"1403","hashOfConfig":"1238"},{"size":16397,"mtime":1669895879479,"results":"1404","hashOfConfig":"1238"},{"size":911,"mtime":1669895880462,"results":"1405","hashOfConfig":"1238"},{"size":1346,"mtime":1669895882703,"results":"1406","hashOfConfig":"1238"},{"size":7615,"mtime":1669895881059,"results":"1407","hashOfConfig":"1238"},{"size":2316,"mtime":1669895880896,"results":"1408","hashOfConfig":"1238"},{"size":5251,"mtime":1669895878124,"results":"1409","hashOfConfig":"1238"},{"size":2615,"mtime":1669895878651,"results":"1410","hashOfConfig":"1238"},{"size":6560,"mtime":1669895878578,"results":"1411","hashOfConfig":"1238"},{"size":2444,"mtime":1669895878412,"results":"1412","hashOfConfig":"1238"},{"size":9636,"mtime":1669895877178,"results":"1413","hashOfConfig":"1238"},{"size":1895,"mtime":1669895881621,"results":"1414","hashOfConfig":"1238"},{"size":13846,"mtime":1669895881291,"results":"1415","hashOfConfig":"1238"},{"size":24850,"mtime":1669895877316,"results":"1416","hashOfConfig":"1238"},{"size":747,"mtime":1669895877053,"results":"1417","hashOfConfig":"1238"},{"size":12984,"mtime":1669895877116,"results":"1418","hashOfConfig":"1238"},{"size":1082,"mtime":1669895877022,"results":"1419","hashOfConfig":"1238"},{"size":2337,"mtime":1669895877387,"results":"1420","hashOfConfig":"1238"},{"size":1861,"mtime":1669895873895,"results":"1421","hashOfConfig":"1238"},{"size":499,"mtime":1669895884808,"results":"1422","hashOfConfig":"1238"},{"size":487,"mtime":1669895876982,"results":"1423","hashOfConfig":"1238"},{"size":812,"mtime":1669895878062,"results":"1424","hashOfConfig":"1238"},{"size":101,"mtime":1669895880867,"results":"1425","hashOfConfig":"1238"},{"size":449,"mtime":1669895881151,"results":"1426","hashOfConfig":"1238"},{"size":8364,"mtime":1669895878978,"results":"1427","hashOfConfig":"1238"},{"size":10004,"mtime":1669895877684,"results":"1428","hashOfConfig":"1238"},{"size":20475,"mtime":1669895884875,"results":"1429","hashOfConfig":"1238"},{"size":8515,"mtime":1669895884785,"results":"1430","hashOfConfig":"1238"},{"size":1726,"mtime":1669895876779,"results":"1431","hashOfConfig":"1238"},{"size":2729,"mtime":1669895876913,"results":"1432","hashOfConfig":"1238"},{"size":7732,"mtime":1669895882122,"results":"1433","hashOfConfig":"1238"},{"size":9527,"mtime":1669895882252,"results":"1434","hashOfConfig":"1238"},{"size":7733,"mtime":1669895882186,"results":"1435","hashOfConfig":"1238"},{"size":7727,"mtime":1669895882086,"results":"1436","hashOfConfig":"1238"},{"size":6221,"mtime":1669895876846,"results":"1437","hashOfConfig":"1238"},{"size":5112,"mtime":1669895877622,"results":"1438","hashOfConfig":"1238"},{"size":483,"mtime":1669895877283,"results":"1439","hashOfConfig":"1238"},{"size":835,"mtime":1669895880529,"results":"1440","hashOfConfig":"1238"},{"size":7257,"mtime":1669895878157,"results":"1441","hashOfConfig":"1238"},{"size":3445,"mtime":1669895878093,"results":"1442","hashOfConfig":"1238"},{"size":6020,"mtime":1669895880992,"results":"1443","hashOfConfig":"1238"},{"size":2397,"mtime":1669895881022,"results":"1444","hashOfConfig":"1238"},{"size":4905,"mtime":1669895880957,"results":"1445","hashOfConfig":"1238"},{"size":1571,"mtime":1669895882671,"results":"1446","hashOfConfig":"1238"},{"size":6884,"mtime":1672463650296,"results":"1447","hashOfConfig":"1238"},{"size":2120,"mtime":1669895882602,"results":"1448","hashOfConfig":"1238"},{"size":3586,"mtime":1669895877138,"results":"1449","hashOfConfig":"1238"},{"size":3848,"mtime":1669895877088,"results":"1450","hashOfConfig":"1238"},{"size":9100,"mtime":1669895877251,"results":"1451","hashOfConfig":"1238"},{"size":9222,"mtime":1669895881323,"results":"1452","hashOfConfig":"1238"},{"size":3805,"mtime":1669895881261,"results":"1453","hashOfConfig":"1238"},{"size":3254,"mtime":1669895881589,"results":"1454","hashOfConfig":"1238"},{"size":11981,"mtime":1669895881355,"results":"1455","hashOfConfig":"1238"},{"size":8223,"mtime":1669895882775,"results":"1456","hashOfConfig":"1238"},{"size":2396,"mtime":1669895877353,"results":"1457","hashOfConfig":"1238"},{"size":11453,"mtime":1669895877416,"results":"1458","hashOfConfig":"1238"},{"size":4353,"mtime":1669895881522,"results":"1459","hashOfConfig":"1238"},{"size":918,"mtime":1669895881394,"results":"1460","hashOfConfig":"1238"},{"size":2185,"mtime":1669895878382,"results":"1461","hashOfConfig":"1238"},{"size":3223,"mtime":1669895878291,"results":"1462","hashOfConfig":"1238"},{"size":2488,"mtime":1669895878349,"results":"1463","hashOfConfig":"1238"},{"size":931,"mtime":1669895878259,"results":"1464","hashOfConfig":"1238"},{"size":2165,"mtime":1669895878614,"results":"1465","hashOfConfig":"1238"},{"size":1984,"mtime":1669895878450,"results":"1466","hashOfConfig":"1238"},{"size":1276,"mtime":1669895878544,"results":"1467","hashOfConfig":"1238"},{"size":2084,"mtime":1669895878479,"results":"1468","hashOfConfig":"1238"},{"size":2552,"mtime":1669895878509,"results":"1469","hashOfConfig":"1238"},{"size":5386,"mtime":1669895878814,"results":"1470","hashOfConfig":"1238"},{"size":1860,"mtime":1669895878906,"results":"1471","hashOfConfig":"1238"},{"size":1257,"mtime":1669895878681,"results":"1472","hashOfConfig":"1238"},{"size":2438,"mtime":1669895878877,"results":"1473","hashOfConfig":"1238"},{"size":1408,"mtime":1669895878939,"results":"1474","hashOfConfig":"1238"},{"size":1524,"mtime":1669895878846,"results":"1475","hashOfConfig":"1238"},{"size":2135,"mtime":1669895878747,"results":"1476","hashOfConfig":"1238"},{"size":2668,"mtime":1669895878780,"results":"1477","hashOfConfig":"1238"},{"size":2380,"mtime":1669895878714,"results":"1478","hashOfConfig":"1238"},{"size":3566,"mtime":1669895882637,"results":"1479","hashOfConfig":"1238"},{"size":863,"mtime":1669895879276,"results":"1480","hashOfConfig":"1238"},{"size":11885,"mtime":1669895879109,"results":"1481","hashOfConfig":"1238"},{"size":27925,"mtime":1669895879076,"results":"1482","hashOfConfig":"1238"},{"size":558,"mtime":1669895880498,"results":"1483","hashOfConfig":"1238"},{"size":4028,"mtime":1669895879447,"results":"1484","hashOfConfig":"1238"},{"size":3697,"mtime":1669895876812,"results":"1485","hashOfConfig":"1238"},{"size":4880,"mtime":1669895884049,"results":"1486","hashOfConfig":"1238"},{"size":2042,"mtime":1669895884080,"results":"1487","hashOfConfig":"1238"},{"size":4245,"mtime":1669895883836,"results":"1488","hashOfConfig":"1238"},{"size":2889,"mtime":1669895883952,"results":"1489","hashOfConfig":"1238"},{"size":3970,"mtime":1669895883750,"results":"1490","hashOfConfig":"1238"},{"size":2109,"mtime":1669895883914,"results":"1491","hashOfConfig":"1238"},{"size":4255,"mtime":1669895877453,"results":"1492","hashOfConfig":"1238"},{"size":2152,"mtime":1669895884017,"results":"1493","hashOfConfig":"1238"},{"size":2770,"mtime":1669895877521,"results":"1494","hashOfConfig":"1238"},{"size":3395,"mtime":1669895883881,"results":"1495","hashOfConfig":"1238"},{"size":1881,"mtime":1669895883986,"results":"1496","hashOfConfig":"1238"},{"size":1440,"mtime":1669895883671,"results":"1497","hashOfConfig":"1238"},{"size":1859,"mtime":1669895883546,"results":"1498","hashOfConfig":"1238"},{"size":762,"mtime":1669895883510,"results":"1499","hashOfConfig":"1238"},{"size":671,"mtime":1669895877988,"results":"1500","hashOfConfig":"1238"},{"size":2467,"mtime":1669895883645,"results":"1501","hashOfConfig":"1238"},{"size":1206,"mtime":1669895883704,"results":"1502","hashOfConfig":"1238"},{"size":10065,"mtime":1669895877487,"results":"1503","hashOfConfig":"1238"},{"size":7466,"mtime":1669895882979,"results":"1504","hashOfConfig":"1238"},{"size":2595,"mtime":1669895882949,"results":"1505","hashOfConfig":"1238"},{"size":4101,"mtime":1669895882917,"results":"1506","hashOfConfig":"1238"},{"size":1331,"mtime":1669895883182,"results":"1507","hashOfConfig":"1238"},{"size":906,"mtime":1669895883312,"results":"1508","hashOfConfig":"1238"},{"size":1592,"mtime":1669895883217,"results":"1509","hashOfConfig":"1238"},{"size":2077,"mtime":1669895883280,"results":"1510","hashOfConfig":"1238"},{"size":2917,"mtime":1669895883053,"results":"1511","hashOfConfig":"1238"},{"size":1298,"mtime":1669895883245,"results":"1512","hashOfConfig":"1238"},{"size":2602,"mtime":1669895883089,"results":"1513","hashOfConfig":"1238"},{"size":1735,"mtime":1669895883120,"results":"1514","hashOfConfig":"1238"},{"size":4369,"mtime":1669895884545,"results":"1515","hashOfConfig":"1238"},{"size":3021,"mtime":1669895884616,"results":"1516","hashOfConfig":"1238"},{"size":4939,"mtime":1669895882529,"results":"1517","hashOfConfig":"1238"},{"size":4491,"mtime":1669895884509,"results":"1518","hashOfConfig":"1238"},{"size":2590,"mtime":1669895884578,"results":"1519","hashOfConfig":"1238"},{"size":3262,"mtime":1669895882563,"results":"1520","hashOfConfig":"1238"},{"size":1976,"mtime":1669895881430,"results":"1521","hashOfConfig":"1238"},{"size":2980,"mtime":1669895881491,"results":"1522","hashOfConfig":"1238"},{"size":2443,"mtime":1669895881556,"results":"1523","hashOfConfig":"1238"},{"size":2272,"mtime":1669895881460,"results":"1524","hashOfConfig":"1238"},{"size":4262,"mtime":1669895879133,"results":"1525","hashOfConfig":"1238"},{"size":459,"mtime":1669895879006,"results":"1526","hashOfConfig":"1238"},{"size":420,"mtime":1669895876680,"results":"1527","hashOfConfig":"1238"},{"size":6362,"mtime":1672463644419,"results":"1528","hashOfConfig":"1238"},{"size":3052,"mtime":1669895876740,"results":"1529","hashOfConfig":"1238"},{"size":5035,"mtime":1669895877587,"results":"1530","hashOfConfig":"1238"},{"size":3993,"mtime":1669895877847,"results":"1531","hashOfConfig":"1238"},{"size":4263,"mtime":1669895877914,"results":"1532","hashOfConfig":"1238"},{"size":7044,"mtime":1669895877790,"results":"1533","hashOfConfig":"1238"},{"size":1222,"mtime":1672135765725,"results":"1534","hashOfConfig":"1238"},{"size":3479,"mtime":1669895875424,"results":"1535","hashOfConfig":"1238"},{"size":8524,"mtime":1669895875369,"results":"1536","hashOfConfig":"1238"},{"size":2914,"mtime":1669895875461,"results":"1537","hashOfConfig":"1238"},{"size":7160,"mtime":1669895876145,"results":"1538","hashOfConfig":"1238"},{"size":2852,"mtime":1669895873518,"results":"1539","hashOfConfig":"1238"},{"size":197,"mtime":1669895876290,"results":"1540","hashOfConfig":"1238"},{"size":1487,"mtime":1669895874093,"results":"1541","hashOfConfig":"1238"},{"size":2411,"mtime":1671518311389,"results":"1542","hashOfConfig":"1238"},{"size":251,"mtime":1669895875979,"results":"1543","hashOfConfig":"1238"},{"size":2992,"mtime":1669895882423,"results":"1544","hashOfConfig":"1238"},{"size":7302,"mtime":1669895881225,"results":"1545","hashOfConfig":"1238"},{"size":2215,"mtime":1669895879344,"results":"1546","hashOfConfig":"1238"},{"size":15202,"mtime":1669895881661,"results":"1547","hashOfConfig":"1238"},{"size":5824,"mtime":1669895881975,"results":"1548","hashOfConfig":"1238"},{"size":6313,"mtime":1669895881696,"results":"1549","hashOfConfig":"1238"},{"size":9040,"mtime":1669895881725,"results":"1550","hashOfConfig":"1238"},{"size":4102,"mtime":1669895881940,"results":"1551","hashOfConfig":"1238"},{"size":5575,"mtime":1669895881906,"results":"1552","hashOfConfig":"1238"},{"size":6993,"mtime":1669895882004,"results":"1553","hashOfConfig":"1238"},{"size":9874,"mtime":1669895882044,"results":"1554","hashOfConfig":"1238"},{"size":1114,"mtime":1669895882806,"results":"1555","hashOfConfig":"1238"},{"size":11394,"mtime":1669895881797,"results":"1556","hashOfConfig":"1238"},{"size":6946,"mtime":1669895881765,"results":"1557","hashOfConfig":"1238"},{"size":1487,"mtime":1669895884240,"results":"1558","hashOfConfig":"1238"},{"size":1595,"mtime":1669895883449,"results":"1559","hashOfConfig":"1238"},{"size":1751,"mtime":1669895884310,"results":"1560","hashOfConfig":"1238"},{"size":7323,"mtime":1669895882846,"results":"1561","hashOfConfig":"1238"},{"size":19499,"mtime":1671692304537,"results":"1562","hashOfConfig":"1238"},{"size":11523,"mtime":1671183941165,"results":"1563","hashOfConfig":"1238"},{"size":3773,"mtime":1669895881873,"results":"1564","hashOfConfig":"1238"},{"size":13667,"mtime":1669895879377,"results":"1565","hashOfConfig":"1238"},{"size":4216,"mtime":1669895881837,"results":"1566","hashOfConfig":"1238"},{"size":5093,"mtime":1669895882744,"results":"1567","hashOfConfig":"1238"},{"size":2130,"mtime":1669895884152,"results":"1568","hashOfConfig":"1238"},{"size":3610,"mtime":1669895883353,"results":"1569","hashOfConfig":"1238"},{"size":1045,"mtime":1669895884186,"results":"1570","hashOfConfig":"1238"},{"size":2127,"mtime":1669895883419,"results":"1571","hashOfConfig":"1238"},{"size":2601,"mtime":1669895884214,"results":"1572","hashOfConfig":"1238"},{"size":1646,"mtime":1669895884274,"results":"1573","hashOfConfig":"1238"},{"size":1750,"mtime":1669895883477,"results":"1574","hashOfConfig":"1238"},{"size":1651,"mtime":1669895884471,"results":"1575","hashOfConfig":"1238"},{"size":3883,"mtime":1669895883387,"results":"1576","hashOfConfig":"1238"},{"size":1552,"mtime":1669895884377,"results":"1577","hashOfConfig":"1238"},{"size":1734,"mtime":1669895884407,"results":"1578","hashOfConfig":"1238"},{"size":4480,"mtime":1669895884344,"results":"1579","hashOfConfig":"1238"},{"size":1967,"mtime":1669895884437,"results":"1580","hashOfConfig":"1238"},{"size":249,"mtime":1669895875230,"results":"1581","hashOfConfig":"1238"},{"size":4371,"mtime":1669895879413,"results":"1582","hashOfConfig":"1238"},{"size":760,"mtime":1671184699459,"results":"1583","hashOfConfig":"1238"},{"size":4503,"mtime":1676369346955,"results":"1584","hashOfConfig":"1238"},{"size":3833,"mtime":1671513856272,"results":"1585","hashOfConfig":"1238"},{"size":3581,"mtime":1671446241584,"results":"1586","hashOfConfig":"1238"},{"size":6878,"mtime":1671515692370,"results":"1587","hashOfConfig":"1238"},{"size":728,"mtime":1671515509516,"results":"1588","hashOfConfig":"1238"},{"size":2326,"mtime":1671449660594,"results":"1589","hashOfConfig":"1238"},{"size":5267,"mtime":1676378876122,"results":"1590","hashOfConfig":"1238"},{"size":780,"mtime":1671450205999,"results":"1591","hashOfConfig":"1238"},{"size":5821,"mtime":1676378876114,"results":"1592","hashOfConfig":"1238"},{"size":6878,"mtime":1671515582086,"results":"1593","hashOfConfig":"1238"},{"size":3561,"mtime":1671512706160,"results":"1594","hashOfConfig":"1238"},{"size":6878,"mtime":1671515562957,"results":"1595","hashOfConfig":"1238"},{"size":3684,"mtime":1671513668184,"results":"1596","hashOfConfig":"1238"},{"size":3936,"mtime":1671513803737,"results":"1597","hashOfConfig":"1238"},{"size":6878,"mtime":1671515543351,"results":"1598","hashOfConfig":"1238"},{"size":6878,"mtime":1671515450660,"results":"1599","hashOfConfig":"1238"},{"size":3805,"mtime":1671514384975,"results":"1600","hashOfConfig":"1238"},{"size":6878,"mtime":1671515529099,"results":"1601","hashOfConfig":"1238"},{"size":3812,"mtime":1671514622526,"results":"1602","hashOfConfig":"1238"},{"size":6878,"mtime":1671515598895,"results":"1603","hashOfConfig":"1238"},{"size":3114,"mtime":1671515436258,"results":"1604","hashOfConfig":"1238"},{"size":728,"mtime":1673854104341,"results":"1605","hashOfConfig":"1238"},{"size":4684,"mtime":1674538137760,"results":"1606","hashOfConfig":"1238"},{"size":8337,"mtime":1676369346939,"results":"1607","hashOfConfig":"1238"},{"size":10869,"mtime":1676369346888,"results":"1608","hashOfConfig":"1238"},{"size":8417,"mtime":1676369346909,"results":"1609","hashOfConfig":"1238"},{"size":11691,"mtime":1676369346936,"results":"1610","hashOfConfig":"1238"},{"size":9305,"mtime":1676369346905,"results":"1611","hashOfConfig":"1238"},{"size":12690,"mtime":1676383896523,"results":"1612","hashOfConfig":"1238"},{"size":11138,"mtime":1676369346929,"results":"1613","hashOfConfig":"1238"},{"size":8123,"mtime":1676369346945,"results":"1614","hashOfConfig":"1238"},{"size":9725,"mtime":1676369346907,"results":"1615","hashOfConfig":"1238"},{"size":15115,"mtime":1676369346931,"results":"1616","hashOfConfig":"1238"},{"size":13164,"mtime":1676369346881,"results":"1617","hashOfConfig":"1238"},{"size":5644,"mtime":1676369346901,"results":"1618","hashOfConfig":"1238"},{"size":11309,"mtime":1672463639769,"results":"1619","hashOfConfig":"1238"},{"size":10937,"mtime":1676369346915,"results":"1620","hashOfConfig":"1238"},{"size":22049,"mtime":1676369346923,"results":"1621","hashOfConfig":"1238"},{"size":5729,"mtime":1676369346949,"results":"1622","hashOfConfig":"1238"},{"size":23783,"mtime":1676369346954,"results":"1623","hashOfConfig":"1238"},{"size":13370,"mtime":1676369346737,"results":"1624","hashOfConfig":"1238"},{"size":13407,"mtime":1675932500454,"results":"1625","hashOfConfig":"1238"},{"size":17162,"mtime":1676369346746,"results":"1626","hashOfConfig":"1238"},{"size":18386,"mtime":1676378876124,"results":"1627","hashOfConfig":"1238"},{"size":17436,"mtime":1675932500462,"results":"1628","hashOfConfig":"1238"},{"size":16111,"mtime":1676369346748,"results":"1629","hashOfConfig":"1238"},{"size":27032,"mtime":1676369346764,"results":"1630","hashOfConfig":"1238"},{"size":26967,"mtime":1676369346758,"results":"1631","hashOfConfig":"1238"},{"size":24747,"mtime":1676369346762,"results":"1632","hashOfConfig":"1238"},{"size":24849,"mtime":1676369346760,"results":"1633","hashOfConfig":"1238"},{"size":9849,"mtime":1676369346733,"results":"1634","hashOfConfig":"1238"},{"size":9644,"mtime":1676369346729,"results":"1635","hashOfConfig":"1238"},{"size":9557,"mtime":1676369346734,"results":"1636","hashOfConfig":"1238"},{"size":10762,"mtime":1676369346752,"results":"1637","hashOfConfig":"1238"},{"size":14631,"mtime":1676369346739,"results":"1638","hashOfConfig":"1238"},{"size":16290,"mtime":1676369346743,"results":"1639","hashOfConfig":"1238"},{"size":112285,"mtime":1674206182759,"results":"1640","hashOfConfig":"1238"},{"size":58718,"mtime":1675932500452,"results":"1641","hashOfConfig":"1238"},{"size":18281,"mtime":1676369346903,"results":"1642","hashOfConfig":"1238"},{"size":25528,"mtime":1676369346912,"results":"1643","hashOfConfig":"1238"},{"size":37806,"mtime":1676369346884,"results":"1644","hashOfConfig":"1238"},{"size":47526,"mtime":1676369346921,"results":"1645","hashOfConfig":"1238"},{"size":10866,"mtime":1676369346827,"results":"1646","hashOfConfig":"1238"},{"size":21657,"mtime":1676369346789,"results":"1647","hashOfConfig":"1238"},{"size":728,"mtime":1671618754390,"results":"1648","hashOfConfig":"1238"},{"size":6731,"mtime":1676369346796,"results":"1649","hashOfConfig":"1238"},{"size":5730,"mtime":1676369346785,"results":"1650","hashOfConfig":"1238"},{"size":13163,"mtime":1676369346777,"results":"1651","hashOfConfig":"1238"},{"size":23394,"mtime":1676369346807,"results":"1652","hashOfConfig":"1238"},{"size":6117,"mtime":1676369346805,"results":"1653","hashOfConfig":"1238"},{"size":7664,"mtime":1676369346791,"results":"1654","hashOfConfig":"1238"},{"size":7315,"mtime":1676369346876,"results":"1655","hashOfConfig":"1238"},{"size":6584,"mtime":1676369346847,"results":"1656","hashOfConfig":"1238"},{"size":6103,"mtime":1676369346842,"results":"1657","hashOfConfig":"1238"},{"size":6586,"mtime":1676369346844,"results":"1658","hashOfConfig":"1238"},{"size":12184,"mtime":1676369346871,"results":"1659","hashOfConfig":"1238"},{"size":6500,"mtime":1676369346849,"results":"1660","hashOfConfig":"1238"},{"size":6124,"mtime":1676369346839,"results":"1661","hashOfConfig":"1238"},{"size":11917,"mtime":1676369346866,"results":"1662","hashOfConfig":"1238"},{"size":7523,"mtime":1676369346825,"results":"1663","hashOfConfig":"1238"},{"size":11659,"mtime":1676369346819,"results":"1664","hashOfConfig":"1238"},{"size":6201,"mtime":1676024511067,"results":"1665","hashOfConfig":"1238"},{"size":10623,"mtime":1676378876128,"results":"1666","hashOfConfig":"1238"},{"size":10237,"mtime":1674206493859,"results":"1667","hashOfConfig":"1238"},{"size":7079,"mtime":1676369346814,"results":"1668","hashOfConfig":"1238"},{"size":904,"mtime":1672477768339,"results":"1669","hashOfConfig":"1238"},{"size":5868,"mtime":1676369346704,"results":"1670","hashOfConfig":"1238"},{"size":5965,"mtime":1676369346708,"results":"1671","hashOfConfig":"1238"},{"size":728,"mtime":1671690235278,"results":"1672","hashOfConfig":"1238"},{"size":3208,"mtime":1676369346705,"results":"1673","hashOfConfig":"1238"},{"size":995,"mtime":1672632227551,"results":"1674","hashOfConfig":"1238"},{"size":728,"mtime":1671690720368,"results":"1675","hashOfConfig":"1238"},{"size":6556,"mtime":1676369346768,"results":"1676","hashOfConfig":"1238"},{"size":3299,"mtime":1674192108437,"results":"1677","hashOfConfig":"1238"},{"size":808,"mtime":1672636158965,"results":"1678","hashOfConfig":"1238"},{"size":728,"mtime":1671691519440,"results":"1679","hashOfConfig":"1238"},{"size":6896,"mtime":1676369346723,"results":"1680","hashOfConfig":"1238"},{"size":3148,"mtime":1674538137628,"results":"1681","hashOfConfig":"1238"},{"size":766,"mtime":1672655141280,"results":"1682","hashOfConfig":"1238"},{"size":728,"mtime":1671691605915,"results":"1683","hashOfConfig":"1238"},{"size":7316,"mtime":1676369346715,"results":"1684","hashOfConfig":"1238"},{"size":3010,"mtime":1674538137623,"results":"1685","hashOfConfig":"1238"},{"size":272,"mtime":1672116089513,"results":"1686","hashOfConfig":"1238"},{"size":10152,"mtime":1676369346668,"results":"1687","hashOfConfig":"1238"},{"size":3651,"mtime":1676369346959,"results":"1688","hashOfConfig":"1238"},{"size":1498,"mtime":1676386090658,"results":"1689","hashOfConfig":"1238"},{"size":4423,"mtime":1676369346916,"results":"1690","hashOfConfig":"1238"},{"size":5896,"mtime":1676369346933,"results":"1691","hashOfConfig":"1238"},{"size":5588,"mtime":1676369346886,"results":"1692","hashOfConfig":"1238"},{"size":4529,"mtime":1676369346943,"results":"1693","hashOfConfig":"1238"},{"size":6139,"mtime":1676369346952,"results":"1694","hashOfConfig":"1238"},{"size":5729,"mtime":1676369346927,"results":"1695","hashOfConfig":"1238"},{"size":3356,"mtime":1672381372910,"results":"1696","hashOfConfig":"1238"},{"size":15231,"mtime":1674206138047,"results":"1697","hashOfConfig":"1238"},{"size":10083,"mtime":1676369346731,"results":"1698","hashOfConfig":"1238"},{"size":3205,"mtime":1672384821972,"results":"1699","hashOfConfig":"1238"},{"size":3194,"mtime":1672384833565,"results":"1700","hashOfConfig":"1238"},{"size":10237,"mtime":1676369346750,"results":"1701","hashOfConfig":"1238"},{"size":3653,"mtime":1672489535885,"results":"1702","hashOfConfig":"1238"},{"size":33393,"mtime":1676369346788,"results":"1703","hashOfConfig":"1238"},{"size":24992,"mtime":1676369346756,"results":"1704","hashOfConfig":"1238"},{"size":5298,"mtime":1676369346710,"results":"1705","hashOfConfig":"1238"},{"size":56095,"mtime":1676383928412,"results":"1706","hashOfConfig":"1238"},{"size":4884,"mtime":1676369346781,"results":"1707","hashOfConfig":"1238"},{"size":4517,"mtime":1676369346783,"results":"1708","hashOfConfig":"1238"},{"size":22300,"mtime":1676369346780,"results":"1709","hashOfConfig":"1238"},{"size":4517,"mtime":1676369346806,"results":"1710","hashOfConfig":"1238"},{"size":22007,"mtime":1672640534339,"results":"1711","hashOfConfig":"1238"},{"size":4515,"mtime":1676369346742,"results":"1712","hashOfConfig":"1238"},{"size":3663,"mtime":1676369346793,"results":"1713","hashOfConfig":"1238"},{"size":4854,"mtime":1676369346879,"results":"1714","hashOfConfig":"1238"},{"size":11144,"mtime":1676369346821,"results":"1715","hashOfConfig":"1238"},{"size":9712,"mtime":1676369346823,"results":"1716","hashOfConfig":"1238"},{"size":16246,"mtime":1676369346767,"results":"1717","hashOfConfig":"1238"},{"size":10259,"mtime":1676369346798,"results":"1718","hashOfConfig":"1238"},{"size":17838,"mtime":1676369346800,"results":"1719","hashOfConfig":"1238"},{"size":14160,"mtime":1676369346816,"results":"1720","hashOfConfig":"1238"},{"size":9921,"mtime":1676369346840,"results":"1721","hashOfConfig":"1238"},{"size":13370,"mtime":1676369346837,"results":"1722","hashOfConfig":"1238"},{"size":13452,"mtime":1676369346719,"results":"1723","hashOfConfig":"1238"},{"size":39882,"mtime":1676369346721,"results":"1724","hashOfConfig":"1238"},{"size":24304,"mtime":1676378876110,"results":"1725","hashOfConfig":"1238"},{"size":31112,"mtime":1676369346712,"results":"1726","hashOfConfig":"1238"},{"size":14268,"mtime":1676369346870,"results":"1727","hashOfConfig":"1238"},{"size":14173,"mtime":1676369346864,"results":"1728","hashOfConfig":"1238"},{"size":5928,"mtime":1676369346754,"results":"1729","hashOfConfig":"1238"},{"size":7075,"mtime":1676369346874,"results":"1730","hashOfConfig":"1238"},{"size":5930,"mtime":1676369346868,"results":"1731","hashOfConfig":"1238"},{"size":5976,"mtime":1676369346812,"results":"1732","hashOfConfig":"1238"},{"size":6091,"mtime":1676369346810,"results":"1733","hashOfConfig":"1238"},{"size":4375,"mtime":1676369346925,"results":"1734","hashOfConfig":"1238"},{"size":10198,"mtime":1674206489717,"results":"1735","hashOfConfig":"1238"},{"size":337,"mtime":1672751333760,"results":"1736","hashOfConfig":"1238"},{"size":8822,"mtime":1676369346718,"results":"1737","hashOfConfig":"1238"},{"size":12765,"mtime":1676369346772,"results":"1738","hashOfConfig":"1238"},{"size":6299,"mtime":1676369346774,"results":"1739","hashOfConfig":"1238"},{"size":7780,"mtime":1676363673084,"results":"1740","hashOfConfig":"1238"},{"size":7760,"mtime":1676369346851,"results":"1741","hashOfConfig":"1238"},{"size":18795,"mtime":1676363673091,"results":"1742","hashOfConfig":"1238"},{"size":1321,"mtime":1676444350888,"results":"1743","hashOfConfig":"1238"},{"size":17015,"mtime":1676444931554,"results":"1744","hashOfConfig":"1238"},{"size":6539,"mtime":1676444697177,"results":"1745","hashOfConfig":"1238"},{"size":25649,"mtime":1676445507505,"results":"1746","hashOfConfig":"1238"},{"size":4639,"mtime":1676369346675,"results":"1747","hashOfConfig":"1238"},{"size":728,"mtime":1676369346699,"results":"1748","hashOfConfig":"1238"},{"size":7318,"mtime":1676369346673,"results":"1749","hashOfConfig":"1238"},{"size":3311,"mtime":1676369346698,"results":"1750","hashOfConfig":"1238"},{"size":34085,"mtime":1676369346683,"results":"1751","hashOfConfig":"1238"},{"size":2916,"mtime":1676369346688,"results":"1752","hashOfConfig":"1238"},{"size":2531,"mtime":1676369346679,"results":"1753","hashOfConfig":"1238"},{"size":2523,"mtime":1676369346681,"results":"1754","hashOfConfig":"1238"},{"size":179317,"mtime":1676446506698,"results":"1755","hashOfConfig":"1238"},{"size":3607,"mtime":1676369346691,"results":"1756","hashOfConfig":"1238"},{"size":8011,"mtime":1676369346947,"results":"1757","hashOfConfig":"1238"},{"size":4723,"mtime":1676369346899,"results":"1758","hashOfConfig":"1238"},{"size":2626,"mtime":1676369346891,"results":"1759","hashOfConfig":"1238"},{"size":2523,"mtime":1676369346892,"results":"1760","hashOfConfig":"1238"},{"size":177109,"mtime":1676369346894,"results":"1761","hashOfConfig":"1238"},{"size":33758,"mtime":1676369346895,"results":"1762","hashOfConfig":"1238"},{"size":2916,"mtime":1676369346896,"results":"1763","hashOfConfig":"1238"},{"size":3607,"mtime":1676369346896,"results":"1764","hashOfConfig":"1238"},{"size":3161,"mtime":1676435776007,"results":"1765","hashOfConfig":"1238"},{"size":8309,"mtime":1676369346941,"results":"1766","hashOfConfig":"1238"},{"size":14951,"mtime":1676369346855,"results":"1767","hashOfConfig":"1238"},{"size":5360,"mtime":1676369346857,"results":"1768","hashOfConfig":"1238"},{"size":6097,"mtime":1676369346831,"results":"1769","hashOfConfig":"1238"},{"size":13946,"mtime":1676369346859,"results":"1770","hashOfConfig":"1238"},{"size":16306,"mtime":1676369346829,"results":"1771","hashOfConfig":"1238"},{"size":6394,"mtime":1676369346860,"results":"1772","hashOfConfig":"1238"},{"size":6308,"mtime":1676369346854,"results":"1773","hashOfConfig":"1238"},{"size":8046,"mtime":1676369346834,"results":"1774","hashOfConfig":"1238"},{"size":20708,"mtime":1676378876117,"results":"1775","hashOfConfig":"1238"},{"size":5357,"mtime":1676382184647,"results":"1776","hashOfConfig":"1238"},{"filePath":"1777","messages":"1778","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7hvwc5",{"filePath":"1779","messages":"1780","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1781","messages":"1782","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1783","messages":"1784","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1785","messages":"1786","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1787","messages":"1788","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1789","messages":"1790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1791","messages":"1792","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1793","messages":"1794","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1795","messages":"1796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1797","messages":"1798","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1799","messages":"1800","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1801","messages":"1802","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1803","messages":"1804","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1805","messages":"1806","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1807","messages":"1808","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1809","messages":"1810","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1811","messages":"1812","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1813","messages":"1814","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1815","messages":"1816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1817","messages":"1818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1819","messages":"1820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1821","messages":"1822","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1823","messages":"1824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1825","messages":"1826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1827","messages":"1828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1829","messages":"1830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1831","messages":"1832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1833","messages":"1834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1835","messages":"1836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1837","messages":"1838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1839","messages":"1840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1841","messages":"1842","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1843","messages":"1844","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1845","messages":"1846","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1847","messages":"1848","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1849","messages":"1850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1851","messages":"1852","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1853","messages":"1854","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1855","messages":"1856","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1857","messages":"1858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1859","messages":"1860","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1861","messages":"1862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1863","messages":"1864","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1865","messages":"1866","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1867","messages":"1868","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1869","messages":"1870","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1871","messages":"1872","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1873","messages":"1874","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1875","messages":"1876","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1877","messages":"1878","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1879","messages":"1880","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1881","messages":"1882","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1883","messages":"1884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1885","messages":"1886","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1887","messages":"1888","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1889","messages":"1890","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1891","messages":"1892","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1893","messages":"1894","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1895","messages":"1896","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1897","messages":"1898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1899","messages":"1900","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1901","messages":"1902","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1903","messages":"1904","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1905","messages":"1906","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1907","messages":"1908","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1909","messages":"1910","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1911","messages":"1912","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1913","messages":"1914","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1915","messages":"1916","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1917","messages":"1918","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1919","messages":"1920","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1921","messages":"1922","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1923","messages":"1924","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1925","messages":"1926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1927","messages":"1928","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1929","messages":"1930","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1931","messages":"1932","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1933","messages":"1934","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1935","messages":"1936","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1937","messages":"1938","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1939","messages":"1940","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1941","messages":"1942","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1943","messages":"1944","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1945","messages":"1946","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1947","messages":"1948","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1949","messages":"1950","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1951","messages":"1952","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1953","messages":"1954","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1955","messages":"1956","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1957","messages":"1958","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1959","messages":"1960","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1961","messages":"1962","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1963","messages":"1964","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1965","messages":"1966","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1967","messages":"1968","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1969","messages":"1970","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1971","messages":"1972","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1973","messages":"1974","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1975","messages":"1976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1977","messages":"1978","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1979","messages":"1980","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1981","messages":"1982","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1983","messages":"1984","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1985","messages":"1986","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1987","messages":"1988","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1989","messages":"1990","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1991","messages":"1992","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1993","messages":"1994","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1995","messages":"1996","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1997","messages":"1998","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1999","messages":"2000","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2001","messages":"2002","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2003","messages":"2004","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2005","messages":"2006","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2007","messages":"2008","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2009","messages":"2010","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2011","messages":"2012","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2013","messages":"2014","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2015","messages":"2016","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2017","messages":"2018","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2019","messages":"2020","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2021","messages":"2022","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2023","messages":"2024","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2025","messages":"2026","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2027","messages":"2028","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2029","messages":"2030","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2031","messages":"2032","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2033","messages":"2034","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2035","messages":"2036","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2037","messages":"2038","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2039","messages":"2040","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2041","messages":"2042","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2043","messages":"2044","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2045","messages":"2046","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2047","messages":"2048","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2049","messages":"2050","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2051","messages":"2052","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2053","messages":"2054","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2055","messages":"2056","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2057","messages":"2058","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2059","messages":"2060","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2061","messages":"2062","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2063","messages":"2064","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2065","messages":"2066","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2067","messages":"2068","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2069","messages":"2070","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2071","messages":"2072","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2073","messages":"2074","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2075","messages":"2076","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2077","messages":"2078","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2079","messages":"2080","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2081","messages":"2082","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2083","messages":"2084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2085","messages":"2086","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2087","messages":"2088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2089","messages":"2090","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2091","messages":"2092","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2093","messages":"2094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2095","messages":"2096","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2097","messages":"2098","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2099","messages":"2100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2101","messages":"2102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2103","messages":"2104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2105","messages":"2106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2107","messages":"2108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2109","messages":"2110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2111","messages":"2112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2113","messages":"2114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2115","messages":"2116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2117","messages":"2118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2119","messages":"2120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2121","messages":"2122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2123","messages":"2124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2125","messages":"2126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2127","messages":"2128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2129","messages":"2130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2131","messages":"2132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2133","messages":"2134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2135","messages":"2136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2137","messages":"2138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2139","messages":"2140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2141","messages":"2142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2143","messages":"2144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2145","messages":"2146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2147","messages":"2148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2149","messages":"2150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2151","messages":"2152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2153","messages":"2154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2155","messages":"2156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2157","messages":"2158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2159","messages":"2160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2161","messages":"2162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2163","messages":"2164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2165","messages":"2166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2167","messages":"2168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2169","messages":"2170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2171","messages":"2172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2173","messages":"2174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2175","messages":"2176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2177","messages":"2178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2179","messages":"2180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2181","messages":"2182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2183","messages":"2184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2185","messages":"2186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2187","messages":"2188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2189","messages":"2190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2191","messages":"2192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2193","messages":"2194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2195","messages":"2196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2197","messages":"2198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2199","messages":"2200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2201","messages":"2202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2203","messages":"2204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2205","messages":"2206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2207","messages":"2208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2209","messages":"2210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2211","messages":"2212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2213","messages":"2214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2215","messages":"2216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2217","messages":"2218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2219","messages":"2220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2221","messages":"2222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2223","messages":"2224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2225","messages":"2226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2227","messages":"2228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2229","messages":"2230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2231","messages":"2232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2233","messages":"2234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2235","messages":"2236","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2237","messages":"2238","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2239","messages":"2240","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2241","messages":"2242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2243","messages":"2244","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2245","messages":"2246","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2247","messages":"2248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2249","messages":"2250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2251","messages":"2252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2253","messages":"2254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2255","messages":"2256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2257","messages":"2258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2259","messages":"2260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2261","messages":"2262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2263","messages":"2264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2265","messages":"2266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2267","messages":"2268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2269","messages":"2270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2271","messages":"2272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2273","messages":"2274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2275","messages":"2276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2277","messages":"2278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2279","messages":"2280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2281","messages":"2282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2283","messages":"2284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2285","messages":"2286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2287","messages":"2288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2289","messages":"2290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2291","messages":"2292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2293","messages":"2294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2295","messages":"2296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2297","messages":"2298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2299","messages":"2300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2301","messages":"2302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2303","messages":"2304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2305","messages":"2306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2307","messages":"2308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2309","messages":"2310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2311","messages":"2312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2313","messages":"2314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2315","messages":"2316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2317","messages":"2318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2319","messages":"2320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2321","messages":"2322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2323","messages":"2324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2325","messages":"2326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2327","messages":"2328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2329","messages":"2330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2331","messages":"2332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2333","messages":"2334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2335","messages":"2336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2337","messages":"2338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2339","messages":"2340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2341","messages":"2342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2343","messages":"2344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2345","messages":"2346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2347","messages":"2348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2349","messages":"2350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2351","messages":"2352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2353","messages":"2354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2355","messages":"2356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2357","messages":"2358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2359","messages":"2360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2361","messages":"2362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2363","messages":"2364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2365","messages":"2366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2367","messages":"2368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2369","messages":"2370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2371","messages":"2372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2373","messages":"2374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2375","messages":"2376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2377","messages":"2378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2379","messages":"2380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2381","messages":"2382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2383","messages":"2384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2385","messages":"2386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2387","messages":"2388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2389","messages":"2390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2391","messages":"2392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2393","messages":"2394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2395","messages":"2396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2397","messages":"2398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2399","messages":"2400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2401","messages":"2402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2403","messages":"2404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2405","messages":"2406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2407","messages":"2408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2409","messages":"2410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2411","messages":"2412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2413","messages":"2414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2415","messages":"2416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2417","messages":"2418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2419","messages":"2420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2421","messages":"2422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2423","messages":"2424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2425","messages":"2426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2427","messages":"2428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2429","messages":"2430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2431","messages":"2432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2433","messages":"2434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2435","messages":"2436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2437","messages":"2438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2439","messages":"2440","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2441","messages":"2442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2443","messages":"2444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2445","messages":"2446","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2447","messages":"2448","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2449","messages":"2450","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2451","messages":"2452","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2453","messages":"2454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2455","messages":"2456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2457","messages":"2458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2459","messages":"2460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2461","messages":"2462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2463","messages":"2464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2465","messages":"2466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2467","messages":"2468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2469","messages":"2470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2471","messages":"2472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2473","messages":"2474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"qxkwvn",{"filePath":"2475","messages":"2476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2478","messages":"2479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2480","messages":"2481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2482","messages":"2483","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2484","usedDeprecatedRules":"2477"},{"filePath":"2485","messages":"2486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2487","messages":"2488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2489","messages":"2490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2491","messages":"2492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2493","messages":"2494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2495","messages":"2496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2497","messages":"2498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2499","messages":"2500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2501","messages":"2502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2503","messages":"2504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2505","messages":"2506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2507","messages":"2508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2509","messages":"2510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2511","messages":"2512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2513","messages":"2514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2515","messages":"2516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2517","messages":"2518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2519","messages":"2520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2521","messages":"2522","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2523","usedDeprecatedRules":"2477"},{"filePath":"2524","messages":"2525","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2526","usedDeprecatedRules":"2477"},{"filePath":"2527","messages":"2528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2529","messages":"2530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2531","messages":"2532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2533","messages":"2534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2535","messages":"2536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2537","messages":"2538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2539","messages":"2540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2541","messages":"2542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2543","messages":"2544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2545","messages":"2546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2547","messages":"2548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2549","messages":"2550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2551","messages":"2552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2553","messages":"2554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2555","messages":"2556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2557","messages":"2558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2559","messages":"2560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2561","messages":"2562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2563","messages":"2564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2565","messages":"2566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2567","messages":"2568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2569","messages":"2570","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2571","messages":"2572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2573","messages":"2574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2575","messages":"2576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2577","messages":"2578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2579","messages":"2580","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2581","messages":"2582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2583","messages":"2584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2585","messages":"2586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2587","messages":"2588","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2589","messages":"2590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2591","messages":"2592","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2593","messages":"2594","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2595","messages":"2596","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2597","messages":"2598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2599","messages":"2600","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2601","messages":"2602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2603","messages":"2604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"2606","messages":"2607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"2608","messages":"2609","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"2610","messages":"2611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"2612","messages":"2613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"2614","messages":"2615","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2616","messages":"2617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2618","messages":"2619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2620","messages":"2621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2622","messages":"2623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2624","messages":"2625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2626","messages":"2627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"2628","messages":"2629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2630","messages":"2631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2632","messages":"2633","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2634","messages":"2635","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2636","messages":"2637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2638","messages":"2639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2640","messages":"2641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2642","messages":"2643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2644","messages":"2645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2646","messages":"2647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2648","messages":"2649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2650","messages":"2651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2652","messages":"2653","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2654","messages":"2655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2656","messages":"2657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2658","messages":"2659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2660","messages":"2661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2662","messages":"2663","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2664","messages":"2665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2666","messages":"2667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2668","messages":"2669","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2670","messages":"2671","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2672","messages":"2673","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2674","messages":"2675","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2676","messages":"2677","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2678","messages":"2679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2680","messages":"2681","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2682","messages":"2683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2684","messages":"2685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2686","messages":"2687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2688","messages":"2689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2690","messages":"2691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2692","messages":"2693","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2694","messages":"2695","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2696","messages":"2697","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2698","messages":"2699","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2700","messages":"2701","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2702","messages":"2703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2704","messages":"2705","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2706","messages":"2707","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2708","messages":"2709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2710","messages":"2711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2712","messages":"2713","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2714","messages":"2715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2716","messages":"2717","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2718","messages":"2719","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2720","messages":"2721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2722","messages":"2723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2724","messages":"2725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2726","messages":"2727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2728","messages":"2729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2730","messages":"2731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2732","messages":"2733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2734","messages":"2735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2736","messages":"2737","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2738","messages":"2739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2740","messages":"2741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2742","messages":"2743","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2744","messages":"2745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2746","messages":"2747","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2748","messages":"2749","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2750","usedDeprecatedRules":"2477"},{"filePath":"2751","messages":"2752","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2753","messages":"2754","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2755","messages":"2756","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"2757","usedDeprecatedRules":"2477"},{"filePath":"2758","messages":"2759","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2760","messages":"2761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2762","messages":"2763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2764","messages":"2765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2766","messages":"2767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2768","messages":"2769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2770","messages":"2771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2772","messages":"2773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2774","messages":"2775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2776","messages":"2777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2778","messages":"2779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2780","messages":"2781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2782","messages":"2783","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2784","messages":"2785","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2786","messages":"2787","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2788","messages":"2789","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2790","messages":"2791","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2792","messages":"2793","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2794","messages":"2795","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2796","messages":"2797","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2798","messages":"2799","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2800","messages":"2801","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2802","messages":"2803","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2804","messages":"2805","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2806","messages":"2807","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2808","messages":"2809","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2810","messages":"2811","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2812","messages":"2813","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2814","messages":"2815","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2816","messages":"2817","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2818","messages":"2819","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2820","messages":"2821","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2822","messages":"2823","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2824","messages":"2825","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2826","messages":"2827","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2828","messages":"2829","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2830","messages":"2831","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2832","messages":"2833","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2834","messages":"2835","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2836","messages":"2837","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2838","messages":"2839","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2840","messages":"2841","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2842","messages":"2843","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2844","messages":"2845","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2846","messages":"2847","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2848","messages":"2849","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2850","messages":"2851","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2852","messages":"2853","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2854","messages":"2855","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2856","messages":"2857","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2858","messages":"2859","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2860","messages":"2861","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2862","messages":"2863","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2864","messages":"2865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2866","messages":"2867","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2868","messages":"2869","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2870","messages":"2871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2872","messages":"2873","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2874","messages":"2875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2876","messages":"2877","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2878","messages":"2879","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2880","messages":"2881","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2882","messages":"2883","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2884","messages":"2885","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2886","messages":"2887","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2888","messages":"2889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2890","messages":"2891","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2892","messages":"2893","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2894","messages":"2895","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2896","messages":"2897","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2898","messages":"2899","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2900","messages":"2901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2902","messages":"2903","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2904","messages":"2905","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2906","messages":"2907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2908","messages":"2909","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2910","messages":"2911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2912","messages":"2913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2914","messages":"2915","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2916","messages":"2917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2918","messages":"2919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2920","messages":"2921","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2922","messages":"2923","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2924","messages":"2925","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2926","messages":"2927","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2928","messages":"2929","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2930","messages":"2931","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2932","messages":"2933","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2934","messages":"2935","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2936","messages":"2937","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2938","messages":"2939","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2940","messages":"2941","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2942","messages":"2943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2944","messages":"2945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2946","messages":"2947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2948","messages":"2949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2950","messages":"2951","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2952","messages":"2953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2954","messages":"2955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2956","messages":"2957","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2958","messages":"2959","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2960","messages":"2961","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2962","messages":"2963","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2964","messages":"2965","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2966","messages":"2967","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2968","messages":"2969","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2970","messages":"2971","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2972","messages":"2973","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2974","messages":"2975","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2976","messages":"2977","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2978","messages":"2979","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2980","messages":"2981","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2982","messages":"2983","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2984","messages":"2985","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2986","messages":"2987","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2988","messages":"2989","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2990","messages":"2991","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2992","messages":"2993","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2994","messages":"2995","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2996","messages":"2997","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"2998","messages":"2999","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3000","messages":"3001","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3002","messages":"3003","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3004","messages":"3005","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3006","messages":"3007","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3008","messages":"3009","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3010","messages":"3011","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3012","messages":"3013","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3014","messages":"3015","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3016","messages":"3017","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3018","messages":"3019","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3020","messages":"3021","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3022","messages":"3023","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3024","messages":"3025","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3026","messages":"3027","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3028","messages":"3029","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3030","messages":"3031","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3032","messages":"3033","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3034","messages":"3035","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3036","messages":"3037","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3038","messages":"3039","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3040","messages":"3041","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3042","messages":"3043","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3044","messages":"3045","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3046","messages":"3047","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3048","messages":"3049","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3050","messages":"3051","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3052","messages":"3053","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3054","messages":"3055","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3056","messages":"3057","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3058","messages":"3059","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3060","messages":"3061","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3062","messages":"3063","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3064","messages":"3065","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3066","messages":"3067","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3068","messages":"3069","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3070","messages":"3071","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3072","messages":"3073","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3074","messages":"3075","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3076","messages":"3077","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3078","messages":"3079","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3080","messages":"3081","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"3082"},{"filePath":"3083","messages":"3084","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"3082"},{"filePath":"3085","messages":"3086","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"3082"},{"filePath":"3087","messages":"3088","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3089","messages":"3090","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3091","messages":"3092","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3093","messages":"3094","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3095","messages":"3096","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3097","messages":"3098","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3099","messages":"3100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3101","messages":"3102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3103","messages":"3104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3105","messages":"3106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3107","messages":"3108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3109","messages":"3110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3111","messages":"3112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3113","messages":"3114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3115","messages":"3116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3117","messages":"3118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3119","messages":"3120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3121","messages":"3122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3123","messages":"3124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3125","messages":"3126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3127","messages":"3128","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3129","messages":"3130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3131","messages":"3132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3133","messages":"3134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3135","messages":"3136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3137","messages":"3138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3139","messages":"3140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3141","messages":"3142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3143","messages":"3144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3145","messages":"3146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3147","messages":"3148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3149","messages":"3150","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3151","messages":"3152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3153","messages":"3154","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3155","messages":"3156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3157","messages":"3158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3159","messages":"3160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3161","messages":"3162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3163","messages":"3164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3165","messages":"3166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3167","messages":"3168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3169","messages":"3170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3171","messages":"3172","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3173","usedDeprecatedRules":"2477"},{"filePath":"3174","messages":"3175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3176","messages":"3177","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"3178","messages":"3179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"3180","messages":"3181","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3182","usedDeprecatedRules":"2605"},{"filePath":"3183","messages":"3184","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3185","usedDeprecatedRules":"2605"},{"filePath":"3186","messages":"3187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"3188","messages":"3189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3190","messages":"3191","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3185","usedDeprecatedRules":"2477"},{"filePath":"3192","messages":"3193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"3194","messages":"3195","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3182","usedDeprecatedRules":"2605"},{"filePath":"3196","messages":"3197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"3198","messages":"3199","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3182","usedDeprecatedRules":"2605"},{"filePath":"3200","messages":"3201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"3202","messages":"3203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"3204","messages":"3205","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3182","usedDeprecatedRules":"2605"},{"filePath":"3206","messages":"3207","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3182","usedDeprecatedRules":"2605"},{"filePath":"3208","messages":"3209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"3210","messages":"3211","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3182","usedDeprecatedRules":"2605"},{"filePath":"3212","messages":"3213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2605"},{"filePath":"3214","messages":"3215","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3182","usedDeprecatedRules":"2605"},{"filePath":"3216","messages":"3217","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"3218","messages":"3219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3220","messages":"3221","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3222","usedDeprecatedRules":"2477"},{"filePath":"3223","messages":"3224","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3225","usedDeprecatedRules":"2477"},{"filePath":"3226","messages":"3227","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3228","usedDeprecatedRules":"2477"},{"filePath":"3229","messages":"3230","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3231","usedDeprecatedRules":"2477"},{"filePath":"3232","messages":"3233","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3234","usedDeprecatedRules":"2477"},{"filePath":"3235","messages":"3236","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3237","usedDeprecatedRules":"2477"},{"filePath":"3238","messages":"3239","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"3240","messages":"3241","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3242","usedDeprecatedRules":"2477"},{"filePath":"3243","messages":"3244","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3245","usedDeprecatedRules":"2477"},{"filePath":"3246","messages":"3247","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3248","usedDeprecatedRules":"2477"},{"filePath":"3249","messages":"3250","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3251","usedDeprecatedRules":"2477"},{"filePath":"3252","messages":"3253","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3254","usedDeprecatedRules":"2477"},{"filePath":"3255","messages":"3256","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3257","usedDeprecatedRules":"2477"},{"filePath":"3258","messages":"3259","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3260","usedDeprecatedRules":"2477"},{"filePath":"3261","messages":"3262","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3263","usedDeprecatedRules":"2477"},{"filePath":"3264","messages":"3265","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3266","usedDeprecatedRules":"2477"},{"filePath":"3267","messages":"3268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3269","messages":"3270","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3271","usedDeprecatedRules":"2477"},{"filePath":"3272","messages":"3273","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3274","usedDeprecatedRules":"2477"},{"filePath":"3275","messages":"3276","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3277","usedDeprecatedRules":"2477"},{"filePath":"3278","messages":"3279","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3280","usedDeprecatedRules":"2477"},{"filePath":"3281","messages":"3282","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"3283","messages":"3284","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3285","usedDeprecatedRules":"2477"},{"filePath":"3286","messages":"3287","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3288","usedDeprecatedRules":"2477"},{"filePath":"3289","messages":"3290","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3291","usedDeprecatedRules":"2477"},{"filePath":"3292","messages":"3293","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3294","usedDeprecatedRules":"2477"},{"filePath":"3295","messages":"3296","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3297","usedDeprecatedRules":"2477"},{"filePath":"3298","messages":"3299","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3300","usedDeprecatedRules":"2477"},{"filePath":"3301","messages":"3302","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3303","usedDeprecatedRules":"2477"},{"filePath":"3304","messages":"3305","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3306","usedDeprecatedRules":"2477"},{"filePath":"3307","messages":"3308","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3309","usedDeprecatedRules":"2477"},{"filePath":"3310","messages":"3311","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3312","usedDeprecatedRules":"2477"},{"filePath":"3313","messages":"3314","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3315","usedDeprecatedRules":"2477"},{"filePath":"3316","messages":"3317","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3318","usedDeprecatedRules":"2477"},{"filePath":"3319","messages":"3320","errorCount":0,"fatalErrorCount":0,"warningCount":154,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3321","usedDeprecatedRules":"2477"},{"filePath":"3322","messages":"3323","errorCount":0,"fatalErrorCount":0,"warningCount":86,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3324","usedDeprecatedRules":"2477"},{"filePath":"3325","messages":"3326","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3327","usedDeprecatedRules":"2477"},{"filePath":"3328","messages":"3329","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3330","usedDeprecatedRules":"2477"},{"filePath":"3331","messages":"3332","errorCount":0,"fatalErrorCount":0,"warningCount":74,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3333","usedDeprecatedRules":"2477"},{"filePath":"3334","messages":"3335","errorCount":0,"fatalErrorCount":0,"warningCount":85,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3336","usedDeprecatedRules":"2477"},{"filePath":"3337","messages":"3338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3339","messages":"3340","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3341","usedDeprecatedRules":"2477"},{"filePath":"3342","messages":"3343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3344","messages":"3345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3346","messages":"3347","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3348","usedDeprecatedRules":"2477"},{"filePath":"3349","messages":"3350","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3351","usedDeprecatedRules":"2477"},{"filePath":"3352","messages":"3353","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3354","usedDeprecatedRules":"2477"},{"filePath":"3355","messages":"3356","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3357","usedDeprecatedRules":"2477"},{"filePath":"3358","messages":"3359","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3360","usedDeprecatedRules":"2477"},{"filePath":"3361","messages":"3362","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3363","usedDeprecatedRules":"2477"},{"filePath":"3364","messages":"3365","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3366","usedDeprecatedRules":"2477"},{"filePath":"3367","messages":"3368","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3369","usedDeprecatedRules":"2477"},{"filePath":"3370","messages":"3371","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3372","usedDeprecatedRules":"2477"},{"filePath":"3373","messages":"3374","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3375","usedDeprecatedRules":"2477"},{"filePath":"3376","messages":"3377","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3378","usedDeprecatedRules":"2477"},{"filePath":"3379","messages":"3380","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3381","usedDeprecatedRules":"2477"},{"filePath":"3382","messages":"3383","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3384","usedDeprecatedRules":"2477"},{"filePath":"3385","messages":"3386","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3387","usedDeprecatedRules":"2477"},{"filePath":"3388","messages":"3389","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3390","usedDeprecatedRules":"2477"},{"filePath":"3391","messages":"3392","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3393","usedDeprecatedRules":"2477"},{"filePath":"3394","messages":"3395","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"3396","messages":"3397","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3398","usedDeprecatedRules":"2477"},{"filePath":"3399","messages":"3400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3401","messages":"3402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3403","messages":"3404","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3405","usedDeprecatedRules":"2477"},{"filePath":"3406","messages":"3407","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3408","usedDeprecatedRules":"2477"},{"filePath":"3409","messages":"3410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3411","messages":"3412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3413","messages":"3414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3415","messages":"3416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3417","messages":"3418","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3419","usedDeprecatedRules":"2477"},{"filePath":"3420","messages":"3421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3422","messages":"3423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3424","messages":"3425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3426","messages":"3427","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3428","usedDeprecatedRules":"2477"},{"filePath":"3429","messages":"3430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3431","messages":"3432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3433","messages":"3434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3435","messages":"3436","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3437","usedDeprecatedRules":"2477"},{"filePath":"3438","messages":"3439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3440","messages":"3441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3442","messages":"3443","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3444","usedDeprecatedRules":"2477"},{"filePath":"3445","messages":"3446","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3447","usedDeprecatedRules":"2477"},{"filePath":"3448","messages":"3449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3450","messages":"3451","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3452","usedDeprecatedRules":"2477"},{"filePath":"3453","messages":"3454","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3455","usedDeprecatedRules":"2477"},{"filePath":"3456","messages":"3457","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3458","usedDeprecatedRules":"2477"},{"filePath":"3459","messages":"3460","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3461","usedDeprecatedRules":"2477"},{"filePath":"3462","messages":"3463","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3464","usedDeprecatedRules":"2477"},{"filePath":"3465","messages":"3466","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3467","usedDeprecatedRules":"2477"},{"filePath":"3468","messages":"3469","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3470","usedDeprecatedRules":"2477"},{"filePath":"3471","messages":"3472","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3473","usedDeprecatedRules":"2477"},{"filePath":"3474","messages":"3475","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3476","usedDeprecatedRules":"2477"},{"filePath":"3477","messages":"3478","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3479","usedDeprecatedRules":"2477"},{"filePath":"3480","messages":"3481","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3482","usedDeprecatedRules":"2477"},{"filePath":"3483","messages":"3484","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3485","usedDeprecatedRules":"2477"},{"filePath":"3486","messages":"3487","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3488","usedDeprecatedRules":"2477"},{"filePath":"3489","messages":"3490","errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3491","usedDeprecatedRules":"2477"},{"filePath":"3492","messages":"3493","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3494","usedDeprecatedRules":"2477"},{"filePath":"3495","messages":"3496","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3497","usedDeprecatedRules":"2477"},{"filePath":"3498","messages":"3499","errorCount":0,"fatalErrorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"3500","messages":"3501","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3502","usedDeprecatedRules":"2477"},{"filePath":"3503","messages":"3504","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3505","usedDeprecatedRules":"2477"},{"filePath":"3506","messages":"3507","errorCount":0,"fatalErrorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3508","usedDeprecatedRules":"2477"},{"filePath":"3509","messages":"3510","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3505","usedDeprecatedRules":"2477"},{"filePath":"3511","messages":"3512","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3513","usedDeprecatedRules":"2477"},{"filePath":"3514","messages":"3515","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3516","usedDeprecatedRules":"2477"},{"filePath":"3517","messages":"3518","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3519","usedDeprecatedRules":"2477"},{"filePath":"3520","messages":"3521","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3522","usedDeprecatedRules":"2477"},{"filePath":"3523","messages":"3524","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3525","usedDeprecatedRules":"2477"},{"filePath":"3526","messages":"3527","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3528","usedDeprecatedRules":"2477"},{"filePath":"3529","messages":"3530","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3531","usedDeprecatedRules":"2477"},{"filePath":"3532","messages":"3533","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3534","usedDeprecatedRules":"2477"},{"filePath":"3535","messages":"3536","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3537","usedDeprecatedRules":"2477"},{"filePath":"3538","messages":"3539","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3540","usedDeprecatedRules":"2477"},{"filePath":"3541","messages":"3542","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3543","usedDeprecatedRules":"2477"},{"filePath":"3544","messages":"3545","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3546","usedDeprecatedRules":"2477"},{"filePath":"3547","messages":"3548","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3549","usedDeprecatedRules":"2477"},{"filePath":"3550","messages":"3551","errorCount":0,"fatalErrorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3552","usedDeprecatedRules":"2477"},{"filePath":"3553","messages":"3554","errorCount":0,"fatalErrorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"3555","messages":"3556","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3557","usedDeprecatedRules":"2477"},{"filePath":"3558","messages":"3559","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3560","usedDeprecatedRules":"2477"},{"filePath":"3561","messages":"3562","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3563","usedDeprecatedRules":"2477"},{"filePath":"3564","messages":"3565","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3566","usedDeprecatedRules":"2477"},{"filePath":"3567","messages":"3568","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3569","usedDeprecatedRules":"2477"},{"filePath":"3570","messages":"3571","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3572","usedDeprecatedRules":"2477"},{"filePath":"3573","messages":"3574","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3575","usedDeprecatedRules":"2477"},{"filePath":"3576","messages":"3577","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3578","usedDeprecatedRules":"2477"},{"filePath":"3579","messages":"3580","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3581","usedDeprecatedRules":"2477"},{"filePath":"3582","messages":"3583","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3584","usedDeprecatedRules":"2477"},{"filePath":"3585","messages":"3586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3587","messages":"3588","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3589","usedDeprecatedRules":"2477"},{"filePath":"3590","messages":"3591","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3592","usedDeprecatedRules":"2477"},{"filePath":"3593","messages":"3594","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3595","usedDeprecatedRules":"2477"},{"filePath":"3596","messages":"3597","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3598","usedDeprecatedRules":"2477"},{"filePath":"3599","messages":"3600","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3601","usedDeprecatedRules":"2477"},{"filePath":"3602","messages":"3603","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3604","usedDeprecatedRules":"2477"},{"filePath":"3605","messages":"3606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3607","messages":"3608","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"3609","messages":"3610","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"3611","messages":"3612","errorCount":0,"fatalErrorCount":0,"warningCount":52,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"3613","messages":"3614","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3615","usedDeprecatedRules":"2477"},{"filePath":"3616","messages":"3617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3618","messages":"3619","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3620","usedDeprecatedRules":"2477"},{"filePath":"3621","messages":"3622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"2477"},{"filePath":"3623","messages":"3624","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3625","usedDeprecatedRules":"2477"},{"filePath":"3626","messages":"3627","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3628","usedDeprecatedRules":"2477"},{"filePath":"3629","messages":"3630","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3631","usedDeprecatedRules":"2477"},{"filePath":"3632","messages":"3633","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3634","usedDeprecatedRules":"2477"},{"filePath":"3635","messages":"3636","errorCount":0,"fatalErrorCount":0,"warningCount":232,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"3637","messages":"3638","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3639","usedDeprecatedRules":"2477"},{"filePath":"3640","messages":"3641","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3642","usedDeprecatedRules":"2477"},{"filePath":"3643","messages":"3644","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3645","usedDeprecatedRules":"2477"},{"filePath":"3646","messages":"3647","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3648","usedDeprecatedRules":"2477"},{"filePath":"3649","messages":"3650","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3634","usedDeprecatedRules":"2477"},{"filePath":"3651","messages":"3652","errorCount":0,"fatalErrorCount":0,"warningCount":209,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3653","usedDeprecatedRules":"2477"},{"filePath":"3654","messages":"3655","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3656","usedDeprecatedRules":"2477"},{"filePath":"3657","messages":"3658","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3628","usedDeprecatedRules":"2477"},{"filePath":"3659","messages":"3660","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3639","usedDeprecatedRules":"2477"},{"filePath":"3661","messages":"3662","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3663","usedDeprecatedRules":"2477"},{"filePath":"3664","messages":"3665","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3666","usedDeprecatedRules":"2477"},{"filePath":"3667","messages":"3668","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3669","usedDeprecatedRules":"2477"},{"filePath":"3670","messages":"3671","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3672","usedDeprecatedRules":"2477"},{"filePath":"3673","messages":"3674","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3675","usedDeprecatedRules":"2477"},{"filePath":"3676","messages":"3677","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3678","usedDeprecatedRules":"2477"},{"filePath":"3679","messages":"3680","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3681","usedDeprecatedRules":"2477"},{"filePath":"3682","messages":"3683","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3684","usedDeprecatedRules":"2477"},{"filePath":"3685","messages":"3686","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3687","usedDeprecatedRules":"2477"},{"filePath":"3688","messages":"3689","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3690","usedDeprecatedRules":"2477"},{"filePath":"3691","messages":"3692","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"3693","messages":"3694","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"3695","usedDeprecatedRules":"2477"},"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\index.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\serviceWorker.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\App.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\Store.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\routes\\routes.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\index.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\index.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\contexts\\SettingsContext.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\contexts\\FirebaseAuthContext.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\RootReducer.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\MatxLayout.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\ecommerce.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\icons\\GoogleIcon.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\NavigationReducer.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\config.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\sessions\\SessionRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\mock.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxSuspense\\MatxSuspense.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\actions\\NavigationAction.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\hooks\\useSettings.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\sessions\\ForgotPassword.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\sessions\\NotFound.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\sessions\\register\\FirebaseRegister.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\sessions\\login\\FirebaseLogin.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\Loadable\\Loadable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLoading\\MatxLoading.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\Typography.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\hooks\\useAuth.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\index.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\navigations.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\EcommerceReducer.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\NotificationReducer.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\ScrumBoardReducer.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\icons\\FacebookIcon.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLogo\\MatxLogo.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\cards\\SimpleCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\scrumBoard.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\notification.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\list.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\todos.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\chat.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\inbox.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\users.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\calendarEvents.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\invoice.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxProgressBar\\MatxProgressBar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\settings.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\fake-db\\db\\auth.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\ConfirmationDialog\\ConfirmationDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\charts\\RechartCreator.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\charts\\EchartCreator.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\MatxTheme.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\EchartTheme.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\AddToCartButton\\AddToCartButton.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\ChatHead\\ChatHead.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxSnackbar\\MatxSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\actions\\EcommerceActions.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\actions\\NotificationActions.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxListItem1\\MatxListItem1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\redux\\actions\\ScrumBoardActions.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\RectangleAvatar\\RectangleAvatar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\ChatAvatar\\ChatAvatar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\chat-box-2\\Chatbox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxSidenav\\MatxSidenavContent.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxSidenav\\MatxSidenavContainer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxSidenav\\MatxSidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxHorizontalNav\\MatxHorizontalNav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxVerticalNav\\MatxVerticalNavExpansionPanel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxVerticalNav\\MatxVerticalNav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxSearchBox\\MatxSearchBox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxToolbarMenu\\MatxToolbarMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxMenu\\MatxMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxDivider\\MatxDivider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\Breadcrumb\\Breadcrumb.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\auth\\authRoles.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\DragAndDropRoute.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\PageLayoutRoutees.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\DashboardRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\MaterialRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\data-table\\dataTableRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Settings.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\initThemes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\EcommerceRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\calendar\\CalendarRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Settings.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoioceRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\PricingRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Sidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\layout2.style.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Topbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\SecondarySidebar\\SecondarySidebar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\SidenavTheme\\SidenavTheme.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\Footer\\Footer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Topbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Navbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\pagesRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\map\\MapRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\FormsRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\list\\ListRoute.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\CrudRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\utils\\constant.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\utils\\utils.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\themeColors.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\ChartsRoute.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\AppDragAndDrop.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\AppScrumBoard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\InventoryManagement.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\Analytics3.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\data-table\\SimpleMuiTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\data-table\\ExpandableMuiDataTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Checkout.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\calendar\\MatxCalendar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\auth\\AuthGuard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceDetails.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing3.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing4.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\UserProfile.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\AppExpansionPanel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Cart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Shop.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\SecondarySidebar\\SecondarySidebarContent.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\SecondarySidebar\\SecondarySidebarToggle.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\SecondarySidenavTheme\\SecondarySidenavTheme.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\ShoppingCart\\ShoppingCart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\NotificationBar\\NotificationBar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\Sidenav\\Sidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\map\\AppMap.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\CrudTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\AppInbox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\list\\AppList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoEditor.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\AppChat.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerViewer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\CustomerForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\contexts\\NotificationContext.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Country.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\calendar\\CalendarService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\ApexCharts.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\PaymentDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\calendar\\EventEditorDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\AppEchart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\AppRechart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\calendar\\CalendarHeader.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceEditor.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing3.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing4.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\UserProfileSidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\UserProfileContent.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\ShopContainer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\list\\ListService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxCustomizer\\MatxCustomizer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\TagDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\list\\ListView.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\list\\GridView.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\list\\ListTopbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\AddressForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\ContactPersonForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\OtherDetailsForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatSidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerDetails.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerLogs.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerInvoice.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatContainer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxTopbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\hooks\\useNotification.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\AdvanceLineChart2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\AdvanceAreaChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\AdvanceLineChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleTreeMap.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleRadialBar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleRadarChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\ProfileBarChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\DummyChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\TwoSimplePieChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\LineBarAreaComposedChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleScatterChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleLineChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\ComparisonChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\Doughnut.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\StackedAreaChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleBarChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\LineChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\AreaChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\ListProductCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxCustomizer\\BadgeSelected.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerEmailSender.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerActions.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerInfo.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\EmptyMessage.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerBillings.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\GridProductCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\HeatmapChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\PeiChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\TableService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxSidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxMessagList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\MemberEditorDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\map\\BasicMap.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\map\\MarkerMap.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\ShopSidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxComposeDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\ControlledAccordion.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\DetailedExpansionPanel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\CustomizedExpansionPanel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\SimpleExpansionPanel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceViewer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\AdvanceLineChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\RecentUpdates.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\InventoryDashboard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\HeatmapChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\AdvanceAreaChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\AdvanceLineChart2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\SimpleHorizontalList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\SimpleListDnD.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\TwoListDnD.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\AppTodo.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\TopSellingTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCard5.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\InventoryDoughnutChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\InventoryLineChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\RecentUpdateCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoItem.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\PropertyListingForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\invoice-form\\InvoiceForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\WizardForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\UploadForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\BasicForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\order-form\\OrderForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\CustomerList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList3.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList4.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\orders\\OrderList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\products\\ProductViewer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\products\\ProductForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\products\\ProductList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\faq\\Faq1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\faq\\Faq2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\NotificationBar2\\NotificationBar2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\invoice-form\\InvoiceFormService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\invoice-form\\InvoiceItemTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\themeOptions.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\VerticalStepper.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\HorizontalStepper.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\forms\\SimpleForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\order-form\\InvoiceCustomer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\forms\\order-form\\InvoiceOverview.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\ProfileCard2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\ProfileCard1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\forms\\AppForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\AppProgress.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\Analytics.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\Board.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\Analytics2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\Brand\\Brand.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\AppAutoComplete.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\AppSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\AppSlider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\AppRadio.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\AppSwitch.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\AppDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\NotificationBar2\\NotificationCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\AppCheckbox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\LeftSidebarCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\AppMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\icons\\AppIcon.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\buttons\\AppButton.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\tables\\AppTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\components.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\forms\\StepperForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\RowCards.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\Doughnut.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\Campaigns.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCards.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\UpgradeCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCard4.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCard3.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\ModifiedAreaChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\FollowerCard2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\ComparisonChart2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCards2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\FollowerCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardContainer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\GuageProgressCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\AsyncAutocomplete.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\BadgeAutocomplete.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\PositionedSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\AutocompleteCombo.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\TransitionSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\CustomizedSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\SimpleSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\RangeSlider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\LongLengthSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\ConsecutiveSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\DirectionSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\StackedSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\DiscreteSlider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\PlacingRadioLabel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\ContinuousSlider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\InputSlider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\VerticalSlider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\SimpleRadio.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\StandaloneRadio.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\CustomizedSwitch.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\LabelledSwitch.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\FormGroupSwitch.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\PlacingSwitchLabel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\SijmpleSwitch.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\SimpleMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\MaxHeightMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\CustomizedMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\SelectedMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\FormGroupCheckbox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\LabelledCheckbox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\ResponsiveDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\PlacingCheckboxLabel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\FormDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\ConfirmationDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\DialogTransition.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\SimpleCheckbox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\OptimalSizeDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\CustomizedDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\FullScreenDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\SimpleAlerts.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\SimpleDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\tables\\SimpleTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\tables\\PaginationTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\CardEditorDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\BoardList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-temp-mui\\temp-2\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardLabelBar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\index.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\serviceWorker.js",[],["3696","3697"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\App.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\Store.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\routes\\routes.jsx",["3698"],"import AuthGuard from 'app/auth/AuthGuard'\r\nimport NotFound from 'app/views/sessions/NotFound'\r\nimport chartsRoute from 'app/views/charts/ChartsRoute'\r\nimport chatRoutes from 'app/views/chat-box/ChatRoutes'\r\nimport crudRoute from 'app/views/CRUD/CrudRoutes'\r\nimport formsRoutes from 'app/views/forms/FormsRoutes'\r\nimport ListRoute from 'app/views/list/ListRoute'\r\nimport mapRoutes from 'app/views/map/MapRoutes'\r\nimport pagesRoutes from 'app/views/pages/pagesRoutes'\r\nimport todoRoutes from 'app/views/todo/TodoRoutes'\r\nimport inboxRoute from 'app/views/inbox/InboxRoutes'\r\nimport pricingRoutes from 'app/views/pricing/PricingRoutes'\r\nimport invoiceRoutes from 'app/views/invoice/InvoioceRoutes'\r\nimport calendarRoutes from 'app/views/calendar/CalendarRoutes'\r\nimport ecommerceRoutes from 'app/views/ecommerce/EcommerceRoutes'\r\nimport dataTableRoutes from 'app/views/data-table/dataTableRoutes'\r\nimport materialRoutes from 'app/views/material-kit/MaterialRoutes'\r\nimport dragAndDropRoute from 'app/views/Drag&Drop/DragAndDropRoute'\r\nimport scrumBoardRoutes from 'app/views/scrum-board/ScrumBoardRoutes'\r\nimport pageLayoutRoutes from 'app/views/page-layouts/PageLayoutRoutees'\r\nimport { dashboardRoutes } from 'app/views/dashboard/DashboardRoutes'\r\nimport sessionRoutes from 'app/views/sessions/SessionRoutes'\r\nimport MatxLayout from '../components/MatxLayout/MatxLayout'\r\nimport { Navigate } from 'react-router-dom'\r\n/**************************************************** */\r\nimport SuperAdminRoutes from '../components/sup-admin-components/sup-admin-routers'\r\nimport MisRoutes from '../components/Mis-components/Mis-routers'\r\nimport WarehouseRoutes from '../components/Warehouse-components/WarehouseRouter'\r\nimport BotRoutes from '../components/Bot-components/BotRoutes'\r\nimport SortingRoutes from \"../components/Sorting-agent-components/SortingRoutes\"\r\nimport ChargingRoutes from \"../components/Charging-components/ChargingRoutes\"\r\nimport BqcRoutes from \"../components/Bqc-components/BqcRoutes\"\r\nimport Login from \"../Login/loginRouter\"\r\nimport ChangePasswordRouter from 'app/components/Change-password/change-password-router'\r\nimport AuditRouter from \"app/components/Audit-components/AuditRouter\"\r\n\r\nexport const AllPages = () => {\r\n    const all_routes = [\r\n        {\r\n            element: (\r\n                <AuthGuard>\r\n                    <MatxLayout />\r\n                </AuthGuard>\r\n            ),\r\n            children: [\r\n                ...dashboardRoutes,\r\n                ...calendarRoutes,\r\n                ...chartsRoute,\r\n                ...chatRoutes,\r\n                ...crudRoute,\r\n                ...dataTableRoutes,\r\n                ...dragAndDropRoute,\r\n                ...ecommerceRoutes,\r\n                ...formsRoutes,\r\n                ...invoiceRoutes,\r\n                ...ListRoute,\r\n                ...mapRoutes,\r\n                ...materialRoutes,\r\n                ...inboxRoute,\r\n                ...pageLayoutRoutes,\r\n                ...pagesRoutes,\r\n                ...pricingRoutes,\r\n                ...scrumBoardRoutes,\r\n                ...todoRoutes,\r\n                ...SuperAdminRoutes,\r\n                ...MisRoutes,\r\n                ...WarehouseRoutes,\r\n                ...BotRoutes,\r\n                ...SortingRoutes,\r\n                ...ChargingRoutes,\r\n                ...BqcRoutes,\r\n                ...AuditRouter\r\n            ],\r\n        },\r\n        ...Login,\r\n        ...ChangePasswordRouter,\r\n        {\r\n            path: '/',\r\n            element: <Navigate to=\"/login\" />,\r\n        },\r\n        {\r\n            path: '*',\r\n            element: <NotFound />,\r\n        },\r\n    ]\r\n\r\n    return all_routes\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\index.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\index.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\contexts\\SettingsContext.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\RootReducer.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\MatxLayout.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\ecommerce.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\icons\\GoogleIcon.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\NavigationReducer.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\DashboardRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\sessions\\SessionRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\PageLayoutRoutees.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\settings.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\mock.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxSuspense\\MatxSuspense.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\actions\\NavigationAction.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\hooks\\useSettings.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\InventoryManagement.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\sessions\\ForgotPassword.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\sessions\\register\\FirebaseRegister.jsx",["3699","3700","3701","3702","3703"],"import {\n    Card,\n    Grid,\n    Button,\n    CircularProgress,\n} from '@mui/material'\nimport { Box, styled, useTheme } from '@mui/system'\nimport React, { useState } from 'react'\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\nimport { useNavigate } from 'react-router-dom'\nimport useAuth from 'app/hooks/useAuth'\nimport { Paragraph, Span } from 'app/components/Typography'\n\nconst FlexBox = styled(Box)(() => ({\n    display: 'flex',\n    alignItems: 'center',\n}))\n\nconst JustifyBox = styled(FlexBox)(() => ({\n    justifyContent: 'center',\n}))\n\nconst ContentBox = styled(JustifyBox)(() => ({\n    height: '100%',\n    padding: '32px',\n    background: 'rgba(0, 0, 0, 0.01)',\n}))\n\nconst IMG = styled('img')(() => ({\n    width: '100%',\n}))\n\nconst StyledButton = styled(Button)(() => ({\n    color: 'rgba(0, 0, 0, 0.87)',\n    boxShadow:\n        '0px 5px 5px -3px rgb(0 0 0 / 6%), 0px 8px 10px 1px rgb(0 0 0 / 4%), 0px 3px 14px 2px rgb(0 0 0 / 4%)',\n    backgroundColor: '#e0e0e0',\n    '&:hover': {\n        backgroundColor: '#d5d5d5',\n    },\n}))\n\nconst RegisterRoot = styled(JustifyBox)(({ theme }) => ({\n    background: '#1A2038',\n    minHeight: '100vh !important',\n    '& .card': {\n        maxWidth: 650,\n        borderRadius: 12,\n        margin: '1rem',\n    },\n    '& .buttonProgress': {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        marginTop: -12,\n        marginLeft: -12,\n    },\n    '& .socialButton': {\n        width: '100%',\n        '& img': {\n            margin: '0 8px',\n        },\n    },\n    '& .labelLink': {\n        color: theme.palette.primary.main,\n        textDecoration: 'underline',\n    },\n}))\n\nconst FirebaseRegister = () => {\n    const navigate = useNavigate()\n    const [loading, setLoading] = useState(false)\n    const [state, setState] = useState({})\n    const [message, setMessage] = useState('')\n    const { createUserWithEmailAndPassword, signInWithGoogle } = useAuth()\n\n    const handleChange = ({ target: { name, value } }) => {\n        setState({\n            ...state,\n            [name]: value,\n        })\n    }\n    const handleGoogleRegister = async (event) => {\n        try {\n            // await signInWithGoogle()\n            navigate('/')\n        } catch (e) {\n            setMessage(e.message)\n            setLoading(false)\n            console.log(e)\n        }\n    }\n\n    const handleFormSubmit = async () => {\n        try {\n            setLoading(true)\n            // await createUserWithEmailAndPassword(state.email, state.password)\n            navigate('/dashboard/default')\n        } catch (e) {\n            setLoading(false)\n            console.log(e)\n            setMessage(e.message)\n        }\n    }\n    let { username, password } = state\n    const { palette } = useTheme()\n    const textError = palette.error.main\n\n    return (\n        <RegisterRoot>\n            <Card className=\"card\">\n                <Grid container>\n                    <Grid item lg={5} md={5} sm={5} xs={12}>\n                        <ContentBox>\n                            <IMG\n                                src=\"/assets/images/illustrations/posting_photo.svg\"\n                                alt=\"\"\n                            />\n                        </ContentBox>\n                    </Grid>\n                    <Grid item lg={7} md={7} sm={7} xs={12}>\n                        {/* <Box px={4} pt={4}>\n                            <StyledButton\n                                onClick={handleGoogleRegister}\n                                variant=\"contained\"\n                                className=\"socialButton\"\n                            >\n                                <img\n                                    src=\"/assets/images/logos/google.svg\"\n                                    alt=\"\"\n                                />\n                                Sign Up With Google\n                            </StyledButton>\n                        </Box>\n                        <Paragraph sx={{ textAlign: 'center' }}>Or</Paragraph> */}\n                        <Box p={4} height=\"100%\">\n                            <ValidatorForm onSubmit={handleFormSubmit}>\n                                <TextValidator\n                                    sx={{ mb: 3, width: '100%' }}\n                                    variant=\"outlined\"\n                                    size=\"large\"\n                                    label=\"Username\"\n                                    onChange={handleChange}\n                                    type=\"text\"\n                                    name=\"username\"\n                                    value={username || ''}\n                                    validators={['required']}\n                                    errorMessages={[\n                                        'this field is required',\n                                        \n                                    ]}\n                                />\n                                <TextValidator\n                                    sx={{ mb: '16px', width: '100%' }}\n                                    label=\"Password\"\n                                    variant=\"outlined\"\n                                    size=\"large\"\n                                    onChange={handleChange}\n                                    name=\"password\"\n                                    type=\"password\"\n                                    value={password || ''}\n                                    validators={['required']}\n                                    errorMessages={['this field is required']}\n                                />\n                                {/* <FormControlLabel\n                                    sx={{ mb: '16px' }}\n                                    name=\"agreement\"\n                                    onChange={(e) =>\n                                        handleChange({\n                                            target: {\n                                                name: 'agreement',\n                                                value: e.target.checked,\n                                            },\n                                        })\n                                    }\n                                    control={\n                                        <Checkbox\n                                            size=\"small\"\n                                            checked={agreement || false}\n                                        />\n                                    }\n                                    label={\n                                        <>\n                                            I have read and agree to the{' '}\n                                            <a href=\"/\" className=\"labelLink\">\n                                                terms of service.\n                                            </a>\n                                        </>\n                                    }\n                                /> */}\n                                {message && (\n                                    <Paragraph sx={{ color: textError }}>\n                                        {message}\n                                    </Paragraph>\n                                )}\n                                <FlexBox display=\"flex\" alignItems=\"center\">\n                                    <Box position=\"relative\">\n                                        <Button\n                                            variant=\"contained\"\n                                            color=\"primary\"\n                                            disabled={loading}\n                                            type=\"submit\"\n                                        >\n                                            Sign Up\n                                        </Button>\n                                        {loading && (\n                                            <CircularProgress\n                                                size={24}\n                                                className=\"buttonProgress\"\n                                            />\n                                        )}\n                                    </Box>\n                                    {/* <Span sx={{ mr: 1, ml: '20px' }}>or</Span>\n                                    <Button\n                                        sx={{ textTransform: 'capitalize' }}\n                                        onClick={() => navigate(\"/session/signin\")}\n                                    >\n                                        Sign In\n                                    </Button> */}\n                                </FlexBox>\n                            </ValidatorForm>\n                        </Box>\n                    </Grid>\n                </Grid>\n            </Card>\n        </RegisterRoot>\n    )\n}\n\nexport default FirebaseRegister\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\sessions\\login\\FirebaseLogin.jsx",["3704","3705"],"import {\r\n    Card,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    Grid,\r\n    Button,\r\n    CircularProgress,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport React, { useState } from 'react'\r\nimport { Box, styled, useTheme } from '@mui/system'\r\nimport useAuth from 'app/hooks/useAuth'\r\nimport { MatxLogo, MatxDivider } from 'app/components'\r\nimport { TextValidator, ValidatorForm } from 'react-material-ui-form-validator'\r\nimport { Paragraph, Span } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({\r\n    justifyContent: 'center',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(() => ({\r\n    color: 'rgba(0, 0, 0, 0.87)',\r\n    boxShadow:\r\n        '0px 5px 5px -3px rgb(0 0 0 / 6%), 0px 8px 10px 1px rgb(0 0 0 / 4%), 0px 3px 14px 2px rgb(0 0 0 / 4%)',\r\n    backgroundColor: '#e0e0e0',\r\n    '&:hover': {\r\n        backgroundColor: '#d5d5d5',\r\n    },\r\n}))\r\n\r\nconst FirebaseRoot = styled(JustifyBox)(({ theme }) => ({\r\n    background: '#1A2038',\r\n    minHeight: '100vh !important',\r\n    '& .card': {\r\n        maxWidth: 800,\r\n        margin: '1rem',\r\n    },\r\n    '& .cardLeft': {\r\n        height: '100%',\r\n        padding: '32px 56px',\r\n        background: '#161c37 url(/assets/images/bg-3.png) no-repeat',\r\n        backgroundSize: 'cover',\r\n        color: '#fff',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        [theme.breakpoints.down('sm')]: {\r\n            minWidth: 200,\r\n        },\r\n        '& img': {\r\n            width: 32,\r\n            height: 32,\r\n        },\r\n    },\r\n    '& .logo': {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        '& span': {\r\n            fontSize: 26,\r\n            lineHeight: 1.3,\r\n            fontWeight: 800,\r\n        },\r\n    },\r\n    '& .mainTitle': {\r\n        fontSize: 18,\r\n        lineHeight: 1.3,\r\n        marginBottom: 24,\r\n    },\r\n    '& .features': {\r\n        '& .item': {\r\n            position: 'relative',\r\n            marginBottom: 12,\r\n            paddingLeft: 20,\r\n            '&::after': {\r\n                position: 'absolute',\r\n                content: '\"\"',\r\n                width: 4,\r\n                height: 4,\r\n                borderRadius: 4,\r\n                left: 4,\r\n                top: 7,\r\n                backgroundColor: theme.palette.error.main,\r\n            },\r\n        },\r\n    },\r\n    '& .buttonProgress': {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    },\r\n    '& .socialButton': {\r\n        width: '100%',\r\n        '& img': {\r\n            margin: '0 8px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst FirebaseLogin = () => {\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [userInfo, setUserInfo] = useState({\r\n        email: 'jason@ui-lib.com',\r\n        password: 'dummyPass',\r\n        remember: true,\r\n    })\r\n    const [message, setMessage] = useState('')\r\n    const { signInWithEmailAndPassword, signInWithGoogle } = useAuth()\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        let temp = { ...userInfo }\r\n        temp[name] = value\r\n        setUserInfo(temp)\r\n    }\r\n\r\n    const handleFormSubmit = async (event) => {\r\n        setLoading(true)\r\n        try {\r\n            // await signInWithEmailAndPassword(userInfo.email, userInfo.password)\r\n            navigate('/')\r\n        } catch (e) {\r\n            console.log(e)\r\n            setMessage(e.message)\r\n            setLoading(false)\r\n        }\r\n    }\r\n    const handleGoogleLogin = async (event) => {\r\n        try {\r\n            // await signInWithGoogle()\r\n            navigate('/')\r\n        } catch (e) {\r\n            setMessage(e.message)\r\n            setLoading(false)\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const { palette } = useTheme()\r\n    const textError = palette.error.main\r\n    const textPrimary = palette.primary.main\r\n\r\n    return (\r\n        <FirebaseRoot>\r\n            <Card className=\"card\">\r\n                <Grid container>\r\n                    <Grid item lg={6} md={6} sm={5} xs={12}>\r\n                        <div className=\"cardLeft\">\r\n                            <div className=\"logo\">\r\n                                <MatxLogo sx={{ mr: 1 }} />{' '}\r\n                                <span>MatX Pro</span>\r\n                            </div>\r\n                            <h1 className=\"mainTitle\">Admin Dashboard</h1>\r\n                            <div className=\"features\">\r\n                                <div className=\"item\">\r\n                                    JWT, FireBase & Auth0 Authentication\r\n                                </div>\r\n                                <div className=\"item\">\r\n                                    Clean & Organised code\r\n                                </div>\r\n                                <div className=\"item\">\r\n                                    Limitless Pages & Components\r\n                                </div>\r\n                            </div>\r\n                            <Span sx={{ flexGrow: 1 }}></Span>\r\n                            <FlexBox>\r\n                                <a\r\n                                    href=\"https://ui-lib.com/\"\r\n                                    target=\"_blank\"\r\n                                    rel=\"noopener noreferrer\"\r\n                                >\r\n                                    <img\r\n                                        src=\"/assets/images/logos/ui-lib.png\"\r\n                                        alt=\"UI Lib Logo\"\r\n                                    />\r\n                                </a>\r\n                            </FlexBox>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item lg={6} md={6} sm={6} xs={12}>\r\n                        <Box px={4} pt={4}>\r\n                            <StyledButton\r\n                                onClick={handleGoogleLogin}\r\n                                variant=\"contained\"\r\n                                className=\"socialButton\"\r\n                            >\r\n                                <img\r\n                                    src=\"/assets/images/logos/google.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                Sign In With Google\r\n                            </StyledButton>\r\n                        </Box>\r\n\r\n                        <MatxDivider sx={{ mt: 3, px: 4 }} text=\"Or\" />\r\n\r\n                        <Box p={4} height=\"100%\" position=\"relative\">\r\n                            <ValidatorForm onSubmit={handleFormSubmit}>\r\n                                <TextValidator\r\n                                    sx={{ mb: 3, width: '100%' }}\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    label=\"Email\"\r\n                                    onChange={handleChange}\r\n                                    type=\"email\"\r\n                                    name=\"email\"\r\n                                    value={userInfo.email}\r\n                                    validators={['required', 'isEmail']}\r\n                                    errorMessages={[\r\n                                        'this field is required',\r\n                                        'email is not valid',\r\n                                    ]}\r\n                                />\r\n                                <TextValidator\r\n                                    sx={{ mb: '12px', width: '100%' }}\r\n                                    label=\"Password\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"small\"\r\n                                    onChange={handleChange}\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    value={userInfo.password}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                />\r\n                                <FormControlLabel\r\n                                    sx={{ mb: '12px', maxWidth: 288 }}\r\n                                    name=\"remember\"\r\n                                    onChange={handleChange}\r\n                                    control={\r\n                                        <Checkbox\r\n                                            size=\"small\"\r\n                                            onChange={({\r\n                                                target: { checked },\r\n                                            }) =>\r\n                                                handleChange({\r\n                                                    target: {\r\n                                                        name: 'remember',\r\n                                                        value: checked,\r\n                                                    },\r\n                                                })\r\n                                            }\r\n                                            checked={userInfo.remember}\r\n                                        />\r\n                                    }\r\n                                    label=\"Remeber me\"\r\n                                />\r\n\r\n                                {message && (\r\n                                    <Paragraph sx={{ color: textError }}>\r\n                                        {message}\r\n                                    </Paragraph>\r\n                                )}\r\n\r\n                                <FlexBox mb={2} flexWrap=\"wrap\">\r\n                                    <Box position=\"relative\">\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            disabled={loading}\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            Sign in\r\n                                        </Button>\r\n                                        {loading && (\r\n                                            <CircularProgress\r\n                                                size={24}\r\n                                                className=\"buttonProgress\"\r\n                                            />\r\n                                        )}\r\n                                    </Box>\r\n                                    <Span sx={{ mr: 1, ml: '20px' }}>or</Span>\r\n                                    <Button\r\n                                        sx={{ textTransform: 'capitalize' }}\r\n                                        onClick={() =>\r\n                                            navigate('/session/signup')\r\n                                        }\r\n                                    >\r\n                                        Sign up\r\n                                    </Button>\r\n                                </FlexBox>\r\n                                <Button\r\n                                    sx={{ color: textPrimary }}\r\n                                    onClick={() =>\r\n                                        navigate('/session/forgot-password')\r\n                                    }\r\n                                >\r\n                                    Forgot password?\r\n                                </Button>\r\n                            </ValidatorForm>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n        </FirebaseRoot>\r\n    )\r\n}\r\n\r\nexport default FirebaseLogin\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\UserProfile.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\initThemes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Settings.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Settings.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\sessions\\NotFound.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\LeftSidebarCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\Analytics3.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\Analytics.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\auth\\authRoles.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Loadable\\Loadable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\themeColors.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\themeOptions.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\InventoryDashboard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\RecentUpdates.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\UserProfileSidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\UserProfileContent.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\HeatmapChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\AdvanceAreaChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\AdvanceLineChart2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\AdvanceLineChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\ModifiedAreaChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\TopSellingTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\UpgradeCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLoading\\MatxLoading.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Typography.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\hooks\\useAuth.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\components.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\RecentUpdateCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\InventoryLineChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\InventoryDoughnutChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCard5.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\ProfileBarChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\page-layouts\\user-profile\\DummyChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\Doughnut.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCards2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\Campaigns.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\RowCards.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCards.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\GuageProgressCard.jsx",[],["3706","3707"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\ComparisonChart2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\FollowerCard2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\FollowerCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCard4.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\shared\\StatCard3.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\utils\\utils.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\index.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\EcommerceReducer.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\NotificationReducer.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\reducers\\ScrumBoardReducer.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\navigations.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\icons\\FacebookIcon.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLogo\\MatxLogo.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\notification.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\cards\\SimpleCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\EchartTheme.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxProgressBar\\MatxProgressBar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\list.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\todos.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\scrumBoard.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\chat.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\inbox.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\ConfirmationDialog\\ConfirmationDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\MatxTheme.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\charts\\RechartCreator.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\charts\\EchartCreator.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\users.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\calendarEvents.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\invoice.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\fake-db\\db\\auth.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\AddToCartButton\\AddToCartButton.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\ChatHead\\ChatHead.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxSnackbar\\MatxSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxListItem1\\MatxListItem1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\RectangleAvatar\\RectangleAvatar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxSidenav\\MatxSidenavContent.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxSidenav\\MatxSidenavContainer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxSidenav\\MatxSidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\chat-box-2\\Chatbox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\ChatAvatar\\ChatAvatar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxHorizontalNav\\MatxHorizontalNav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxVerticalNav\\MatxVerticalNavExpansionPanel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxVerticalNav\\MatxVerticalNav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\actions\\EcommerceActions.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\actions\\NotificationActions.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxSearchBox\\MatxSearchBox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\redux\\actions\\ScrumBoardActions.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxToolbarMenu\\MatxToolbarMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxMenu\\MatxMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxDivider\\MatxDivider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Breadcrumb\\Breadcrumb.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\DragAndDropRoute.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\MaterialRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\data-table\\dataTableRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\EcommerceRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\calendar\\CalendarRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoioceRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\PricingRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\pagesRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\map\\MapRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\list\\ListRoute.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\FormsRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\CrudRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\ChartsRoute.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\layout2.style.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\auth\\AuthGuard.jsx",["3708","3709","3710","3711"],"import useAuth from 'app/hooks/useAuth'\r\nimport { flat } from 'app/utils/utils'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Navigate, useLocation, useNavigate } from 'react-router-dom'\r\nimport { AllPages } from '../routes/routes'\r\nimport Swal from 'sweetalert2'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosSuperAdminPrexo } from '../../axios'\r\n\r\nconst getUserRoleAuthStatus = (pathname, user, routes) => {\r\n    if (!user) {\r\n        return false\r\n    }\r\n    const matched = routes.find((r) => r.path === pathname)\r\n    const authenticated =\r\n        matched && matched.auth && matched.auth.length\r\n            ? matched.auth.includes(user.role)\r\n            : true\r\n    return authenticated\r\n}\r\nconst AuthGuard = ({ children }) => {\r\n    const { isAuthenticated, user } = useAuth()\r\n    const [previouseRoute, setPreviousRoute] = useState(null)\r\n    const { pathname } = useLocation()\r\n    const navigate = useNavigate()\r\n    const routes = flat(AllPages())\r\n\r\n    const isUserRoleAuthenticated = getUserRoleAuthStatus(\r\n        pathname,\r\n        user,\r\n        routes\r\n    )\r\n    let authenticated = isAuthenticated && isUserRoleAuthenticated\r\n\r\n    // IF YOU NEED ROLE BASED AUTHENTICATION,\r\n    // UNCOMMENT ABOVE TWO LINES, getUserRoleAuthStatus METHOD AND user VARIABLE\r\n    // AND COMMENT OUT BELOW LINE\r\n    // let authenticated = isAuthenticated\r\n\r\n\r\n    useEffect(() => {\r\n        const checkUserActiveOrNot = async () => {\r\n            try {\r\n                let user = localStorage.getItem('prexo-authentication')\r\n                if (user) {\r\n                    let { user_name, user_type } = jwt_decode(user)\r\n                    if (user_name == undefined || user_type == undefined) {\r\n                        navigate('/')\r\n                    } else {\r\n                        if (user_type !== 'super-admin') {\r\n                            let res = await axiosSuperAdminPrexo.post(\r\n                                '/check-user-status/' + user_name\r\n                            )\r\n                            if (res.status === 200) {\r\n                            } else if (res.status == 202) {\r\n                                Swal.fire({\r\n                                    icon: 'error',\r\n                                    title: 'Oops...',\r\n                                    text: res.data.message,\r\n                                }).then((result) => {\r\n                                    if (result.isConfirmed) {\r\n                                        localStorage.removeItem(\r\n                                            'prexo-authentication'\r\n                                        )\r\n                                        navigate('/')\r\n                                    }\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        checkUserActiveOrNot()\r\n        if (previouseRoute !== null) setPreviousRoute(pathname)\r\n    }, [pathname, previouseRoute])\r\n\r\n\r\n\r\n\r\n\r\n    if (authenticated) return <>{children}</>\r\n    else {\r\n        return <Navigate to=\"/\" state={{ redirectUrl: previouseRoute }} />\r\n    }\r\n}\r\n\r\nexport default AuthGuard\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Footer\\Footer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\SidenavTheme\\SidenavTheme.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\SecondarySidebar\\SecondarySidebar.jsx",["3712"],"import React from 'react'\nimport useSettings from 'app/hooks/useSettings'\nimport SecondarySidebarToggle from './SecondarySidebarToggle'\nimport SecondarySidebarContent from './SecondarySidebarContent'\nimport SecondarySidenavTheme from '../MatxTheme/SecondarySidenavTheme/SecondarySidenavTheme'\nimport { useTheme } from '@mui/system'\n\nconst SecondarySidebar = () => {\n    const theme = useTheme()\n    const { settings } = useSettings()\n    const secondarySidebarTheme =\n        settings.themes[settings.secondarySidebar.theme]\n\n    return (\n        <SecondarySidenavTheme theme={secondarySidebarTheme}>\n            {settings.secondarySidebar.open && (\n                <SecondarySidebarContent chatTheme={theme} />\n            )}\n            {/* <SecondarySidebarToggle /> */}\n        </SecondarySidenavTheme>\n    )\n}\n\nexport default SecondarySidebar\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Navbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Topbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout2\\Layout2Topbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxLayout\\Layout1\\Layout1Sidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\utils\\constant.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\Board.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\AppScrumBoard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\AppDragAndDrop.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\data-table\\SimpleMuiTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\data-table\\ExpandableMuiDataTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Checkout.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceDetails.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\calendar\\MatxCalendar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing4.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\AppInbox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing3.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\Pricing1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\tables\\AppTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\AppExpansionPanel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\AppSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\AppAutoComplete.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Shop.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Cart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\AppSlider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\AppDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoEditor.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\map\\AppMap.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\AppRadio.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\CrudTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\list\\AppList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\AppChat.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\AppRechart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\ApexCharts.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\AppEchart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\PropertyListingForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerViewer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\CustomerForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\invoice-form\\InvoiceForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\WizardForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\UploadForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\BasicForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\order-form\\OrderForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sidenav\\Sidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\list\\ListService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\TableService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardContainer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\Country.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceEditor.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\invoice\\InvoiceViewer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxTopbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxSidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing4.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing3.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pricing\\SimplePricing1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxMessagList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\ShopContainer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\invoice-form\\InvoiceFormService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\map\\MarkerMap.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatContainer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\ChatSidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\list\\ListView.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\list\\ListTopbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\list\\GridView.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\PlacingRadioLabel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\CRUD\\MemberEditorDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\StandaloneRadio.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\VerticalStepper.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\HorizontalStepper.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\invoice-form\\InvoiceItemTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\ContactPersonForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\OtherDetailsForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerLogs.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-form\\AddressForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\forms\\SimpleForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\order-form\\InvoiceCustomer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\forms\\order-form\\InvoiceOverview.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerInvoice.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerDetails.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\ComparisonChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\Doughnut.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\LineChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\echarts\\AreaChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\AdvanceLineChart2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\AdvanceAreaChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\PeiChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\AdvanceLineChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\apex-charts\\HeatmapChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleTreeMap.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleRadialBar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleScatterChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\LineBarAreaComposedChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleRadarChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\TwoSimplePieChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleBarChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\StackedAreaChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\charts\\recharts\\SimpleLineChart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\radio\\SimpleRadio.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\BoardList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\CardEditorDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\map\\BasicMap.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\TagDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\inbox\\InboxComposeDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\ConfirmationDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\ResponsiveDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\OptimalSizeDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\FullScreenDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\CustomizedDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\FormDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\ListProductCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\DialogTransition.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\GridProductCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\SimpleDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\dialog\\SimpleAlerts.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\VerticalSlider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\InputSlider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\RangeSlider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\chat-box\\EmptyMessage.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\DiscreteSlider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\slider\\ContinuousSlider.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\ShopSidenav.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\BadgeAutocomplete.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\AsyncAutocomplete.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\auto-complete\\AutocompleteCombo.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\TransitionSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\StackedSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\DirectionSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\PositionedSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\ConsecutiveSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\LongLengthSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\CustomizedSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\snackbar\\SimpleSnackbar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\CustomizedExpansionPanel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\DetailedExpansionPanel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\tables\\PaginationTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\ControlledAccordion.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\expansion-panel\\SimpleExpansionPanel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\tables\\SimpleTable.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerActions.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerInfo.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerEmailSender.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\customer-viewer\\CustomerBillings.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\scrum-board\\ScrumBoardLabelBar.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\calendar\\CalendarService.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\calendar\\EventEditorDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\calendar\\CalendarHeader.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\ecommerce\\PaymentDialog.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\SimpleHorizontalList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\SimpleListDnD.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\Drag&Drop\\TwoListDnD.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Brand\\Brand.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\NotificationBar2\\NotificationBar2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\ShoppingCart\\ShoppingCart.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\NotificationBar2\\NotificationCard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\NotificationBar\\NotificationBar.jsx",[],["3713","3714"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\contexts\\NotificationContext.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\hooks\\useNotification.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\SecondarySidebar\\SecondarySidebarToggle.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\SecondarySidebar\\SecondarySidebarContent.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxTheme\\SecondarySidenavTheme\\SecondarySidenavTheme.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\AppProgress.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\customers\\CustomerList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\AppTodo.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\products\\ProductForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList3.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\products\\ProductViewer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\products\\ProductList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList4.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\UserList1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\orders\\OrderList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\forms\\AppForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\faq\\Faq2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\faq\\Faq1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\AppMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\AppCheckbox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\AppSwitch.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\buttons\\AppButton.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\icons\\AppIcon.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxCustomizer\\MatxCustomizer.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\ProfileCard1.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoList.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\pages\\user-list\\ProfileCard2.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\forms\\StepperForm.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\SelectedMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\LabelledCheckbox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\SimpleMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\SimpleCheckbox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\CustomizedMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\menu\\MaxHeightMenu.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\PlacingCheckboxLabel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\LabelledSwitch.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\checkbox\\FormGroupCheckbox.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\SijmpleSwitch.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\PlacingSwitchLabel.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\CustomizedSwitch.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\material-kit\\switch\\FormGroupSwitch.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\MatxCustomizer\\BadgeSelected.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\todo\\TodoItem.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\views\\dashboard\\sup-admin-dshboard.jsx",["3715","3716"],"import React from 'react'\nimport StatCard3 from './shared/StatCard3'\nimport { H3, Span } from 'app/components/Typography'\nimport { styled, useTheme } from '@mui/system'\n\nconst AnalyticsRoot = styled('div')(({ theme }) => ({\n    margin: '30px',\n    [theme.breakpoints.down('sm')]: {\n        margin: '16px',\n    },\n}))\n\nconst FlexBox = styled('div')(({ theme }) => ({\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: '24px',\n}))\n\nconst Analytics2 = () => {\n    const { palette } = useTheme()\n    return (\n        <AnalyticsRoot>\n            <FlexBox>\n                <H3 sx={{ m: 0 }}>DASHBOARD</H3>\n            </FlexBox>\n            <StatCard3 />\n        </AnalyticsRoot>\n    )\n}\n\nexport default Analytics2\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\sup-admin-routers.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-products\\view-products.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-users\\view-users.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-users\\new-users.jsx",["3717","3718"],"import { generateRandomId } from 'app/utils/utils'\r\nimport React, { useState, useEffect } from 'react'\r\n// import { getUserById, updateUser, addNewUser } from './TableService'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\nimport { Dialog, Button, Grid, FormControlLabel, Switch } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst TextField = styled(TextValidator)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({ uid, open, handleClose }) => {\r\n    const [state, setState] = useState({\r\n        name: '',\r\n        email: '',\r\n        phone: '',\r\n        balance: '',\r\n        age: '',\r\n        company: '',\r\n        address: '',\r\n        isActive: false,\r\n    })\r\n\r\n    const handleChange = (event, source) => {\r\n        event.persist()\r\n        if (source === 'switch') {\r\n            setState({\r\n                ...state,\r\n                isActive: event.target.checked,\r\n            })\r\n            return\r\n        }\r\n\r\n        setState({\r\n            ...state,\r\n            [event.target.name]: event.target.value,\r\n        })\r\n    }\r\n\r\n    // const handleFormSubmit = () => {\r\n    //     let { id } = state\r\n    //     if (id) {\r\n    //         updateUser({\r\n    //             ...state,\r\n    //         }).then(() => {\r\n    //             handleClose()\r\n    //         })\r\n    //     } else {\r\n    //         addNewUser({\r\n    //             id: generateRandomId(),\r\n    //             ...state,\r\n    //         }).then(() => {\r\n    //             handleClose()\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //     getUserById(uid).then((data) => setState({ ...data.data }))\r\n    // }, [uid])\r\n\r\n    return (\r\n        <Dialog onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Update Member</H4>\r\n                <ValidatorForm >\r\n                    <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                        <Grid item sm={6} xs={12}>\r\n                            <TextField\r\n                                label=\"Name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={state?.name}\r\n                                onChange={handleChange}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                            <TextField\r\n                                label=\"Email\"\r\n                                type=\"text\"\r\n                                name=\"email\"\r\n                                value={state?.email}\r\n                                onChange={handleChange}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Phone\"\r\n                                type=\"text\"\r\n                                name=\"phone\"\r\n                                value={state?.phone}\r\n                                onChange={handleChange}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n\r\n                            <TextField\r\n                                label=\"Balance\"\r\n                                onChange={handleChange}\r\n                                type=\"number\"\r\n                                name=\"balance\"\r\n                                value={state?.balance}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                        </Grid>\r\n\r\n                        <Grid item sm={6} xs={12}>\r\n                            <TextField\r\n                                label=\"Age\"\r\n                                onChange={handleChange}\r\n                                type=\"number\"\r\n                                name=\"age\"\r\n                                value={state?.age}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                            <TextField\r\n                                label=\"Company\"\r\n                                onChange={handleChange}\r\n                                type=\"text\"\r\n                                name=\"company\"\r\n                                value={state?.company}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                            <TextField\r\n                                label=\"Address\"\r\n                                onChange={handleChange}\r\n                                type=\"text\"\r\n                                name=\"address\"\r\n                                value={state?.address}\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n\r\n                            <FormControlLabel\r\n                                sx={{ my: '20px' }}\r\n                                control={\r\n                                    <Switch\r\n                                        checked={state?.isActive}\r\n                                        onChange={(event) =>\r\n                                            handleChange(event, 'switch')\r\n                                        }\r\n                                    />\r\n                                }\r\n                                label=\"Active Customer\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    <FormHandlerBox>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            type=\"submit\"\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"secondary\"\r\n                            onClick={() => handleClose()}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </FormHandlerBox>\r\n                </ValidatorForm>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\dashboard\\dashboard.jsx",["3719","3720"],"import React from 'react'\r\nimport StatCard3 from './card'\r\nimport { H3, Span } from 'app/components/Typography'\r\nimport { styled, useTheme } from '@mui/system'\r\n\r\nconst AnalyticsRoot = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n}))\r\n\r\nconst FlexBox = styled('div')(({ theme }) => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n    marginBottom: '24px',\r\n}))\r\n\r\nconst Analytics2 = () => {\r\n    const { palette } = useTheme()\r\n    return (\r\n        <AnalyticsRoot>\r\n            <FlexBox>\r\n                <H3 sx={{ m: 0 }}>DASHBOARD</H3>\r\n            </FlexBox>\r\n            <StatCard3 />\r\n        </AnalyticsRoot>\r\n    )\r\n}\r\n\r\nexport default Analytics2\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\dashboard\\card.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Mis-routers.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Dashboard\\dashboard.jsx",["3721","3722"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Dashboard\\card.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-products\\add-products.jsx",["3723","3724"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-location\\view-location.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-location\\add-location.jsx",["3725","3726"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-warehouse\\view-warehouse.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-brands\\view-brands.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-brands\\add-brand.jsx",["3727","3728"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-warehouse\\add-warehouse.jsx",["3729","3730"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-bag\\view-bag.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-bag\\add-bag.jsx",["3731","3732"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-tray\\view-tray.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\manage-tray\\add-tray.jsx",["3733","3734"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\ready-for-charging\\view-wht-tray.jsx",["3735","3736"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Dashboard\\dashboard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Dashboard\\card.jsx",["3737"],"import React, { useEffect, useState } from 'react'\r\nimport { Box, useTheme } from '@mui/system'\r\nimport { H3, Paragraph } from 'app/components/Typography'\r\nimport { Grid, Card, IconButton, Icon } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst StatCard3 = () => {\r\n    const [count, setCount] = useState({})\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosSuperAdminPrexo.post(\r\n                    '/superAdminDashboard'\r\n                )\r\n                if (res.status == 200) {\r\n                    setCount(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    confirmButtonText: 'Ok',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const statList = [\r\n        {\r\n            icon: 'people',\r\n            amount: count.usersCount,\r\n            title: 'Users',\r\n            link: '/sup-admin/users',\r\n        },\r\n        {\r\n            icon: 'location_on_outlined',\r\n            amount: count.location,\r\n            title: 'Locations',\r\n            link: '/sup-admin/location',\r\n        },\r\n        {\r\n            icon: 'home',\r\n            amount: count.warehouse,\r\n            title: 'Warehouses',\r\n            link: '/sup-admin/warehouse',\r\n        },\r\n        {\r\n            icon: 'branding_watermark',\r\n            amount: count.brand,\r\n            title: 'Brands',\r\n            link: '/sup-admin/brands',\r\n        },\r\n        {\r\n            icon: 'shopping_cart',\r\n            amount: count.products,\r\n            title: 'Products',\r\n            link: '/sup-admin/products',\r\n        },\r\n        {\r\n            icon: 'add_shopping_cart',\r\n            amount: count.bag,\r\n            title: 'Bags',\r\n            link: '/sup-admin/bag',\r\n        },\r\n        {\r\n            icon: 'add_shopping_cart',\r\n            amount: count.tray,\r\n            title: 'Trays',\r\n            link: '/sup-admin/tray',\r\n        },\r\n        {\r\n            icon: 'battery_charging_full',\r\n            amount: count.readyForCharging,\r\n            title: 'Ready For Charging',\r\n            link: '/sup-admin/ready-for-charging',\r\n        },\r\n        {\r\n            icon: 'leak_remove',\r\n            amount: count.removeInvalidItem,\r\n            title: 'Remove invalid item',\r\n            link: '/sup-admin/remove-invalid-item',\r\n        },\r\n        {\r\n            icon: 'art_track',\r\n            amount: count.trackItem,\r\n            title: 'Track Item',\r\n            link: '/sup-admin/track-item',\r\n        },\r\n    ]\r\n    const { palette } = useTheme()\r\n    const textMuted = palette.text.secondary\r\n\r\n    return (\r\n        <div>\r\n            <Grid container spacing={3}>\r\n                {statList.map((item, ind) => (\r\n                    <Grid key={item.title} item md={3} sm={6} xs={12}>\r\n                        <Card\r\n                            style={{ cursor: 'pointer' }}\r\n                            onClick={(e) => {\r\n                                navigate(item.link)\r\n                            }}\r\n                            elevation={3}\r\n                            sx={{ p: '20px', display: 'flex' }}\r\n                        >\r\n                            <div>\r\n                                <IconButton\r\n                                    size=\"small\"\r\n                                    sx={{\r\n                                        padding: '8px',\r\n                                        background: 'rgba(0, 0, 0, 0.01)',\r\n                                    }}\r\n                                >\r\n                                    <Icon sx={{ color: textMuted }}>\r\n                                        {item.icon}\r\n                                    </Icon>\r\n                                </IconButton>\r\n                            </div>\r\n                            <Box ml={2}>\r\n                                <H3 sx={{ mt: '-4px', fontSize: '32px' }}>\r\n                                    {item.amount}\r\n                                </H3>\r\n                                <Paragraph sx={{ m: 0, color: textMuted }}>\r\n                                    {item.title}\r\n                                </Paragraph>\r\n                            </Box>\r\n                        </Card>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatCard3\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-warehouse\\view-warehouse.jsx",["3738","3739"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport MemberEditorDialog from './add-warehouse'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { styled } from '@mui/system'\r\nimport { Button, IconButton, Icon } from '@mui/material'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [warehouseList, setWarehouseList] = useState([])\r\n    const [editFetchData, setEditFetchData] = useState({})\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchLocation = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post('/getWarehouse')\r\n                if (res.status === 200) {\r\n                    setWarehouseList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchLocation()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const editWarehouse = async (empId) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.get('/getInfra/' + empId)\r\n            if (response.status == 200) {\r\n                setEditFetchData(response.data.data)\r\n                handleDialogOpen()\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelDelete = (id) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: 'You want to Delete Location!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Delete it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let response = await axiosSuperAdminPrexo.post(\r\n                        '/deleteInfra/' + id\r\n                    )\r\n                    if (response.status == 200) {\r\n                        Swal.fire({\r\n                            position: 'top-center',\r\n                            icon: 'success',\r\n                            title: 'Location has been Deleted',\r\n                            confirmButtonText: 'Ok',\r\n                        }).then((result) => {\r\n                            if (result.isConfirmed) {\r\n                                setIsAlive((isAlive) => !isAlive)\r\n                            }\r\n                        })\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Code',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'parent_id',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse_type',\r\n            label: 'Warehouse Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'address',\r\n            label: 'Address',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'city',\r\n            label: 'City',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'state',\r\n            label: 'State',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'country',\r\n            label: 'Country',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'pincode',\r\n            label: 'Pincode',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        editWarehouse(value)\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    edit\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        handelDelete(value)\r\n                                    }}\r\n                                    color=\"error\"\r\n                                >\r\n                                    delete\r\n                                </Icon>\r\n                            </IconButton>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Warehouse', path: '/' }]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => setShouldOpenEditorDialog(true)}\r\n            >\r\n                Add New Warehouse\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'All Warehouse'}\r\n                data={warehouseList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <MemberEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    editFetchData={editFetchData}\r\n                    setEditFetchData={setEditFetchData}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bag\\view-bag.jsx",["3740","3741","3742"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport MemberEditorDialog from './add-bag'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Box, IconButton, Icon } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [bagList, setBagList] = useState([])\r\n    const navigate = useNavigate()\r\n    const [editFetchData, setEditFetchData] = useState({})\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchBrand = async () => {\r\n            try {\r\n                let obj = {\r\n                    master_type: 'bag-master',\r\n                }\r\n                const res = await axiosSuperAdminPrexo.post('/getMasters', obj)\r\n                if (res.status === 200) {\r\n                    setBagList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchBrand()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setEditFetchData({})\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelDelete = (masterId) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: 'You Want to Delete!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Delete it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let res = await axiosSuperAdminPrexo.get(\r\n                        '/getOneMaster/' + masterId\r\n                    )\r\n                    if (res.status == 200) {\r\n                        let response = await axiosSuperAdminPrexo.post(\r\n                            '/deleteMaster/' + masterId\r\n                        )\r\n                        if (response.status == 200) {\r\n                            Swal.fire({\r\n                                position: 'top-center',\r\n                                icon: 'success',\r\n                                title: 'Your Bag has been Deleted',\r\n                                confirmButtonText: 'Ok',\r\n                            }).then((result) => {\r\n                                if (result.isConfirmed) {\r\n                                    setIsAlive((isAlive) => !isAlive)\r\n                                }\r\n                            })\r\n                        } else {\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Oops...',\r\n                                text: response.data.message,\r\n                            })\r\n                        }\r\n                    } else {\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Oops...',\r\n                            text: \"You Can't Delete This Bag\",\r\n                        })\r\n                    }\r\n                } catch (error) {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: error,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const editbag = async (masterId) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.get(\r\n                '/getOneMaster/' + masterId\r\n            )\r\n            if (response.status == 200) {\r\n                setEditFetchData(response.data.data)\r\n                handleDialogOpen()\r\n            } else if (response.status === 202) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: response.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelAudit = (bagId) => {\r\n        navigate('/sup-admin/bag/audit/' + bagId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Bag Display Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Bag Limit',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Bag Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                flexDirection: 'row',\r\n                            }}\r\n                        >\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        editbag(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    edit\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={() => {\r\n                                        handelDelete(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"error\"\r\n                                >\r\n                                    delete\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={() => {\r\n                                        handelAudit(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    history\r\n                                </Icon>\r\n                            </IconButton>\r\n                        </Box>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Bag', path: '/' }]} />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => setShouldOpenEditorDialog(true)}\r\n            >\r\n                Add New Bag\r\n            </Button>\r\n            <Button\r\n                sx={{ mb: 2, ml: 2 }}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => navigate('/sup-admin/bag/add-bulk-bag')}\r\n            >\r\n                Add Bulk Bag\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'All Bag'}\r\n                data={bagList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <MemberEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    editFetchData={editFetchData}\r\n                    setEditFetchData={setEditFetchData}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-location\\view-location.jsx",["3743","3744"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport MemberEditorDialog from './add-location'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { styled } from '@mui/system'\r\nimport { Button, IconButton, Icon } from '@mui/material'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [locationList, setLocatiolList] = useState([])\r\n    const [editFetchData, setEditFetchData] = useState({})\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchLocation = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post('/getLocation')\r\n                if (res.status === 200) {\r\n                    setLocatiolList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchLocation()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const editLocation = async (empId) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.get('/getInfra/' + empId)\r\n            if (response.status == 200) {\r\n                setEditFetchData(response.data.data)\r\n                handleDialogOpen()\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    const handelDelete = (id) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: 'You want to Delete Location!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Delete it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let response = await axiosSuperAdminPrexo.post(\r\n                        '/deleteInfra/' + id\r\n                    )\r\n                    if (response.status == 200) {\r\n                        Swal.fire({\r\n                            position: 'top-center',\r\n                            icon: 'success',\r\n                            title: 'Location has been Deleted',\r\n                            confirmButtonText: 'Ok',\r\n                        }).then((result) => {\r\n                            if (result.isConfirmed) {\r\n                                setIsAlive((isAlive) => !isAlive)\r\n                            }\r\n                        })\r\n                    } else {\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Oops...',\r\n                            text: response.data.message,\r\n                        })\r\n                    }\r\n                } catch (error) {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: error,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Code',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'address',\r\n            label: 'Address',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'city',\r\n            label: 'City',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'state',\r\n            label: 'State',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'country',\r\n            label: 'Country',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'pincode',\r\n            label: 'Pincode',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        editLocation(value)\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    edit\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        handelDelete(value)\r\n                                    }}\r\n                                    color=\"error\"\r\n                                >\r\n                                    delete\r\n                                </Icon>\r\n                            </IconButton>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Location', path: '/' }]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => setShouldOpenEditorDialog(true)}\r\n            >\r\n                Add New Location\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'All Location'}\r\n                data={locationList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <MemberEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    editFetchData={editFetchData}\r\n                    setEditFetchData={setEditFetchData}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-users\\view-users.jsx",["3745","3746","3747","3748","3749"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport MemberEditorDialog from './new-users'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { styled } from '@mui/system'\r\nimport { Button, IconButton, Icon, Box, Radio } from '@mui/material'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport Avatar from '@mui/material/Avatar'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst UserTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [userList, setUserList] = useState([])\r\n    const [editFetchData, setEditFetchData] = useState({})\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchUser = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post('/getUsers')\r\n                if (res.status === 200) {\r\n                    setUserList(res.data.data.user)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchUser()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setEditFetchData({})\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n    const editUser = async (empId) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.get(\r\n                '/getEditData/' + empId\r\n            )\r\n            if (response.status == 200) {\r\n                setEditFetchData(response.data.data)\r\n                handleDialogOpen()\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelHistory = (e, username) => {\r\n        e.preventDefault()\r\n        navigate('/sup-admin/user-history/' + username)\r\n    }\r\n\r\n    const handelDeactive = (userId) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be Deactive this user!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Deactivate it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let response = await axiosSuperAdminPrexo.post(\r\n                        '/userDeactivate/' + userId\r\n                    )\r\n                    if (response.status == 200) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                        Swal.fire(\r\n                            'Deactivated!',\r\n                            'Your user has been Deactivated.',\r\n                            'success'\r\n                        )\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const handelActive = (userId) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: \"You won't be Active this user!\",\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Activate it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let response = await axiosSuperAdminPrexo.post(\r\n                        '/userActivate/' + userId\r\n                    )\r\n                    if (response.status == 200) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                        Swal.fire(\r\n                            'Activated!',\r\n                            'Your user has been Activated.',\r\n                            'success'\r\n                        )\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'profile',\r\n            label: 'Profile',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return <Avatar variant=\"rounded\" src={value} />\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'creation_date',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'email',\r\n            label: 'Email',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'contact',\r\n            label: 'Mobile No',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'user_name',\r\n            label: 'User name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'user_type',\r\n            label: 'User Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'CPC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'device_name',\r\n            label: 'Device Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'device_id',\r\n            label: 'Device Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    if (value == 'Active') {\r\n                        return (\r\n                            <div style={{ color: 'green', fontWeight: 'bold' }}>\r\n                                {value}\r\n                            </div>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <div style={{ color: 'red', fontWeight: 'bold' }}>\r\n                                {value}\r\n                            </div>\r\n                        )\r\n                    }\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Actions',\r\n            options: {\r\n                sort: false,\r\n                filter: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                flexDirection: 'row',\r\n                            }}\r\n                        >\r\n                            {value == 'Active' ? (\r\n                                <Radio\r\n                                    onClick={(e) => {\r\n                                        handelDeactive(tableMeta.rowData[6])\r\n                                    }}\r\n                                    checked\r\n                                    style={{ color: 'green' }}\r\n                                />\r\n                            ) : (\r\n                                <Radio\r\n                                    onClick={(e) => {\r\n                                        handelActive(tableMeta.rowData[6])\r\n                                    }}\r\n                                    checked\r\n                                    style={{ color: 'red' }}\r\n                                />\r\n                            )}\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        editUser(tableMeta.rowData[6])\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    edit\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        handelHistory(e, tableMeta.rowData[6])\r\n                                    }}\r\n                                    color=\"secondary\"\r\n                                >\r\n                                    history\r\n                                </Icon>\r\n                            </IconButton>\r\n                        </Box>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Users', path: '/' }]} />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => handleDialogOpen()}\r\n            >\r\n                Add New Member\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'User Report'}\r\n                data={userList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <MemberEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    editFetchData={editFetchData}\r\n                    setEditFetchData={setEditFetchData}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default UserTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-brands\\view-brands.jsx",["3750","3751","3752","3753","3754","3755"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport MemberEditorDialog from './add-brand'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport { Button, IconButton, Icon } from '@mui/material'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst BrandTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [editFetchData, setEditFetchData] = useState({})\r\n    const [brandList, setBrandList] = useState([])\r\n    const navigate = useNavigate()\r\n    const [brandCount, setBrandCount] = useState(0)\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchBrand = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post('/getBrands')\r\n                if (res.status === 200) {\r\n                    setBrandList(res.data.data)\r\n                }\r\n                let countBrand = await axiosSuperAdminPrexo.post(\r\n                    '/getBrandIdHighest'\r\n                )\r\n                if (countBrand.status == 200) {\r\n                    setBrandCount(countBrand.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchBrand()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setEditFetchData({})\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = (state) => {\r\n        if (state == 'ADD') {\r\n            if (brandCount != 0) {\r\n                setShouldOpenEditorDialog(true)\r\n            }\r\n        } else {\r\n            setShouldOpenEditorDialog(true)\r\n        }\r\n    }\r\n\r\n    const editBrand = async (brandId) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.get(\r\n                '/getBrandOne/' + brandId\r\n            )\r\n            if (response.status == 200) {\r\n                setEditFetchData(response.data.data)\r\n                handleDialogOpen()\r\n            } else {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: response.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelDelete = (brandId) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: 'You Want to Delete!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Delete it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let res = await axiosSuperAdminPrexo.get(\r\n                        '/getBrandOne/' + brandId\r\n                    )\r\n                    if (res.status == 200) {\r\n                        let response = await axiosSuperAdminPrexo.post(\r\n                            '/deleteBrand/' + brandId\r\n                        )\r\n                        if (response.status == 200) {\r\n                            Swal.fire({\r\n                                position: 'top-center',\r\n                                icon: 'success',\r\n                                title: 'Your Brand has been Deleted.',\r\n                                confirmButtonText: 'Ok',\r\n                            }).then((result) => {\r\n                                if (result.isConfirmed) {\r\n                                    setIsAlive((isAlive) => !isAlive)\r\n                                }\r\n                            })\r\n                        } else {\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Oops...',\r\n                                text: \"This Brand You Can't Delete\",\r\n                            })\r\n                        }\r\n                    } else {\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Oops...',\r\n                            text: \"This Brand You Can't Delete\",\r\n                        })\r\n                    }\r\n                } catch (error) {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: error,\r\n                    })\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand_id', // field name in the row object\r\n            label: 'Brand Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand_name',\r\n            label: 'Brand Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand_id',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        editBrand(value)\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    edit\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        handelDelete(value)\r\n                                    }}\r\n                                    color=\"error\"\r\n                                >\r\n                                    delete\r\n                                </Icon>\r\n                            </IconButton>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Brands', path: '/' }]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => handleDialogOpen('ADD')}\r\n            >\r\n                Add New Brand\r\n            </Button>\r\n            <Button\r\n                sx={{ mb: 2, ml: 2 }}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => navigate('/sup-admin/brands/bulk-brand')}\r\n            >\r\n                Add Bulk Brand\r\n            </Button>\r\n\r\n            <MUIDataTable\r\n                title={'All Brands'}\r\n                data={brandList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <MemberEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    editFetchData={editFetchData}\r\n                    setEditFetchData={setEditFetchData}\r\n                    brandCount={brandCount}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default BrandTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-products\\view-products.jsx",["3756","3757","3758","3759"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-tray\\view-tray.jsx",["3760","3761","3762"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport MemberEditorDialog from './add-tray'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Box, IconButton, Icon } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport EditRoadIcon from '@mui/icons-material/EditRoad'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [trayList, setTrayList] = useState([])\r\n    const navigate = useNavigate()\r\n    const [editFetchData, setEditFetchData] = useState({})\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchBrand = async () => {\r\n            try {\r\n                let obj = {\r\n                    master_type: 'tray-master',\r\n                }\r\n                const res = await axiosSuperAdminPrexo.post('/getMasters', obj)\r\n                if (res.status === 200) {\r\n                    setTrayList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchBrand()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setEditFetchData({})\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelDelete = (masterId) => {\r\n        Swal.fire({\r\n            title: 'Are you sure?',\r\n            text: 'You Want to Delete!',\r\n            icon: 'warning',\r\n            showCancelButton: true,\r\n            confirmButtonColor: '#3085d6',\r\n            cancelButtonColor: '#d33',\r\n            confirmButtonText: 'Yes, Delete it!',\r\n        }).then(async (result) => {\r\n            if (result.isConfirmed) {\r\n                try {\r\n                    let res = await axiosSuperAdminPrexo.get(\r\n                        '/getOneMaster/' + masterId\r\n                    )\r\n                    if (res.status == 200) {\r\n                        let response = await axiosSuperAdminPrexo.post(\r\n                            '/deleteMaster/' + masterId\r\n                        )\r\n                        if (response.status == 200) {\r\n                            Swal.fire({\r\n                                position: 'top-center',\r\n                                icon: 'success',\r\n                                title: 'Your Tray has been Deleted',\r\n                                confirmButtonText: 'Ok',\r\n                            }).then((result) => {\r\n                                if (result.isConfirmed) {\r\n                                    setIsAlive((isAlive) => !isAlive)\r\n                                }\r\n                            })\r\n                        } else {\r\n                            alert(response.data.message)\r\n                        }\r\n                    } else {\r\n                        alert(\"You Can't Delete This Tray\")\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    const editTray = async (masterId) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.get(\r\n                '/getOneMaster/' + masterId\r\n            )\r\n            if (response.status == 200) {\r\n                setEditFetchData(response.data.data)\r\n                handleDialogOpen()\r\n            } else if (response.status === 202) {\r\n                alert(\"You Can't Edit This Tray\")\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelAudit = (trayId) => {\r\n        navigate('/sup-admin/tray/audit/' + trayId)\r\n    }\r\n\r\n    const handelEditHistory = (trayId) => {\r\n        navigate('/sup-admin/tray/edit-history/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Display Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Limit',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                flexDirection: 'row',\r\n                            }}\r\n                        >\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={(e) => {\r\n                                        editTray(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    edit\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={() => {\r\n                                        handelDelete(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"error\"\r\n                                >\r\n                                    delete\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <Icon\r\n                                    onClick={() => {\r\n                                        handelAudit(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"primary\"\r\n                                >\r\n                                    history\r\n                                </Icon>\r\n                            </IconButton>\r\n                            <IconButton>\r\n                                <EditRoadIcon\r\n                                    onClick={() => {\r\n                                        handelEditHistory(tableMeta.rowData[1])\r\n                                    }}\r\n                                    color=\"green\"\r\n                                >\r\n                                    button\r\n                                </EditRoadIcon>\r\n                            </IconButton>\r\n                        </Box>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Tray', path: '/' }]} />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => setShouldOpenEditorDialog(true)}\r\n            >\r\n                Add New Tray\r\n            </Button>\r\n            <Button\r\n                sx={{ mb: 2, ml: 2 }}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                onClick={() => navigate('/sup-admin/tray/add-bulk-tray')}\r\n            >\r\n                Add Bulk Tray\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'All Tray'}\r\n                data={trayList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <MemberEditorDialog\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    editFetchData={editFetchData}\r\n                    setEditFetchData={setEditFetchData}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Ready-for-charging\\view-wht-tray.jsx",["3763"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [whtTrayList, setWhtTrayList] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchWht = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post('/getInuseWht')\r\n                if (res.status === 200) {\r\n                    setWhtTrayList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchWht()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const handelReadyForCharging = async () => {\r\n        try {\r\n            let obj = {\r\n                ischeck: isCheck,\r\n                status: 'Closed',\r\n            }\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/ready-for-charging',\r\n                obj\r\n            )\r\n            setIsCheck([])\r\n            if (res.status === 200) {\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsCheck([])\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else if (res.status == 202) {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelViewItem = (trayId) => {\r\n        navigate('/sup-admin/wht/view-item/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code', // field name in the row object\r\n            label: 'Tray Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            hide: true,\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: false,\r\n                sort: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[8],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Ready For Charging', path: '/' }]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isCheck.length === 0}\r\n                onClick={(e) => {\r\n                    handelReadyForCharging(e)\r\n                }}\r\n            >\r\n                Ready For Charging\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'WHT Tray'}\r\n                data={whtTrayList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-location\\add-location.jsx",["3764","3765","3766"],"import React, { useEffect, useState } from 'react'\r\nimport { Dialog, Button, Grid, TextField } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport * as Yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport Swal from 'sweetalert2'\r\nimport { useForm } from 'react-hook-form'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n}) => {\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(editFetchData).length !== 0) {\r\n            reset({ ...editFetchData })\r\n            open()\r\n        }\r\n    }, [])\r\n\r\n    const schema = Yup.object().shape({\r\n        name: Yup.string()\r\n            .max(40, 'Please Enter Below 40')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        code: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid code')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        address: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid address')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        city: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid city')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        state: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid state')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        country: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid country')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        pincode: Yup.string()\r\n            .min(6, 'Please Enter valid Pincode')\r\n            .required('Required*')\r\n            .nullable(),\r\n    })\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        data.type_taxanomy = 'CPC'\r\n        try {\r\n            setLoading(true)\r\n            let response = await axiosSuperAdminPrexo.post('/addLocation', data)\r\n            if (response.status == 200) {\r\n                setLoading(true)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Added',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(true)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(true)\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelEdit = async (data) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post('/editInfra', data)\r\n            if (response.status == 200) {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Update Successfully',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: response.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Add Location</H4>\r\n\r\n                <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            {...register('name')}\r\n                            error={errors.name ? true : false}\r\n                            helperText={errors.name ? errors.name?.message : ''}\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Address\"\r\n                            type=\"text\"\r\n                            name=\"address\"\r\n                            {...register('address')}\r\n                            error={errors.address ? true : false}\r\n                            helperText={\r\n                                errors.address ? errors.address?.message : ''\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"State\"\r\n                            type=\"text\"\r\n                            name=\"state\"\r\n                            {...register('state')}\r\n                            error={errors.state ? true : false}\r\n                            helperText={\r\n                                errors.state ? errors.state?.message : ''\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Pincode\"\r\n                            type=\"number\"\r\n                            name=\"pincode\"\r\n                            inputProps={{ maxLength: 6 }}\r\n                            onKeyPress={(event) => {\r\n                                if (!/[0-9]/.test(event.key)) {\r\n                                    event.preventDefault()\r\n                                }\r\n                            }}\r\n                            {...register('pincode')}\r\n                            error={errors.pincode ? true : false}\r\n                            helperText={\r\n                                errors.pincode ? errors.pincode?.message : ''\r\n                            }\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Code\"\r\n                            type=\"text\"\r\n                            name=\"code\"\r\n                            disabled={Object.keys(editFetchData).length !== 0}\r\n                            {...register('code')}\r\n                            error={errors.code ? true : false}\r\n                            helperText={errors.code ? errors.code?.message : ''}\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Country\"\r\n                            type=\"text\"\r\n                            name=\"country\"\r\n                            {...register('country')}\r\n                            error={errors.country ? true : false}\r\n                            helperText={\r\n                                errors.country ? errors.country?.message : ''\r\n                            }\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"City\"\r\n                            type=\"text\"\r\n                            name=\"city\"\r\n                            {...register('city')}\r\n                            error={errors.city ? true : false}\r\n                            helperText={errors.city ? errors.city?.message : ''}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={loading}\r\n                        onClick={\r\n                            Object.keys(editFetchData).length !== 0\r\n                                ? handleSubmit(handelEdit)\r\n                                : handleSubmit(onSubmit)\r\n                        }\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-users\\new-users.jsx",["3767","3768","3769","3770","3771"],"import React, { useState, useEffect } from 'react'\r\nimport { Dialog, Button, Grid, MenuItem, TextField } from '@mui/material'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport * as Yup from 'yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport Avatar from '@mui/material/Avatar'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../.././../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n}) => {\r\n    const [profile, Setprofile] = useState({\r\n        preview: '',\r\n        store: {},\r\n    })\r\n    const [loading, setLoading] = useState(false)\r\n    const [cpc, setCpc] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchCpc = async () => {\r\n            try {\r\n                let response = await axiosSuperAdminPrexo.get('/getCpc')\r\n                if (response.status == 200) setCpc(response.data.data.data)\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchCpc()\r\n        if (Object.keys(editFetchData).length !== 0) {\r\n            editFetchData.cpassword = editFetchData.password\r\n            Setprofile({\r\n                ...profile,\r\n                preview: editFetchData.profile,\r\n            })\r\n            reset({ ...editFetchData })\r\n            open()\r\n        }\r\n    }, [])\r\n    const schema = Yup.object().shape({\r\n        name: Yup.string()\r\n            .max(40, 'Please Enter Below 40')\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .nullable(),\r\n        contact: Yup.string().required('Required*').nullable(),\r\n        cpc: Yup.string().required('Required*').nullable(),\r\n        user_type: Yup.string().required('Required*').nullable(),\r\n        device_id: Yup.string()\r\n            .required('Required*')\r\n            .matches(\r\n                /^.*((?=.*[aA-zZ\\s]){1}).*$/,\r\n                'Please enter valid Device Id'\r\n            )\r\n            .max(40)\r\n            .nullable(),\r\n        device_name: Yup.string()\r\n            .max(40, 'Please Enter Below 40')\r\n            .required('Required*')\r\n            .matches(\r\n                /^.*((?=.*[aA-zZ\\s]){1}).*$/,\r\n                'Please enter valid  Device Name'\r\n            )\r\n            .max(40)\r\n            .nullable(),\r\n        user_name: Yup.string()\r\n            .max(40, 'Please Enter Below 40')\r\n            .required('Required*')\r\n            .matches(\r\n                /^.*((?=.*[aA-zZ\\s]){1}).*$/,\r\n                'Please enter valid username'\r\n            )\r\n            .max(40)\r\n            .nullable(),\r\n        password: Yup.string().required('Required*').nullable(),\r\n        cpassword: Yup.string()\r\n            .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n            .nullable(),\r\n        email: Yup.string().email().required('Required*').nullable(),\r\n    })\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    const onSubmit = async (values) => {\r\n        try {\r\n            let formdata = new FormData()\r\n            formdata.append('profile', profile.store)\r\n            for (let [key, value] of Object.entries(values)) {\r\n                formdata.append(key, value)\r\n            }\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post('/create', formdata)\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                handleClose()\r\n                if (res.data.status == 1) {\r\n                    Swal.fire({\r\n                        position: 'top-center',\r\n                        icon: 'success',\r\n                        title: 'Successfully Created',\r\n                        confirmButtonText: 'Ok',\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed) {\r\n                            setIsAlive((isAlive) => !isAlive)\r\n                        }\r\n                    })\r\n                } else {\r\n                    setLoading(false)\r\n                    handleClose()\r\n                    Swal.fire({\r\n                        position: 'top-center',\r\n                        icon: 'error',\r\n                        title: 'User exist,Please check username',\r\n                        confirmButtonText: 'Ok',\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed) {\r\n                            setIsAlive((isAlive) => !isAlive)\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelEdit = async (values) => {\r\n        try {\r\n            let formdata = new FormData()\r\n            formdata.append('profile', profile.store)\r\n            for (let [key, value] of Object.entries(values)) {\r\n                formdata.append(key, value)\r\n            }\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/edituserDetails',\r\n                formdata\r\n            )\r\n            if (response.status == 200) {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Updated',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setEditFetchData({})\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelProfile = (event) => {\r\n        Setprofile({\r\n            preview: URL.createObjectURL(event.target.files[0]),\r\n            store: event.target.files[0],\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Dialog  open={open}>\r\n            <Box p={3}>\r\n                {Object.keys(editFetchData).length !== 0 ? (\r\n                    <H4 sx={{ mb: '20px' }}>Update Member</H4>\r\n                ) : (\r\n                    <H4 sx={{ mb: '20px' }}>ADD Member</H4>\r\n                )}\r\n                <Avatar\r\n                    src={profile?.preview}\r\n                    style={{\r\n                        borderRadius: '50%',\r\n                        margin: 'auto',\r\n                        marginBottom: '15px',\r\n                        height: '57px',\r\n                        width: '57px',\r\n                    }}\r\n                />\r\n\r\n                <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Profile\"\r\n                            type=\"file\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            name=\"profile\"\r\n                            onChange={(e) => {\r\n                                handelProfile(e)\r\n                            }}\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            {...register('name')}\r\n                            error={errors.name ? true : false}\r\n                            helperText={errors.name ? errors.name.message : ''}\r\n                            inputProps={{ maxLength: 40 }}\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"User Name\"\r\n                            type=\"text\"\r\n                            name=\"user_name\"\r\n                            {...register('user_name')}\r\n                            disabled={Object.keys(editFetchData).length !== 0}\r\n                            error={errors.user_name ? true : false}\r\n                            helperText={\r\n                                errors.user_name ? errors.user_name.message : ''\r\n                            }\r\n                            inputProps={{ maxLength: 40 }}\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"User Type\"\r\n                            select\r\n                            name=\"user_type\"\r\n                            disabled={Object.keys(editFetchData).length !== 0}\r\n                            value={getValues('user_type')}\r\n                            {...register('user_type')}\r\n                            error={errors.user_type ? true : false}\r\n                            helperText={errors.user_type?.message}\r\n                        >\r\n                            <MenuItem value=\"MIS\">MIS</MenuItem>\r\n                            <MenuItem value=\"Warehouse\">Warehouse</MenuItem>\r\n                            <MenuItem value=\"Bag Opening\">Bag Opening</MenuItem>\r\n                            <MenuItem value=\"Charging\">Charging</MenuItem>\r\n                            <MenuItem value=\"BQC\">BQC</MenuItem>\r\n                            <MenuItem value=\"Audit\">Audit</MenuItem>\r\n                            <MenuItem value=\"Sorting Agent\">\r\n                                Sorting Agent\r\n                            </MenuItem>\r\n                        </TextFieldCustOm>\r\n                        <TextFieldCustOm\r\n                            label=\"CPC\"\r\n                            select\r\n                            name=\"cpc\"\r\n                            disabled={Object.keys(editFetchData).length !== 0}\r\n                            {...register('cpc')}\r\n                            value={getValues('cpc')}\r\n                            error={errors.cpc ? true : false}\r\n                            helperText={errors.cpc?.message}\r\n                        >\r\n                            {cpc?.map((cpcData) => (\r\n                                <MenuItem\r\n                                    key={cpcData.code}\r\n                                    value={cpcData.code}\r\n                                >\r\n                                    {cpcData.code}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextFieldCustOm>\r\n                        <TextFieldCustOm\r\n                            label=\"Mobile No\"\r\n                            name=\"contact\"\r\n                            {...register('contact')}\r\n                            inputProps={{ maxLength: 10 }}\r\n                            error={errors.contact ? true : false}\r\n                            helperText={\r\n                                errors.contact ? errors.contact.message : ''\r\n                            }\r\n                          \r\n                        />\r\n                       \r\n                       \r\n                    </Grid>\r\n\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Email\"\r\n                            type=\"email\"\r\n                            name=\"email\"\r\n                            {...register('email')}\r\n                            error={errors.email ? true : false}\r\n                            helperText={\r\n                                errors.email ? errors.email.message : ''\r\n                            }\r\n                        />\r\n                         <TextFieldCustOm\r\n                            label=\"Device Name\"\r\n                            type=\"text\"\r\n                            name=\"device_name\"\r\n                            disabled={Object.keys(editFetchData).length !== 0}\r\n                            {...register('device_name')}\r\n                            error={errors.device_name ? true : false}\r\n                            helperText={errors.device_name?.message}\r\n                        />\r\n                       \r\n                       \r\n                        <TextFieldCustOm\r\n                            label=\"Device Id\"\r\n                            type=\"text\"\r\n                            name=\"device_id\"\r\n                            disabled={Object.keys(editFetchData).length !== 0}\r\n                            {...register('device_id')}\r\n                            error={errors.device_id ? true : false}\r\n                            helperText={errors.device_id?.message}\r\n                            inputProps={{ maxLength: 40 }}\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Password\"\r\n                            type=\"password\"\r\n                            name=\"password\"\r\n                            disabled={Object.keys(editFetchData).length !== 0}\r\n                            {...register('password')}\r\n                            error={errors.password ? true : false}\r\n                            helperText={errors.password?.message}\r\n                        />\r\n                         <TextFieldCustOm\r\n                            label=\"Confirm Password\"\r\n                            type=\"password\"\r\n                            name=\"cpassword\"\r\n                            disabled={Object.keys(editFetchData).length !== 0}\r\n                            {...register('cpassword')}\r\n                            error={errors.cpassword ? true : false}\r\n                            helperText={errors.cpassword?.message}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={loading}\r\n                        onClick={\r\n                            Object.keys(editFetchData).length !== 0\r\n                                ? handleSubmit(handelEdit)\r\n                                : handleSubmit(onSubmit)\r\n                        }\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bag\\add-bag.jsx",["3772","3773","3774","3775","3776","3777","3778","3779","3780"],"import React, { useState, useEffect } from 'react'\r\nimport { Dialog, Button, Grid, TextField, MenuItem } from '@mui/material'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport * as Yup from 'yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n}) => {\r\n    const [bagCount, setBagCount] = useState(0)\r\n    const [warehouse, setWarehouse] = useState([])\r\n    const [cpc, setCpc] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchCpc = async () => {\r\n                let response = await axiosSuperAdminPrexo.get('/getCpc')\r\n                if (response.status == 200) {\r\n                    setCpc(response.data.data.data)\r\n                }\r\n            }\r\n            fetchCpc()\r\n            if (Object.keys(editFetchData).length !== 0) {\r\n                reset({ ...editFetchData })\r\n                open()\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                confirmButtonText: 'Ok',\r\n                text: error,\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    async function getCpcData(data, cpc) {\r\n        try {\r\n            if (cpc == 'Gurgaon_122016') {\r\n                let res = await axiosSuperAdminPrexo.post(\r\n                    '/getMasterHighest/' + cpc\r\n                )\r\n                if (res.status == 200) {\r\n                    setBagCount('DDB-GGN-' + res.data.data)\r\n                }\r\n            } else if (cpc == 'Bangalore_560067') {\r\n                let res = await axiosSuperAdminPrexo.post(\r\n                    '/getMasterHighest/' + cpc\r\n                )\r\n                if (res.status == 200) {\r\n                    setBagCount('DDB-BLR-' + res.data.data)\r\n                }\r\n            }\r\n            let obj = {\r\n                name: data,\r\n            }\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/getWarehouseByLocation',\r\n                obj\r\n            )\r\n            if (response.status == 200) {\r\n                setWarehouse(response.data.data.warehouse)\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                confirmButtonText: 'Ok',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    const schema = Yup.object().shape({\r\n        cpc: Yup.string().required('Required*').nullable(),\r\n        name: Yup.string()\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(100)\r\n            .nullable(),\r\n        type_taxanomy: Yup.string()\r\n            .required('Required*')\r\n            .matches(\r\n                /^.*((?=.*[aA-zZ\\s]){1}).*$/,\r\n                'Please enter valid category'\r\n            )\r\n            .max(100)\r\n            .nullable(),\r\n        limit: Yup.number('Must be number')\r\n            .required('Required*')\r\n            .positive()\r\n            .integer()\r\n            .min(1, 'Minimum is 1')\r\n            .nullable(),\r\n        warehouse: Yup.string().required('Required*').nullable(),\r\n        display: Yup.string()\r\n            .required('Required*')\r\n            .matches(\r\n                /^.*((?=.*[aA-zZ\\s]){1}).*$/,\r\n                'Please enter valid display name'\r\n            )\r\n            .max(100)\r\n            .nullable(),\r\n    })\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        setLoading(true)\r\n        data.prefix = 'bag-master'\r\n        data.sort_id = 'No Status'\r\n        data.created_at = Date.now()\r\n        data.code = bagCount\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/createMasters',\r\n                data\r\n            )\r\n            if (response.status == 200) {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Created',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: 'Bag Already Exists',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                confirmButtonText: 'Ok',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelEdit = async (data) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post('/editMaster', data)\r\n            if (response.status == 200) {\r\n                handleClose()\r\n                setEditFetchData({})\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Updated',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                handleClose()\r\n                setEditFetchData({})\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'failed',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            handleClose()\r\n            setEditFetchData({})\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                confirmButtonText: 'Ok',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n   \r\n    return (\r\n        <Dialog onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Bag</H4>\r\n\r\n                <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Bag Id\"\r\n                            type=\"text\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            name=\"email\"\r\n                            value={\r\n                                getValues('code') == null\r\n                                    ? bagCount === 0\r\n                                        ? null\r\n                                        : bagCount\r\n                                    : getValues('code')\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Bag Display Name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            {...register('name')}\r\n                            error={errors.name ? true : false}\r\n                            helperText={errors.name ? errors.name.message : ''}\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Bag Limit\"\r\n                            name=\"phone\"\r\n                            inputProps={{ maxLength: 2 }}\r\n                            onPaste={(e) => {\r\n                                e.preventDefault()\r\n                                return false\r\n                            }}\r\n                            onKeyPress={(event) => {\r\n                                if (!/[0-9]/.test(event.key)) {\r\n                                    event.preventDefault()\r\n                                }\r\n                            }}\r\n                            {...register('limit')}\r\n                            error={errors.limit ? true : false}\r\n                            helperText={\r\n                                errors.limit ? errors.limit.message : ''\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Bag Display\"\r\n                            type=\"text\"\r\n                            name=\"display\"\r\n                            {...register('display')}\r\n                            error={errors.display ? true : false}\r\n                            helperText={\r\n                                errors.display ? errors.display.message : ''\r\n                            }\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"CPC\"\r\n                            select\r\n                            type=\"text\"\r\n                            name=\"cpc\"\r\n                            defaultValue={getValues('cpc')}\r\n                            {...register('cpc')}\r\n                            error={errors.cpc ? true : false}\r\n                            helperText={errors.cpc?.message}\r\n                        >\r\n                            {cpc.map((data) => (\r\n                                <MenuItem\r\n                                    value={data.code}\r\n                                    onClick={() =>\r\n                                        getCpcData(data.name, data.code)\r\n                                    }\r\n                                >\r\n                                    {data.code}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextFieldCustOm>\r\n                        <TextFieldCustOm\r\n                            label=\"Warehouse\"\r\n                            select\r\n                            type=\"text\"\r\n                            name=\"warehouse\"\r\n                            defaultValue={getValues('warehouse')}\r\n                            {...register('warehouse')}\r\n                            error={errors.warehouse ? true : false}\r\n                            helperText={errors.warehouse?.message}\r\n                        >\r\n                            {warehouse.map((data) => (\r\n                                <MenuItem value={data.name}>\r\n                                    {data.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextFieldCustOm>\r\n                        <TextFieldCustOm\r\n                            label=\"Bag Category\"\r\n                            select\r\n                            type=\"text\"\r\n                            name=\"type_taxanomy\"\r\n                            defaultValue={getValues('type_taxanomy')}\r\n                            {...register('type_taxanomy')}\r\n                            error={errors.type_taxanomy ? true : false}\r\n                            helperText={errors.type_taxanomy?.message}\r\n                        >\r\n                            <MenuItem value=\"BOT\">BOT</MenuItem>\r\n                        </TextFieldCustOm>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading}\r\n                        onClick={\r\n                            Object.keys(editFetchData).length !== 0\r\n                                ? handleSubmit(handelEdit)\r\n                                : handleSubmit(onSubmit)\r\n                        }\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-brands\\add-brand.jsx",["3781","3782","3783","3784"],"import React, { useEffect, useState } from 'react'\r\nimport { Dialog, Button, Grid, TextField } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport * as Yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport Swal from 'sweetalert2'\r\nimport { useForm } from 'react-hook-form'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst AddBrandAndEditDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n    brandCount,\r\n}) => {\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(editFetchData).length !== 0) {\r\n            reset({ ...editFetchData })\r\n            open()\r\n        }\r\n    }, [])\r\n\r\n    const schema = Yup.object().shape({\r\n        brand_name: Yup.string()\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .nullable(),\r\n    })\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        reset,\r\n        getValues,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        try {\r\n            setLoading(true)\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/createBrands',\r\n                data\r\n            )\r\n            if (response.status == 200) {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Created',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelEdit = async (data) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post('/editBrand', data)\r\n            if (response.status == 200) {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Updated',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                Swal.fire({\r\n                    icon: 'failed',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Add Location</H4>\r\n\r\n                <TextFieldCustOm\r\n                    label=\"Brand Id\"\r\n                    type=\"text\"\r\n                    name=\"brand_id\"\r\n                    value={\r\n                        getValues('brand_id') == null\r\n                            ? 'brand-0' + brandCount\r\n                            : getValues('brand_id')\r\n                    }\r\n                    {...register('brand_id')}\r\n                />\r\n                <TextFieldCustOm\r\n                    label=\"Name\"\r\n                    type=\"text\"\r\n                    name=\"brand_name\"\r\n                    {...register('brand_name')}\r\n                    error={errors.name ? true : false}\r\n                    helperText={errors.name ? errors.name?.message : ''}\r\n                />\r\n\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={loading}\r\n                        onClick={\r\n                            Object.keys(editFetchData).length !== 0\r\n                                ? handleSubmit(handelEdit)\r\n                                : handleSubmit(onSubmit)\r\n                        }\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default AddBrandAndEditDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-warehouse\\add-warehouse.jsx",["3785","3786","3787","3788"],"import React, { useEffect, useState } from 'react'\r\nimport { Dialog, Button, Grid, TextField, MenuItem } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport * as Yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport Swal from 'sweetalert2'\r\nimport { useForm } from 'react-hook-form'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n}) => {\r\n    const [loading, setLoading] = useState(false)\r\n    const [locationDrop, setLocationDrop] = useState([])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosSuperAdminPrexo.post('/getLocation')\r\n                if (res.status == 200) {\r\n                    setLocationDrop(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n            if (Object.keys(editFetchData).length !== 0) {\r\n                reset({ ...editFetchData })\r\n                open()\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const schema = Yup.object().shape({\r\n        name: Yup.string()\r\n            .max(40, 'Please Enter Below 40')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        code: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid code')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        address: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid address')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        city: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid city')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        state: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid state')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        country: Yup.string()\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid country')\r\n            .max(40)\r\n            .required('Required*')\r\n            .nullable(),\r\n        pincode: Yup.string()\r\n            .min(6, 'Please Enter valid Pincode')\r\n            .required('Required*')\r\n            .nullable(),\r\n        parent_id: Yup.string().required('Required*').nullable(),\r\n        warehouse_type: Yup.string().required('Required*').nullable(),\r\n    })\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        data.type_taxanomy = 'Warehouse'\r\n        try {\r\n            setLoading(true)\r\n            let response = await axiosSuperAdminPrexo.post('/addLocation', data)\r\n            if (response.status == 200) {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Added',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelEdit = async (data) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post('/editInfra', data)\r\n            if (response.status == 200) {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Update Successfully',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                alert(response.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Dialog  open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Add Warehouse</H4>\r\n\r\n                <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            {...register('name')}\r\n                            error={errors.name ? true : false}\r\n                            helperText={errors.name ? errors.name?.message : ''}\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Location\"\r\n                            select\r\n                            name=\"parent_id\"\r\n                            {...register('parent_id')}\r\n                            error={errors.parent_id ? true : false}\r\n                            helperText={errors.parent_id?.message}\r\n                        >\r\n                            {locationDrop.map((data) => (\r\n                                <MenuItem value={data.name}>\r\n                                    {data.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextFieldCustOm>\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Address\"\r\n                            type=\"text\"\r\n                            name=\"address\"\r\n                            {...register('address')}\r\n                            error={errors.address ? true : false}\r\n                            helperText={\r\n                                errors.address ? errors.address?.message : ''\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"State\"\r\n                            type=\"text\"\r\n                            name=\"state\"\r\n                            {...register('state')}\r\n                            error={errors.state ? true : false}\r\n                            helperText={\r\n                                errors.state ? errors.state?.message : ''\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Pincode\"\r\n                            type=\"number\"\r\n                            name=\"pincode\"\r\n                            inputProps={{ maxLength: 6 }}\r\n                            onKeyPress={(event) => {\r\n                                if (!/[0-9]/.test(event.key)) {\r\n                                    event.preventDefault()\r\n                                }\r\n                            }}\r\n                            {...register('pincode')}\r\n                            error={errors.pincode ? true : false}\r\n                            helperText={\r\n                                errors.pincode ? errors.pincode?.message : ''\r\n                            }\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Code\"\r\n                            type=\"text\"\r\n                            name=\"code\"\r\n                            disabled={Object.keys(editFetchData).length !== 0}\r\n                            {...register('code')}\r\n                            error={errors.code ? true : false}\r\n                            helperText={errors.code ? errors.code?.message : ''}\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Warehouse Type\"\r\n                            select\r\n                            name=\"warehouse_type\"\r\n                            {...register('warehouse_type')}\r\n                            error={errors.warehouse_type ? true : false}\r\n                            helperText={errors.warehouse_type?.message}\r\n                        >\r\n                            <MenuItem value=\"STW\">STW</MenuItem>\r\n                            <MenuItem value=\"PRC\">PRC</MenuItem>\r\n                            <MenuItem value=\"Sales\">Sales</MenuItem>\r\n                        </TextFieldCustOm>\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Country\"\r\n                            type=\"text\"\r\n                            name=\"country\"\r\n                            {...register('country')}\r\n                            error={errors.country ? true : false}\r\n                            helperText={\r\n                                errors.country ? errors.country?.message : ''\r\n                            }\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"City\"\r\n                            type=\"text\"\r\n                            name=\"city\"\r\n                            {...register('city')}\r\n                            error={errors.city ? true : false}\r\n                            helperText={errors.city ? errors.city?.message : ''}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled={loading}\r\n                        onClick={\r\n                            Object.keys(editFetchData).length !== 0\r\n                                ? handleSubmit(handelEdit)\r\n                                : handleSubmit(onSubmit)\r\n                        }\r\n                        type=\"submit\"\r\n                    >\r\n                        Submit\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-products\\add-products.jsx",["3789","3790","3791","3792","3793"],"import React, { useState, useEffect } from 'react'\r\nimport { Dialog, Button, Grid, TextField, MenuItem } from '@mui/material'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport * as Yup from 'yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n}) => {\r\n    const [brands, setBrands] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [productImage, setProductImage] = useState({\r\n        imagePreview: '',\r\n        imageStore: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosSuperAdminPrexo.post(\r\n                    '/getBrandsAlpha'\r\n                )\r\n                if (response.status === 200) {\r\n                    setBrands(response.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchData()\r\n        if (Object.keys(editFetchData).length !== 0) {\r\n            reset({ ...editFetchData })\r\n            open()\r\n        }\r\n    }, [])\r\n\r\n    const schema = Yup.object().shape({\r\n        vendor_sku_id: Yup.string()\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .nullable(),\r\n        vendor_name: Yup.string()\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .nullable(),\r\n        model_name: Yup.string()\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(40)\r\n            .nullable(),\r\n        brand_name: Yup.string().required('Required'),\r\n    })\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    const onSubmit = async (data) => {\r\n        console.log(data)\r\n        setLoading(true)\r\n        let muis_code = ''\r\n        let alphebet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n        let numbers = '123456789'\r\n        for (var i = 0; i < 2; i++) {\r\n            muis_code += alphebet.charAt(\r\n                Math.floor(Math.random() * alphebet.length)\r\n            )\r\n        }\r\n        for (var i = 0; i < 3; i++) {\r\n            muis_code += numbers.charAt(\r\n                Math.floor(Math.random() * numbers.length)\r\n            )\r\n        }\r\n        try {\r\n            data.muic = muis_code\r\n            data.created_at = Date.now()\r\n            let formdata = new FormData()\r\n            formdata.append('image', productImage.store)\r\n            for (let [key, value] of Object.entries(data)) {\r\n                formdata.append(key, value)\r\n            }\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/createproducts',\r\n                formdata\r\n            )\r\n            if (response.status == 200) {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: response.data.message,\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: response.data.message,\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelEdit = async (data) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post('/editProduct', data)\r\n            if (response.status == 200) {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Update Successfully',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setEditFetchData({})\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'failed',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelProfile = (event) => {\r\n        setProductImage({\r\n            preview: URL.createObjectURL(event.target.files[0]),\r\n            store: event.target.files[0],\r\n        })\r\n    }\r\n    return (\r\n        <Dialog open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Update Member</H4>\r\n                <img\r\n                    src={productImage.preview}\r\n                    height=\"60px\"\r\n                    width=\"60px\"\r\n                    style={{ borderRadius: '50%', margin: 'auto' }}\r\n                />\r\n                <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Image\"\r\n                            type=\"file\"\r\n                            onChange={(e) => {\r\n                                handelProfile(e)\r\n                            }}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            accept=\".jpg,.jpeg,.png,\"\r\n                            name=\"image\"\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Vendor SKU ID\"\r\n                            type=\"text\"\r\n                            name=\"vendor_sku_id\"\r\n                            {...register('vendor_sku_id')}\r\n                            error={errors.vendor_sku_id ? true : false}\r\n                            helperText={\r\n                                errors.vendor_sku_id\r\n                                    ? errors.vendor_sku_id.message\r\n                                    : ''\r\n                            }\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Model Name\"\r\n                            type=\"text\"\r\n                            name=\"model_name\"\r\n                            {...register('model_name')}\r\n                            error={errors.model_name ? true : false}\r\n                            helperText={\r\n                                errors.model_name\r\n                                    ? errors.model_name.message\r\n                                    : ''\r\n                            }\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Vendor Name\"\r\n                            type=\"text\"\r\n                            name=\"vendor_name\"\r\n                            {...register('vendor_name')}\r\n                            error={errors.vendor_name ? true : false}\r\n                            helperText={\r\n                                errors.vendor_name\r\n                                    ? errors.vendor_name.message\r\n                                    : ''\r\n                            }\r\n                        />\r\n                        <TextFieldCustOm\r\n                            label=\"Brand Name\"\r\n                            select\r\n                            name=\"brand_name\"\r\n                            defaultValue={getValues('brand_name')}\r\n                            {...register('brand_name')}\r\n                            error={errors.brand_name ? true : false}\r\n                            helperText={\r\n                                errors.brand_name\r\n                                    ? errors.brand_name.message\r\n                                    : ''\r\n                            }\r\n                        >\r\n                            {brands.map((data) => (\r\n                                <MenuItem\r\n                                    key={data.brand_name}\r\n                                    value={data.brand_name}\r\n                                >\r\n                                    {data.brand_name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextFieldCustOm>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading}\r\n                        onClick={\r\n                            Object.keys(editFetchData).length !== 0\r\n                                ? handleSubmit(handelEdit)\r\n                                : handleSubmit(onSubmit)\r\n                        }\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-tray\\add-tray.jsx",["3794","3795","3796","3797","3798","3799","3800","3801","3802","3803","3804","3805","3806","3807","3808","3809"],"import React, { useState, useEffect } from 'react'\r\nimport { Dialog, Button, Grid, TextField, MenuItem } from '@mui/material'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport * as Yup from 'yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n}) => {\r\n    const [trayCount, setTrayCount] = useState(0)\r\n    const [warehouse, setWarehouse] = useState([])\r\n    const [allBrand, setAllBrand] = useState([])\r\n    const [cpc, setCpc] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [allModel, setAllModel] = useState([])\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchCpc = async () => {\r\n                let res = await axiosSuperAdminPrexo.post('/getBrands')\r\n                if (res.status == 200) {\r\n                    setAllBrand(res.data.data)\r\n                }\r\n                let response = await axiosSuperAdminPrexo.get('/getCpc')\r\n                if (response.status == 200) {\r\n                    setCpc(response.data.data.data)\r\n                }\r\n            }\r\n            fetchCpc()\r\n            if (Object.keys(editFetchData).length !== 0) {\r\n                reset({ ...editFetchData })\r\n              \r\n                fetchModel(editFetchData.brand)\r\n                open()\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    const fetchTypeWiseId = async (e, type) => {\r\n        e.preventDefault()\r\n        try {\r\n            let res = await axiosSuperAdminPrexo.post('/trayIdGenrate/' + type)\r\n            if (res.status == 200) {\r\n                setTrayCount(type + res.data.data)\r\n                if (type == 'BOT' && res.data.data > '2251') {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: 'BOT Tray Maximum ID NO 2251',\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed) {\r\n                            handleClose()\r\n                        }\r\n                    })\r\n                } else if (type == 'MMT' && res.data.data > '8051') {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: 'MMT Tray Maximum ID NO 8051',\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed) {\r\n                            handleClose()\r\n                        }\r\n                    })\r\n                } else if (type == 'WHT' && res.data.data > '1501') {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: 'WHT Tray Maximum ID NO  1501',\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed) {\r\n                            handleClose()\r\n                        }\r\n                    })\r\n                } else if (type == 'PMT' && res.data.data > '8151') {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: 'PMT Tray Maximum ID NO  8151',\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed) {\r\n                            handleClose()\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    // Get Cpc data from server\r\n    async function getCpcData(data) {\r\n        try {\r\n            let obj = {\r\n                name: data,\r\n            }\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/getWarehouseByLocation',\r\n                obj\r\n            )\r\n            if (response.status == 200) {\r\n                setWarehouse(response.data.data.warehouse)\r\n            }\r\n        } catch (error) {}\r\n    }\r\n    const schema = Yup.object().shape({\r\n        name: Yup.string()\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid name')\r\n            .max(100)\r\n            .nullable(),\r\n        type_taxanomy: Yup.string().required('Required*').nullable(),\r\n        warehouse: Yup.string().required('Required*').nullable(),\r\n        limit: Yup.number('Must be number')\r\n            .required('Required*')\r\n            .positive()\r\n            .integer()\r\n            .min(1, 'Minimum is 1')\r\n            .nullable(),\r\n        brand: Yup.string()\r\n            .required('Required*')\r\n            .matches(/^.*((?=.*[aA-zZ\\s]){1}).*$/, 'Please enter valid brand')\r\n            .max(100)\r\n            .nullable(),\r\n        model: Yup.string().required('Required*').max(100).nullable(),\r\n        display: Yup.string()\r\n            .required('Required*')\r\n            .matches(\r\n                /^.*((?=.*[aA-zZ\\s]){1}).*$/,\r\n                'Please enter valid display name'\r\n            )\r\n            .max(100)\r\n            .nullable(),\r\n    })\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n\r\n    /* Fetch model */\r\n    const fetchModel = async (brandName) => {\r\n        try {\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/get-product-model/' + brandName\r\n            )\r\n            if (res.status == 200) {\r\n                setAllModel(res.data.data)\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    const onSubmit = async (data) => {\r\n        setLoading(true)\r\n        data.prefix = 'tray-master'\r\n        data.sort_id = 'Open'\r\n        data.created_at = Date.now()\r\n        data.code = trayCount\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/createMasters',\r\n                data\r\n            )\r\n            if (response.status == 200) {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Created',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: 'Tray Already Exists',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    const handelEdit = async (data) => {\r\n        try {\r\n            let response = await axiosSuperAdminPrexo.post('/editMaster', data)\r\n            if (response.status == 200) {\r\n                handleClose()\r\n                setEditFetchData({})\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Successfully Updated',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                handleClose()\r\n                setEditFetchData({})\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'failed',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            handleClose()\r\n            setEditFetchData({})\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Tray</H4>\r\n\r\n                <Grid sx={{ mb: '16px' }} container spacing={4}>\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"Tray Id\"\r\n                            type=\"text\"\r\n                            InputLabelProps={{ shrink: true }}\r\n                            name=\"email\"\r\n                            value={\r\n                                getValues('code') == null\r\n                                    ? trayCount === 0\r\n                                        ? null\r\n                                        : trayCount\r\n                                    : getValues('code')\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Tray Display Name\"\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            {...register('name')}\r\n                            disabled={\r\n                                getValues('type_taxanomy') == 'WHT' &&\r\n                                Object.keys(editFetchData).length !== 0\r\n                            }\r\n                            error={errors.name ? true : false}\r\n                            helperText={errors.name ? errors.name.message : ''}\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Tray Limit\"\r\n                            inputProps={{ maxLength: 2 }}\r\n                            onPaste={(e) => {\r\n                                e.preventDefault()\r\n                                return false\r\n                            }}\r\n                            onKeyPress={(event) => {\r\n                                if (!/[0-9]/.test(event.key)) {\r\n                                    event.preventDefault()\r\n                                }\r\n                            }}\r\n                            {...register('limit')}\r\n                            error={errors.limit ? true : false}\r\n                            helperText={\r\n                                errors.limit ? errors.limit.message : ''\r\n                            }\r\n                        />\r\n\r\n                        <TextFieldCustOm\r\n                            label=\"Tray Display\"\r\n                            type=\"text\"\r\n                            name=\"display\"\r\n                            {...register('display')}\r\n                            error={errors.display ? true : false}\r\n                            helperText={\r\n                                errors.display ? errors.display.message : ''\r\n                            }\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item sm={6} xs={12}>\r\n                        <TextFieldCustOm\r\n                            label=\"CPC\"\r\n                            select\r\n                            type=\"text\"\r\n                            name=\"cpc\"\r\n                            {...register('cpc')}\r\n                            disabled={\r\n                                getValues(\"type_taxanomy\") == \"WHT\" && Object.keys(editFetchData).length !== 0\r\n                              }\r\n                            error={errors.cpc ? true : false}\r\n                            helperText={errors.cpc?.message}\r\n                        >\r\n                            {cpc.map((data) => (\r\n                                <MenuItem\r\n                                    value={data.code}\r\n                                    onClick={() =>\r\n                                        getCpcData(data.name, data.code)\r\n                                    }\r\n                                >\r\n                                    {data.code}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextFieldCustOm>\r\n                        <TextFieldCustOm\r\n                            label=\"Warehouse\"\r\n                            select\r\n                            type=\"text\"\r\n                            name=\"warehouse\"\r\n                            {...register('warehouse')}\r\n                            disabled={\r\n                                getValues(\"type_taxanomy\") == \"WHT\" && Object.keys(editFetchData).length !== 0\r\n                              }\r\n                            error={errors.warehouse ? true : false}\r\n                            helperText={errors.warehouse?.message}\r\n                        >\r\n                            {warehouse.map((data) => (\r\n                                <MenuItem key={data.name} value={data.name}>\r\n                                    {data.name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextFieldCustOm>\r\n                        <TextFieldCustOm\r\n                            label=\"Tray Category\"\r\n                            select\r\n                            type=\"text\"\r\n                            name=\"cpc\"\r\n                            {...register('type_taxanomy')}\r\n                            disabled={\r\n                                getValues(\"type_taxanomy\") == \"WHT\" && Object.keys(editFetchData).length !== 0\r\n                              }\r\n                            error={errors.type_taxanomy ? true : false}\r\n                            helperText={errors.type_taxanomy?.message}\r\n                        >\r\n                            <MenuItem\r\n                                value=\"BOT\"\r\n                                onClick={(e) => {\r\n                                    fetchTypeWiseId(e, 'BOT')\r\n                                }}\r\n                            >\r\n                                BOT\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                value=\"PMT\"\r\n                                onClick={(e) => {\r\n                                    fetchTypeWiseId(e, 'PMT')\r\n                                }}\r\n                            >\r\n                                PMT\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                value=\"MMT\"\r\n                                onClick={(e) => {\r\n                                    fetchTypeWiseId(e, 'MMT')\r\n                                }}\r\n                            >\r\n                                MMT\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                value=\"WHT\"\r\n                                onClick={(e) => {\r\n                                    fetchTypeWiseId(e, 'WHT')\r\n                                }}\r\n                            >\r\n                                WHT\r\n                            </MenuItem>\r\n\r\n                            <MenuItem\r\n                                value=\"CTA\"\r\n                                onClick={(e) => {\r\n                                    fetchTypeWiseId(e, 'CTA')\r\n                                }}\r\n                            >\r\n                                CTA\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                value=\"CTB\"\r\n                                onClick={(e) => {\r\n                                    fetchTypeWiseId(e, 'CTB')\r\n                                }}\r\n                            >\r\n                                CTB\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                value=\"CTC\"\r\n                                onClick={(e) => {\r\n                                    fetchTypeWiseId(e, 'CTC')\r\n                                }}\r\n                            >\r\n                                CTC\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                value=\"CTD\"\r\n                                onClick={(e) => {\r\n                                    fetchTypeWiseId(e, 'CTD')\r\n                                }}\r\n                            >\r\n                                CTD\r\n                            </MenuItem>\r\n                        </TextFieldCustOm>\r\n                        {getValues('type_taxanomy') !== 'BOT' &&  getValues('type_taxanomy') !== 'PMT' && getValues('type_taxanomy') !== 'MMT' ? (\r\n                            <>\r\n                                <TextFieldCustOm\r\n                                    label=\"Brand\"\r\n                                    select\r\n                                    type=\"text\"\r\n                                    defaultValue={getValues('brand')}\r\n                                    {...register('brand')}\r\n                                    error={errors.brand ? true : false}\r\n                                    helperText={\r\n                                        errors.brand ? errors.brand.message : ''\r\n                                    }\r\n                                >\r\n                                    {allBrand.map((brandData) => (\r\n                                        <MenuItem\r\n                                            value={brandData.brand_name}\r\n                                            onClick={(e) => {\r\n                                                fetchModel(brandData.brand_name)\r\n                                            }}\r\n                                        >\r\n                                            {brandData.brand_name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextFieldCustOm>\r\n                                <TextFieldCustOm\r\n                                    label=\"Model\"\r\n                                    select\r\n                                    type=\"text\"\r\n                                    name=\"model\"\r\n                                    defaultValue={getValues('model')}\r\n                                    {...register('model')}\r\n                                    error={errors.model ? true : false}\r\n                                >\r\n                                    {allModel.map((modelData) => (\r\n                                        <MenuItem value={modelData.model_name}>\r\n                                            {modelData.model_name}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </TextFieldCustOm>\r\n                            </>\r\n                        ) : (\r\n                            <>\r\n                                <TextFieldCustOm\r\n                                    label=\"Brand\"\r\n                                    type=\"text\"\r\n                                    name=\"brand\"\r\n                                    {...register('brand')}\r\n                                    error={errors.brand ? true : false}\r\n                                    helperText={\r\n                                        errors.brand ? errors.brand.message : ''\r\n                                    }\r\n                                />\r\n                                <TextFieldCustOm\r\n                                    label=\"Model\"\r\n                                    type=\"text\"\r\n                                    name=\"model\"\r\n                                    {...register('model')}\r\n                                    error={errors.model ? true : false}\r\n                                    helperText={\r\n                                        errors.model ? errors.model.message : ''\r\n                                    }\r\n                                />\r\n                            </>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading}\r\n                        onClick={\r\n                            Object.keys(editFetchData).length !== 0\r\n                                ? handleSubmit(handelEdit)\r\n                                : handleSubmit(onSubmit)\r\n                        }\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\nexport default MemberEditorDialog","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Remove-invalid-item-from-bag\\bag.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Track-item\\track-item.jsx",["3810","3811","3812","3813","3814","3815","3816","3817","3818","3819","3820","3821","3822","3823","3824","3825","3826","3827","3828","3829","3830","3831","3832","3833","3834","3835","3836","3837","3838","3839","3840","3841","3842"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    TextField,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    TableFooter,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [item, setItem] = useState([])\r\n    const [data, setData] = useState([])\r\n    const navigate = useNavigate()\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [count, setCount] = useState(0)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const fetchData = async () => {\r\n                try {\r\n                    let res = await axiosSuperAdminPrexo.post(\r\n                        '/itemTracking/' + page + '/' + rowsPerPage\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setCount(res.data.count)\r\n                        setItem(res.data.data)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [refresh, page])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 6050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const searchTrackItem = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setRefresh((refresh) => !refresh)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                        page: page,\r\n                        rowsPerPage: rowsPerPage,\r\n                    }\r\n                    let res = await axiosSuperAdminPrexo.post(\r\n                        '/search-admin-track-item',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setRowsPerPage(10)\r\n                        setPage(0)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Uic Status</TableCell>\r\n                        <TableCell>UIC</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Stockin Date</TableCell>\r\n                        <TableCell>Bag ID</TableCell>\r\n                        <TableCell>Stockin Status</TableCell>\r\n                        <TableCell>Bag close Date</TableCell>\r\n                        <TableCell>BOT Agent Name</TableCell>\r\n                        <TableCell>Assigned to BOT Agent Date</TableCell>\r\n                        <TableCell>Tray ID</TableCell>\r\n                        <TableCell>Tray Type</TableCell>\r\n                        <TableCell>Tray Status</TableCell>\r\n                        <TableCell>Tray Location</TableCell>\r\n                        <TableCell>Tray Closed Time BOT</TableCell>\r\n                        <TableCell>\r\n                            Tray Received From BOT Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>Tray Closed Time Warehouse</TableCell>\r\n                        <TableCell>Sorting Agent Name</TableCell>\r\n                        <TableCell>Handover to Sorting Date</TableCell>\r\n                        <TableCell>WHT Tray</TableCell>\r\n                        <TableCell>WHT Tray Assigned Date</TableCell>\r\n                        <TableCell>WHT Tray Received From Sorting</TableCell>\r\n                        <TableCell>WHT Tray Closed After Sorting</TableCell>\r\n                        <TableCell>Charging Username</TableCell>\r\n                        <TableCell>Charging Assigned Date</TableCell>\r\n                        <TableCell>Charge In Date</TableCell>\r\n                        <TableCell>Charge Done Date</TableCell>\r\n                        <TableCell>\r\n                            Tray Received From Charging Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Charging Done Tray Closed Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>BQC Agent Name</TableCell>\r\n                        <TableCell>Assigned to BQC</TableCell>\r\n\r\n                        <TableCell>BQC Done Date</TableCell>\r\n                        <TableCell>\r\n                            Tray Received From BQC Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Bqc Done Tray Closed Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>Issued to Audit Date</TableCell>\r\n                        <TableCell>Audit Agnet Name</TableCell>\r\n                        <TableCell>Audit Done Date</TableCell>\r\n                        <TableCell>Audit Done Tray Recieved Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data?.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.tracking_id}</TableCell>\r\n                            <TableCell>{data.delivery.order_id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery.uic_status == 'Printed'\r\n                                        ? { color: 'green' }\r\n                                        : data.delivery.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'red' }\r\n                                }\r\n                            >\r\n                                {data.delivery.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.uic_code?.code}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.imei}</TableCell>\r\n\r\n                            <TableCell>{data.delivery.item_id}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.stockin_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.stockin_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.bag_id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery.stock_in_status == 'Valid'\r\n                                        ? { color: 'green' }\r\n                                        : { color: 'red' }\r\n                                }\r\n                            >\r\n                                {data.delivery.stock_in_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bag_close_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bag_close_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.agent_name}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.assign_to_agent != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.assign_to_agent\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.tray_id}</TableCell>\r\n                            <TableCell>{data.delivery.tray_type}</TableCell>\r\n                            <TableCell>{data.delivery.tray_status}</TableCell>\r\n                            <TableCell>{data.delivery.tray_location}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.tray_closed_by_bot != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.tray_closed_by_bot\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bot_done_received != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bot_done_received\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.warehouse_close_date !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.warehouse_close_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : data?.delivery.tray_close_wh_date !=\r\n                                      undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.tray_close_wh_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : null}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.sorting_agent_name}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.handover_sorting_date !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.handover_sorting_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.wht_tray}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.wht_tray_assigned_date !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.wht_tray_assigned_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.received_from_sorting !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.received_from_sorting\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.closed_from_sorting != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.closed_from_sorting\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.agent_name_charging}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.assign_to_agent_charging !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.assign_to_agent_charging\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_in_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_in_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_done_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_done_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_done_received !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_done_received\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_done_close != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_done_close\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.agent_name_bqc}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.assign_to_agent_bqc != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.assign_to_agent_bqc\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data?.delivery.bqc_out_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bqc_out_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bqc_done_received != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bqc_done_received\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bqc_done_close != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bqc_done_close\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.issued_to_audit != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.issued_to_audit\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.audit_user_name}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.audit_done_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.audit_done_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.audit_done_recieved != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.audit_done_recieved\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [item, data])\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Track-Item', path: '/' }]}\r\n                />\r\n            </div>\r\n            <TextField\r\n                onChange={(e) => {\r\n                    searchTrackItem(e)\r\n                }}\r\n                label=\"Search\"\r\n                variant=\"outlined\"\r\n                sx={{ mb: 2 }}\r\n            />\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TableFooter>\r\n                <TableRow>\r\n                    <TablePagination\r\n                        sx={{ px: 2 }}\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={count}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        showFirstButton=\"true\"\r\n                        showLastButton=\"true\"\r\n                        backIconButtonProps={{\r\n                            'aria-label': 'Previous Page',\r\n                        }}\r\n                        nextIconButtonProps={{\r\n                            'aria-label': 'Next Page',\r\n                        }}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={({ target: { value } }) =>\r\n                            setRowsPerPage(value)\r\n                        }\r\n                    />\r\n                </TableRow>\r\n            </TableFooter>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Delivery\\badDelivery.jsx",["3843","3844","3845","3846","3847","3848","3849","3850"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    TableFooter,\r\n    MenuItem,\r\n    Box,\r\n    TextField,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\nimport * as FileSaver from 'file-saver'\r\nimport * as XLSX from 'xlsx'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const navigate = useNavigate()\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post(\r\n                        '/getBadDelivery/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((d, index) => {\r\n                    d.id = page * rowsPerPage + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 3050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const download = (e) => {\r\n        const fileExtension = '.xlsx'\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n        const ws = XLSX.utils.json_to_sheet(item)\r\n        ws['!cols'] = []\r\n        ws['!cols'][0] = { hidden: true }\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, 'bad-orders' + fileExtension)\r\n    }\r\n\r\n    const searchDelivery = async (e) => {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setRefresh((refresh) => !refresh)\r\n                } else if (search.type == '') {\r\n                    alert('Please add input')\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                    }\r\n                    let res = await axiosMisUser.post('/searchBadDelivery', obj)\r\n                    if (res.status == 200) {\r\n                        setRowsPerPage(10)\r\n                        setPage(0)\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Delivery', path: '/' },\r\n                        { name: 'Bad-Delivery' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchDelivery(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Button\r\n                        sx={{ mb: 2 }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={(e) => {\r\n                            download(e)\r\n                        }}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                <ProductTable>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Record.NO</TableCell>\r\n                            <TableCell>Delivery Imported Date</TableCell>\r\n                            <TableCell>Tracking ID</TableCell>\r\n                            <TableCell>Order ID</TableCell>\r\n                            <TableCell>Order Date</TableCell>\r\n                            <TableCell>Item ID</TableCell>\r\n                            <TableCell>GEP Order</TableCell>\r\n                            <TableCell>IMEI</TableCell>\r\n                            <TableCell>Partner Purchase Price</TableCell>\r\n                            <TableCell>Partner Shop</TableCell>\r\n                            <TableCell>Base Discount</TableCell>\r\n                            <TableCell>Diagnostics Discount</TableCell>\r\n                            <TableCell>Storage Disscount</TableCell>\r\n                            <TableCell>Buyback Category</TableCell>\r\n                            <TableCell>Doorsteps Diagnostics</TableCell>\r\n                            <TableCell>Delivered Date</TableCell>\r\n                            <TableCell>Reason</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.map((data, index) => (\r\n                            <TableRow tabIndex={-1}>\r\n                                <TableCell>{data.id}</TableCell>\r\n                                <TableCell>\r\n                                    {new Date(data.created_at).toLocaleString(\r\n                                        'en-GB',\r\n                                        {\r\n                                            hour12: true,\r\n                                        }\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.tracking_id?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.order_id?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data?.order_date == null\r\n                                        ? ''\r\n                                        : new Date(\r\n                                              data?.order_date\r\n                                          ).toLocaleString('en-GB', {\r\n                                              year: 'numeric',\r\n                                              month: '2-digit',\r\n                                              day: '2-digit',\r\n                                          })  == 'Invalid Date'\r\n                                        ? data?.order_date\r\n                                        : new Date(data?.order_date).toLocaleString(\r\n                                            'en-GB',\r\n                                            {\r\n                                                year: 'numeric',\r\n                                                month: '2-digit',\r\n                                                day: '2-digit',\r\n                                            }\r\n                                        )}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.item_id?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.gep_order?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>{data.imei?.toString()}</TableCell>\r\n                                <TableCell>\r\n                                    {data.partner_purchase_price?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.partner_shop?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.base_discount?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.diagnostics_discount?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.storage_disscount?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.buyback_category?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.doorsteps_diagnostics?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {new Date(\r\n                                        data?.delivery_date\r\n                                    ).toLocaleString('en-GB', {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    })}\r\n                                </TableCell>\r\n                                <TableCell style={{ color: 'red' }}>\r\n                                    {data?.reason?.join(', ')}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </ProductTable>\r\n                <TableFooter>\r\n                    <TablePagination\r\n                        sx={{ px: 2 }}\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={item.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                        backIconButtonProps={{\r\n                            'aria-label': 'Previous Page',\r\n                        }}\r\n                        nextIconButtonProps={{\r\n                            'aria-label': 'Next Page',\r\n                        }}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={({ target: { value } }) =>\r\n                            setRowsPerPage(value)\r\n                        }\r\n                    />\r\n                </TableFooter>\r\n            </Card>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Delivery\\delivery.jsx",["3851","3852","3853","3854","3855","3856","3857","3858","3859","3860","3861"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    MenuItem,\r\n    Box,\r\n    TextField,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState([])\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n    const navigate = useNavigate()\r\n    const [refresh, setRefresh] = useState(false)\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let deliveryCountRes = await axiosMisUser.post(\r\n                        '/getDeliveryCount/' + location\r\n                    )\r\n                    if (deliveryCountRes.status === 200) {\r\n                        setDeliveryCount(deliveryCountRes.data.data)\r\n                    }\r\n                    let res = await axiosMisUser.post(\r\n                        '/getAllDelivery/' +\r\n                            location +\r\n                            '/' +\r\n                            page +\r\n                            '/' +\r\n                            rowsPerPage\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, refresh])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 3050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const searchDelivery = async (e) => {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setRefresh((refresh) => !refresh)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                    }\r\n                    let res = await axiosMisUser.post('/searchDelivery', obj)\r\n                    if (res.status == 200) {\r\n                        setRowsPerPage(10)\r\n                        setPage(0)\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Delivery Imported Date</TableCell>\r\n                        <TableCell>UIC Status</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>GEP Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diagnostics Discount</TableCell>\r\n                        <TableCell>Storage Disscount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorsteps Diagnostics</TableCell>\r\n                        <TableCell>Actual Delivered Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.result.length != 0\r\n                                        ? { color: 'green' }\r\n                                        : { color: 'red' }\r\n                                }\r\n                            >\r\n                                {data.result.length != 0\r\n                                    ? 'Match'\r\n                                    : 'Not Match'}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data.created_at).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        hour12: true,\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.uic_status == 'Printed'\r\n                                        ? { color: 'green' }\r\n                                        : data.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'red' }\r\n                                }\r\n                            >\r\n                                {data.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data?.order_date == null\r\n                                    ? ''\r\n                                    : new Date(data?.order_date).toLocaleString(\r\n                                          'en-GB',\r\n                                          {\r\n                                              year: 'numeric',\r\n                                              month: '2-digit',\r\n                                              day: '2-digit',\r\n                                          }\r\n                                      ) == 'Invalid Date'\r\n                                    ? data?.order_date\r\n                                    : new Date(data?.order_date).toLocaleString(\r\n                                        'en-GB',\r\n                                        {\r\n                                            year: 'numeric',\r\n                                            month: '2-digit',\r\n                                            day: '2-digit',\r\n                                        }\r\n                                    )}\r\n                            </TableCell>\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>{data.gep_order?.toString()}</TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data?.delivery_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Delivery', path: '/' },\r\n                        { name: 'Delivery' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchDelivery(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Button\r\n                        sx={{ mb: 2 }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={(e) => navigate('/mis/delivery/bulk-import')}\r\n                    >\r\n                        Add Bulk Delivery\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Order\\view-bad-order.jsx",["3862","3863","3864","3865","3866"],"import { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableRow,\r\n    TablePagination,\r\n    TableBody,\r\n    Card,\r\n    TableHead,\r\n    Table,\r\n    TableFooter,\r\n    MenuItem,\r\n    Box,\r\n    TextField,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport * as FileSaver from 'file-saver'\r\nimport * as XLSX from 'xlsx'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const navigate = useNavigate()\r\n    const [rowsPerPage, setRowsPerPage] = useState(10)\r\n    const [page, setPage] = useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [data, setData] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post(\r\n                        '/getBadOrders/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [refresh])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((d, index) => {\r\n                    d.id = page * rowsPerPage + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 5750,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n    const download = (e) => {\r\n        const fileExtension = '.xlsx'\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n        const ws = XLSX.utils.json_to_sheet(item)\r\n        ws['!cols'] = []\r\n        ws['!cols'][0] = { hidden: true }\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, 'bad-orders' + fileExtension)\r\n    }\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setRefresh((refresh) => !refresh)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                    }\r\n                    let res = await axiosMisUser.post('/badOrdersSearch', obj)\r\n                    if (res.status == 200) {\r\n                        setRowsPerPage(10)\r\n                        setPage(0)\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Order', path: '/' },\r\n                        { name: 'Bad-Orders', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"order_status\">\r\n                            Delivery Status\r\n                        </MenuItem>\r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                        <MenuItem value=\"old_item_details\">\r\n                            OLD Item Details\r\n                        </MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchOrders(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Button\r\n                        sx={{ mb: 2 }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={(e) => {\r\n                            download(e)\r\n                        }}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                <ProductTable>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Record.NO</TableCell>\r\n                            <TableCell>Order Imported TimeStamp</TableCell>\r\n                            <TableCell>Order ID</TableCell>\r\n                            <TableCell>Order Date</TableCell>\r\n                            <TableCell>Order TimeStamp</TableCell>\r\n                            <TableCell>Order Status</TableCell>\r\n                            <TableCell>Partner ID</TableCell>\r\n                            <TableCell>Item ID</TableCell>\r\n                            <TableCell>Old Item Details</TableCell>\r\n                            <TableCell>IMEI</TableCell>\r\n                            <TableCell>Base Disscount</TableCell>\r\n                            <TableCell>Diganostic</TableCell>\r\n                            <TableCell>Partner Purchase Price</TableCell>\r\n                            <TableCell>Tracking ID</TableCell>\r\n                            <TableCell>Delivery Date</TableCell>\r\n                            <TableCell>Order ID Replaced</TableCell>\r\n                            <TableCell>Deliverd With OTP</TableCell>\r\n                            <TableCell>Deliverd With Bag Exception</TableCell>\r\n                            <TableCell>GC Amount Redeemed</TableCell>\r\n                            <TableCell>GC Amount Refund</TableCell>\r\n                            <TableCell>GC Redeem Time</TableCell>\r\n                            <TableCell>GC Amount Refund Time</TableCell>\r\n                            <TableCell>Diagonstic Status</TableCell>\r\n                            <TableCell>VC Eligible</TableCell>\r\n                            <TableCell>\r\n                                Customer Declaration Physical Defect Present\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                Customer Declaration Physical Defect Type\r\n                            </TableCell>\r\n                            <TableCell>Partner Price No Defect</TableCell>\r\n                            <TableCell>Revised Partner Price</TableCell>\r\n                            <TableCell>Delivery Fee</TableCell>\r\n                            <TableCell>Exchange Facilitation Fee</TableCell>\r\n                            <TableCell>Reason</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {data.map((data, index) => (\r\n                            <TableRow tabIndex={-1}>\r\n                                <TableCell>{data.id}</TableCell>\r\n                                <TableCell>\r\n                                    {new Date(data.created_at).toLocaleString(\r\n                                        'en-GB',\r\n                                        {\r\n                                            hour12: true,\r\n                                        }\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.order_id?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data?.order_date == null\r\n                                        ? ''\r\n                                        : new Date(\r\n                                              data.order_date\r\n                                          ).toLocaleString('en-GB', {\r\n                                              year: 'numeric',\r\n                                              month: '2-digit',\r\n                                              day: '2-digit',\r\n                                          })}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data?.order_timestamp == null\r\n                                        ? ''\r\n                                        : new Date(\r\n                                              data.order_timestamp\r\n                                          ).toLocaleString('en-GB', {\r\n                                              hour12: true,\r\n                                          })}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.order_status?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.partner_id?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.item_id?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.old_item_details?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>{data.imei?.toString()}</TableCell>\r\n                                <TableCell>\r\n                                    ₹{data.base_discount?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>{data.diagnostic}</TableCell>\r\n                                <TableCell>\r\n                                    ₹{data.partner_purchase_price}\r\n                                </TableCell>\r\n                                <TableCell>{data.tracking_id}</TableCell>\r\n                                <TableCell>\r\n                                    {data.delivery_date == null\r\n                                        ? ''\r\n                                        : new Date(\r\n                                              data.delivery_date\r\n                                          ).toLocaleString('en-GB', {\r\n                                              hour12: true,\r\n                                          })}\r\n                                </TableCell>\r\n                                <TableCell>{data.order_id_replaced}</TableCell>\r\n                                <TableCell>{data.deliverd_with_otp}</TableCell>\r\n                                <TableCell>\r\n                                    {data.deliverd_with_bag_exception}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.gc_amount_redeemed?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.gc_amount_refund?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.gc_redeem_time == null\r\n                                        ? ''\r\n                                        : new Date(\r\n                                              data.gc_redeem_time\r\n                                          ).toLocaleString('en-GB', {\r\n                                              hour12: true,\r\n                                          })}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.gc_amount_refund_time == null\r\n                                        ? ''\r\n                                        : new Date(\r\n                                              data.gc_amount_refund_time\r\n                                          ).toLocaleString('en-GB', {\r\n                                              hour12: true,\r\n                                          })}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.diagnstic_status?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.vc_eligible?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.customer_declaration_physical_defect_present?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.customer_declaration_physical_defect_type?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data.partner_price_no_defect?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    ₹{data.revised_partner_price?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    ₹{data.delivery_fee?.toString()}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    ₹\r\n                                    {data.exchange_facilitation_fee?.toString()}\r\n                                </TableCell>\r\n                                <TableCell style={{ color: 'red' }}>\r\n                                    {data?.reason?.join(', ')}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </ProductTable>\r\n            </Card>\r\n            <TableFooter>\r\n                <TablePagination\r\n                    sx={{ px: 2 }}\r\n                    rowsPerPageOptions={[5, 10, 25]}\r\n                    component=\"div\"\r\n                    count={item.length}\r\n                    rowsPerPage={rowsPerPage}\r\n                    page={page}\r\n                    showFirstButton=\"true\"\r\n                    showLastButton=\"true\"\r\n                    backIconButtonProps={{\r\n                        'aria-label': 'Previous Page',\r\n                    }}\r\n                    nextIconButtonProps={{\r\n                        'aria-label': 'Next Page',\r\n                    }}\r\n                    onPageChange={handleChangePage}\r\n                    onRowsPerPageChange={({ target: { value } }) =>\r\n                        setRowsPerPage(value)\r\n                    }\r\n                />\r\n            </TableFooter>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Order\\order.jsx",["3867","3868","3869","3870","3871","3872","3873","3874","3875"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Recon-sheet\\delivered-orders.jsx",["3876","3877","3878","3879","3880","3881","3882"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    MenuItem,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    TextField,\r\n    Box,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState([])\r\n    const navigate = useNavigate()\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post(\r\n                        '/getDeliveredOrders/' +\r\n                            location +\r\n                            '/' +\r\n                            page +\r\n                            '/' +\r\n                            rowsPerPage\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setDeliveryCount(res.data.count)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, isAlive])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 5050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                        status:\"Delivered\"\r\n                    }\r\n                    let res = await axiosMisUser.post('/searchDeliveredOrders', obj)\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Order TimeStamp</TableCell>\r\n                        <TableCell>Order Status</TableCell>\r\n\r\n                        <TableCell>Partner ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n\r\n                        <TableCell>Base Disscount</TableCell>\r\n                        <TableCell>Diganostic</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>Order ID Replaced</TableCell>\r\n                        <TableCell>Deliverd With OTP</TableCell>\r\n                        <TableCell>Deliverd With Bag Exception</TableCell>\r\n                        <TableCell>GC Amount Redeemed</TableCell>\r\n                        <TableCell>GC Amount Refund</TableCell>\r\n                        <TableCell>GC Redeem Time</TableCell>\r\n                        <TableCell>GC Amount Refund Time</TableCell>\r\n                        <TableCell>Diagonstic Status</TableCell>\r\n                        <TableCell>VC Eligible</TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>Partner Price No Defect</TableCell>\r\n                        <TableCell>Revised Partner Price</TableCell>\r\n                        <TableCell>Delivery Fee</TableCell>\r\n                        <TableCell>Exchange Facilitation Fee</TableCell>\r\n\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Gep Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diganostic Discount</TableCell>\r\n                        <TableCell>Storage Discount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorstep Diganostic</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data?.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.order_date == null\r\n                                    ? ''\r\n                                    : new Date(data.order_date).toLocaleString(\r\n                                          'en-GB',\r\n                                          {\r\n                                              year: 'numeric',\r\n                                              month: '2-digit',\r\n                                              day: '2-digit',\r\n                                          }\r\n                                      )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.order_timestamp == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order_timestamp\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order_status?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>{data.partner_id?.toString()}</TableCell>\r\n\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.old_item_details?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.diagnostic}</TableCell>\r\n                            <TableCell>{data.partner_purchase_price}</TableCell>\r\n                            <TableCell>{data.tracking_id}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.delivery_date == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id_replaced}</TableCell>\r\n                            <TableCell>{data.deliverd_with_otp}</TableCell>\r\n                            <TableCell>\r\n                                {data.deliverd_with_bag_exception}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_amount_redeemed?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_amount_refund?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_redeem_time == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.gc_redeem_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_amount_refund_time?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnstic_status?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.vc_eligible?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.customer_declaration_physical_defect_present?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.customer_declaration_physical_defect_type?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_price_no_defect?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.revised_partner_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.exchange_facilitation_fee?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.delivery?.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.order_id?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.delivery?.item_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.gep_order?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.imei?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Recon-Sheet', path: '/' },\r\n                        { name: 'Delivered-Orders' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        \r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                      \r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchOrders(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Recon-sheet\\not-delivered-orders.jsx",["3883","3884","3885","3886","3887","3888","3889","3890","3891","3892","3893","3894"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    MenuItem,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    TextField,\r\n    Box,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState([])\r\n    const navigate = useNavigate()\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post(\r\n                        '/notDeliveredOrders/' +\r\n                            location +\r\n                            '/' +\r\n                            page +\r\n                            '/' +\r\n                            rowsPerPage\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setDeliveryCount(res.data.count)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, isAlive])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 5050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                    }\r\n                    let res = await axiosMisUser.post('/ordersSearch', obj)\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Order TimeStamp</TableCell>\r\n                        <TableCell>Order Status</TableCell>\r\n\r\n                        <TableCell>Partner ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n\r\n                        <TableCell>Base Disscount</TableCell>\r\n                        <TableCell>Diganostic</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>Order ID Replaced</TableCell>\r\n                        <TableCell>Deliverd With OTP</TableCell>\r\n                        <TableCell>Deliverd With Bag Exception</TableCell>\r\n                        <TableCell>GC Amount Redeemed</TableCell>\r\n                        <TableCell>GC Amount Refund</TableCell>\r\n                        <TableCell>GC Redeem Time</TableCell>\r\n                        <TableCell>GC Amount Refund Time</TableCell>\r\n                        <TableCell>Diagonstic Status</TableCell>\r\n                        <TableCell>VC Eligible</TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>Partner Price No Defect</TableCell>\r\n                        <TableCell>Revised Partner Price</TableCell>\r\n                        <TableCell>Delivery Fee</TableCell>\r\n                        <TableCell>Exchange Facilitation Fee</TableCell>\r\n\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Gep Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diganostic Discount</TableCell>\r\n                        <TableCell>Storage Discount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorstep Diganostic</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data?.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.order_date == null\r\n                                    ? ''\r\n                                    : new Date(data.order_date).toLocaleString(\r\n                                          'en-GB',\r\n                                          {\r\n                                              year: 'numeric',\r\n                                              month: '2-digit',\r\n                                              day: '2-digit',\r\n                                          }\r\n                                      )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.order_timestamp == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order_timestamp\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order_status?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>{data.partner_id?.toString()}</TableCell>\r\n\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.old_item_details?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.diagnostic}</TableCell>\r\n                            <TableCell>{data.partner_purchase_price}</TableCell>\r\n                            <TableCell>{data.tracking_id}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.delivery_date == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id_replaced}</TableCell>\r\n                            <TableCell>{data.deliverd_with_otp}</TableCell>\r\n                            <TableCell>\r\n                                {data.deliverd_with_bag_exception}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_amount_redeemed?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_amount_refund?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_redeem_time == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.gc_redeem_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.gc_amount_refund_time?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnstic_status?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.vc_eligible?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.customer_declaration_physical_defect_present?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.customer_declaration_physical_defect_type?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_price_no_defect?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.revised_partner_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.exchange_facilitation_fee?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.delivery?.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.order_id?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.delivery?.item_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.gep_order?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.imei?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery?.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Recon-Sheet', path: '/' },\r\n                        { name: 'Not-Delivered-Orders' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Uic-manage\\uic-not-generated.jsx",["3895","3896","3897","3898","3899","3900","3901","3902","3903","3904","3905","3906","3907","3908","3909","3910","3911","3912","3913","3914"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport * as FileSaver from 'file-saver'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    Checkbox,\r\n    Box,\r\n    MenuItem,\r\n    TextField,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const navigate = useNavigate()\r\n    const [isCheckAll, setIsCheckAll] = useState(false)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState(0)\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let obj = {\r\n                        status: 'Pending',\r\n                        location: location,\r\n                        page: page,\r\n                        size: rowsPerPage,\r\n                    }\r\n                    let res = await axiosMisUser.post('/uicGeneratedRecon', obj)\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setDeliveryCount(res.data.count)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, isAlive])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleSelectAll = (e) => {\r\n        setIsCheckAll(!isCheckAll)\r\n        setIsCheck(item.map((li, index) => index.toString()))\r\n        if (isCheckAll) {\r\n            setIsCheck([])\r\n        }\r\n    }\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 6500,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const handelUicGen = (e) => {\r\n        e.preventDefault()\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Delivered Data')\r\n        } else {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { user_name } = jwt_decode(token)\r\n\r\n                const addUic = async () => {\r\n                    let count = 0\r\n                    for (let i = 0; i < isCheck.length; i++) {\r\n                        if (item[isCheck[i]].uic_status != 'Pending') {\r\n                            alert('Already UIC Created')\r\n\r\n                            break\r\n                        }\r\n                        try {\r\n                            let obj = {\r\n                                _id: item[isCheck[i]]?._id,\r\n                                email: user_name,\r\n                                created_at: Date.now(),\r\n                            }\r\n                            let res = await axiosMisUser.post(\r\n                                '/addUicCode',\r\n                                obj\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        count++\r\n                    }\r\n                    if (count == isCheck.length) {\r\n                        alert('Successfully Generated')\r\n                        setIsCheck([])\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                }\r\n                addUic()\r\n            }\r\n        }\r\n    }\r\n\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    const fileType =\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n    const fileExtension = '.xlsx'\r\n\r\n    const exportToCSV = (fileName) => {\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Data')\r\n        } else {\r\n            let arr = []\r\n            let status = false\r\n            let changeStatus = async () => {\r\n                for (let i = 0; i < isCheck.length; i++) {\r\n                    if (item[isCheck[i]].uic_code == undefined) {\r\n                        alert('Please Generate UIC')\r\n                        status = true\r\n                        break\r\n                    } else {\r\n                        try {\r\n                            let res = await axiosMisUser.post(\r\n                                '/changeUicStatus/' + item[isCheck[i]]._id\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        let obj = {\r\n                            UIC: item[isCheck[i]].uic_code?.code,\r\n                            IMEI: item[isCheck[i]]?.order?.imei?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ''\r\n                            ),\r\n                            Model: item[\r\n                                isCheck[i]\r\n                            ]?.order?.old_item_details?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ' '\r\n                            ),\r\n                        }\r\n                        arr.push(obj)\r\n                    }\r\n                }\r\n                if (status == false) {\r\n                    download(arr, fileName)\r\n                }\r\n            }\r\n            changeStatus()\r\n        }\r\n    }\r\n    function download(arr, fileName) {\r\n        const ws = XLSX.utils.json_to_sheet(arr)\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, fileName + fileExtension)\r\n        setIsCheck([])\r\n        setIsAlive((isAlive) => !isAlive)\r\n    }\r\n\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setItem([])\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                        uic_status: 'Pending',\r\n                    }\r\n\r\n                    let res = await axiosMisUser.post('/searchUicPage', obj)\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    if (res.status == 200 && res.data.data?.length !== 0) {\r\n                        setItem(res.data.data)\r\n                    } else {\r\n                        alert('No data found')\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            {' '}\r\n                            <Checkbox\r\n                                {...label}\r\n                                onClick={(e) => {\r\n                                    handleSelectAll()\r\n                                }}\r\n                                checked={\r\n                                    item.length == isCheck.length ? true : false\r\n                                }\r\n                            />{' '}\r\n                            Select All\r\n                        </TableCell>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>UIC Status</TableCell>\r\n                        <TableCell>UIC Generated Admin</TableCell>\r\n                        <TableCell>UIC Generated Time</TableCell>\r\n                        <TableCell>UIC Code</TableCell>\r\n                        <TableCell>UIC Downloaded Time</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Actual Delivery Date</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Order TimeStamp</TableCell>\r\n                        <TableCell>Order Status</TableCell>\r\n                        <TableCell>Partner ID</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Base Disscount</TableCell>\r\n                        <TableCell>Diganostic</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>Order ID Replaced</TableCell>\r\n                        <TableCell>Deliverd With OTP</TableCell>\r\n                        <TableCell>Deliverd With Bag Exception</TableCell>\r\n                        <TableCell>GC Amount Redeemed</TableCell>\r\n                        <TableCell>GC Amount Refund</TableCell>\r\n                        <TableCell>GC Redeem Time</TableCell>\r\n                        <TableCell>GC Amount Refund Time</TableCell>\r\n                        <TableCell>Diagonstic Status</TableCell>\r\n                        <TableCell>VC Eligible</TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>Partner Price No Defect</TableCell>\r\n                        <TableCell>Revised Partner Price</TableCell>\r\n                        <TableCell>Delivery Fee</TableCell>\r\n                        <TableCell>Exchange Facilitation Fee</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Gep Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diganostic Discount</TableCell>\r\n                        <TableCell>Storage Discount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorstep Diganostic</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>\r\n                                {' '}\r\n                                <Checkbox\r\n                                    {...label}\r\n                                    onClick={(e) => {\r\n                                        handleClick(e)\r\n                                    }}\r\n                                    id={index}\r\n                                    key={index}\r\n                                    checked={isCheck.includes(\r\n                                        index?.toString()\r\n                                    )}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.uic_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : data.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.uic_code?.user}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.uic_code?.created_at == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.uic_code?.created_at\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data?.uic_code?.code}</TableCell>\r\n                            <TableCell>\r\n                                {data?.download_time == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data?.download_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell style={{ color: 'green' }}>\r\n                                {data.order.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data?.delivery_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_date == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          year: 'numeric',\r\n                                          month: '2-digit',\r\n                                          day: '2-digit',\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.order_timestamp == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_timestamp\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_status?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.partner_id?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.item_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.old_item_details?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.imei?.toString()}</TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.diagnostic}</TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_purchase_price}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.tracking_id}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.order.delivery_date == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id_replaced}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_otp}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_bag_exception}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_redeemed?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.gc_redeem_time == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.gc_redeem_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund_time?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.diagnstic_status?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.vc_eligible?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_present?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_type?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_price_no_defect?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.revised_partner_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.delivery_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.$exchange_facilitation_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>{data.gep_order?.toString()}</TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, isCheck, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'UIC-Manage', path: '/' },\r\n                        { name: 'UIC-Not-Generated' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"uic\">UIC</MenuItem>\r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchOrders(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ mb: 2, m: 1 }}\r\n                        style={{ backgroundColor: 'primery' }}\r\n                        onClick={(e) => {\r\n                            handelUicGen(e)\r\n                        }}\r\n                    >\r\n                        Generate UIC\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ m: 1 }}\r\n                        onClick={(e) => {\r\n                            exportToCSV('UIC-Printing-Sheet')\r\n                        }}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Uic-manage\\all.jsx",["3915","3916","3917","3918","3919","3920","3921","3922","3923","3924","3925","3926","3927","3928","3929","3930","3931"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport * as FileSaver from 'file-saver'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    Checkbox,\r\n    MenuItem,\r\n    TextField,\r\n    Box,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const navigate = useNavigate()\r\n    const [isCheckAll, setIsCheckAll] = useState(false)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState(0)\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post(\r\n                        '/uicPageData/' +\r\n                            location +\r\n                            '/' +\r\n                            page +\r\n                            '/' +\r\n                            rowsPerPage\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setDeliveryCount(res.data.count)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, isAlive])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleSelectAll = (e) => {\r\n        setIsCheckAll(!isCheckAll)\r\n        setIsCheck(item.map((li, index) => index.toString()))\r\n        if (isCheckAll) {\r\n            setIsCheck([])\r\n        }\r\n    }\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 5050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    const fileType =\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n    const fileExtension = '.xlsx'\r\n\r\n    const exportToCSV = (fileName) => {\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Data')\r\n        } else {\r\n            let arr = []\r\n            let status = false\r\n            let changeStatus = async () => {\r\n                for (let i = 0; i < isCheck.length; i++) {\r\n                    if (item[isCheck[i]].uic_code == undefined) {\r\n                        alert('Please Generate UIC')\r\n                        status = true\r\n                        break\r\n                    } else {\r\n                        try {\r\n                            let res = await axiosMisUser.post(\r\n                                '/changeUicStatus/' + item[isCheck[i]]._id\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        let obj = {\r\n                            UIC: item[isCheck[i]].uic_code?.code,\r\n                            IMEI: item[isCheck[i]]?.order?.imei?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ''\r\n                            ),\r\n                            Model: item[\r\n                                isCheck[i]\r\n                            ]?.order?.old_item_details?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ' '\r\n                            ),\r\n                        }\r\n                        arr.push(obj)\r\n                    }\r\n                }\r\n                if (status == false) {\r\n                    download(arr, fileName)\r\n                }\r\n            }\r\n            changeStatus()\r\n        }\r\n    }\r\n    function download(arr, fileName) {\r\n        const ws = XLSX.utils.json_to_sheet(arr)\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, fileName + fileExtension)\r\n        setIsCheck([])\r\n        setIsAlive((isAlive) => !isAlive)\r\n    }\r\n    const handelUicGen = (e) => {\r\n        e.preventDefault()\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Delivered Data')\r\n        } else {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { user_name } = jwt_decode(token)\r\n\r\n                const addUic = async () => {\r\n                    let count = 0\r\n                    for (let i = 0; i < isCheck.length; i++) {\r\n                        if (item[isCheck[i]].uic_status != 'Pending') {\r\n                            alert('Already UIC Created')\r\n\r\n                            break\r\n                        }\r\n                        try {\r\n                            let obj = {\r\n                                _id: item[isCheck[i]]?._id,\r\n                                email: user_name,\r\n                                created_at: Date.now(),\r\n                            }\r\n                            let res = await axiosMisUser.post(\r\n                                '/addUicCode',\r\n                                obj\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        count++\r\n                    }\r\n                    if (count == isCheck.length) {\r\n                        alert('Successfully Generated')\r\n                        setIsCheck([])\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                }\r\n                addUic()\r\n            }\r\n        }\r\n    }\r\n\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setItem([])\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                    }\r\n                    let res = await axiosMisUser.post('/searchUicPageAllPage', obj)\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    if (res.status == 200 && res.data.data?.length !== 0) {\r\n                        setItem(res.data.data)\r\n                    } else {\r\n                        alert('No data found')\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            {' '}\r\n                            <Checkbox\r\n                                {...label}\r\n                                onClick={(e) => {\r\n                                    handleSelectAll()\r\n                                }}\r\n                                checked={\r\n                                    item.length == isCheck.length ? true : false\r\n                                }\r\n                            />{' '}\r\n                            Select All\r\n                        </TableCell>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>UIC Status</TableCell>\r\n                        <TableCell>UIC Generated Admin</TableCell>\r\n                        <TableCell>UIC Generated Time</TableCell>\r\n                        <TableCell>UIC Code</TableCell>\r\n                        <TableCell>UIC Downloaded Time</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Actual Delivery Date</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Order TimeStamp</TableCell>\r\n                        <TableCell>Order Status</TableCell>\r\n                        <TableCell>Partner ID</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Base Disscount</TableCell>\r\n                        <TableCell>Diganostic</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>Order ID Replaced</TableCell>\r\n                        <TableCell>Deliverd With OTP</TableCell>\r\n                        <TableCell>Deliverd With Bag Exception</TableCell>\r\n                        <TableCell>GC Amount Redeemed</TableCell>\r\n                        <TableCell>GC Amount Refund</TableCell>\r\n                        <TableCell>GC Redeem Time</TableCell>\r\n                        <TableCell>GC Amount Refund Time</TableCell>\r\n                        <TableCell>Diagonstic Status</TableCell>\r\n                        <TableCell>VC Eligible</TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>Partner Price No Defect</TableCell>\r\n                        <TableCell>Revised Partner Price</TableCell>\r\n                        <TableCell>Delivery Fee</TableCell>\r\n                        <TableCell>Exchange Facilitation Fee</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Gep Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diganostic Discount</TableCell>\r\n                        <TableCell>Storage Discount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorstep Diganostic</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>\r\n                                {' '}\r\n                                <Checkbox\r\n                                    {...label}\r\n                                    onClick={(e) => {\r\n                                        handleClick(e)\r\n                                    }}\r\n                                    id={index}\r\n                                    key={index}\r\n                                    checked={isCheck.includes(\r\n                                        index?.toString()\r\n                                    )}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.uic_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : data.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.uic_code?.user}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.uic_code?.created_at == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.uic_code?.created_at\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data?.uic_code?.code}</TableCell>\r\n                            <TableCell>\r\n                                {data?.download_time == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data?.download_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell style={{ color: 'green' }}>\r\n                                {data.order.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data?.delivery_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_date == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          year: 'numeric',\r\n                                          month: '2-digit',\r\n                                          day: '2-digit',\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.order_timestamp == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_timestamp\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_status?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.partner_id?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.item_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.old_item_details?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.imei?.toString()}</TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.diagnostic}</TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_purchase_price}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.tracking_id}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.order.delivery_date == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id_replaced}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_otp}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_bag_exception}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_redeemed?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.gc_redeem_time == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.gc_redeem_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund_time?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.diagnstic_status?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.vc_eligible?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_present?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_type?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_price_no_defect?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.revised_partner_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.delivery_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.$exchange_facilitation_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>{data.gep_order?.toString()}</TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, isCheck, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'UIC-Manage', path: '/' },\r\n                        { name: 'All' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"uic\">UIC</MenuItem>\r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchOrders(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ m: 1 }}\r\n                        style={{ backgroundColor: 'secondary' }}\r\n                        onClick={(e) => {\r\n                            handelUicGen(e)\r\n                        }}\r\n                    >\r\n                        Generate UIC\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ m: 1 }}\r\n                        onClick={(e) => {\r\n                            exportToCSV('UIC-Printing-Sheet')\r\n                        }}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Uic-manage\\uic-generated.jsx",["3932","3933","3934","3935","3936","3937","3938","3939","3940","3941","3942","3943","3944","3945","3946","3947"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport * as FileSaver from 'file-saver'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    Checkbox,\r\n    Box,\r\n    MenuItem,\r\n    TextField,\r\n    Button\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const navigate = useNavigate()\r\n    const [isCheckAll, setIsCheckAll] = useState(false)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState(0)\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let obj = {\r\n                        status: 'Created',\r\n                        location: location,\r\n                        page: page,\r\n                        size: rowsPerPage,\r\n                    }\r\n                    let res = await axiosMisUser.post('/uicGeneratedRecon', obj)\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setDeliveryCount(res.data.count)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, isAlive])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleSelectAll = (e) => {\r\n        setIsCheckAll(!isCheckAll)\r\n        setIsCheck(item.map((li, index) => index.toString()))\r\n        if (isCheckAll) {\r\n            setIsCheck([])\r\n        }\r\n    }\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 6500,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    const fileType =\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n    const fileExtension = '.xlsx'\r\n\r\n    const exportToCSV = (fileName) => {\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Data')\r\n        } else {\r\n            let arr = []\r\n            let status = false\r\n            let changeStatus = async () => {\r\n                for (let i = 0; i < isCheck.length; i++) {\r\n                    if (item[isCheck[i]].uic_code == undefined) {\r\n                        alert('Please Generate UIC')\r\n                        status = true\r\n                        break\r\n                    } else {\r\n                        try {\r\n                            let res = await axiosMisUser.post(\r\n                                '/changeUicStatus/' + item[isCheck[i]]._id\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        let obj = {\r\n                            UIC: item[isCheck[i]].uic_code?.code,\r\n                            IMEI: item[isCheck[i]]?.order?.imei?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ''\r\n                            ),\r\n                            Model: item[\r\n                                isCheck[i]\r\n                            ]?.order?.old_item_details?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ' '\r\n                            ),\r\n                        }\r\n                        arr.push(obj)\r\n                    }\r\n                }\r\n                if (status == false) {\r\n                    download(arr, fileName)\r\n                }\r\n            }\r\n            changeStatus()\r\n        }\r\n    }\r\n    function download(arr, fileName) {\r\n        const ws = XLSX.utils.json_to_sheet(arr)\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, fileName + fileExtension)\r\n        setIsCheck([])\r\n        setIsAlive((isAlive) => !isAlive)\r\n    }\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setItem([])\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                        uic_status: 'Created',\r\n                    }\r\n\r\n                    let res = await axiosMisUser.post('/searchUicPage', obj)\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    if (res.status == 200 && res.data.data?.length !== 0) {\r\n                        setItem(res.data.data)\r\n                    } else {\r\n                        alert('No data found')\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            {' '}\r\n                            <Checkbox\r\n                                {...label}\r\n                                onClick={(e) => {\r\n                                    handleSelectAll()\r\n                                }}\r\n                                checked={\r\n                                    item.length == isCheck.length ? true : false\r\n                                }\r\n                            />{' '}\r\n                            Select All\r\n                        </TableCell>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>UIC Status</TableCell>\r\n                        <TableCell>UIC Generated Admin</TableCell>\r\n                        <TableCell>UIC Generated Time</TableCell>\r\n                        <TableCell>UIC Code</TableCell>\r\n                        <TableCell>UIC Downloaded Time</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Actual Delivery Date</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Order TimeStamp</TableCell>\r\n                        <TableCell>Order Status</TableCell>\r\n                        <TableCell>Partner ID</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Base Disscount</TableCell>\r\n                        <TableCell>Diganostic</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>Order ID Replaced</TableCell>\r\n                        <TableCell>Deliverd With OTP</TableCell>\r\n                        <TableCell>Deliverd With Bag Exception</TableCell>\r\n                        <TableCell>GC Amount Redeemed</TableCell>\r\n                        <TableCell>GC Amount Refund</TableCell>\r\n                        <TableCell>GC Redeem Time</TableCell>\r\n                        <TableCell>GC Amount Refund Time</TableCell>\r\n                        <TableCell>Diagonstic Status</TableCell>\r\n                        <TableCell>VC Eligible</TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>Partner Price No Defect</TableCell>\r\n                        <TableCell>Revised Partner Price</TableCell>\r\n                        <TableCell>Delivery Fee</TableCell>\r\n                        <TableCell>Exchange Facilitation Fee</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Gep Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diganostic Discount</TableCell>\r\n                        <TableCell>Storage Discount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorstep Diganostic</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>\r\n                                {' '}\r\n                                <Checkbox\r\n                                    {...label}\r\n                                    onClick={(e) => {\r\n                                        handleClick(e)\r\n                                    }}\r\n                                    id={index}\r\n                                    key={index}\r\n                                    checked={isCheck.includes(\r\n                                        index?.toString()\r\n                                    )}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.uic_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : data.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.uic_code?.user}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.uic_code?.created_at == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.uic_code?.created_at\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data?.uic_code?.code}</TableCell>\r\n                            <TableCell>\r\n                                {data?.download_time == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data?.download_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell style={{ color: 'green' }}>\r\n                                {data.order.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data?.delivery_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_date == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          year: 'numeric',\r\n                                          month: '2-digit',\r\n                                          day: '2-digit',\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.order_timestamp == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_timestamp\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_status?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.partner_id?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.item_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.old_item_details?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.imei?.toString()}</TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.diagnostic}</TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_purchase_price}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.tracking_id}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.order.delivery_date == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id_replaced}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_otp}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_bag_exception}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_redeemed?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.gc_redeem_time == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.gc_redeem_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund_time?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.diagnstic_status?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.vc_eligible?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_present?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_type?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_price_no_defect?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.revised_partner_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.delivery_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.$exchange_facilitation_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>{data.gep_order?.toString()}</TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, isCheck, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'UIC-Manage', path: '/' },\r\n                        { name: 'UIC-Generated' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n            <Box>\r\n                <TextField\r\n                    select\r\n                    label=\"Select\"\r\n                    variant=\"outlined\"\r\n                    sx={{ mb: 1, width: '140px' }}\r\n                    onChange={(e) => {\r\n                        setSearch((p) => ({ ...p, type: e.target.value }))\r\n                    }}\r\n                >\r\n                    <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                    <MenuItem value=\"uic\">UIC</MenuItem>\r\n                    <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                    <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                    <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                </TextField>\r\n                <TextField\r\n                    onChange={(e) => {\r\n                        searchOrders(e)\r\n                    }}\r\n                    disabled={search.type == '' ? true : false}\r\n                    label=\"Search\"\r\n                    variant=\"outlined\"\r\n                    sx={{ ml: 2, mb: 1 }}\r\n                />\r\n                 </Box>\r\n                 <Box>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ m: 1 }}\r\n                        onClick={(e) => {\r\n                            exportToCSV('UIC-Printing-Sheet')\r\n                        }}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Uic-manage\\uic-downloaded.jsx",["3948","3949","3950","3951","3952","3953","3954","3955","3956","3957","3958","3959","3960","3961","3962","3963"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport * as FileSaver from 'file-saver'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    Checkbox,\r\n    Box,\r\n    MenuItem,\r\n    TextField,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const navigate = useNavigate()\r\n    const [isCheckAll, setIsCheckAll] = useState(false)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [data, setData] = useState([])\r\n    const [deliveryCount, setDeliveryCount] = useState(0)\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let obj = {\r\n                        status: 'Printed',\r\n                        location: location,\r\n                        page: page,\r\n                        size: rowsPerPage,\r\n                    }\r\n                    let res = await axiosMisUser.post('/uicGeneratedRecon', obj)\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                        setDeliveryCount(res.data.count)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [page, isAlive])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const handleSelectAll = (e) => {\r\n        setIsCheckAll(!isCheckAll)\r\n        setIsCheck(item.map((li, index) => index.toString()))\r\n        if (isCheckAll) {\r\n            setIsCheck([])\r\n        }\r\n    }\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 6500,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    const fileType =\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n    const fileExtension = '.xlsx'\r\n\r\n    const exportToCSV = (fileName) => {\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Data')\r\n        } else {\r\n            let arr = []\r\n            let status = false\r\n            let changeStatus = async () => {\r\n                for (let i = 0; i < isCheck.length; i++) {\r\n                    if (item[isCheck[i]].uic_code == undefined) {\r\n                        alert('Please Generate UIC')\r\n                        status = true\r\n                        break\r\n                    } else {\r\n                        try {\r\n                            let res = await axiosMisUser.post(\r\n                                '/changeUicStatus/' + item[isCheck[i]]._id\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        let obj = {\r\n                            UIC: item[isCheck[i]].uic_code?.code,\r\n                            IMEI: item[isCheck[i]]?.order?.imei?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ''\r\n                            ),\r\n                            Model: item[\r\n                                isCheck[i]\r\n                            ]?.order?.old_item_details?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ' '\r\n                            ),\r\n                        }\r\n                        arr.push(obj)\r\n                    }\r\n                }\r\n                if (status == false) {\r\n                    download(arr, fileName)\r\n                }\r\n            }\r\n            changeStatus()\r\n        }\r\n    }\r\n    function download(arr, fileName) {\r\n        const ws = XLSX.utils.json_to_sheet(arr)\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, fileName + fileExtension)\r\n        setIsCheck([])\r\n        setIsAlive((isAlive) => !isAlive)\r\n    }\r\n\r\n    const searchOrders = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setItem([])\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                        uic_status: 'Printed',\r\n                    }\r\n\r\n                    let res = await axiosMisUser.post('/searchUicPage', obj)\r\n                    setRowsPerPage(10)\r\n                    setPage(0)\r\n                    if (res.status == 200 && res.data.data?.length !== 0) {\r\n                        setItem(res.data.data)\r\n                    } else {\r\n                        alert('No data found')\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            {' '}\r\n                            <Checkbox\r\n                                {...label}\r\n                                onClick={(e) => {\r\n                                    handleSelectAll()\r\n                                }}\r\n                                checked={\r\n                                    item.length == isCheck.length ? true : false\r\n                                }\r\n                            />{' '}\r\n                            Select All\r\n                        </TableCell>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>UIC Status</TableCell>\r\n                        <TableCell>UIC Generated Admin</TableCell>\r\n                        <TableCell>UIC Generated Time</TableCell>\r\n                        <TableCell>UIC Code</TableCell>\r\n                        <TableCell>UIC Downloaded Time</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Actual Delivery Date</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Order TimeStamp</TableCell>\r\n                        <TableCell>Order Status</TableCell>\r\n                        <TableCell>Partner ID</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Base Disscount</TableCell>\r\n                        <TableCell>Diganostic</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>Order ID Replaced</TableCell>\r\n                        <TableCell>Deliverd With OTP</TableCell>\r\n                        <TableCell>Deliverd With Bag Exception</TableCell>\r\n                        <TableCell>GC Amount Redeemed</TableCell>\r\n                        <TableCell>GC Amount Refund</TableCell>\r\n                        <TableCell>GC Redeem Time</TableCell>\r\n                        <TableCell>GC Amount Refund Time</TableCell>\r\n                        <TableCell>Diagonstic Status</TableCell>\r\n                        <TableCell>VC Eligible</TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>Partner Price No Defect</TableCell>\r\n                        <TableCell>Revised Partner Price</TableCell>\r\n                        <TableCell>Delivery Fee</TableCell>\r\n                        <TableCell>Exchange Facilitation Fee</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Gep Order</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Partner Purchase Price</TableCell>\r\n                        <TableCell>Partner Shop</TableCell>\r\n                        <TableCell>Base Discount</TableCell>\r\n                        <TableCell>Diganostic Discount</TableCell>\r\n                        <TableCell>Storage Discount</TableCell>\r\n                        <TableCell>Buyback Category</TableCell>\r\n                        <TableCell>Doorstep Diganostic</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>\r\n                                {' '}\r\n                                <Checkbox\r\n                                    {...label}\r\n                                    onClick={(e) => {\r\n                                        handleClick(e)\r\n                                    }}\r\n                                    id={index}\r\n                                    key={index}\r\n                                    checked={isCheck.includes(\r\n                                        index?.toString()\r\n                                    )}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.uic_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : data.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.uic_code?.user}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.uic_code?.created_at == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.uic_code?.created_at\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data?.uic_code?.code}</TableCell>\r\n                            <TableCell>\r\n                                {data?.download_time == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data?.download_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell style={{ color: 'green' }}>\r\n                                {data.order.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data?.delivery_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_date == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          year: 'numeric',\r\n                                          month: '2-digit',\r\n                                          day: '2-digit',\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.order_timestamp == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.order_timestamp\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_status?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.partner_id?.toString()}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.item_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.old_item_details?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.imei?.toString()}</TableCell>\r\n\r\n                            <TableCell>\r\n                                {data.order.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.diagnostic}</TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_purchase_price}\r\n                            </TableCell>\r\n                            <TableCell>{data.order.tracking_id}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data.order.delivery_date == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.order_id_replaced}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_otp}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.deliverd_with_bag_exception}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_redeemed?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.order.gc_redeem_time == null\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data.order.gc_redeem_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.gc_amount_refund_time?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.diagnstic_status?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.vc_eligible?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_present?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.customer_declaration_physical_defect_type?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.partner_price_no_defect?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.revised_partner_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.delivery_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.order.$exchange_facilitation_fee?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>{data.gep_order?.toString()}</TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.partner_purchase_price?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.partner_shop?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.base_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.diagnostics_discount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.storage_disscount?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.buyback_category?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.doorsteps_diagnostics?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [data, isCheck, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'UIC-Manage', path: '/' },\r\n                        { name: 'UIC-Downloaded' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"uic\">UIC</MenuItem>\r\n                        <MenuItem value=\"imei\">IMEI</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                        <MenuItem value=\"item_id\">Item ID</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchOrders(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n                <Box>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        sx={{ m: 1 }}\r\n                        onClick={(e) => {\r\n                            exportToCSV('UIC-Printing-Sheet')\r\n                        }}\r\n                    >\r\n                        Download\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={deliveryCount}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bqc\\view-wht-tray.jsx",["3964","3965","3966","3967","3968"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport { axiosMisUser, axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport AssignDialogBox from './user-dailog'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const navigate = useNavigate()\r\n    const [chargingUsers, setChargingUsers] = useState([])\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Ready to BQC/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setIsCheck([])\r\n        setChargingUsers([])\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelGetBqcUser = () => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosMisUser.post(\r\n                        '/get-charging-users/' + 'BQC/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setChargingUsers(res.data.data)\r\n                        handleDialogOpen()\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[9],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assign-to-agent', path: '/' },\r\n                        { name: 'BQC' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isCheck.length == 0}\r\n                onClick={() => handelGetBqcUser(true)}\r\n            >\r\n                Assign For BQC\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'WHT'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n\r\n            {shouldOpenEditorDialog && (\r\n                <AssignDialogBox\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    chargingUsers={chargingUsers}\r\n                    isCheck={isCheck}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-audit\\view-wht-tray.jsx",["3969","3970","3971","3972"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport { axiosWarehouseIn, axiosMisUser } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport AssignDialogBox from './user-dailog'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [auditUsers, setAuditUsers] = useState([])\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Ready to Audit/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setIsCheck([])\r\n        setAuditUsers([])\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelGetAuditUser = () => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosMisUser.post(\r\n                        '/get-charging-users/' + 'Audit/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setAuditUsers(res.data.data)\r\n                        handleDialogOpen()\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }\r\n\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[8],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assign-to-agent', path: '/' },\r\n                        { name: 'Audit' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => handelGetAuditUser()}\r\n                disabled={isCheck.length === 0}\r\n            >\r\n                Assign For Audit\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'WHT'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <AssignDialogBox\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    auditUsers={auditUsers}\r\n                    isCheck={isCheck}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-charging\\view-wht-tray.jsx",["3973","3974","3975","3976","3977"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport { axiosMisUser, axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport AssignDialogBox from './user-dailog'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const navigate = useNavigate()\r\n    const [chargingUsers, setChargingUsers] = useState([])\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Closed/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setIsCheck([])\r\n        setChargingUsers([])\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelGetChargingUser = () => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosMisUser.post(\r\n                        '/get-charging-users/' + 'Charging/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setChargingUsers(res.data.data)\r\n                        handleDialogOpen()\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }\r\n\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[8],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n       \r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assign-to-agent', path: '/' },\r\n                        { name: 'Charging' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isCheck.length == 0}\r\n                onClick={() => handelGetChargingUser(true)}\r\n            >\r\n                Assign For Charging\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'WHT'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n\r\n            {shouldOpenEditorDialog && (\r\n                <AssignDialogBox\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    chargingUsers={chargingUsers}\r\n                    isCheck={isCheck}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\bot-tray.jsx",["3978","3979","3980","3981","3982","3983","3984"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Box, TextField, Checkbox } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport moment from 'moment'\r\nimport jwt_decode from 'jwt-decode'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [item, setItem] = useState([])\r\n    const navigate = useNavigate()\r\n    const [sortDate, setSortDate] = useState('')\r\n    const [sortData, setSortData] = useState(false)\r\n    const [yesterdayDate, setYesterDayDate] = useState('')\r\n    const [isCheck, setIsCheck] = useState([])\r\n\r\n    useEffect(() => {\r\n        let date = new Date() // Today!\r\n        setYesterDayDate(date.setDate(date.getDate() - 1))\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const { location } = jwt_decode(admin)\r\n            const fetchData = async () => {\r\n                try {\r\n                    let res = await axiosMisUser.post(\r\n                        '/wh-closed-bot-tray/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelSort = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                const { location } = jwt_decode(admin)\r\n                let obj = {\r\n                    date: sortDate,\r\n                    location: location,\r\n                }\r\n                let res = await axiosMisUser.post('/wht-bot-sort', obj)\r\n                if (res.status == 200) {\r\n                    setSortData(true)\r\n                    setItem(res.data.data)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    /*-----------------------------------------------------------------------------*/\r\n    // NAVIGATE TO ASSIGN FOR SORTING PAGE\r\n    const handelAssignForSorting = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/mis/sorting/bot-to-wht/assign-for-sorting', {\r\n            state: { isCheck: isCheck, type: 'Not From Request' },\r\n        })\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray ID',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_wharehouse_from_bot',\r\n            label: 'Date of Clouser',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        year: 'numeric',\r\n                        month: '2-digit',\r\n                        day: '2-digit',\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Items Count',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[4],\r\n            },\r\n        },\r\n        {\r\n            name: 'temp_array',\r\n            label: 'Sku Count',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => value.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Sorting', path: '/' },\r\n                        { name: 'Bot-to-wht' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <h3>\r\n                        Date:-{' '}\r\n                        {new Date(\r\n                            sortDate != '' && sortData == true\r\n                                ? sortDate\r\n                                : yesterdayDate\r\n                        ).toLocaleString('en-GB', {\r\n                            year: 'numeric',\r\n                            month: '2-digit',\r\n                            day: '2-digit',\r\n                        })}\r\n                    </h3>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        flexDirection: 'start',\r\n                        justifyContent: 'flex-end',\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        id=\"filled-select-currency\"\r\n                        type=\"Date\"\r\n                        onChange={(e) => {\r\n                            setSortDate(e.target.value)\r\n                        }}\r\n                        inputProps={{\r\n                            max: moment().format('YYYY-MM-DD'),\r\n                        }}\r\n                        sx={{ mt: 1, mb: 1 }}\r\n                        helperText=\"Please Select BOT closed Date\"\r\n                        variant=\"filled\"\r\n                    />\r\n                    <Button\r\n                        sx={{\r\n                            mt: 20,\r\n                            m: 2,\r\n                            height: '38px',\r\n                        }}\r\n                        disabled={sortDate == '' ? true : false}\r\n                        variant=\"contained\"\r\n                        style={{\r\n                            backgroundColor: '#206CE2',\r\n                            marginTop: '23px',\r\n                        }}\r\n                        onClick={(e) => {\r\n                            handelSort(e)\r\n                        }}\r\n                    >\r\n                        Sort\r\n                    </Button>\r\n                    <Box>\r\n                        <Button\r\n                            sx={{\r\n                                mt: 2,\r\n                                height: '48px',\r\n                                width: '200px',\r\n                            }}\r\n                            variant=\"contained\"\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                            disabled={isCheck.length === 0}\r\n                            onClick={(e) => {\r\n                                handelAssignForSorting(e)\r\n                            }}\r\n                        >\r\n                            Assign For Sorting\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n\r\n            <MUIDataTable\r\n                title={'Wht Tray'}\r\n                data={item}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Merge\\Mmt-merge\\mmt-tray.jsx",["3985","3986"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    DialogTitle,\r\n    IconButton,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const navigate = useNavigate()\r\n    const [mmtTray, setMmtTray] = useState([])\r\n    const [open, setOpen] = useState(false)\r\n    const [sortingAgent, setSortingAgent] = useState([])\r\n    const [toMmtTray, setToMmtTray] = useState([])\r\n    const [mergreData, setMergeData] = useState({\r\n        fromTray: '',\r\n        toTray: '',\r\n        sort_agent: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { location } = jwt_decode(token)\r\n                    let res = await axiosMisUser.post(\r\n                        '/getClosedMmtTray/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setMmtTray(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { location } = jwt_decode(token)\r\n                    let res = await axiosMisUser.post(\r\n                        '/getSortingAgentMergeMmt/' + location\r\n                    )\r\n                    if (res.status === 200) {\r\n                        setSortingAgent(res.data.data)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    /* OPEN DIALOG BOX */\r\n    const handelMerge = async (e, trayId, itemsCount) => {\r\n        e.preventDefault()\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { location } = jwt_decode(token)\r\n                let res = await axiosMisUser.post(\r\n                    '/toMmtTrayForMerge/' +\r\n                        trayId +\r\n                        '/' +\r\n                        location +\r\n                        '/' +\r\n                        itemsCount\r\n                )\r\n                if (res.status === 200) {\r\n                    setOpen(true)\r\n                    setToMmtTray(res.data.data)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n                setMergeData((p) => ({ ...p, fromTray: trayId }))\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /* REQUEST SEND TO WAREHOUSE */\r\n    const handelSendRequest = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let res = await axiosMisUser.post(\r\n                '/TrayMergeRequestSend',\r\n                mergreData\r\n            )\r\n            if (res.status === 200) {\r\n                alert(res.data.message)\r\n                handleClose()\r\n                setIsAlive((isAlive) => !isAlive)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/mis/merge/mmt/view-item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code', // field name in the row object\r\n            label: 'Tray Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta?.rowData[2],\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_wharehouse',\r\n            label: 'Closed Time Warehouse',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    handelViewTray(e, value)\r\n                                }}\r\n                                style={{ backgroundColor: 'primery' }}\r\n                            >\r\n                                View\r\n                            </Button>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    handelMerge(\r\n                                        e,\r\n                                        value,\r\n                                        tableMeta?.rowData[3].length\r\n                                    )\r\n                                }}\r\n                                style={{ backgroundColor: 'primery' }}\r\n                            >\r\n                                Merge\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Tray Merge\r\n                </BootstrapDialogTitle>\r\n\r\n                <DialogContent dividers>\r\n                    <FormControl fullWidth>\r\n                        <InputLabel\r\n                            sx={{ pt: 2 }}\r\n                            id=\"demo-simple-select-label\"\r\n                        >\r\n                            To MMT Tray\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            label=\"Cpc\"\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        >\r\n                            {toMmtTray.map((data) => (\r\n                                <MenuItem\r\n                                    onClick={(e) => {\r\n                                        setMergeData((p) => ({\r\n                                            ...p,\r\n                                            toTray: data.code,\r\n                                        }))\r\n                                    }}\r\n                                    value={data.code}\r\n                                >\r\n                                    {data.code} - ({data.items.length})\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl fullWidth>\r\n                        <InputLabel\r\n                            sx={{ pt: 2 }}\r\n                            id=\"demo-simple-select-label\"\r\n                        >\r\n                            Sorting Agent\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            label=\"Cpc\"\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        >\r\n                            {sortingAgent.map((data) => (\r\n                                <MenuItem\r\n                                    onClick={(e) => {\r\n                                        setMergeData((p) => ({\r\n                                            ...p,\r\n                                            sort_agent: data.user_name,\r\n                                        }))\r\n                                    }}\r\n                                    value={data.user_name}\r\n                                >\r\n                                    {data.user_name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            mergreData.sort_agent === '' ||\r\n                            mergreData.toTray === ''\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelSendRequest(e)\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Merge', path: '/' },\r\n                        { name: 'MMT' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Mmt Tray'}\r\n                data={mmtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Merge\\Wht-merge\\wht-tray.jsx",["3987","3988","3989","3990"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    DialogTitle,\r\n    IconButton,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn, axiosMisUser } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [userList, setUserList] = useState([])\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const [sortingAgent, setSortingAgent] = useState([])\r\n    const [toWhtTray, setToWhatTray] = useState([])\r\n    const [open, setOpen] = useState(false)\r\n    const [mergreData, setMergeData] = useState({\r\n        fromTray: '',\r\n        toTray: '',\r\n        sort_agent: '',\r\n    })\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'wht-merge/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { location } = jwt_decode(token)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post(\r\n                        '/getSortingAgentMergeMmt/' + location\r\n                    )\r\n                    if (res.status === 200) {\r\n                        setSortingAgent(res.data.data)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                }\r\n                fetchData()\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [isAlive])\r\n\r\n    /* OPEN DIALOG BOX */\r\n    const handelMerge = async (e, model, brand, trayId, itemCount, status) => {\r\n        e.preventDefault()\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { location } = jwt_decode(token)\r\n                let obj = {\r\n                    location: location,\r\n                    model: model,\r\n                    brand: brand,\r\n                    fromTray: trayId,\r\n                    itemCount: itemCount,\r\n                    status: status,\r\n                }\r\n\r\n                let res = await axiosMisUser.post('/toWhtTrayForMerge', obj)\r\n                if (res.status === 200) {\r\n                    setOpen(true)\r\n                    setToWhatTray(res.data.data)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n                setMergeData((p) => ({ ...p, fromTray: trayId }))\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    /******************************************************************************* */\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n    /* REQUEST SEND TO WAREHOUSE */\r\n    const handelSendRequest = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let res = await axiosMisUser.post(\r\n                '/TrayMergeRequestSend',\r\n                mergreData\r\n            )\r\n            if (res.status === 200) {\r\n                alert(res.data.message)\r\n                handleClose()\r\n                setIsAlive((isAlive) => !isAlive)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code', // field name in the row object\r\n            label: 'Tray Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code', // field name in the row object\r\n            label: 'Tray Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Display Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta?.rowData[5],\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    handelViewTray(e, value)\r\n                                }}\r\n                                style={{ backgroundColor: 'primery' }}\r\n                            >\r\n                                View\r\n                            </Button>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    handelMerge(\r\n                                        e,\r\n                                        tableMeta.rowData[10],\r\n                                        tableMeta.rowData[9],\r\n                                        value,\r\n                                        tableMeta.rowData[6]?.length,\r\n                                        tableMeta.rowData[11]\r\n                                    )\r\n                                }}\r\n                                style={{ backgroundColor: 'primery' }}\r\n                            >\r\n                                Merge\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Tray Merge\r\n                </BootstrapDialogTitle>\r\n\r\n                <DialogContent dividers>\r\n                    <FormControl fullWidth>\r\n                        <InputLabel\r\n                            sx={{ pt: 2 }}\r\n                            id=\"demo-simple-select-label\"\r\n                        >\r\n                            To WHT Tray\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            label=\"Cpc\"\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        >\r\n                            {toWhtTray.map((data) => (\r\n                                <MenuItem\r\n                                    onClick={(e) => {\r\n                                        setMergeData((p) => ({\r\n                                            ...p,\r\n                                            toTray: data.code,\r\n                                        }))\r\n                                    }}\r\n                                    value={data.code}\r\n                                >\r\n                                    {data.code} - ({data.items.length})\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl fullWidth>\r\n                        <InputLabel\r\n                            sx={{ pt: 2 }}\r\n                            id=\"demo-simple-select-label\"\r\n                        >\r\n                            Sorting Agent\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            label=\"Cpc\"\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        >\r\n                            {sortingAgent.map((data) => (\r\n                                <MenuItem\r\n                                    onClick={(e) => {\r\n                                        setMergeData((p) => ({\r\n                                            ...p,\r\n                                            sort_agent: data.user_name,\r\n                                        }))\r\n                                    }}\r\n                                    value={data.user_name}\r\n                                >\r\n                                    {data.user_name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            mergreData.sort_agent === '' ||\r\n                            mergreData.toTray === ''\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelSendRequest(e)\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Merge', path: '/' },\r\n                        { name: 'Wht' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                // onClick={() => setShouldOpenEditorDialog(true)}\r\n            >\r\n                Assign\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'Wht Tray'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Order\\bulk-import-order.jsx",["3991","3992","3993","3994","3995","3996","3997","3998","3999","4000","4001","4002","4003","4004","4005","4006","4007","4008","4009","4010","4011","4012","4013","4014","4015","4016","4017","4018","4019","4020","4021","4022","4023","4024","4025","4026","4027","4028","4029","4030","4031","4032","4033","4034","4035","4036","4037","4038","4039","4040","4041","4042","4043","4044","4045","4046","4047","4048","4049","4050","4051","4052","4053","4054","4055","4056","4057","4058","4059","4060","4061","4062","4063","4064","4065","4066","4067","4068","4069","4070","4071","4072","4073","4074","4075","4076","4077","4078","4079","4080","4081","4082","4083","4084","4085","4086","4087","4088","4089","4090","4091","4092","4093","4094","4095","4096","4097","4098","4099","4100","4101","4102","4103","4104","4105","4106","4107","4108","4109","4110","4111","4112","4113","4114","4115","4116","4117","4118","4119","4120","4121","4122","4123","4124","4125","4126","4127","4128","4129","4130","4131","4132","4133","4134","4135","4136","4137","4138","4139","4140","4141","4142","4143","4144"],"import {\r\n    IconButton,\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Icon,\r\n    Card,\r\n    Button,\r\n    TextField,\r\n} from '@mui/material'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport DoneIcon from '@mui/icons-material/Done'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\nimport jwt_decode from 'jwt-decode'\r\nimport * as XLSX from 'xlsx'\r\nimport { axiosMisUser } from '../../../../axios'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst StyledLoading = styled('div')(() => ({\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    '& img': {\r\n        width: 'auto',\r\n        height: '25px',\r\n    },\r\n    '& .circleProgress': {\r\n        position: 'absolute',\r\n        left: -7,\r\n        right: 0,\r\n        top: 'calc(50% - 25px)',\r\n    },\r\n}))\r\n\r\nconst ProductTable = styled(Table)(() => ({\r\n    minWidth: 750,\r\n    width: 7000,\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& th:first-of-type': {\r\n            paddingLeft: 16,\r\n        },\r\n    },\r\n    '& td': {\r\n        borderBottom: 'none',\r\n    },\r\n    '& td:first-of-type': {\r\n        paddingLeft: '16px !important',\r\n    },\r\n}))\r\n\r\nconst PaginationTable = () => {\r\n    const [validate, setValidate] = useState(false)\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [item, setItem] = useState([])\r\n    const [err, setErr] = useState({})\r\n    const [exFile, setExfile] = useState(null)\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n        item: [],\r\n        totalPage: 0,\r\n    })\r\n\r\n    useEffect(() => {\r\n        setItem((_) =>\r\n            pagination.item\r\n                .slice(\r\n                    (pagination.page - 1) * pagination.size,\r\n                    pagination.page * pagination.size\r\n                )\r\n                .map((d, index) => {\r\n                    d.id = (pagination.page - 1) * pagination.size + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [pagination.page, pagination.item])\r\n\r\n    const importExcel = (e) => {\r\n        if (exFile == null) {\r\n            alert('Please Select File')\r\n        } else {\r\n            setLoading(true)\r\n            readExcel(exFile)\r\n        }\r\n    }\r\n    const readExcel = async (file) => {\r\n        const promise = new Promise((resolve, reject) => {\r\n            const filReader = new FileReader()\r\n            filReader.readAsArrayBuffer(file)\r\n            filReader.onload = (e) => {\r\n                const bufferArray = e.target.result\r\n                const wb = XLSX.read(bufferArray, { cellDates: true })\r\n                const wsname = wb.SheetNames[0]\r\n                const ws = wb.Sheets[wsname]\r\n                const data = XLSX.utils.sheet_to_json(ws, { raw: false })\r\n                resolve(data)\r\n            }\r\n            filReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n        const data = await promise\r\n        setPagination((p) => ({\r\n            ...p,\r\n            page: 1,\r\n            item: data.map((d, index) => toLowerKeys(d, index)),\r\n            totalPage: Math.ceil(data.length / p.size),\r\n        }))\r\n        setLoading(false)\r\n    }\r\n    function toLowerKeys(obj, id) {\r\n        return Object.keys(obj).reduce((accumulator, key) => {\r\n            accumulator.created_at = Date.now()\r\n            accumulator[key.toLowerCase()?.split(' ').join('_')] = obj[key]\r\n            accumulator.delet_id = id\r\n            return accumulator\r\n        }, {})\r\n    }\r\n    // Validate the data\r\n    const handelValidate = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                let obj = {\r\n                    item: pagination.item,\r\n                    location: location,\r\n                }\r\n                let res = await axiosMisUser.post('/bulkOrdersValidation', obj)\r\n                if (res.status == 200) {\r\n                    setValidate(true)\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                } else {\r\n                    setErr(res.data.data)\r\n                    setValidate(true)\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    // handelSubmit\r\n    const handelSubmit = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                validItem: [],\r\n                invalidItem: [],\r\n            }\r\n            pagination.item.forEach((data) => {\r\n                data.reason = []\r\n                data.order_date = new Date(data.order_date)\r\n                data.order_timestamp = new Date(data.order_timestamp)\r\n                data.delivery_date = new Date(data.gc_redeem_time)\r\n                data.gc_redeem_time = new Date(data.gc_redeem_time)\r\n                if (\r\n                    err?.order_id_is_duplicate?.includes(data?.order_id) ||\r\n                    data?.order_id == undefined ||\r\n                    data?.order_id == ''\r\n                ) {\r\n                    data.reason.push('Duplicate order id or order id is empty')\r\n                }\r\n                if (err?.tracking_id?.includes(data?.tracking_id)) {\r\n                    data.reason.push('Tracking Id Must Be 12 Digits')\r\n                }\r\n                if (\r\n                    err?.partner_id_does_not_exist?.includes(\r\n                        data?.partner_id\r\n                    ) ||\r\n                    data?.partner_id == undefined ||\r\n                    data?.partner_id == ''\r\n                ) {\r\n                    data.reason.push('Partner id does not exists')\r\n                }\r\n                if (\r\n                    err?.partner_id_does_not_exist?.includes(\r\n                        data?.partner_shop\r\n                    ) ||\r\n                    data?.partner_shop == undefined ||\r\n                    data?.partner_shop == ''\r\n                ) {\r\n                    data.reason.push('Partner shop does not exists')\r\n                }\r\n                if (\r\n                    err?.item_id_does_not_exist?.includes(data.item_id) ||\r\n                    data?.item_id == undefined ||\r\n                    data?.item_id == ''\r\n                ) {\r\n                    data.reason.push('Item id does not exists')\r\n                }\r\n                if (\r\n                    err?.brand_name_does_not_exist?.includes(\r\n                        data?.old_item_details?.split(':')?.[0]\r\n                    ) ||\r\n                    data?.old_item_details?.split(':')?.[0] == undefined ||\r\n                    data?.old_item_details?.split(':')?.[0] == ''\r\n                ) {\r\n                    data.reason.push('Brand name does not exists')\r\n                }\r\n                if (\r\n                    err?.model_name_does_not_exist?.includes(\r\n                        data?.old_item_details?.split(':')?.[1]\r\n                    ) ||\r\n                    data?.old_item_details?.split(':')?.[1] == undefined ||\r\n                    data?.old_item_details?.split(':')?.[1] == ''\r\n                ) {\r\n                    data.reason.push('Model name does not exists')\r\n                }\r\n                if (\r\n                    err?.imei_number_is_duplicate?.some(\r\n                        (d) =>\r\n                            d.imei == data['imei'] &&\r\n                            d.status == data.order_status\r\n                    ) ||\r\n                    data?.imei == undefined ||\r\n                    data.imei == ''\r\n                ) {\r\n                    data.reason.push(\r\n                        'Duplicate IMEI number or imei number number is empty'\r\n                    )\r\n                }\r\n                if (data.order_status !== 'NEW') {\r\n                    data.reason.push('Not a NEW Order')\r\n                }\r\n\r\n                if (data.order_status == 'NEW') {\r\n                    if (\r\n                        err?.order_id_is_duplicate?.includes(data?.order_id) ||\r\n                        data?.order_id == undefined ||\r\n                        data?.order_id == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (err?.tracking_id?.includes(data?.tracking_id)) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (\r\n                        err?.partner_id_does_not_exist?.includes(\r\n                            data?.partner_id\r\n                        ) ||\r\n                        data?.partner_id == undefined ||\r\n                        data?.partner_id == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (\r\n                        err?.partner_id_does_not_exist?.includes(\r\n                            data?.partner_shop\r\n                        ) ||\r\n                        data?.partner_shop == undefined ||\r\n                        data?.partner_shop == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (\r\n                        err?.item_id_does_not_exist?.includes(data.item_id) ||\r\n                        data?.item_id == undefined ||\r\n                        data?.item_id == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (\r\n                        err?.brand_name_does_not_exist?.includes(\r\n                            data?.old_item_details?.split(':')?.[0]\r\n                        ) ||\r\n                        data?.old_item_details?.split(':')?.[0] == undefined ||\r\n                        data?.old_item_details?.split(':')?.[0] == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (\r\n                        err?.brand_name_does_not_exist?.includes(\r\n                            data?.old_item_details?.split(':')?.[1]\r\n                        ) ||\r\n                        data?.old_item_details?.split(':')?.[1] == undefined ||\r\n                        data?.old_item_details?.split(':')?.[1] == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else if (\r\n                        err?.imei_number_is_duplicate?.some(\r\n                            (d) =>\r\n                                d.imei == data['imei'] &&\r\n                                d.status == data.order_status\r\n                        ) ||\r\n                        data?.imei == undefined ||\r\n                        data.imei == ''\r\n                    ) {\r\n                        obj.invalidItem.push(data)\r\n                    } else {\r\n                        obj.validItem.push(data)\r\n                    }\r\n                } else {\r\n                    obj.invalidItem.push(data)\r\n                }\r\n            })\r\n            let res = await axiosMisUser.post('/ordersImport', obj)\r\n            if (res.status == 200) {\r\n                alert('Successfully Added')\r\n                setLoading(false)\r\n                navigate('/mis/orders')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    // ----------------------------------------------------------------------------------------------------------------------------\r\n    const updateFieldChanged = (delet_id) => (e) => {\r\n        setValidate(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.map((data, i) => {\r\n                if (data.delet_id === delet_id) {\r\n                    return { ...data, [e.target.name]: e.target.value }\r\n                } else {\r\n                    return data\r\n                }\r\n            }),\r\n        }))\r\n    }\r\n    // DATA DELETE FROM ARRAY\r\n    const handelDelete = (delet_id) => {\r\n        setValidate(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.filter((item) => item.delet_id != delet_id),\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Order', path: '/' },\r\n                        { name: 'Bulk Order', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Bulk Order\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <h4>Upload file</h4>\r\n\r\n                    <Box>\r\n                        <Button\r\n                            sx={{ mb: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => navigate('/mis/orders')}\r\n                        >\r\n                            Back to list\r\n                        </Button>\r\n                        <Button\r\n                            sx={{ mb: 2, ml: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={\r\n                                process.env.PUBLIC_URL +\r\n                                '/bulk-order-sheet-sample.xlsx'\r\n                            }\r\n                            download\r\n                        >\r\n                            Download Sample Sheet\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        mb: 5,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        size=\"small\"\r\n                        onChange={(e) => {\r\n                            setExfile(e.target.files[0])\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        type=\"file\"\r\n                    />\r\n                    {item.length == 0 ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            onClick={(e) => {\r\n                                importExcel(e)\r\n                            }}\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    ) : validate ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelSubmit(e)\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelValidate(e)\r\n                            }}\r\n                        >\r\n                            Validate Data\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                <>\r\n                    {item.length != 0 && loading !== true ? (\r\n                        <>\r\n                            <Box\r\n                                sx={{ maxHeight: '100%', overflow: 'auto' }}\r\n                                elevation={6}\r\n                            >\r\n                                <ProductTable>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>S.NO</TableCell>\r\n                                            <TableCell>Order ID</TableCell>\r\n                                            <TableCell>Order Date</TableCell>\r\n                                            <TableCell>\r\n                                                Order TimeStamp\r\n                                            </TableCell>\r\n                                            <TableCell>Order Status</TableCell>\r\n                                            <TableCell>\r\n                                                Buyback Category\r\n                                            </TableCell>\r\n                                            <TableCell>Partner ID</TableCell>\r\n                                            <TableCell>Partner Email</TableCell>\r\n                                            <TableCell>Partner Shop</TableCell>\r\n                                            <TableCell>Item ID</TableCell>\r\n                                            <TableCell>\r\n                                                Old Item Details\r\n                                            </TableCell>\r\n                                            <TableCell>IMEI</TableCell>\r\n                                            <TableCell>GEP Order</TableCell>\r\n                                            <TableCell>\r\n                                                Base Disscount\r\n                                            </TableCell>\r\n                                            <TableCell>Diganostic</TableCell>\r\n                                            <TableCell>\r\n                                                Partner Purchase Price\r\n                                            </TableCell>\r\n                                            <TableCell>Tracking ID</TableCell>\r\n                                            <TableCell>Delivery Date</TableCell>\r\n                                            <TableCell>\r\n                                                Order ID Replaced\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Deliverd With OTP\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Deliverd With Bag Exception\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                GC Amount Redeemed\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                GC Amount Refund\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                GC Redeem Time\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                GC Amount Refund Time\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Diagonstic Status\r\n                                            </TableCell>\r\n                                            <TableCell>VC Eligible</TableCell>\r\n                                            <TableCell>\r\n                                                Customer Declaration Physical\r\n                                                Defect Present\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Customer Declaration Physical\r\n                                                Defect Type\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Partner Price No Defect\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Revised Partner Price\r\n                                            </TableCell>\r\n                                            <TableCell>Delivery Fee</TableCell>\r\n                                            <TableCell>\r\n                                                Exchange Facilitation Fee\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {item.map((data, index) => (\r\n                                            <TableRow key={data.id}>\r\n                                                <TableCell scope=\"row\">\r\n                                                    {data.id}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"order_id\"\r\n                                                        value={data.order_id}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.order_id_is_duplicate?.includes(\r\n                                                        data['order_id']\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['order_id'] ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['order_id'] ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {err?.order_id_is_duplicate?.includes(\r\n                                                        data['order_id']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Order Id Is\r\n                                                            Duplicate\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['order_id'] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['order_id'] ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Order Does Not Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"order_date\"\r\n                                                        value={data.order_date}\r\n                                                    />\r\n                                                    {err?.order_date?.includes(\r\n                                                        data['order_date']\r\n                                                    ) ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.order_date?.includes(\r\n                                                        data['order_date']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Please check date\r\n                                                            formate\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"order_timestamp\"\r\n                                                        value={\r\n                                                            data.order_timestamp\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.order_timestamp?.includes(\r\n                                                        data['order_timestamp']\r\n                                                    ) ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.order_timestamp?.includes(\r\n                                                        data['order_timestamp']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Please check date\r\n                                                            formate\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"order_status\"\r\n                                                        value={\r\n                                                            data.order_status\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                    data.order_status !==\r\n                                                        'NEW' ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                    data.order_status !==\r\n                                                        'NEW' ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Not a new order\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"buyback_category\"\r\n                                                        value={\r\n                                                            data.buyback_category\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {' '}\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"partner_id\"\r\n                                                        value={data.partner_id}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.partner_id_does_not_exist?.includes(\r\n                                                        data['partner_id']\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_id'] ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_id'] ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.partner_id_does_not_exist?.includes(\r\n                                                        data['partner_id']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Partner Id Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['partner_id'] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['partner_id'] ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Partner Id Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"partner_email\"\r\n                                                        value={\r\n                                                            data.partner_email\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"partner_shop\"\r\n                                                        value={\r\n                                                            data.partner_shop\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.location_does_not_exist?.includes(\r\n                                                        data['partner_shop']\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_shop'] ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_shop'] ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {err?.location_does_not_exist?.includes(\r\n                                                        data['partner_shop']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            You can't add this\r\n                                                            data\r\n                                                        </p>\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                      data['partner_shop'] ==\r\n                                                          undefined ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Location Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"item_id\"\r\n                                                        value={data.item_id}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.item_id_does_not_exist?.includes(\r\n                                                        data['item_id']\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['item_id'] ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['item_id'] ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.item_id_does_not_exist?.includes(\r\n                                                        data['item_id']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Item Id Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['item_id'] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['item_id'] ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Item Id Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"old_item_details\"\r\n                                                        value={\r\n                                                            data[\r\n                                                                'old_item_details'\r\n                                                            ]\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.brand_name_does_not_exist?.includes(\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0]\r\n                                                    ) ||\r\n                                                    err?.model_name_does_not_exist?.includes(\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[1]\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0] ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0] ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : err?.model_name_does_not_exist?.includes(\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[1]\r\n                                                      ) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[1] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[1] ==\r\n                                                              '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.brand_name_does_not_exist?.includes(\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0]\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            This Brand Name Does\r\n                                                            Not Exist\r\n                                                        </p>\r\n                                                    ) : err?.model_name_does_not_exist?.includes(\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[1]\r\n                                                      ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Model Name Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[0] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[0] ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            This Brand Name Does\r\n                                                            Not Exist\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[1] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data[\r\n                                                              'old_item_details'\r\n                                                          ]?.split(':')[1] ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Model Name Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {' '}\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"imei\"\r\n                                                        value={data.imei}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.imei_number_is_duplicate?.some(\r\n                                                        (d) =>\r\n                                                            d.imei ==\r\n                                                                data['imei'] &&\r\n                                                            d.status ==\r\n                                                                data.order_status\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['imei'] ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['imei'] == '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.imei_number_is_duplicate?.some(\r\n                                                        (d) =>\r\n                                                            d.imei ==\r\n                                                                data['imei'] &&\r\n                                                            d.status ==\r\n                                                                data.order_status\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            IMEI Number Is\r\n                                                            Duplicate\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['imei'] ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data['imei'] ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            IMEI Number Does Not\r\n                                                            Exist{' '}\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {' '}\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"gep_order\"\r\n                                                        value={data.gep_order}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"base_discount\"\r\n                                                        value={\r\n                                                            data[\r\n                                                                'base_discount'\r\n                                                            ]\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"diagnostic\"\r\n                                                        value={data.diagnostic}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"partner_purchase_price\"\r\n                                                        value={\r\n                                                            data.partner_purchase_price\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"tracking_id\"\r\n                                                        value={data.tracking_id}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.tracking_id?.includes(\r\n                                                        data['tracking_id']\r\n                                                    ) ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n\r\n                                                    {err?.tracking_id?.includes(\r\n                                                        data['tracking_id']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Tracking Id Must Be\r\n                                                            12 Digits\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        name=\"delivery_date\"\r\n                                                        value={\r\n                                                            data.delivery_date\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.delivery_date?.includes(\r\n                                                        data['delivery_date']\r\n                                                    ) ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.delivery_date?.includes(\r\n                                                        data['delivery_date']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Please check date\r\n                                                            formate\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"order_id_replaced\"\r\n                                                        value={\r\n                                                            data.order_id_replaced\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"deliverd_with_otp\"\r\n                                                        value={\r\n                                                            data.deliverd_with_otp\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"deliverd_with_bag_exception\"\r\n                                                        value={\r\n                                                            data.deliverd_with_bag_exception\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"gc_amount_redeemed\"\r\n                                                        value={\r\n                                                            data.gc_amount_redeemed\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"gc_amount_refund\"\r\n                                                        value={\r\n                                                            data.gc_amount_refund\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"gc_redeem_time\"\r\n                                                        value={\r\n                                                            data.gc_redeem_time\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.gc_redeem_time?.includes(\r\n                                                        data['gc_redeem_time']\r\n                                                    ) ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.gc_redeem_time?.includes(\r\n                                                        data['gc_redeem_time']\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Please check date\r\n                                                            formate\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"gc_amount_refund_time\"\r\n                                                        value={\r\n                                                            data.gc_amount_refund_time\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"diagnstic_status\"\r\n                                                        value={\r\n                                                            data.diagnstic_status\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"vc_eligible\"\r\n                                                        value={data.vc_eligible}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"customer_declaration_physical_defect_present\"\r\n                                                        value={\r\n                                                            data.customer_declaration_physical_defect_present\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"customer_declaration_physical_defect_type\"\r\n                                                        value={\r\n                                                            data.customer_declaration_physical_defect_type\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"partner_price_no_defect\"\r\n                                                        value={\r\n                                                            data.partner_price_no_defect\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"revised_partner_price\"\r\n                                                        value={\r\n                                                            data.revised_partner_price\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"delivery_fee\"\r\n                                                        value={\r\n                                                            data.delivery_fee\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        name=\"exchange_facilitation_fee\"\r\n                                                        value={\r\n                                                            data.exchange_facilitation_fee\r\n                                                        }\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {(Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.order_status !==\r\n                                                            'NEW') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_id'] ==\r\n                                                            '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['order_id'] ==\r\n                                                            '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_shop'] ==\r\n                                                            '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['item_id'] ==\r\n                                                            '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0] ==\r\n                                                            '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[1] ==\r\n                                                            '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['imei'] == '') ||\r\n                                                    err?.order_date?.includes(\r\n                                                        data['order_date']\r\n                                                    ) ||\r\n                                                    err?.order_timestamp?.includes(\r\n                                                        data['order_timestamp']\r\n                                                    ) ||\r\n                                                    err?.delivery_date?.includes(\r\n                                                        data['delivery_date']\r\n                                                    ) ||\r\n                                                    err?.gc_redeem_time?.includes(\r\n                                                        data['gc_redeem_time']\r\n                                                    ) ||\r\n                                                    err?.order_id_is_duplicate?.includes(\r\n                                                        data['order_id']\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['order_id'] ==\r\n                                                            undefined) ||\r\n                                                    err?.partner_id_does_not_exist?.includes(\r\n                                                        data['partner_id']\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_id'] ==\r\n                                                            undefined) ||\r\n                                                    err?.location_does_not_exist?.includes(\r\n                                                        data['partner_shop']\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['partner_shop'] ==\r\n                                                            undefined) ||\r\n                                                    err?.item_id_does_not_exist?.includes(\r\n                                                        data['item_id']\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['item_id'] ==\r\n                                                            undefined) ||\r\n                                                    err?.brand_name_does_not_exist?.includes(\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0]\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[0] ==\r\n                                                            undefined) ||\r\n                                                    err?.model_name_does_not_exist?.includes(\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[1]\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data[\r\n                                                            'old_item_details'\r\n                                                        ]?.split(':')[1] ==\r\n                                                            undefined) ||\r\n                                                    err?.imei_number_is_duplicate?.some(\r\n                                                        (d) =>\r\n                                                            d.imei ==\r\n                                                                data['imei'] &&\r\n                                                            d.status ==\r\n                                                                data.order_status\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data['imei'] ==\r\n                                                            undefined) ? (\r\n                                                        <Button\r\n                                                            sx={{\r\n                                                                ml: 2,\r\n                                                            }}\r\n                                                            variant=\"contained\"\r\n                                                            style={{\r\n                                                                backgroundColor:\r\n                                                                    'red',\r\n                                                            }}\r\n                                                            component=\"span\"\r\n                                                            onClick={() => {\r\n                                                                if (\r\n                                                                    window.confirm(\r\n                                                                        'You Want to Remove?'\r\n                                                                    )\r\n                                                                ) {\r\n                                                                    handelDelete(\r\n                                                                        data.delet_id\r\n                                                                    )\r\n                                                                }\r\n                                                            }}\r\n                                                        >\r\n                                                            Remove\r\n                                                        </Button>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </ProductTable>\r\n                            </Box>\r\n                            {pagination.item.length != 0 ? (\r\n                                <Box\r\n                                    sx={{\r\n                                        display: 'flex',\r\n                                        justifyContent: 'end',\r\n                                        mt: 1,\r\n                                        mr: 3,\r\n                                        ml: 3,\r\n                                    }}\r\n                                >\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        sx={{ m: 1 }}\r\n                                        disabled={pagination.page === 1}\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) =>\r\n                                            setPagination((p) => ({\r\n                                                ...p,\r\n                                                page: --p.page,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Previous\r\n                                    </Button>\r\n\r\n                                    <h6 style={{ marginTop: '19px' }}>\r\n                                        {pagination.page}/{pagination.totalPage}\r\n                                    </h6>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        sx={{ m: 1 }}\r\n                                        disabled={\r\n                                            pagination.page ===\r\n                                            pagination.totalPage\r\n                                        }\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) =>\r\n                                            setPagination((p) => ({\r\n                                                ...p,\r\n                                                page: ++p.page,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Next\r\n                                    </Button>\r\n                                </Box>\r\n                            ) : null}\r\n                        </>\r\n                    ) : item.length != 0 ? (\r\n                        <StyledLoading>\r\n                            <Box position=\"relative\">\r\n                                <img\r\n                                    src=\"/assets/images/logo-circle.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                <CircularProgress className=\"circleProgress\">\r\n                                    <p>Please Wait...</p>\r\n                                </CircularProgress>\r\n                            </Box>\r\n                        </StyledLoading>\r\n                    ) : null}\r\n                </>\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PaginationTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Delivery\\bulk-import-delivery.jsx",["4145","4146","4147","4148","4149","4150","4151","4152","4153","4154","4155","4156","4157","4158","4159","4160","4161","4162","4163","4164","4165","4166","4167","4168","4169","4170","4171","4172","4173","4174","4175","4176","4177","4178","4179","4180","4181","4182","4183","4184","4185","4186","4187","4188","4189","4190","4191","4192","4193","4194","4195","4196","4197","4198","4199","4200","4201","4202","4203","4204","4205","4206","4207","4208","4209","4210","4211","4212","4213","4214","4215","4216","4217","4218","4219","4220","4221","4222","4223","4224","4225","4226","4227","4228","4229","4230"],"import {\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    TextField,\r\n} from '@mui/material'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport DoneIcon from '@mui/icons-material/Done'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\nimport jwt_decode from 'jwt-decode'\r\nimport * as XLSX from 'xlsx'\r\nimport { axiosMisUser } from '../../../../axios'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport moment from 'moment'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst StyledLoading = styled('div')(() => ({\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    '& img': {\r\n        width: 'auto',\r\n        height: '25px',\r\n    },\r\n    '& .circleProgress': {\r\n        position: 'absolute',\r\n        left: -7,\r\n        right: 0,\r\n        top: 'calc(50% - 25px)',\r\n    },\r\n}))\r\n\r\nconst ProductTable = styled(Table)(() => ({\r\n    minWidth: 750,\r\n    width: 3000,\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& th:first-of-type': {\r\n            paddingLeft: 16,\r\n        },\r\n    },\r\n    '& td': {\r\n        borderBottom: 'none',\r\n    },\r\n    '& td:first-of-type': {\r\n        paddingLeft: '16px !important',\r\n    },\r\n}))\r\n\r\nconst PaginationTable = () => {\r\n    const navigate = useNavigate()\r\n    const [validate, setValidate] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [deliveryData, setDeliveryDate] = useState('')\r\n    const [err, setErr] = useState({})\r\n    const [item, setItem] = useState([])\r\n    const [exFile, setExfile] = useState(null)\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n        item: [],\r\n        totalPage: 0,\r\n    })\r\n\r\n    const importExcel = () => {\r\n        if (exFile == null) {\r\n            alert('Please Select File')\r\n        } else {\r\n            setLoading(true)\r\n            readExcel(exFile)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setItem((_) =>\r\n            pagination.item\r\n                .slice(\r\n                    (pagination.page - 1) * pagination.size,\r\n                    pagination.page * pagination.size\r\n                )\r\n                .map((d, index) => {\r\n                    d.id = (pagination.page - 1) * pagination.size + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [pagination.page, pagination.item])\r\n    const readExcel = async (file) => {\r\n        let aa = file\r\n        const promise = new Promise((resolve, reject) => {\r\n            const filReader = new FileReader()\r\n            filReader.readAsArrayBuffer(file)\r\n            filReader.onload = (e) => {\r\n                const bufferArray = e.target.result\r\n                const wb = XLSX.read(bufferArray, {\r\n                    cellDates: true,\r\n                })\r\n                const wsname = wb.SheetNames[0]\r\n                const ws = wb.Sheets[wsname]\r\n                const data = XLSX.utils.sheet_to_json(ws, { raw: false })\r\n                resolve(data)\r\n            }\r\n            filReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n        const data = await promise\r\n        setPagination((p) => ({\r\n            ...p,\r\n            page: 1,\r\n            item: data.map((d, index) => toLowerKeys(d, index)),\r\n            totalPage: Math.ceil(data.length / p.size),\r\n        }))\r\n        setLoading(false)\r\n    }\r\n    function toLowerKeys(obj, id) {\r\n        return Object.keys(obj).reduce((accumulator, key) => {\r\n            accumulator.created_at = Date.now()\r\n            accumulator[key.toLowerCase().split(' ').join('_')] = obj[key]\r\n            accumulator.delet_id = id\r\n            return accumulator\r\n        }, {})\r\n    }\r\n\r\n    const handelSubmit = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                validItem: [],\r\n                invalidItem: [],\r\n            }\r\n            pagination.item.forEach((data) => {\r\n                data.delivery_date = deliveryData\r\n\r\n                data.reason = []\r\n                if (data?.base_discount !== undefined) {\r\n                    data.base_discount = data.base_discount.toString()\r\n                }\r\n                if(data?.partner_purchase_price !== undefined){\r\n                    data.partner_purchase_price = data.partner_purchase_price.toString() \r\n                }\r\n                if(data?.diagnostics_discount !== undefined){\r\n                    data.diagnostics_discount=data.diagnostics_discount.toString()\r\n                }\r\n                if(data?.storage_discount !== undefined){\r\n                    data.storage_discount =data.storage_discount.toString() \r\n                }\r\n\r\n                if (\r\n                    err?.delivery_date?.includes(data?.order_date) ||\r\n                    data?.order_date == undefined ||\r\n                    data?.order_date == ''\r\n                ) {\r\n                    data.reason.push('Order date does not exists')\r\n                }\r\n                if (\r\n                    err?.duplicate_tracking_id?.includes(data?.tracking_id) ||\r\n                    data?.tracking_id == undefined ||\r\n                    data?.tracking_id == ''\r\n                ) {\r\n                    data.reason.push(\r\n                        'Tracking id is empty or duplicate tracking id'\r\n                    )\r\n                }\r\n                if (err?.tracking_id_digit?.includes(data?.tracking_id)) {\r\n                    data.reason.push('Tracking Id Must Be 12 Digits')\r\n                }\r\n                if (\r\n                    err?.duplicate_order_id_found?.includes(data?.order_id) ||\r\n                    data?.order_id == undefined ||\r\n                    data?.order_id == ''\r\n                ) {\r\n                    data.reason.push('Duplicate order id or order id is empty')\r\n                }\r\n                if (err?.no_orders?.includes(data?.order_id)) {\r\n                    data.reason.push('Order not found')\r\n                }\r\n                if (\r\n                    err?.item_does_not_exist?.includes(data?.item_id) ||\r\n                    data?.item_id == undefined ||\r\n                    data?.item_id == ''\r\n                ) {\r\n                    data.reason.push('Item does not exitsts')\r\n                }\r\n                if (\r\n                    err?.location_does_not_exist?.includes(\r\n                        data?.partner_shop\r\n                    ) ||\r\n                    data?.partner_shop == undefined ||\r\n                    data?.partner_shop == ''\r\n                ) {\r\n                    data.reason.push('Partner shop does not exitsts')\r\n                }\r\n\r\n                if (\r\n                    err?.delivery_date?.includes(data?.order_date) ||\r\n                    data?.order_date == undefined ||\r\n                    data?.order_date == ''\r\n                ) {\r\n                    obj.invalidItem.push(data)\r\n                } else if (\r\n                    err?.duplicate_tracking_id?.includes(data?.tracking_id) ||\r\n                    data?.tracking_id == undefined ||\r\n                    data?.tracking_id == ''\r\n                ) {\r\n                    obj.invalidItem.push(data)\r\n                } else if (\r\n                    err?.tracking_id_digit?.includes(data?.tracking_id)\r\n                ) {\r\n                    obj.invalidItem.push(data)\r\n                } else if (\r\n                    err?.duplicate_order_id_found?.includes(data?.order_id) ||\r\n                    data?.order_id == undefined ||\r\n                    data?.order_id == ''\r\n                ) {\r\n                    obj.invalidItem.push(data)\r\n                } else if (err?.no_orders?.includes(data?.order_id)) {\r\n                    obj.invalidItem.push(data)\r\n                } else if (\r\n                    err?.item_does_not_exist?.includes(data?.item_id) ||\r\n                    data?.item_id == undefined ||\r\n                    data?.item_id == ''\r\n                ) {\r\n                    obj.invalidItem.push(data)\r\n                } else if (\r\n                    err?.location_does_not_exist?.includes(\r\n                        data?.partner_shop\r\n                    ) ||\r\n                    data?.partner_shop == undefined ||\r\n                    data?.partner_shop == ''\r\n                ) {\r\n                    obj.invalidItem.push(data)\r\n                } else {\r\n                    obj.validItem.push(data)\r\n                }\r\n            })\r\n\r\n            let res = await axiosMisUser.post('/importDelivery', obj)\r\n            if (res.status == 200) {\r\n                alert(res.data.message)\r\n                setLoading(false)\r\n                navigate('/mis/delivery')\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelValidate = async () => {\r\n        try {\r\n            if (deliveryData == '') {\r\n                alert('Please Select The Date')\r\n            } else {\r\n                setLoading(true)\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let obj = {\r\n                        item: pagination.item,\r\n                        location: location,\r\n                    }\r\n\r\n                    let res = await axiosMisUser.post(\r\n                        '/bulkValidationDelivery',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        setLoading(false)\r\n                        setValidate(true)\r\n                    } else {\r\n                        setErr(res.data.data)\r\n                        alert('Please Check Errors')\r\n                        setLoading(false)\r\n                        setValidate(true)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    // ----------------------------------------------------------------------------------------------------------------------------\r\n    const updateFieldChanged = (delet_id) => (e) => {\r\n        setValidate(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.map((data, i) => {\r\n                if (data.delet_id === delet_id) {\r\n                    return { ...data, [e.target.name]: e.target.value }\r\n                } else {\r\n                    return data\r\n                }\r\n            }),\r\n        }))\r\n    }\r\n    // DATA DELETE FROM ARRAY\r\n    const handelDelete = (delet_id) => {\r\n        setValidate(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.filter((item) => item.delet_id != delet_id),\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Delivery', path: '/' },\r\n                        { name: 'Bulk Delivery', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Bulk Delivery\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <h4>Upload file</h4>\r\n                    <Box>\r\n                        <Button\r\n                            sx={{ mb: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => navigate('/mis/delivery')}\r\n                        >\r\n                            Back to list\r\n                        </Button>\r\n                        <Button\r\n                            sx={{ mb: 2, ml: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={\r\n                                process.env.PUBLIC_URL +\r\n                                '/bulk-delivery-sheet-sample.xlsx'\r\n                            }\r\n                            download\r\n                        >\r\n                            Download Sample Sheet\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        mb: 5,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        size=\"small\"\r\n                        onChange={(e) => {\r\n                            setExfile(e.target.files[0])\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        type=\"file\"\r\n                    />\r\n                    <TextField\r\n                        size=\"small\"\r\n                        sx={{ mt: 2, width: '300px' }}\r\n                        onChange={(e) => {\r\n                            setDeliveryDate(e.target.value)\r\n                        }}\r\n                        inputProps={{\r\n                            max: moment().format('YYYY-MM-DD'),\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        type=\"date\"\r\n                    />\r\n                    {item.length == 0 ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            onClick={(e) => {\r\n                                importExcel(e)\r\n                            }}\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    ) : validate ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelSubmit(e)\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelValidate(e)\r\n                            }}\r\n                        >\r\n                            Validate Data\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                <>\r\n                    {item.length != 0 && loading !== true ? (\r\n                        <>\r\n                            <Box\r\n                                sx={{ maxHeight: '100%', overflow: 'auto' }}\r\n                                elevation={6}\r\n                            >\r\n                                <ProductTable>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>S.NO</TableCell>\r\n                                            <TableCell>Tracking ID</TableCell>\r\n                                            <TableCell>Order ID</TableCell>\r\n                                            <TableCell>Order Date</TableCell>\r\n                                            <TableCell>Item ID</TableCell>\r\n                                            <TableCell>GEP Order</TableCell>\r\n                                            <TableCell>IMEI</TableCell>\r\n                                            <TableCell>\r\n                                                Partner Purchase Price\r\n                                            </TableCell>\r\n                                            <TableCell>Partner Shop</TableCell>\r\n                                            <TableCell>Base Discount</TableCell>\r\n                                            <TableCell>\r\n                                                Diagnostics Discount\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Storage Disscount\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Buyback Category\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                Doorsteps Diagnostics\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {item.map((data, index) => (\r\n                                            <TableRow tabIndex={-1}>\r\n                                                <TableCell>{data.id}</TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"tracking_id\"\r\n                                                        value={data.tracking_id?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.duplicate_tracking_id?.includes(\r\n                                                        data.tracking_id\r\n                                                    ) ||\r\n                                                    err?.tracking_id_digit?.includes(\r\n                                                        data.tracking_id\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.tracking_id ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.tracking_id ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.duplicate_tracking_id?.includes(\r\n                                                        data.tracking_id\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Duplicate Tracking\r\n                                                            ID\r\n                                                        </p>\r\n                                                    ) : err?.tracking_id_digit?.includes(\r\n                                                          data.tracking_id\r\n                                                      ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Tracking Id Must Be\r\n                                                            12 Digits\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data.tracking_id ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data.tracking_id ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Tracking Id Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"order_id\"\r\n                                                        value={data.order_id?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.duplicate_order_id_found?.includes(\r\n                                                        data.order_id\r\n                                                    ) ||\r\n                                                    err?.no_orders?.includes(\r\n                                                        data.order_id\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.order_id ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.order_id == '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.duplicate_order_id_found?.includes(\r\n                                                        data.order_id\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Duplicate Order Id\r\n                                                            Found\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data?.order_id ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data.order_id ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Order Id Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : err?.no_orders?.includes(\r\n                                                          data.order_id\r\n                                                      ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Order not found\r\n                                                        </p>\r\n                                                    ) : null}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"order_date\"\r\n                                                        value={data.order_date?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"item_id\"\r\n                                                        value={data.item_id?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.item_does_not_exist?.includes(\r\n                                                        data.item_id\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.item_id ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.item_id == '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.item_does_not_exist?.includes(\r\n                                                        data.item_id\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Item Does Not Exist\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data?.item_id ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data?.item_id ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Item Does Not Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"gep_order\"\r\n                                                        value={data.gep_order?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"imei\"\r\n                                                        value={data.imei?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"partner_purchase_price\"\r\n                                                        value={data.partner_purchase_price?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"partner_shop\"\r\n                                                        value={data.partner_shop?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                    {err?.location_does_not_exist?.includes(\r\n                                                        data.partner_shop\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.partner_shop ==\r\n                                                            undefined) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.partner_shop ==\r\n                                                            '') ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.location_does_not_exist?.includes(\r\n                                                        data.partner_shop\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            You Can't Add This\r\n                                                            Data\r\n                                                        </p>\r\n                                                    ) : (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data?.partner_shop ==\r\n                                                              undefined) ||\r\n                                                      (Object.keys(err)\r\n                                                          .length != 0 &&\r\n                                                          data?.partner_shop ==\r\n                                                              '') ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            Location Does Not\r\n                                                            Exist\r\n                                                        </p>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"base_discount\"\r\n                                                        value={data.base_discount?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"diagnostics_discount\"\r\n                                                        value={data.diagnostics_discount?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"storage_disscount\"\r\n                                                        value={data.storage_disscount?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"buyback_category\"\r\n                                                        value={data.buyback_category?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <TextField\r\n                                                        onChange={updateFieldChanged(\r\n                                                            data.delet_id\r\n                                                        )}\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        name=\"doorsteps_diagnostics\"\r\n                                                        value={data.doorsteps_diagnostics?.toString()}\r\n                                                        inputProps={{\r\n                                                            style: {\r\n                                                                width: 'auto',\r\n                                                            },\r\n                                                        }}\r\n                                                    />\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {(Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.tracking_id ==\r\n                                                            '') ||\r\n                                                    err?.no_orders?.includes(\r\n                                                        data.order_id\r\n                                                    ) ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.order_id == '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.item_id == '') ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.partner_shop ==\r\n                                                            '') ||\r\n                                                    err?.duplicate_tracking_id?.includes(\r\n                                                        data.tracking_id\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.tracking_id ==\r\n                                                            undefined) ||\r\n                                                    err?.duplicate_order_id_found?.includes(\r\n                                                        data.order_id\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data?.order_id ==\r\n                                                            undefined) ||\r\n                                                    err?.item_does_not_exist?.includes(\r\n                                                        data.item_id\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.item_id ==\r\n                                                            undefined) ||\r\n                                                    err?.location_does_not_exist?.includes(\r\n                                                        data.partner_shop\r\n                                                    ) == true ||\r\n                                                    (Object.keys(err).length !=\r\n                                                        0 &&\r\n                                                        data.partner_shop ==\r\n                                                            undefined) ? (\r\n                                                        <Button\r\n                                                            sx={{\r\n                                                                ml: 2,\r\n                                                            }}\r\n                                                            variant=\"contained\"\r\n                                                            style={{\r\n                                                                backgroundColor:\r\n                                                                    'red',\r\n                                                            }}\r\n                                                            component=\"span\"\r\n                                                            onClick={() => {\r\n                                                                if (\r\n                                                                    window.confirm(\r\n                                                                        'You Want to Remove?'\r\n                                                                    )\r\n                                                                ) {\r\n                                                                    handelDelete(\r\n                                                                        data.delet_id\r\n                                                                    )\r\n                                                                }\r\n                                                            }}\r\n                                                        >\r\n                                                            Remove\r\n                                                        </Button>\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </ProductTable>\r\n                            </Box>\r\n                            {pagination.item.length != 0 ? (\r\n                                <Box\r\n                                    sx={{\r\n                                        display: 'flex',\r\n                                        justifyContent: 'end',\r\n                                        mt: 1,\r\n                                        mr: 3,\r\n                                        ml: 3,\r\n                                    }}\r\n                                >\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        sx={{ m: 1 }}\r\n                                        disabled={pagination.page === 1}\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) =>\r\n                                            setPagination((p) => ({\r\n                                                ...p,\r\n                                                page: --p.page,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Previous\r\n                                    </Button>\r\n\r\n                                    <h6 style={{ marginTop: '19px' }}>\r\n                                        {pagination.page}/{pagination.totalPage}\r\n                                    </h6>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        sx={{ m: 1 }}\r\n                                        disabled={\r\n                                            pagination.page ===\r\n                                            pagination.totalPage\r\n                                        }\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) =>\r\n                                            setPagination((p) => ({\r\n                                                ...p,\r\n                                                page: ++p.page,\r\n                                            }))\r\n                                        }\r\n                                    >\r\n                                        Next\r\n                                    </Button>\r\n                                </Box>\r\n                            ) : null}\r\n                        </>\r\n                    ) : item.length != 0 ? (\r\n                        <StyledLoading>\r\n                            <Box position=\"relative\">\r\n                                <img\r\n                                    src=\"/assets/images/logo-circle.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                <CircularProgress className=\"circleProgress\">\r\n                                    <p>Please Wait...</p>\r\n                                </CircularProgress>\r\n                            </Box>\r\n                        </StyledLoading>\r\n                    ) : null}\r\n                </>\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PaginationTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-brands\\bulk-add-brand.jsx",["4231","4232","4233","4234","4235","4236","4237","4238","4239","4240","4241"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    TextField,\r\n} from '@mui/material'\r\nimport DoneIcon from '@mui/icons-material/Done'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\nimport * as XLSX from 'xlsx'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst StyledTable = styled(Table)(({ theme }) => ({\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& tr': {\r\n            '& th': {\r\n                paddingLeft: 0,\r\n                paddingRight: 0,\r\n            },\r\n        },\r\n    },\r\n    '& tbody': {\r\n        '& tr': {\r\n            '& td': {\r\n                paddingLeft: 0,\r\n                textTransform: 'capitalize',\r\n            },\r\n        },\r\n    },\r\n}))\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst StyledLoading = styled('div')(() => ({\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    '& img': {\r\n        width: 'auto',\r\n        height: '25px',\r\n    },\r\n    '& .circleProgress': {\r\n        position: 'absolute',\r\n        left: -7,\r\n        right: 0,\r\n        top: 'calc(50% - 25px)',\r\n    },\r\n}))\r\n\r\nconst AddBulkBrand = () => {\r\n    const navigate = useNavigate()\r\n    const [validateState, setValidateState] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [err, setErr] = useState({})\r\n    const [brandCount, setBrandCount] = useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [exFile, setExfile] = useState(null)\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n        item: [],\r\n    })\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let res = await axiosSuperAdminPrexo.post('/getBrandIdHighest')\r\n                if (res.status == 200) {\r\n                    setBrandCount(res.data.data)\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        setItem((_) =>\r\n            pagination.item\r\n                .slice(\r\n                    (pagination.page - 1) * pagination.size,\r\n                    pagination.page * pagination.size\r\n                )\r\n                .map((d, index) => {\r\n                    d.id = (pagination.page - 1) * pagination.size + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [pagination.page, pagination.item])\r\n\r\n    const importExcel = () => {\r\n        readExcel(exFile)\r\n    }\r\n\r\n    const readExcel = async (file) => {\r\n        const promise = new Promise((resolve, reject) => {\r\n            const filReader = new FileReader()\r\n            filReader.readAsArrayBuffer(file)\r\n            filReader.onload = (e) => {\r\n                const bufferArray = e.target.result\r\n                const wb = XLSX.read(bufferArray, { cellDates: true })\r\n                const wsname = wb.SheetNames[0]\r\n                const ws = wb.Sheets[wsname]\r\n                const data = XLSX.utils.sheet_to_json(ws)\r\n                resolve(data)\r\n            }\r\n            filReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n        const data = await promise\r\n        setPagination((p) => ({\r\n            ...p,\r\n            page: 1,\r\n            item: data.map((d, index) => toLowerKeys(d, brandCount, index)),\r\n            totalPage: Math.ceil(data.length / p.size),\r\n        }))\r\n    }\r\n    function toLowerKeys(obj, count, id) {\r\n        return Object.keys(obj).reduce((accumulator, key) => {\r\n            accumulator.brand_id = 'brand-0' + (count + id)\r\n            accumulator[key.toLowerCase().split('-').join('_')] = obj[key]\r\n            return accumulator\r\n        }, {})\r\n    }\r\n\r\n    const updateFieldChanged = (brand_id) => (e) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.map((data, i) => {\r\n                if (data.brand_id === brand_id) {\r\n                    return { ...data, [e.target.name]: e.target.value }\r\n                } else {\r\n                    return data\r\n                }\r\n            }),\r\n        }))\r\n    }\r\n\r\n    const handelDelete = (brand_id) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.filter((item) => item.brand_id != brand_id),\r\n        }))\r\n    }\r\n\r\n    const validateData = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/bulkValidationBrands',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                setValidateState(true)\r\n                setLoading(false)\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                setErr(res.data.data)\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: res.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    const handelSubmit = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/createBrands',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                    }\r\n                })\r\n                navigate('/sup-admin/brands')\r\n            } else {\r\n                setLoading(false)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: res.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error.response.data.message,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Brands', path: '/' },\r\n                        { name: 'Bulk-Brand' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Bulk Brand\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <h4>Upload file</h4>\r\n\r\n                    <Box>\r\n                        <Button\r\n                            sx={{ mb: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            onClick={() => navigate('/sup-admin/brands')}\r\n                        >\r\n                            Back to list\r\n                        </Button>\r\n                        <Button\r\n                            sx={{ mb: 2, ml: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={\r\n                                process.env.PUBLIC_URL +\r\n                                '/bulk-brand-sheet-sample.xlsx'\r\n                            }\r\n                            download\r\n                        >\r\n                            Download Sample Sheet\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        mb: 5,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        size=\"small\"\r\n                        onChange={(e) => {\r\n                            setExfile(e.target.files[0])\r\n                        }}\r\n                        inputProps={{ accept: '.csv,.xlsx,.xls' }}\r\n                        variant=\"outlined\"\r\n                        type=\"file\"\r\n                    />\r\n                    {item.length == 0 ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading || exFile == null}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                importExcel()\r\n                            }}\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    ) : validateState ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={loading}\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelSubmit(e)\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                validateData(e)\r\n                            }}\r\n                        >\r\n                            Validate Data\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                {item.length != 0 && loading !== true ? (\r\n                    <>\r\n                        <StyledTable>\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell>S.NO</TableCell>\r\n                                    <TableCell>Brand Name</TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {item.map((data) => (\r\n                                    <TableRow tabIndex={-1}>\r\n                                        <TableCell>{data.id}</TableCell>\r\n                                        <TableCell>\r\n                                            <TextField\r\n                                                onChange={updateFieldChanged(\r\n                                                    data.brand_id\r\n                                                )}\r\n                                                id=\"outlined-password-input\"\r\n                                                type=\"text\"\r\n                                                name=\"brand_name\"\r\n                                                value={data.brand_name?.toString()}\r\n                                            />\r\n                                            {err?.duplicate_brand_name?.includes(\r\n                                                data.brand_name\r\n                                            ) ? (\r\n                                                <ClearIcon\r\n                                                    style={{ color: 'red' }}\r\n                                                />\r\n                                            ) : Object.keys(err).length != 0 ? (\r\n                                                <DoneIcon\r\n                                                    style={{ color: 'green' }}\r\n                                                />\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n\r\n                                            {err?.duplicate_brand_name?.includes(\r\n                                                data.brand_name\r\n                                            ) ? (\r\n                                                <p style={{ color: 'red' }}>\r\n                                                    Duplicate Brand Name\r\n                                                </p>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                        </TableCell>\r\n\r\n                                        <TableCell>\r\n                                            {err?.duplicate_brand_name?.includes(\r\n                                                data.brand_name\r\n                                            ) == true ? (\r\n                                                <Button\r\n                                                    sx={{\r\n                                                        ml: 2,\r\n                                                    }}\r\n                                                    variant=\"contained\"\r\n                                                    style={{\r\n                                                        backgroundColor: 'red',\r\n                                                    }}\r\n                                                    component=\"span\"\r\n                                                    onClick={() => {\r\n                                                        if (\r\n                                                            window.confirm(\r\n                                                                'You Want to Remove?'\r\n                                                            )\r\n                                                        ) {\r\n                                                            handelDelete(\r\n                                                                data.brand_id\r\n                                                            )\r\n                                                        }\r\n                                                    }}\r\n                                                >\r\n                                                    Remove\r\n                                                </Button>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </StyledTable>\r\n                    </>\r\n                ) : item.length != 0 ? (\r\n                    <StyledLoading>\r\n                        <Box position=\"relative\">\r\n                            <img src=\"/assets/images/logo-circle.svg\" alt=\"\" />\r\n                            <CircularProgress className=\"circleProgress\">\r\n                                <p>Please Wait...</p>\r\n                            </CircularProgress>\r\n                        </Box>\r\n                    </StyledLoading>\r\n                ) : null}\r\n\r\n                {pagination.item.length && loading != true ? (\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            justifyContent: 'end',\r\n                            mt: 1,\r\n                            mr: 3,\r\n                            ml: 3,\r\n                        }}\r\n                    >\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ m: 1 }}\r\n                            disabled={pagination.page === 1}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) =>\r\n                                setPagination((p) => ({\r\n                                    ...p,\r\n                                    page: --p.page,\r\n                                }))\r\n                            }\r\n                        >\r\n                            Previous\r\n                        </Button>\r\n\r\n                        <h6 style={{ marginTop: '19px' }}>\r\n                            {pagination.page}/{pagination.totalPage}\r\n                        </h6>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ m: 1 }}\r\n                            disabled={pagination.page === pagination.totalPage}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) =>\r\n                                setPagination((p) => ({\r\n                                    ...p,\r\n                                    page: ++p.page,\r\n                                }))\r\n                            }\r\n                        >\r\n                            Next\r\n                        </Button>\r\n                    </Box>\r\n                ) : null}\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default AddBulkBrand\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-products\\add-bulk-products.jsx",["4242","4243","4244","4245","4246","4247","4248","4249","4250","4251","4252","4253","4254","4255","4256","4257","4258","4259","4260"],"import {\r\n    IconButton,\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Icon,\r\n    TablePagination,\r\n    Button,\r\n    TextField,\r\n} from '@mui/material'\r\nimport DoneIcon from '@mui/icons-material/Done'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\nimport * as XLSX from 'xlsx'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst StyledTable = styled(Table)(({ theme }) => ({\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& tr': {\r\n            '& th': {\r\n                paddingLeft: 0,\r\n                paddingRight: 0,\r\n            },\r\n        },\r\n    },\r\n    '& tbody': {\r\n        '& tr': {\r\n            '& td': {\r\n                paddingLeft: 0,\r\n                textTransform: 'capitalize',\r\n            },\r\n        },\r\n    },\r\n}))\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst StyledLoading = styled('div')(() => ({\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    '& img': {\r\n        width: 'auto',\r\n        height: '25px',\r\n    },\r\n    '& .circleProgress': {\r\n        position: 'absolute',\r\n        left: -7,\r\n        right: 0,\r\n        top: 'calc(50% - 25px)',\r\n    },\r\n}))\r\n\r\nconst AddBulkProduct = () => {\r\n    const navigate = useNavigate()\r\n    const [validateState, setValidateState] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [err, setErr] = useState({})\r\n    const [item, setItem] = useState([])\r\n    const [exFile, setExfile] = useState(null)\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n        item: [],\r\n    })\r\n\r\n    useEffect(() => {\r\n        setItem((_) =>\r\n            pagination.item\r\n                .slice(\r\n                    (pagination.page - 1) * pagination.size,\r\n                    pagination.page * pagination.size\r\n                )\r\n                .map((d, index) => {\r\n                    d.id = (pagination.page - 1) * pagination.size + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [pagination.page, pagination.item])\r\n\r\n    const importExcel = () => {\r\n        setLoading(true)\r\n        readExcel(exFile)\r\n    }\r\n\r\n    // READ EXCEL FILLE\r\n    const readExcel = async (file) => {\r\n        const promise = new Promise((resolve, reject) => {\r\n            const filReader = new FileReader()\r\n            filReader.readAsArrayBuffer(file)\r\n            filReader.onload = (e) => {\r\n                const bufferArray = e.target.result\r\n                const wb = XLSX.read(bufferArray, { cellDates: true })\r\n                const wsname = wb.SheetNames[0]\r\n                const ws = wb.Sheets[wsname]\r\n                const data = XLSX.utils.sheet_to_json(ws)\r\n                resolve(data)\r\n            }\r\n            filReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n        const data = await promise\r\n        setPagination((p) => ({\r\n            ...p,\r\n            page: 1,\r\n            item: data.map((d, index) => toLowerKeys(d)),\r\n            totalPage: Math.ceil(data.length / p.size),\r\n        }))\r\n        setLoading(false)\r\n    }\r\n    // EXCEL FILE HEADER CONVERT TO LOWERCASE AND GENERATE MUIC CODE\r\n    function toLowerKeys(obj) {\r\n        return Object.keys(obj).reduce((accumulator, key, index) => {\r\n            let muis_code = ''\r\n            let alphebet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n            let numbers = '123456789'\r\n            for (var i = 0; i < 2; i++) {\r\n                muis_code += alphebet.charAt(\r\n                    Math.floor(Math.random() * alphebet.length)\r\n                )\r\n            }\r\n            for (var i = 0; i < 3; i++) {\r\n                muis_code += numbers.charAt(\r\n                    Math.floor(Math.random() * numbers.length)\r\n                )\r\n            }\r\n            accumulator.muic = muis_code\r\n            accumulator.created_at = Date.now()\r\n            accumulator[key.toLowerCase().split('-').join('_')] = obj[key]\r\n            return accumulator\r\n        }, {})\r\n    }\r\n    // API FOR VALIDATE THE DATA\r\n    const validateData = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/bulkValidationProduct',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    showConfirmButton: true,\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setValidateState(true)\r\n                        setLoading(false)\r\n                    }\r\n                })\r\n            } else {\r\n                setErr(res.data.data)\r\n                setLoading(false)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: 'Please Check Errors',\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    // CREATE PRODUCTS API\r\n    const handelSubmit = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/createproducts',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    showConfirmButton: true,\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setLoading(false)\r\n                        navigate('/sup-admin/products')\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: res.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error.response.data.messag,\r\n            })\r\n        }\r\n    }\r\n    const updateFieldChanged = (index) => (e) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.map((data, i) => {\r\n                if (index === data.muic) {\r\n                    return { ...data, [e.target.name]: e.target.value }\r\n                } else {\r\n                    return data\r\n                }\r\n            }),\r\n        }))\r\n    }\r\n    // DATA DELETE FROM ARRAY\r\n    const handelDelete = (muic) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.filter((item) => item.muic != muic),\r\n        }))\r\n    }\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Products', path: '/' },\r\n                        { name: 'Bulk-Product' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Bulk Product\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <h4>Upload file</h4>\r\n                    <Box>\r\n                        <Button\r\n                            sx={{ mb: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => navigate('/sup-admin/products')}\r\n                        >\r\n                            Back to list\r\n                        </Button>\r\n                        <Button\r\n                            sx={{ mb: 2, ml: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={\r\n                                process.env.PUBLIC_URL +\r\n                                '/bulk -product-sheet-sample.xlsx'\r\n                            }\r\n                            download\r\n                        >\r\n                            Download Sample Sheet\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        mb: 5,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        size=\"small\"\r\n                        inputProps={{ accept: '.csv,.xlsx,.xls' }}\r\n                        onChange={(e) => {\r\n                            setExfile(e.target.files[0])\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        type=\"file\"\r\n                    />\r\n                    {item.length == 0 ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={loading || exFile == null}\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            onClick={(e) => {\r\n                                importExcel(e)\r\n                            }}\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    ) : validateState ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelSubmit(e)\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={loading}\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            onClick={(e) => {\r\n                                validateData(e)\r\n                            }}\r\n                        >\r\n                            Validate Data\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                <StyledTable>\r\n                    {item.length != 0 && loading !== true ? (\r\n                        <>\r\n                            <StyledTable>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>S.NO</TableCell>\r\n                                        <TableCell>Vendor SKU ID</TableCell>\r\n                                        <TableCell>Brand Name</TableCell>\r\n                                        <TableCell>Model Name</TableCell>\r\n                                        <TableCell>Vendor Name</TableCell>\r\n                                        <TableCell>Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {item.map((data) => (\r\n                                        <TableRow key={data.muic} tabIndex={-1}>\r\n                                            <TableCell>{data.id}</TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.muic\r\n                                                    )}\r\n                                                    type=\"text\"\r\n                                                    name=\"vendor_sku_id\"\r\n                                                    value={data.vendor_sku_id?.toString()}\r\n                                                />\r\n                                                {err?.duplicate_vendor_iD?.includes(\r\n                                                    data.vendor_sku_id\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.duplicate_vendor_iD?.includes(\r\n                                                    data.vendor_sku_id\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Duplicate Vendor Sku Id\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.muic\r\n                                                    )}\r\n                                                    type=\"text\"\r\n                                                    name=\"brand_name\"\r\n                                                    value={data.brand_name?.toString()}\r\n                                                />\r\n                                                {err?.brand_name?.includes(\r\n                                                    data.brand_name\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.brand_name?.includes(\r\n                                                    data.brand_name\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Brand Name Does Not\r\n                                                        Exist\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.muic\r\n                                                    )}\r\n                                                    type=\"text\"\r\n                                                    name=\"model_name\"\r\n                                                    value={data.model_name?.toString()}\r\n                                                />\r\n                                                {err?.model_name?.includes(\r\n                                                    data.model_name\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.model_name?.includes(\r\n                                                    data.model_name\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Duplicate Model Name\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.muic\r\n                                                    )}\r\n                                                    type=\"text\"\r\n                                                    name=\"vendor_name\"\r\n                                                    value={data.vendor_name?.toString()}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {err?.duplicate_vendor_iD?.includes(\r\n                                                    data.vendor_sku_id\r\n                                                ) == true ||\r\n                                                err?.brand_name?.includes(\r\n                                                    data.brand_name\r\n                                                ) == true ||\r\n                                                err?.model_name?.includes(\r\n                                                    data.model_name\r\n                                                ) == true ? (\r\n                                                    <Button\r\n                                                        sx={{\r\n                                                            ml: 2,\r\n                                                        }}\r\n                                                        variant=\"contained\"\r\n                                                        style={{\r\n                                                            backgroundColor:\r\n                                                                'red',\r\n                                                        }}\r\n                                                        component=\"span\"\r\n                                                        onClick={() => {\r\n                                                            if (\r\n                                                                window.confirm(\r\n                                                                    'You Want to Remove?'\r\n                                                                )\r\n                                                            ) {\r\n                                                                handelDelete(\r\n                                                                    data.muic\r\n                                                                )\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        Remove\r\n                                                    </Button>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </StyledTable>\r\n                        </>\r\n                    ) : item.length != 0 ? (\r\n                        <StyledLoading>\r\n                            <Box position=\"relative\">\r\n                                <img\r\n                                    src=\"/assets/images/logo-circle.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                <CircularProgress className=\"circleProgress\">\r\n                                    <p>Please Wait...</p>\r\n                                </CircularProgress>\r\n                            </Box>\r\n                        </StyledLoading>\r\n                    ) : null}\r\n                    {pagination.item.length != 0 && loading != true ? (\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'end',\r\n                                mt: 1,\r\n                                mr: 3,\r\n                                ml: 3,\r\n                            }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                sx={{ m: 1 }}\r\n                                disabled={pagination.page === 1}\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) =>\r\n                                    setPagination((p) => ({\r\n                                        ...p,\r\n                                        page: --p.page,\r\n                                    }))\r\n                                }\r\n                            >\r\n                                Previous\r\n                            </Button>\r\n\r\n                            <h6 style={{ marginTop: '19px' }}>\r\n                                {pagination.page}/{pagination.totalPage}\r\n                            </h6>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                sx={{ m: 1 }}\r\n                                disabled={\r\n                                    pagination.page === pagination.totalPage\r\n                                }\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) =>\r\n                                    setPagination((p) => ({\r\n                                        ...p,\r\n                                        page: ++p.page,\r\n                                    }))\r\n                                }\r\n                            >\r\n                                Next\r\n                            </Button>\r\n                        </Box>\r\n                    ) : null}\r\n                </StyledTable>\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default AddBulkProduct\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bag\\add-bulk-bag.jsx",["4261","4262","4263","4264","4265","4266","4267","4268","4269","4270","4271","4272","4273","4274","4275","4276","4277","4278","4279","4280","4281","4282","4283","4284","4285","4286","4287","4288","4289","4290","4291","4292","4293","4294","4295","4296","4297","4298","4299","4300","4301","4302","4303","4304","4305","4306","4307","4308","4309","4310","4311","4312","4313","4314","4315","4316","4317","4318","4319","4320","4321","4322","4323","4324","4325","4326","4327","4328","4329","4330","4331","4332","4333","4334"],"import {\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    TextField,\r\n    Icon,\r\n    IconButton,\r\n} from '@mui/material'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport DoneIcon from '@mui/icons-material/Done'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport Swal from 'sweetalert2'\r\nimport * as XLSX from 'xlsx'\r\n\r\nconst StyledTable = styled(Table)(({ theme }) => ({\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& tr': {\r\n            '& th': {\r\n                paddingLeft: 0,\r\n                paddingRight: 0,\r\n            },\r\n        },\r\n    },\r\n    '& tbody': {\r\n        '& tr': {\r\n            '& td': {\r\n                paddingLeft: 0,\r\n                textTransform: 'capitalize',\r\n            },\r\n        },\r\n    },\r\n}))\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst PaginationTable = () => {\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(5)\r\n    const [page, setPage] = React.useState(0)\r\n\r\n    const [validateState, setValidateState] = useState(false)\r\n    const [err, setErr] = useState({})\r\n    const [loading, setLoading] = useState(false)\r\n    const [brandCount, setBrandCount] = useState({})\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n        item: [],\r\n        totalPage: 0,\r\n    })\r\n    const navigate = useNavigate()\r\n    const [item, setItem] = useState([])\r\n    const [exFile, setExfile] = useState(null)\r\n\r\n    const importExcel = () => {\r\n        setLoading(true)\r\n        readExcel(exFile)\r\n    }\r\n\r\n    useEffect(() => {\r\n        setItem((_) =>\r\n            pagination.item\r\n                .slice(\r\n                    (pagination.page - 1) * pagination.size,\r\n                    pagination.page * pagination.size\r\n                )\r\n                .map((d, index) => {\r\n                    d.id = (pagination.page - 1) * pagination.size + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [pagination.page, pagination.item])\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosSuperAdminPrexo.post(\r\n                    '/getMasterHighest/' + 'bag-master'\r\n                )\r\n                if (res.status == 200) {\r\n                    setBrandCount(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    confirmButtonText: 'Ok',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const readExcel = async (file) => {\r\n        const promise = new Promise((resolve, reject) => {\r\n            const filReader = new FileReader()\r\n            filReader.readAsArrayBuffer(file)\r\n            filReader.onload = (e) => {\r\n                const bufferArray = e.target.result\r\n                const wb = XLSX.read(bufferArray, { cellDates: true })\r\n                const wsname = wb.SheetNames[0]\r\n                const ws = wb.Sheets[wsname]\r\n                const data = XLSX.utils.sheet_to_json(ws)\r\n                resolve(data)\r\n            }\r\n            filReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n        const data = await promise\r\n        setPagination((p) => ({\r\n            ...p,\r\n            page: 1,\r\n            item: data.map((d, index) => toLowerKeys(d, brandCount, index)),\r\n            totalPage: Math.ceil(data.length / p.size),\r\n        }))\r\n        setLoading(false)\r\n    }\r\n\r\n    function toLowerKeys(obj) {\r\n        return Object.keys(obj).reduce((accumulator, key) => {\r\n            accumulator.created_at = Date.now()\r\n            accumulator.prefix = 'bag-master'\r\n            accumulator.sort_id = 'No Status'\r\n            accumulator[key.toLowerCase().split('-').join('_')] = obj[key]\r\n            return accumulator\r\n        }, {})\r\n    }\r\n    const validateData = async (e) => {\r\n        try {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            setLoading(true)\r\n            for (let x of pagination.item) {\r\n                x.bag_id = ''\r\n                if (x.cpc == 'Gurgaon_122016') {\r\n                    x.bag_id = 'DDB-GGN-' + (brandCount.bagGurgaon + count1)\r\n                    count1++\r\n                } else {\r\n                    x.bag_id = 'DDB-BLR-' + (brandCount.bagBanglore + count2)\r\n                    count2++\r\n                }\r\n            }\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/bulkValidationBag',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                setValidateState(true)\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    showConfirmButton: true,\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setLoading(false)\r\n                    }\r\n                })\r\n            } else {\r\n                setErr(res.data.data)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: 'Please Check Errors',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setLoading(false)\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                confirmButtonText: 'Ok',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    const handelSubmit = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/createBulkBag',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    showConfirmButton: true,\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setLoading(false)\r\n                        navigate('/sup-admin/bag')\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error.response.data.message,\r\n            })\r\n            setLoading(false)\r\n        }\r\n    }\r\n    // ----------------------------------------------------------------------------------------------------------------------------\r\n    const updateFieldChanged = (bag_id) => (e) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.map((data, i) => {\r\n                if (data.id === bag_id) {\r\n                    return { ...data, [e.target.name]: e.target.value }\r\n                } else {\r\n                    return data\r\n                }\r\n            }),\r\n        }))\r\n    }\r\n    // DATA DELETE FROM ARRAY\r\n    const handelDelete = (bag_id) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.filter((item) => item.bag_id != bag_id),\r\n        }))\r\n    }\r\n\r\n    const StyledLoading = styled('div')(() => ({\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        '& img': {\r\n            width: 'auto',\r\n            height: '25px',\r\n        },\r\n        '& .circleProgress': {\r\n            position: 'absolute',\r\n            left: -7,\r\n            right: 0,\r\n            top: 'calc(50% - 25px)',\r\n        },\r\n    }))\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Bags', path: '/' },\r\n                        { name: 'Bulk-Bag' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Bulk Bag\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <h4>Upload file</h4>\r\n\r\n                    <Box>\r\n                        <Button\r\n                            sx={{ mb: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            onClick={() => navigate('/sup-admin/bag')}\r\n                        >\r\n                            Back to list\r\n                        </Button>\r\n                        <Button\r\n                            sx={{ mb: 2, ml: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={\r\n                                process.env.PUBLIC_URL +\r\n                                '/bulk-bag-sheet-sample.xlsx'\r\n                            }\r\n                            download\r\n                        >\r\n                            Download Sample Sheet\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        mb: 5,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        size=\"small\"\r\n                        inputProps={{ accept: '.csv,.xlsx,.xls' }}\r\n                        onChange={(e) => {\r\n                            setExfile(e.target.files[0])\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        type=\"file\"\r\n                    />\r\n                    {item.length == 0 ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={loading || exFile == null}\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            onClick={(e) => {\r\n                                importExcel(e)\r\n                            }}\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    ) : validateState ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelSubmit(e)\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={Object.keys(brandCount).length == 0 || loading}\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            onClick={(e) => {\r\n                                validateData(e)\r\n                            }}\r\n                        >\r\n                            Validate Data\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                <StyledTable>\r\n                    {item.length != 0 && loading !== true ? (\r\n                        <>\r\n                            <StyledTable>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>S.NO</TableCell>\r\n                                        <TableCell>CPC</TableCell>\r\n                                        <TableCell>Warehouse</TableCell>\r\n                                        <TableCell>Bag Category</TableCell>\r\n                                        <TableCell>Display Name</TableCell>\r\n                                        <TableCell>Bag Limit</TableCell>\r\n                                        <TableCell>Bag Display</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {item.map((data, index) => (\r\n                                        <TableRow tabIndex={-1}>\r\n                                            <TableCell>{data.id}</TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"cpc\"\r\n                                                    value={data.cpc}\r\n                                                />\r\n                                                {err?.cpc?.includes(data.cpc) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.cpc == undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.cpc == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                                {err?.cpc?.includes(\r\n                                                    data.cpc\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Cpc Does Not Exist\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.cpc == undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.cpc == '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Cpc Does Not Exist\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"warehouse\"\r\n                                                    value={data.warehouse}\r\n                                                />\r\n                                                {err?.warehouse_does_not_exist?.includes(\r\n                                                    data.bag_id\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                                {err?.warehouse_does_not_exist?.includes(\r\n                                                    data.bag_id\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Warehouse Does Not Exist\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.warehouse ==\r\n                                                          undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.warehouse == '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Warehouse Does Not Exist\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"bag_category\"\r\n                                                    value={data.bag_category?.toString()}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"bag_display_name\"\r\n                                                    value={data.bag_display_name?.toString()}\r\n                                                />\r\n                                                {err?.bag_display_name_is_duplicate?.includes(\r\n                                                    data.bag_display_name\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display_name ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display_name ==\r\n                                                        '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.bag_display_name_is_duplicate?.includes(\r\n                                                    data.bag_display_name\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        {' '}\r\n                                                        Duplicate Bag Display\r\n                                                        Name{' '}\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.bag_display_name ==\r\n                                                          undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.bag_display_name ==\r\n                                                          '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Required*\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"bag_limit\"\r\n                                                    value={data.bag_limit}\r\n                                                />\r\n                                                {err?.limit?.includes(\r\n                                                    data.bag_id\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                                {err?.limit?.includes(\r\n                                                    data.bag_id\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Not Acceptable\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"bag_display\"\r\n                                                    value={data.bag_display}\r\n                                                />\r\n                                                {err?.bag_display_is_duplicate?.includes(\r\n                                                    data.bag_display\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.bag_display_is_duplicate?.includes(\r\n                                                    data.bag_display\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        {' '}\r\n                                                        Duplicate Bag Display\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.bag_display ==\r\n                                                          undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.bag_display ==\r\n                                                          '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Required*\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {(Object.keys(err).length !=\r\n                                                    0 &&\r\n                                                    data.cpc == undefined) ||\r\n                                                err?.limit?.includes(\r\n                                                    data.bag_id\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.cpc == '') ||\r\n                                                err?.cpc?.includes(data.cpc) ==\r\n                                                    true ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse == '') ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display_name ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display_name ==\r\n                                                        '') ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.bag_display == '') ||\r\n                                                err?.warehouse_does_not_exist?.includes(\r\n                                                    data.bag_id\r\n                                                ) == true ||\r\n                                                err?.bag_id_is_duplicate?.includes(\r\n                                                    data.bag_id\r\n                                                ) == true ||\r\n                                                err?.bag_display_name_is_duplicate?.includes(\r\n                                                    data.bag_display_name\r\n                                                ) == true ||\r\n                                                err?.bag_display_is_duplicate?.includes(\r\n                                                    data.bag_display\r\n                                                ) == true ? (\r\n                                                    <IconButton>\r\n                                                        <Icon\r\n                                                            sx={{\r\n                                                                ml: 2,\r\n                                                            }}\r\n                                                            color=\"error\"\r\n                                                            onClick={() => {\r\n                                                                if (\r\n                                                                    window.confirm(\r\n                                                                        'You Want to Remove?'\r\n                                                                    )\r\n                                                                ) {\r\n                                                                    handelDelete(\r\n                                                                        data.bag_id\r\n                                                                    )\r\n                                                                }\r\n                                                            }}\r\n                                                        >\r\n                                                            delete\r\n                                                        </Icon>\r\n                                                    </IconButton>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </StyledTable>\r\n                        </>\r\n                    ) : item.length != 0 ? (\r\n                        <StyledLoading>\r\n                            <Box position=\"relative\">\r\n                                <img\r\n                                    src=\"/assets/images/logo-circle.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                <CircularProgress className=\"circleProgress\">\r\n                                    <p>Please Wait...</p>\r\n                                </CircularProgress>\r\n                            </Box>\r\n                        </StyledLoading>\r\n                    ) : null}\r\n                    {pagination.item.length && loading != true ? (\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'end',\r\n                                mt: 1,\r\n                                mr: 3,\r\n                                ml: 3,\r\n                            }}\r\n                        >\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                sx={{ m: 1 }}\r\n                                disabled={pagination.page === 1}\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) =>\r\n                                    setPagination((p) => ({\r\n                                        ...p,\r\n                                        page: --p.page,\r\n                                    }))\r\n                                }\r\n                            >\r\n                                Previous\r\n                            </Button>\r\n\r\n                            <h6 style={{ marginTop: '19px' }}>\r\n                                {pagination.page}/{pagination.totalPage}\r\n                            </h6>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                sx={{ m: 1 }}\r\n                                disabled={\r\n                                    pagination.page === pagination.totalPage\r\n                                }\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) =>\r\n                                    setPagination((p) => ({\r\n                                        ...p,\r\n                                        page: ++p.page,\r\n                                    }))\r\n                                }\r\n                            >\r\n                                Next\r\n                            </Button>\r\n                        </Box>\r\n                    ) : null}\r\n                </StyledTable>\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PaginationTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-tray\\add-bulk-tray.jsx",["4335","4336","4337","4338","4339","4340","4341","4342","4343","4344","4345","4346","4347","4348","4349","4350","4351","4352","4353","4354","4355","4356","4357","4358","4359","4360","4361","4362","4363","4364","4365","4366","4367","4368","4369","4370","4371","4372","4373","4374","4375","4376","4377","4378","4379","4380","4381","4382","4383","4384","4385","4386","4387","4388","4389","4390","4391","4392","4393","4394","4395","4396","4397","4398","4399","4400","4401","4402","4403","4404","4405","4406","4407","4408","4409","4410","4411","4412","4413","4414","4415","4416","4417","4418","4419"],"import {\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    TextField,\r\n    Icon,\r\n    IconButton,\r\n} from '@mui/material'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport DoneIcon from '@mui/icons-material/Done'\r\nimport ClearIcon from '@mui/icons-material/Clear'\r\nimport CircularProgress from '@mui/material/CircularProgress'\r\nimport * as XLSX from 'xlsx'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst StyledTable = styled(Table)(({ theme }) => ({\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& tr': {\r\n            '& th': {\r\n                paddingLeft: 0,\r\n                paddingRight: 0,\r\n            },\r\n        },\r\n    },\r\n    '& tbody': {\r\n        '& tr': {\r\n            '& td': {\r\n                paddingLeft: 0,\r\n                textTransform: 'capitalize',\r\n            },\r\n        },\r\n    },\r\n}))\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst PaginationTable = () => {\r\n    const [validateState, setValidateState] = useState(false)\r\n    const [err, setErr] = useState({})\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [countOfTray, setCountOfTray] = useState({})\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 10,\r\n        item: [],\r\n        totalPage: 0,\r\n    })\r\n    const [item, setItem] = useState([])\r\n    const [exFile, setExfile] = useState(null)\r\n    useEffect(() => {\r\n        setItem((_) =>\r\n            pagination.item\r\n                .slice(\r\n                    (pagination.page - 1) * pagination.size,\r\n                    pagination.page * pagination.size\r\n                )\r\n                .map((d, index) => {\r\n                    d.id = (pagination.page - 1) * pagination.size + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [pagination.page, pagination.item])\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let res = await axiosSuperAdminPrexo.post(\r\n                    '/trayIdGenrate/' + 'tray-master'\r\n                )\r\n                if (res.status == 200) {\r\n                    setCountOfTray(res.data.data)\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }, [])\r\n    const importExcel = () => {\r\n        setLoading(true)\r\n        readExcel(exFile)\r\n    }\r\n    const readExcel = async (file) => {\r\n        const promise = new Promise((resolve, reject) => {\r\n            const filReader = new FileReader()\r\n            filReader.readAsArrayBuffer(file)\r\n            filReader.onload = (e) => {\r\n                const bufferArray = e.target.result\r\n                const wb = XLSX.read(bufferArray, { cellDates: true })\r\n                const wsname = wb.SheetNames[0]\r\n                const ws = wb.Sheets[wsname]\r\n                const data = XLSX.utils.sheet_to_json(ws)\r\n                resolve(data)\r\n            }\r\n            filReader.onerror = (error) => {\r\n                reject(error)\r\n            }\r\n        })\r\n        const data = await promise\r\n        setPagination((p) => ({\r\n            ...p,\r\n            page: 1,\r\n            item: data.map((d, index) => toLowerKeys(d, index)),\r\n            totalPage: Math.ceil(data.length / p.size),\r\n        }))\r\n        setLoading(false)\r\n    }\r\n    function toLowerKeys(obj, id) {\r\n        return Object.keys(obj).reduce((accumulator, key) => {\r\n            accumulator.created_at = Date.now()\r\n            accumulator.prefix = 'tray-master'\r\n            accumulator.sort_id = 'Open'\r\n            accumulator[key.toLowerCase().split('-').join('_')] = obj[key]\r\n            return accumulator\r\n        }, {})\r\n    }\r\n    const validateData = async (e) => {\r\n        let count1 = 0\r\n        let count2 = 0\r\n        let count3 = 0\r\n        let count4 = 0\r\n        let count5 = 0\r\n        let count6 = 0\r\n        let count7 = 0\r\n        let count8 = 0\r\n\r\n        try {\r\n            for (let x of pagination.item) {\r\n                x.tray_id = ''\r\n                if (x.tray_category == 'BOT') {\r\n                    x.tray_id = 'BOT' + (countOfTray.BOT + count1)\r\n                    count1++\r\n                } else if (x.tray_category == 'MMT') {\r\n                    x.tray_id = 'MMT' + (countOfTray.MMT + count2)\r\n                    count2++\r\n                } else if (x.tray_category == 'PMT') {\r\n                    x.tray_id = 'PMT' + (countOfTray.PMT + count3)\r\n                    count3++\r\n                } else if (x.tray_category == 'WHT') {\r\n                    x.tray_id = 'WHT' + (countOfTray.WHT + count4)\r\n                    count4++\r\n                } else if (x.tray_category == 'CTA') {\r\n                    x.tray_id = 'CTA' + (countOfTray.CTA + count5)\r\n                    count5++\r\n                } else if (x.tray_category == 'CTB') {\r\n                    x.tray_id = 'CTB' + (countOfTray.CTB + count6)\r\n                    count6++\r\n                } else if (x.tray_category == 'CTC') {\r\n                    x.tray_id = 'CTC' + (countOfTray.CTC + count7)\r\n                    count7++\r\n                } else if (x.tray_category == 'CTD') {\r\n                    x.tray_id = 'CTD' + (countOfTray.CTD + count8)\r\n                    count8++\r\n                }\r\n            }\r\n            setCountOfTray((p) => ({\r\n                ...p,\r\n                BOT: p.BOT + count1,\r\n                MMT: p.MMT + count2,\r\n                PMT: p.PMT + count3,\r\n                WHT: p.WHT + count4,\r\n                CTA: p.CTA + count5,\r\n                CTB: p.CTB + count6,\r\n                CTC: p.CTC + count7,\r\n                CTD: p.CTD + count8,\r\n            }))\r\n\r\n            setLoading(true)\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/bulkValidationTray',\r\n                pagination.item\r\n            )\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    showConfirmButton: true,\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setValidateState(true)\r\n                    }\r\n                })\r\n            } else {\r\n                setLoading(false)\r\n                setErr(res.data.data)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: res.data.message,\r\n                })\r\n            }\r\n            // }\r\n        } catch (error) {\r\n            if (error.response.status == 400) {\r\n                setLoading(false)\r\n                setErr(error.response.data.data)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error.response.data.message,\r\n                })\r\n            }\r\n        }\r\n    }\r\n    const handelSubmit = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n\r\n            let obj = {\r\n                allCount: countOfTray,\r\n                item: pagination.item,\r\n            }\r\n            let res = await axiosSuperAdminPrexo.post('/createBulkTray', obj)\r\n            if (res.status == 200) {\r\n                Swal.fire({\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    showConfirmButton: true,\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setLoading(false)\r\n                        navigate('/sup-admin/tray')\r\n                    }\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error.response.data.message,\r\n            })\r\n        }\r\n    }\r\n    // ----------------------------------------------------------------------------------------------------------------------------\r\n    const updateFieldChanged = (id) => (e) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.map((data, i) => {\r\n                if (data.id === id) {\r\n                    return { ...data, [e.target.name]: e.target.value }\r\n                } else {\r\n                    return data\r\n                }\r\n            }),\r\n        }))\r\n    }\r\n    // DATA DELETE FROM ARRAY\r\n    const handelDelete = (tray_id, trayType) => {\r\n        setValidateState(false)\r\n        setPagination((p) => ({\r\n            ...p,\r\n            item: pagination.item.filter((item) => item.tray_id != tray_id),\r\n        }))\r\n    }\r\n\r\n    const StyledLoading = styled('div')(() => ({\r\n        width: '100%',\r\n        height: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        '& img': {\r\n            width: 'auto',\r\n            height: '25px',\r\n        },\r\n        '& .circleProgress': {\r\n            position: 'absolute',\r\n            left: -7,\r\n            right: 0,\r\n            top: 'calc(50% - 25px)',\r\n        },\r\n    }))\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Tray', path: '/' },\r\n                        { name: 'Bulk-Tray' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Bulk Tray\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                    }}\r\n                >\r\n                    <h4>Upload file</h4>\r\n\r\n                    <Box>\r\n                        <Button\r\n                            sx={{ mb: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            onClick={() => navigate('/sup-admin/tray')}\r\n                        >\r\n                            Back to list\r\n                        </Button>\r\n                        <Button\r\n                            sx={{ mb: 2, ml: 2 }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            href={\r\n                                process.env.PUBLIC_URL +\r\n                                '/bulk-tray-sheet-sample.xlsx'\r\n                            }\r\n                            download\r\n                        >\r\n                            Download Sample Sheet\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        alignItems: 'center',\r\n                        flexDirection: 'column',\r\n                        mb: 5,\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        size=\"small\"\r\n                        inputProps={{ accept: '.csv,.xlsx,.xls' }}\r\n                        onChange={(e) => {\r\n                            setExfile(e.target.files[0])\r\n                        }}\r\n                        variant=\"outlined\"\r\n                        type=\"file\"\r\n                    />\r\n                    {item.length == 0 ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={loading || exFile == null}\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            onClick={(e) => {\r\n                                importExcel(e)\r\n                            }}\r\n                        >\r\n                            Import\r\n                        </Button>\r\n                    ) : validateState ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelSubmit(e)\r\n                            }}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={\r\n                                Object.keys(countOfTray).length == 0 || loading\r\n                            }\r\n                            sx={{ mt: 3, mb: 1 }}\r\n                            onClick={(e) => {\r\n                                validateData(e)\r\n                            }}\r\n                        >\r\n                            Validate Data\r\n                        </Button>\r\n                    )}\r\n                </Box>\r\n                <StyledTable>\r\n                    {item.length != 0 && loading !== true ? (\r\n                        <>\r\n                            <StyledTable>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>S.NO</TableCell>\r\n                                        {err?.tray_id?.length !== 0 &&\r\n                                        Object.keys(err).length !== 0 ? (\r\n                                            <TableCell>Tray ID</TableCell>\r\n                                        ) : (\r\n                                            ''\r\n                                        )}\r\n                                        <TableCell>CPC</TableCell>\r\n                                        <TableCell>Warehouse</TableCell>\r\n                                        <TableCell>Tray Category</TableCell>\r\n                                        <TableCell>Tray Brand</TableCell>\r\n                                        <TableCell>Tray Model</TableCell>\r\n                                        <TableCell>Tray Name</TableCell>\r\n                                        <TableCell>Tray Limit</TableCell>\r\n                                        <TableCell>Tray Display</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {item.map((data, index) => (\r\n                                        <TableRow tabIndex={-1}>\r\n                                            <TableCell>{data.id}</TableCell>\r\n                                            {err?.tray_id?.length != 0 &&\r\n                                            Object.keys(err).length !== 0 ? (\r\n                                                <TableCell>\r\n                                                    {' '}\r\n                                                    <TextField\r\n                                                        id=\"outlined-password-input\"\r\n                                                        type=\"text\"\r\n                                                        value={data.tray_id}\r\n                                                    />\r\n                                                    {err?.tray_id?.includes(\r\n                                                        data.tray_id\r\n                                                    ) ? (\r\n                                                        <ClearIcon\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : Object.keys(err)\r\n                                                          .length != 0 ? (\r\n                                                        <DoneIcon\r\n                                                            style={{\r\n                                                                color: 'green',\r\n                                                            }}\r\n                                                        />\r\n                                                    ) : (\r\n                                                        ''\r\n                                                    )}\r\n                                                    {err?.tray_id?.includes(\r\n                                                        data.tray_id\r\n                                                    ) ? (\r\n                                                        <p\r\n                                                            style={{\r\n                                                                color: 'red',\r\n                                                            }}\r\n                                                        >\r\n                                                            {data.tray_category +\r\n                                                                ' '}{' '}\r\n                                                            maximum count\r\n                                                            exceeded\r\n                                                        </p>\r\n                                                    ) : null}\r\n                                                </TableCell>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"cpc\"\r\n                                                    value={data.cpc}\r\n                                                />\r\n                                                {err?.cpc?.includes(data.cpc) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.cpc == undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.cpc == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                                {err?.cpc?.includes(\r\n                                                    data.cpc\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Cpc Does Not Exist\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.cpc == undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.cpc == '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Cpc Does Not Exist\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"warehouse\"\r\n                                                    value={data.warehouse?.toString()}\r\n                                                />\r\n                                                {err?.warehouse_does_not_exist?.includes(\r\n                                                    data.tray_id\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.warehouse_does_not_exist?.includes(\r\n                                                    data.tray_id\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Warehouse Does Not Exist\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.warehouse ==\r\n                                                          undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.warehouse == '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Required*\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"tray_category\"\r\n                                                    value={data.tray_category?.toString()}\r\n                                                />\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"tray_brand\"\r\n                                                    value={data.tray_brand?.toString()}\r\n                                                />\r\n                                                {err?.brand?.includes(\r\n                                                    data.tray_brand\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                                {err?.brand?.includes(\r\n                                                    data.tray_brand\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Brand name not exists\r\n                                                    </p>\r\n                                                ) : null}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"tray_model\"\r\n                                                    value={data.tray_model?.toString()}\r\n                                                />\r\n                                                {err?.model?.includes(\r\n                                                    data.tray_model\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                                {err?.model?.includes(\r\n                                                    data.tray_model\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Model name not exists\r\n                                                    </p>\r\n                                                ) : null}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"tray_name\"\r\n                                                    value={data.tray_name?.toString()}\r\n                                                />\r\n                                                {err?.tray_display_name_duplicate?.includes(\r\n                                                    data.tray_name\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_name ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_name == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.tray_display_name_duplicate?.includes(\r\n                                                    data.tray_name\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Duplicate Tray Name\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.tray_name ==\r\n                                                          undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.tray_name == '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Required*\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"tray_limit\"\r\n                                                    value={data.tray_limit?.toString()}\r\n                                                />\r\n                                                {err?.trayLimit?.includes(\r\n                                                    data.tray_id\r\n                                                ) ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : null}\r\n                                                {err?.trayLimit?.includes(\r\n                                                    data.tray_id\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Not Acceptable\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <TextField\r\n                                                    onChange={updateFieldChanged(\r\n                                                        data.id\r\n                                                    )}\r\n                                                    id=\"outlined-password-input\"\r\n                                                    type=\"text\"\r\n                                                    name=\"tray_display\"\r\n                                                    value={data.tray_display?.toString()}\r\n                                                />\r\n                                                {err?.tray_display_is_duplicate?.includes(\r\n                                                    data.tray_display\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_display ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_display == '') ? (\r\n                                                    <ClearIcon\r\n                                                        style={{ color: 'red' }}\r\n                                                    />\r\n                                                ) : Object.keys(err).length !=\r\n                                                  0 ? (\r\n                                                    <DoneIcon\r\n                                                        style={{\r\n                                                            color: 'green',\r\n                                                        }}\r\n                                                    />\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n\r\n                                                {err?.tray_display_is_duplicate?.includes(\r\n                                                    data.tray_display\r\n                                                ) ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Duplicate Tray Display\r\n                                                        Name\r\n                                                    </p>\r\n                                                ) : (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.tray_display ==\r\n                                                          undefined) ||\r\n                                                  (Object.keys(err).length !=\r\n                                                      0 &&\r\n                                                      data.tray_display ==\r\n                                                          '') ? (\r\n                                                    <p style={{ color: 'red' }}>\r\n                                                        Required*\r\n                                                    </p>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n\r\n                                            <TableCell>\r\n                                                {(Object.keys(err).length !=\r\n                                                    0 &&\r\n                                                    data.cpc == undefined) ||\r\n                                                err?.trayLimit?.includes(\r\n                                                    data.tray_id\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.cpc == '') ||\r\n                                                err?.cpc?.includes(data.cpc) ==\r\n                                                    true ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_id ==\r\n                                                        undefined) ||\r\n                                                err?.model?.includes(\r\n                                                    data.tray_model\r\n                                                ) ||\r\n                                                err?.model?.includes(\r\n                                                    data.tray_brand\r\n                                                ) ||\r\n                                                err?.tray_id?.includes(\r\n                                                    data.tray_id\r\n                                                ) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_id == '') ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.warehouse == '') ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_name ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_name == '') ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_display ==\r\n                                                        undefined) ||\r\n                                                (Object.keys(err).length != 0 &&\r\n                                                    data.tray_display == '') ||\r\n                                                err?.warehouse_does_not_exist?.includes(\r\n                                                    data.tray_id\r\n                                                ) ||\r\n                                                err?.trya_id_is_duplicate?.includes(\r\n                                                    data.tray_display\r\n                                                ) == true ||\r\n                                                err?.tray_display_name_duplicate?.includes(\r\n                                                    data.tray_name\r\n                                                ) == true ||\r\n                                                err?.tray_display_is_duplicate?.includes(\r\n                                                    data.tray_display\r\n                                                ) == true ? (\r\n                                                    <IconButton>\r\n                                                        <Icon\r\n                                                            sx={{\r\n                                                                ml: 2,\r\n                                                            }}\r\n                                                            color=\"error\"\r\n                                                            onClick={() => {\r\n                                                                if (\r\n                                                                    window.confirm(\r\n                                                                        'You Want to Remove?'\r\n                                                                    )\r\n                                                                ) {\r\n                                                                    handelDelete(\r\n                                                                        data.tray_id,\r\n                                                                        data.tray_category\r\n                                                                    )\r\n                                                                }\r\n                                                            }}\r\n                                                        >\r\n                                                            delete\r\n                                                        </Icon>\r\n                                                    </IconButton>\r\n                                                ) : (\r\n                                                    ''\r\n                                                )}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </StyledTable>\r\n                        </>\r\n                    ) : item.length != 0 ? (\r\n                        <StyledLoading>\r\n                            <Box position=\"relative\">\r\n                                <img\r\n                                    src=\"/assets/images/logo-circle.svg\"\r\n                                    alt=\"\"\r\n                                />\r\n                                <CircularProgress className=\"circleProgress\">\r\n                                    <p>Please Wait...</p>\r\n                                </CircularProgress>\r\n                            </Box>\r\n                        </StyledLoading>\r\n                    ) : null}\r\n                </StyledTable>\r\n                {pagination.item.length != 0 && loading !== true ? (\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            justifyContent: 'end',\r\n                            mt: 1,\r\n                            mr: 3,\r\n                            ml: 3,\r\n                        }}\r\n                    >\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ m: 1 }}\r\n                            disabled={pagination.page === 1}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) =>\r\n                                setPagination((p) => ({\r\n                                    ...p,\r\n                                    page: --p.page,\r\n                                }))\r\n                            }\r\n                        >\r\n                            Previous\r\n                        </Button>\r\n\r\n                        <h6 style={{ marginTop: '19px' }}>\r\n                            {pagination.page}/{pagination.totalPage}\r\n                        </h6>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            sx={{ m: 1 }}\r\n                            disabled={pagination.page === pagination.totalPage}\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) =>\r\n                                setPagination((p) => ({\r\n                                    ...p,\r\n                                    page: ++p.page,\r\n                                }))\r\n                            }\r\n                        >\r\n                            Next\r\n                        </Button>\r\n                    </Box>\r\n                ) : null}\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PaginationTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\WarehouseRouter.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-scan.jsx",["4420","4421","4422","4423","4424","4425","4426","4427","4428","4429","4430","4431","4432","4433","4434","4435","4436","4437","4438","4439","4440","4441","4442","4443","4444","4445","4446","4447","4448","4449","4450","4451","4452"],"import {\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    TextField,\r\n    Checkbox,\r\n} from '@mui/material'\r\nimport React, { useState } from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { SimpleCard, Breadcrumb } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../axios'\r\n\r\nconst StyledTable = styled(Table)(({ theme }) => ({\r\n    whiteSpace: 'pre',\r\n    '& thead': {\r\n        '& tr': {\r\n            '& th': {\r\n                paddingLeft: 0,\r\n                paddingRight: 0,\r\n            },\r\n        },\r\n    },\r\n    '& tbody': {\r\n        '& tr': {\r\n            '& td': {\r\n                paddingLeft: 0,\r\n                textTransform: 'capitalize',\r\n            },\r\n        },\r\n    },\r\n}))\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst PaginationTable = () => {\r\n    const [bagData, setBagData] = useState([])\r\n    /**************************************************************************** */\r\n    const [bagId, setBagId] = useState('')\r\n    const [bagSuccess, setbagSuccess] = useState(false)\r\n    const [awbn, setAwbn] = useState('')\r\n    const [uic, setUic] = useState(false)\r\n    const [sleaves, setSleaves] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [disAwbnText, SetDisAwbText] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n    const handelCheckBagId = async (e) => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                let obj = {\r\n                    location: location,\r\n                    bagId: bagId,\r\n                }\r\n                let res = await axiosWarehouseIn.post('/checkBagId', obj)\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    getitem()\r\n                    setbagSuccess(true)\r\n                } else {\r\n                    setbagSuccess(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            setbagSuccess(false)\r\n            alert(error.response.data.message)\r\n        }\r\n    }\r\n    const getitem = async () => {\r\n        try {\r\n            let response = await axiosWarehouseIn.post('/getBagItem/' + bagId)\r\n            if (response.status === 200) {\r\n                setBagData(response.data.data)\r\n                //   dataTableFun()\r\n            } else if (response.status == 201) {\r\n                setBagData(response.data.data)\r\n                alert(response.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelAwbn = async (e) => {\r\n        if (e.target.value.length >= 12) {\r\n            if (bagId == '') {\r\n                alert('Please Fill The Input')\r\n            } else {\r\n                try {\r\n                    SetDisAwbText(true)\r\n                    let admin = localStorage.getItem('prexo-authentication')\r\n                    if (admin) {\r\n                        let { location } = jwt_decode(admin)\r\n                        let obj = {\r\n                            awbn: e.target.value,\r\n                            bagId: bagId,\r\n                            location: location,\r\n                        }\r\n                        let res = await axiosWarehouseIn.post('/checkAwbn', obj)\r\n                        if (res.status == 200) {\r\n                            if (\r\n                                res.data.message == 'AWBN Number Is Duplicate'\r\n                            ) {\r\n                                setAwbn('')\r\n                                handelSubmitStock(res.data.data, 'Duplicate')\r\n                            } else if (\r\n                                res.data.message == 'AWBN Number Is Invalid'\r\n                            ) {\r\n                                setAwbn('')\r\n                                handelSubmitStock(res.data.data, 'Invalid')\r\n                            } else {\r\n                                setAwbn('')\r\n                                handelSubmitStock(res.data.data, 'Valid')\r\n                            }\r\n                        } else {\r\n                            SetDisAwbText(false)\r\n                            alert(res.data.message)\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    alert(error.response.data.message)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const handelSubmitStock = async (awbn, status) => {\r\n        if (bagId == '') {\r\n            alert('Please Fill the Input')\r\n        } else if (bagData[0]?.items != undefined) {\r\n            if (\r\n                bagData[0]?.items?.filter(function (item) {\r\n                    return item.status != 'Duplicate'\r\n                }).length == bagData[0]?.limit\r\n            ) {\r\n                alert('Bag Is Full')\r\n            } else {\r\n                try {\r\n                    let obj = {\r\n                        bag_id: bagId,\r\n                        awbn_number: awbn.tracking_id,\r\n                        order_id: awbn.order_id,\r\n                        order_date: awbn.order_date,\r\n                        status: status,\r\n                        sotckin_date: Date.now(),\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/stockInToWarehouse',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        SetDisAwbText(false)\r\n                        setAwbn('')\r\n                        getitem()\r\n                    } else {\r\n                        SetDisAwbText(false)\r\n                        alert(res.data.message)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const handeleUic = () => {\r\n        if (uic == false) {\r\n            setUic(true)\r\n        } else {\r\n            setUic(false)\r\n        }\r\n    }\r\n    const handeleSleaves = () => {\r\n        if (sleaves == false) {\r\n            setSleaves(true)\r\n        } else {\r\n            setSleaves(false)\r\n        }\r\n    }\r\n    const handelClose = async (e) => {\r\n        try {\r\n            setLoading(true)\r\n            if (\r\n                bagData[0]?.items.filter(function (item) {\r\n                    return item.status == 'Duplicate'\r\n                }).length != 0\r\n            ) {\r\n                alert('Please Remove Duplicate Items')\r\n                setLoading(false)\r\n            } else if (\r\n                bagData[0]?.items.filter(function (item) {\r\n                    return item.status == 'Invalid'\r\n                }).length != 0\r\n            ) {\r\n                alert('Invalid item found request to admin remove')\r\n                setLoading(false)\r\n            } else if (bagData[0]?.items.length == bagData[0]?.limit) {\r\n                let obj = {\r\n                    bagId: bagId,\r\n                    uic: uic,\r\n                    sleaves: sleaves,\r\n                    stage: 'Closed',\r\n                }\r\n                let res = await axiosWarehouseIn.post('/bagClosing', obj)\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    window.location.reload(false)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } else {\r\n                let obj = {\r\n                    bagId: bagId,\r\n                    uic: uic,\r\n                    sleaves: sleaves,\r\n                    stage: 'Pre-closure',\r\n                }\r\n                let res = await axiosWarehouseIn.post('/bagClosing', obj)\r\n                if (res.status == 200) {\r\n                    alert('Bag going to Pre-closure')\r\n                    setLoading(false)\r\n                    window.location.reload(false)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelDelete = async (id, awbn, state) => {\r\n        try {\r\n            let obj = {\r\n                id: id,\r\n                bagId: bagId,\r\n                awbn: awbn,\r\n                state: state,\r\n            }\r\n            let data = await axiosWarehouseIn.post('/stockin', obj)\r\n            if (data.status == 200) {\r\n                alert(data.data.message)\r\n                getitem()\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Bag', path: '/' },\r\n                        { name: 'Scan' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <SimpleCard title=\"Item\">\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'space-between',\r\n                        mb: 3,\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            justifyContent: 'row',\r\n                        }}\r\n                    >\r\n                        <TextField\r\n                            size=\"medium\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            label=\"Bag ID\"\r\n                            onChange={(e) => setBagId(e.target.value)}\r\n                        />\r\n                        <Button\r\n                            sx={{ ml: 2, mb: 1, mt: 1, mr: 2, height: '37px' }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            disabled={bagId == ''}\r\n                            onClick={handelCheckBagId}\r\n                        >\r\n                            GO\r\n                        </Button>\r\n                        {bagSuccess ? (\r\n                            <>\r\n                                <TextField\r\n                                    id=\"outlined-password-input\"\r\n                                    type=\"text\"\r\n                                    inputRef={(input) => input && input.focus()}\r\n                                    name=\"doorsteps_diagnostics\"\r\n                                    label=\"SCAN AWBN\"\r\n                                    value={awbn}\r\n                                    disabled={disAwbnText}\r\n                                    onChange={(e) => {\r\n                                        setAwbn(e.target.value)\r\n                                        handelAwbn(e)\r\n                                    }}\r\n                                    inputProps={{\r\n                                        style: {\r\n                                            width: 'auto',\r\n                                        },\r\n                                    }}\r\n                                />\r\n                            </>\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </Box>\r\n                    {bagData.length != 0 ? (\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                justifyContent: 'end',\r\n                            }}\r\n                        >\r\n                            <Box\r\n                                sx={{\r\n                                    m: 2,\r\n                                }}\r\n                            >\r\n                                <h4>Total </h4>\r\n                                <h4\r\n                                    style={{\r\n                                        marginLeft: '-2px',\r\n                                        fontSize: '24px',\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        bagData[0]?.items?.filter(function (\r\n                                            item\r\n                                        ) {\r\n                                            return item.status != 'Duplicate'\r\n                                        }).length\r\n                                    }\r\n                                    /{bagData[0]?.limit}\r\n                                </h4>\r\n                            </Box>\r\n\r\n                            <Box\r\n                                sx={{\r\n                                    m: 2,\r\n                                }}\r\n                            >\r\n                                <h4>Valid</h4>\r\n                                <h4\r\n                                    style={{\r\n                                        marginLeft: '13px',\r\n                                        fontSize: '24px',\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        bagData[0]?.items?.filter(function (\r\n                                            item\r\n                                        ) {\r\n                                            return item.status == 'Valid'\r\n                                        }).length\r\n                                    }\r\n                                </h4>\r\n                            </Box>\r\n                            <Box\r\n                                sx={{\r\n                                    m: 2,\r\n                                }}\r\n                            >\r\n                                <h4>In Valid</h4>\r\n                                <h4\r\n                                    style={{\r\n                                        marginLeft: '13px',\r\n                                        fontSize: '24px',\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        bagData[0]?.items?.filter(function (\r\n                                            item\r\n                                        ) {\r\n                                            return item.status == 'Invalid'\r\n                                        }).length\r\n                                    }\r\n                                </h4>\r\n                            </Box>\r\n\r\n                            <Box\r\n                                sx={{\r\n                                    m: 2,\r\n                                }}\r\n                            >\r\n                                <h4>Duplicate</h4>\r\n                                <h4\r\n                                    style={{\r\n                                        marginLeft: '16px',\r\n                                        fontSize: '24px',\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        bagData[0]?.items?.filter(function (\r\n                                            item\r\n                                        ) {\r\n                                            return item.status == 'Duplicate'\r\n                                        }).length\r\n                                    }\r\n                                </h4>\r\n                            </Box>\r\n                        </Box>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </Box>\r\n\r\n                <StyledTable>\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>S.NO</TableCell>\r\n                            <TableCell>AWBN Number</TableCell>\r\n                            <TableCell>Order ID</TableCell>\r\n                            <TableCell>Order Date</TableCell>\r\n                            <TableCell>Status</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {bagData[0]?.items?.map((data, index) => (\r\n                            <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                <TableCell>{index + 1}</TableCell>\r\n                                <TableCell>{data?.awbn_number}</TableCell>\r\n                                <TableCell>{data?.order_id}</TableCell>\r\n                                <TableCell>\r\n                                    {data?.order_date == null\r\n                                        ? 'No Order Date'\r\n                                        : new Date(\r\n                                              data?.order_date\r\n                                          ).toLocaleString('en-GB', {\r\n                                              year: 'numeric',\r\n                                              month: '2-digit',\r\n                                              day: '2-digit',\r\n                                          })}\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    style={\r\n                                        data.status == 'Valid'\r\n                                            ? { color: 'green' }\r\n                                            : { color: 'red' }\r\n                                    }\r\n                                >\r\n                                    {data.status}\r\n                                </TableCell>\r\n                                {data.status == 'Valid' ||\r\n                                data.status == 'Invalid' ? null : (\r\n                                    <TableCell>\r\n                                        <Button\r\n                                            sx={{\r\n                                                ml: 2,\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            style={{ backgroundColor: 'red' }}\r\n                                            component=\"span\"\r\n                                            onClick={() => {\r\n                                                if (\r\n                                                    window.confirm(\r\n                                                        'You want to Remove?'\r\n                                                    )\r\n                                                ) {\r\n                                                    handelDelete(\r\n                                                        data._id,\r\n                                                        data?.awbn_number,\r\n                                                        data.status\r\n                                                    )\r\n                                                }\r\n                                            }}\r\n                                        >\r\n                                            Remove\r\n                                        </Button>\r\n                                    </TableCell>\r\n                                )}\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </StyledTable>\r\n                {bagData[0]?.items?.length != 0 && bagData.length != 0 ? (\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            justifyContent: 'end',\r\n                            mt: 2,\r\n                            mr: 3,\r\n                            ml: 3,\r\n                        }}\r\n                    >\r\n                        <Box>\r\n                            <Checkbox\r\n                                onClick={(e) => handeleUic()}\r\n                                sx={{ ml: 3 }}\r\n                            />\r\n                            <label>UIC Label</label>\r\n\r\n                            <Checkbox\r\n                                onClick={(e) => handeleSleaves()}\r\n                                sx={{ ml: 3 }}\r\n                            />\r\n                            <label>Sleeves</label>\r\n                            <Button\r\n                                sx={{\r\n                                    ml: 2,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: 'red' }}\r\n                                component=\"span\"\r\n                                disabled={loading == true ? true : false}\r\n                                onClick={(e) => {\r\n                                    if (window.confirm('You want to Close?')) {\r\n                                        handelClose(e)\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Close\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </SimpleCard>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default PaginationTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Dashboard\\dashboard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Dashboard\\card.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-issue-request\\bag-issue-request.jsx",["4453","4454","4455","4456"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [userList, setRequests] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const fetchData = async () => {\r\n                try {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/getRequests/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setRequests(res.data.data)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelDetailPage = (e, bagId) => {\r\n      \r\n        navigate('/wareshouse/bag/bag-issue-request/approve/' + bagId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Max',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Valid',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Valid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Total',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            disabled={value == 'In Progress'}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => {\r\n                                handelDetailPage(e, value)\r\n                            }}\r\n                            style={{ backgroundColor: 'green' }}\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Bag', path: '/' },\r\n                        { name: 'Bag-Issue-Request' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={userList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\bag-close-requests.jsx",["4457","4458","4459"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    Button,\r\n} from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [bot, setBot] = useState([])\r\n    const [trayId, setTrayId] = useState('')\r\n    const [counts, setCounts] = useState('')\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let botTray = await axiosWarehouseIn.post(\r\n                        '/closeBotTray/' + location\r\n                    )\r\n                    if (botTray.status == 200) {\r\n                        setBot(botTray.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/tray/item/' + id)\r\n    }\r\n    const handelViewDetailTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/bot-done/tray-close/' + id)\r\n    }\r\n    const handelViewSummery = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/bag/bag-close-requests/summery/' + id)\r\n    }\r\n\r\n    const handelTrayReceived = async () => {\r\n        setLoading(true)\r\n        try {\r\n            let obj = {\r\n                trayId: trayId,\r\n                count: counts,\r\n            }\r\n            let res = await axiosWarehouseIn.post('/receivedTray', obj)\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setOpen(false)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            } else {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value[0]?.bag_id,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'Closed Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                disabled={value === 'Closed By Bot'}\r\n                                style={{ backgroundColor: '#21b6ae' }}\r\n                                onClick={(e) => {\r\n                                    handelViewSummery(\r\n                                        e,\r\n                                        tableMeta.rowData[2]?.[0]?.bag_id\r\n                                    )\r\n                                }}\r\n                            >\r\n                                Summery\r\n                            </Button>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                disabled={value === 'Closed By Bot'}\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) => {\r\n                                    handelViewTray(e, tableMeta.rowData[1])\r\n                                }}\r\n                            >\r\n                                View\r\n                            </Button>\r\n\r\n                            {value !== 'Received From BOT' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    disabled={loading}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        setOpen(true)\r\n                                        setTrayId(tableMeta.rowData[1])\r\n                                    }}\r\n                                >\r\n                                    RECEIVE\r\n                                </Button>\r\n                            ) : (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'red' }}\r\n                                    onClick={(e) => {\r\n                                        handelViewDetailTray(\r\n                                            e,\r\n                                            tableMeta.rowData[1]\r\n                                        )\r\n                                    }}\r\n                                >\r\n                                    Close\r\n                                </Button>\r\n                            )}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Please verify the count of - {trayId}\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <TextField\r\n                        label=\"Enter Item Count\"\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => {\r\n                            setCounts(e.target.value)\r\n                        }}\r\n                        inputProps={{ maxLength: 3 }}\r\n                        onKeyPress={(event) => {\r\n                            if (!/[0-9]/.test(event.key)) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        variant=\"contained\"\r\n                        disabled={counts === '' ? true : false}\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelTrayReceived(e)\r\n                        }}\r\n                    >\r\n                        RECEIVED\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Bag', path: '/' },\r\n                        { name: 'Bag-Close-Request' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={bot}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Pmt-mmt\\tray-close-request\\tray-requests.jsx",["4460","4461","4462","4463","4464","4465","4466","4467","4468","4469","4470","4471"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport {\r\n    Button,\r\n    MenuItem,\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContent,\r\n    DialogActions,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    TextField,\r\n    InputAdornment,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport * as Yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport SearchIcon from '@mui/icons-material/Search'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const navigate = useNavigate()\r\n    const [open, setOpen] = React.useState(false)\r\n    const [assingNewTray, setAssignNewTray] = useState(false)\r\n    const [trayData, setTrayData] = useState([])\r\n    const [counts, setCounts] = useState('')\r\n    const [botUsers, setBotUsers] = useState([])\r\n    const [trayId, setTrayId] = useState('')\r\n    const [userTray, setUserTray] = useState('')\r\n    const [trayStatus, setTrayStatus] = useState('')\r\n    const [trayIdCheck, setTrayIdCheck] = useState('')\r\n    const [loadingAssign, setLoadingAssign] = useState(false)\r\n    const [laodingRecieved, setLoadinRecieved] = useState(false)\r\n    const schema = Yup.object().shape({\r\n        user_name: Yup.string().required('Required*').nullable(),\r\n        tray_type: Yup.string().required('Required*').nullable(),\r\n        tray_Id: Yup.string().required('Required*').nullable(),\r\n    })\r\n    // ON SUBMIT FOR ASSIGN NEW TRAY\r\n    const onSubmit = async (values) => {\r\n        try {\r\n            setLoadingAssign(true)\r\n            let res = await axiosWarehouseIn.post('/assignNewTray', values)\r\n            if (res.status === 200) {\r\n                setLoadingAssign(false)\r\n                alert(res.data.message)\r\n                setAssignNewTray(false)\r\n                setUserTray('')\r\n                setTrayStatus('')\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n    const handelOpen = async () => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                let res = await axiosWarehouseIn.post('/botUsers/' + location)\r\n                if (res.status == 200) {\r\n                    setAssignNewTray(true)\r\n                    setBotUsers(res.data.data)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                const fetchData = async () => {\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/trayCloseRequest/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTrayData(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [isAlive])\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    const handleCloseAssignNewTray = () => {\r\n        setAssignNewTray(false)\r\n        reset({\r\n            tray_Id: '',\r\n            tray_type: '',\r\n            user_name: '',\r\n        })\r\n        setUserTray('')\r\n        setTrayStatus('')\r\n    }\r\n\r\n    const handelTrayReceived = async () => {\r\n        setLoadinRecieved(true)\r\n        try {\r\n            let obj = {\r\n                trayId: trayId,\r\n                count: counts,\r\n            }\r\n            let res = await axiosWarehouseIn.post('/receivedTray', obj)\r\n            if (res.status == 200) {\r\n                setLoadinRecieved(false)\r\n                alert(res.data.message)\r\n                setOpen(false)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            } else {\r\n                setLoadinRecieved(false)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n            setLoadinRecieved(false)\r\n        }\r\n    }\r\n    // CHECK TRAY\r\n    const handelBotTrayCheck = async (username, trayType) => {\r\n        if (username === '') {\r\n            alert('Please select user')\r\n            reset({\r\n                user_name: null,\r\n            })\r\n        } else {\r\n            try {\r\n                setUserTray('')\r\n                let obj = {\r\n                    username: username,\r\n                    trayType: trayType,\r\n                }\r\n                let res = await axiosWarehouseIn.post('/checkBotUserTray', obj)\r\n                if (res.status === 200) {\r\n                } else {\r\n                    setUserTray(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handelTrayId = async (e) => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (\r\n                    getValues('user_name') === '' ||\r\n                    getValues('tray_type') === ''\r\n                ) {\r\n                    alert('Please select user and tray type')\r\n                } else if (trayIdCheck == '') {\r\n                    alert('Please add tray id')\r\n                } else {\r\n                    if (getValues('tray_type') == 'MMT') {\r\n                        let res = await axiosWarehouseIn.post(\r\n                            '/checkMmtTray/' + trayIdCheck + '/' + location\r\n                        )\r\n                        if (res.status == 200) {\r\n                            setTrayStatus(res.data.status)\r\n                        } else {\r\n                            alert(res.data.message)\r\n                        }\r\n                    } else if (getValues('tray_type') == 'PMT') {\r\n                        let res = await axiosWarehouseIn.post(\r\n                            '/checkPmtTray/' + trayIdCheck + '/' + location\r\n                        )\r\n                        if (res.status == 200) {\r\n                            setTrayStatus(res.data.status)\r\n                        } else {\r\n                            alert(res.data.message)\r\n                        }\r\n                    } else {\r\n                        let res = await axiosWarehouseIn.post(\r\n                            '/checkBotTray/' + trayIdCheck + '/' + location\r\n                        )\r\n                        if (res.status == 200) {\r\n                            setTrayStatus(res.data.status)\r\n                        } else {\r\n                            alert(res.data.message)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/tray/item/' + id)\r\n    }\r\n    const handelViewDetailTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/bot-done/tray-close/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'Closed Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                disabled={value === 'Closed By Bot'}\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) => {\r\n                                    handelViewTray(e, tableMeta.rowData[1])\r\n                                }}\r\n                            >\r\n                                View\r\n                            </Button>\r\n\r\n                            {value !== 'Received From BOT' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    disabled={laodingRecieved}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        setOpen(true)\r\n                                        setTrayId(tableMeta.rowData[1])\r\n                                    }}\r\n                                >\r\n                                    RECEIVE\r\n                                </Button>\r\n                            ) : (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'red' }}\r\n                                    onClick={(e) => {\r\n                                        handelViewDetailTray(\r\n                                            e,\r\n                                            tableMeta.rowData[1]\r\n                                        )\r\n                                    }}\r\n                                >\r\n                                    Close\r\n                                </Button>\r\n                            )}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Please verify the count of - {trayId}\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    {/* <h6>\r\n            {\" \"}\r\n            <Checkbox\r\n              onClick={(e) => {\r\n                receiveCheck == \"\"\r\n                  ? setReceiveCheck(\"I have validated the counts\")\r\n                  : receiveCheck(\"\");\r\n              }}\r\n              {...label}\r\n              sx={{ ml: 3 }}\r\n            />\r\n            I have validated the counts\r\n          </h6> */}\r\n                    <TextField\r\n                        label=\"Enter Item Count\"\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => {\r\n                            setCounts(e.target.value)\r\n                        }}\r\n                        inputProps={{ maxLength: 3 }}\r\n                        onKeyPress={(event) => {\r\n                            if (!/[0-9]/.test(event.key)) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        variant=\"contained\"\r\n                        disabled={counts === '' ? true : false}\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelTrayReceived(e)\r\n                        }}\r\n                    >\r\n                        RECEIVED\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={assingNewTray}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleCloseAssignNewTray}\r\n                >\r\n                    Assign new tray\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <FormControl fullWidth>\r\n                        <InputLabel\r\n                            sx={{ pt: 2 }}\r\n                            id=\"demo-simple-select-label\"\r\n                        >\r\n                            Bot users\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            fullWidth\r\n                            label=\"User Type\"\r\n                            onChange={(e) => {\r\n                                reset({ tray_type: null })\r\n                            }}\r\n                            {...register('user_name')}\r\n                            error={errors.user_name ? true : false}\r\n                            helperText={errors.user_name?.message}\r\n                            sx={{ mt: 2 }}\r\n                        >\r\n                            {botUsers.map((data) => (\r\n                                <MenuItem value={data.user_name}>\r\n                                    {data.user_name}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    <FormControl fullWidth>\r\n                        <InputLabel\r\n                            sx={{ pt: 2 }}\r\n                            id=\"demo-simple-select-label\"\r\n                        >\r\n                            Tray Type\r\n                        </InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            fullWidth\r\n                            label=\"User Type\"\r\n                            {...register('tray_type')}\r\n                            error={errors.tray_type ? true : false}\r\n                            helperText={errors.tray_type?.message}\r\n                            sx={{ mt: 2 }}\r\n                        >\r\n                            <MenuItem value=\"\">Select</MenuItem>\r\n\r\n                            <MenuItem\r\n                                onClick={(e) =>\r\n                                    handelBotTrayCheck(\r\n                                        getValues('user_name'),\r\n                                        'PMT'\r\n                                    )\r\n                                }\r\n                                value=\"PMT\"\r\n                            >\r\n                                PMT\r\n                            </MenuItem>\r\n                            <MenuItem\r\n                                onClick={(e) =>\r\n                                    handelBotTrayCheck(\r\n                                        getValues('user_name'),\r\n                                        'MMT'\r\n                                    )\r\n                                }\r\n                                value=\"MMT\"\r\n                            >\r\n                                MMT\r\n                            </MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n\r\n                    {userTray != '' ? (\r\n                        <h6 style={{ marginTop: '4px', color: 'red' }}>\r\n                            {userTray}\r\n                        </h6>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n\r\n                    <TextField\r\n                        label=\"Tray Id\"\r\n                        variant=\"outlined\"\r\n                        fullWidth\r\n                        {...register('tray_Id')}\r\n                        error={errors.tray_Id ? true : false}\r\n                        helperText={\r\n                            errors.tray_Id ? errors.tray_Id.message : ''\r\n                        }\r\n                        onChange={(e) => setTrayIdCheck(e.target.value)}\r\n                        InputProps={{\r\n                            endAdornment: (\r\n                                <InputAdornment>\r\n                                    <IconButton\r\n                                        onClick={(e) => {\r\n                                            handelTrayId(e)\r\n                                        }}\r\n                                    >\r\n                                        <SearchIcon />\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                    {trayStatus !== '' ? (\r\n                        <TextField\r\n                            InputLabelProps={{ shrink: true }}\r\n                            label=\"Tray Status\"\r\n                            variant=\"standard\"\r\n                            fullWidth\r\n                            value={trayStatus}\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        disabled={\r\n                            (trayStatus !== 'Open' && trayStatus !== 'Inuse') ||\r\n                            userTray !== ''\r\n                                ? true\r\n                                : false || loadingAssign == true\r\n                                ? true\r\n                                : false\r\n                        }\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={handleSubmit(onSubmit)}\r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'PMT And MMT', path: '/' },\r\n                        { name: 'Tray-Close-Request' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Button\r\n                variant=\"contained\"\r\n                style={{ backgroundColor: 'primery' }}\r\n                onClick={(e) => {\r\n                    handelOpen()\r\n                }}\r\n            >\r\n                Assign new tray\r\n            </Button>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Pmt-mmt\\issued-pmt-mmt\\issue-pmt-mmt.jsx",["4472","4473","4474","4475"],"import jwt_decode from 'jwt-decode'\r\nimport MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [trayData, setTrayData] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { location } = jwt_decode(token)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/inuse-mmt-pmt/' + location + '/' + 'Issued'\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTrayData(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n            fetchData()\r\n        }\r\n    }, [])\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/pmt-mmt/issued/view-item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: false,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta?.rowData[2],\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => {\r\n                                handelViewTray(e, value)\r\n                            }}\r\n                            style={{ backgroundColor: 'primery' }}\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'PMT and MMT', path: '/' },\r\n                        { name: 'Issued' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bot\\bot-to-release\\bot-tray.jsx",["4476"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [botTray, setBotTray] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/tray-for-release/' +\r\n                            location +\r\n                            '/' +\r\n                            'Closed By Sorting Agent' +\r\n                            '/' +\r\n                            'BOT'\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setBotTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    const handelRelease = async (e, trayId) => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosWarehouseIn.post(\r\n                '/approve-release-bot-tray/' + trayId\r\n            )\r\n            if (res.status === 200) {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/bot/release/view-item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Sorting Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Max',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta.rowData[4],\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) => {\r\n                                    handelViewTray(e, value)\r\n                                }}\r\n                            >\r\n                                View\r\n                            </Button>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                disabled={loading}\r\n                                onClick={(e) => {\r\n                                    if (\r\n                                        window.confirm('You Want to Release?')\r\n                                    ) {\r\n                                        handelRelease(e, value)\r\n                                    }\r\n                                }}\r\n                                style={{ backgroundColor: 'green' }}\r\n                                component=\"span\"\r\n                            >\r\n                                Release Tray\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'BOT', path: '/' },\r\n                        { name: 'Bot-To-Release' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={botTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\wht-tray\\tray.jsx",["4477","4478","4479","4480","4481"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/whtTray/' + location + '/' + 'all-wht-tray'\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'actual_items',\r\n            label: 'acutual_items',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        (value.length == 0\r\n                            ? tableMeta.rowData[3].length\r\n                            : value.length) +\r\n                        '/' +\r\n                        tableMeta.rowData[4]\r\n                    )\r\n                },\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'WHT-Tray' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\In-sorting\\tray.jsx",["4482","4483","4484","4485"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Issued to sorting agent/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[3],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'In-Soring' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Charging-request\\requests.jsx",["4486","4487","4488"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [chargingRequest, setChargingRequest] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/request-for-assign/' + 'Send_for_charging/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setChargingRequest(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n\r\n    const handelDetailPage = (e, trayId) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/charging-request/approve/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[6],\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelDetailPage(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Charging-Requests' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={chargingRequest}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\In-charging\\tray.jsx",["4489","4490","4491","4492"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Send to Charging/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[3],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'In-Charging-WHT-Tray' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-charging\\tray.jsx",["4493","4494","4495","4496","4497","4498","4499","4500"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [tray, setTray] = useState([])\r\n    const [open, setOpen] = React.useState(false)\r\n    const [counts, setCounts] = useState('')\r\n    const [trayId, setTrayId] = useState('')\r\n    const [refresh, setRefresh] = useState(refresh)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/wht-return-from-charging/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    const handelViewDetailTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/return-from-charging/close/' + id)\r\n    }\r\n\r\n    const handelTrayReceived = async () => {\r\n        try {\r\n            let obj = {\r\n                trayId: trayId,\r\n                counts: counts,\r\n                type: 'charging',\r\n            }\r\n            let res = await axiosWarehouseIn.post('/receivedTray', obj)\r\n            if (res.status == 200) {\r\n                alert(res.data.message)\r\n                setOpen(false)\r\n                setRefresh((refresh) => !refresh)\r\n            }\r\n            else{\r\n                alert(res.data.message) \r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/return-from-charging/view-item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'Charging Done Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            {tableMeta.rowData[2] != 'Received From Charging' &&\r\n                            tableMeta.rowData[2] !=\r\n                                'Received From Recharging' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        setOpen(true)\r\n                                        setTrayId(value)\r\n                                    }}\r\n                                >\r\n                                    RECEIVE\r\n                                </Button>\r\n                            ) : (\r\n                                <>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        View\r\n                                    </Button>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: 'red' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewDetailTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        Close\r\n                                    </Button>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Please verify the count of - {trayId}\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <TextField\r\n                        label=\"Enter Item Count\"\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => {\r\n                            setCounts(e.target.value)\r\n                        }}\r\n                        inputProps={{ maxLength: 3 }}\r\n                        onKeyPress={(event) => {\r\n                            if (!/[0-9]/.test(event.key)) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        disabled={counts === ''}\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelTrayReceived(e)\r\n                        }}\r\n                    >\r\n                        RECEIVED\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Return-from-charging' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\In-use-wht\\tray.jsx",["4501","4502"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Inuse/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelViewItem = (id) => {\r\n        navigate('/wareshouse/wht/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Display Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Limit',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'created_at',\r\n            label: 'Creation Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'In-use' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Bqc-request\\tray.jsx",["4503","4504","4505"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [chargingRequest, setChargingRequest] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/request-for-assign/' + 'send_for_bqc/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setChargingRequest(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n\r\n    const handelDetailPage = (e, trayId) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/bqc-request/approve/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[6],\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelDetailPage(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'BQC-Requests' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={chargingRequest}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-bqc\\tray.jsx",["4506","4507","4508","4509"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [tray, setTray] = useState([])\r\n    const [open, setOpen] = React.useState(false)\r\n    const [counts, setCounts] = useState('')\r\n    const [trayId, setTrayId] = useState('')\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/return-from-bqc-wht/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    const handelViewDetailTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/return-from-bqc/close/' + id)\r\n    }\r\n\r\n    const handelTrayReceived = async () => {\r\n        try {\r\n            let obj = {\r\n                trayId: trayId,\r\n                counts: counts,\r\n            }\r\n            let res = await axiosWarehouseIn.post('/recieved-from-bqc', obj)\r\n            if (res.status == 200) {\r\n                alert(res.data.message)\r\n                setOpen(false)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/return-from-bqc/view-item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'BQC Done Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            {tableMeta.rowData[3] != 'Received From BQC' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        setOpen(true)\r\n                                        setTrayId(value)\r\n                                    }}\r\n                                >\r\n                                    RECEIVE\r\n                                </Button>\r\n                            ) : (\r\n                                <>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        View\r\n                                    </Button>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: 'red' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewDetailTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        Close\r\n                                    </Button>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Please verify the count of - {trayId}\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <TextField\r\n                        label=\"Enter Item Count\"\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => {\r\n                            setCounts(e.target.value)\r\n                        }}\r\n                        inputProps={{ maxLength: 3 }}\r\n                        onKeyPress={(event) => {\r\n                            if (!/[0-9]/.test(event.key)) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        disabled={counts === ''}\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelTrayReceived(e)\r\n                        }}\r\n                    >\r\n                        RECEIVED\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Return-from-BQC' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Sorting\\Sorting-requests\\tray.jsx",["4510","4511","4512","4513","4514"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [botTray, setBotTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosMisUser.post(\r\n                        '/view-sorting-item/' + location + '/' + 'warehouse'\r\n                    )\r\n                    if (response.status === 200) {\r\n                        console.log(response.data.data)\r\n                        setBotTray(response.data.data)\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelViewTrayForSorting = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/sorting/request/approve/' + code)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray',\r\n            label: 'BOT Tray Id',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.[0]?.botTray?.join(', '),\r\n            },\r\n        },\r\n        {\r\n            name: '_id',\r\n            label: 'Sorting Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value?.[0]?.status_change_time).toLocaleString(\r\n                        'en-GB',\r\n                        {\r\n                            hour12: true,\r\n                        }\r\n                    ),\r\n            },\r\n        },\r\n        {\r\n            name: 'tray',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => value?.[0]?.sort_id,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray',\r\n            label: 'WHT Tray',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.[0]?.WhtTray?.join(', '),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'WHT Tray',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return value == 'Assigned to sorting agent' ? (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) =>\r\n                                handelViewTrayForSorting(\r\n                                    e,\r\n                                    tableMeta.rowData[6]\r\n                                )\r\n                            }\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Handover to Agent\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) =>\r\n                                handelViewTrayForSorting(\r\n                                    e,\r\n                                    tableMeta.rowData[2]\r\n                                )\r\n                            }\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Issue Trays\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Sorting', path: '/' },\r\n                        { name: 'Requests' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={botTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Sorting\\Return-from-sorting\\tray.jsx",["4515","4516","4517","4518","4519"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport Checkbox from '@mui/material/Checkbox'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [tray, setTray] = useState([])\r\n    const [counts, setCounts] = useState('')\r\n    const [open, setOpen] = React.useState(false)\r\n    const [trayId, setTrayId] = useState('')\r\n    const [refresh, setRefresh] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/return-from-sorting-wht/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [refresh])\r\n\r\n    const handelTrayReceived = async () => {\r\n        try {\r\n            let obj = {\r\n                trayId: trayId,\r\n                counts: counts,\r\n            }\r\n            let res = await axiosWarehouseIn.post('/recieved-from-sorting', obj)\r\n            if (res.status == 200) {\r\n                alert(res.data.message)\r\n                setOpen(false)\r\n                setRefresh((refresh) => !refresh)\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handelViewTray = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/tray/item/' + code)\r\n    }\r\n    const handelViewDetailTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/sorting/return-from-sorting/close/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Sorting Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'closed_time_sorting_agent',\r\n            label: 'Closed Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            {tableMeta.rowData[5] != 'Received From Sorting' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        setOpen(true)\r\n                                        setTrayId(value)\r\n                                    }}\r\n                                >\r\n                                    RECEIVED\r\n                                </Button>\r\n                            ) : (\r\n                                <>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        View\r\n                                    </Button>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: 'red' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewDetailTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        Close\r\n                                    </Button>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    RECEIVED\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <TextField\r\n                        label=\"Enter Item Count\"\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => {\r\n                            setCounts(e.target.value)\r\n                        }}\r\n                        inputProps={{ maxLength: 3 }}\r\n                        onKeyPress={(event) => {\r\n                            if (!/[0-9]/.test(event.key)) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        variant=\"contained\"\r\n                        disabled={counts === ''}\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelTrayReceived(e)\r\n                        }}\r\n                    >\r\n                        RECEIVED\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Sorting', path: '/' },\r\n                        { name: 'Return-From-Sorting' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Merge\\Merge-request\\tray.jsx",["4520","4521"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [tray, setTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { location } = jwt_decode(token)\r\n                const fetchData = async () => {\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/mmtMergeRequest/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n\r\n    const handelApprove = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/merge/request/approve/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[2],\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Sorting Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'to_merge',\r\n            label: 'To Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelApprove(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Merge', path: '/' },\r\n                        { name: 'Merge-Requests' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Merge\\Return-from-merge\\tray.jsx",["4522","4523","4524","4525","4526","4527"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Report\\pmt-report.jsx",["4528","4529","4530","4531","4532","4533","4534","4535","4536"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    MenuItem,\r\n    Box,\r\n    TextField,\r\n} from '@mui/material'\r\nimport moment from \"moment\";\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const [sortDate, setSortDate] = useState(\"\");\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((d, index) => {\r\n                    d.id = page * rowsPerPage + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const { location } = jwt_decode(admin)\r\n            const fetchData = async () => {\r\n                try {\r\n                    let obj = {\r\n                        location: location,\r\n                        trayType: 'PMT',\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/mmt-pmt-report',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [])\r\n\r\n    /****************************************DATE WISE SORT *************************************************** */\r\n    const handelSort = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                const { location } = jwt_decode(admin)\r\n                let obj = {\r\n                    date: sortDate,\r\n                    location: location,\r\n                    trayType: 'PMT',\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/sort-mmt-pmt-report',\r\n                    obj\r\n                )\r\n                if (res.status == 200) {\r\n                    setItem(res.data.data)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n  \r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <Table id=\"example\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>UIC</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>MUIC</TableCell>\r\n                        <TableCell>Brand</TableCell>\r\n                        <TableCell>Model</TableCell>\r\n                        <TableCell>Bag ID</TableCell>\r\n                        <TableCell>BOT Agent Name</TableCell>\r\n                        <TableCell>Assigned Date</TableCell>\r\n                        <TableCell>Tray ID</TableCell>\r\n                        <TableCell>Tray Type</TableCell>\r\n                        <TableCell>Tray Closed Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell>{data.tracking_id}</TableCell>\r\n                            <TableCell>{data.order_id}</TableCell>\r\n                            <TableCell>\r\n                                {data?.order[0]?.order_date != undefined\r\n                                    ? new Date(\r\n                                          data?.order[0]?.order_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.uic_code?.code}</TableCell>\r\n                            <TableCell>{data.imei}</TableCell>\r\n                            <TableCell>{data.item_id}</TableCell>\r\n                            <TableCell>{data?.product[0]?.muic}</TableCell>\r\n                            <TableCell>\r\n                                {data?.product[0]?.brand_name}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.product[0]?.model_name}\r\n                            </TableCell>\r\n                            <TableCell>{data.bag_id}</TableCell>\r\n                            <TableCell>{data.agent_name}</TableCell>\r\n                            <TableCell>\r\n                                {data?.assign_to_agent != undefined\r\n                                    ? new Date(\r\n                                          data?.assign_to_agent\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.tray_id}</TableCell>\r\n                            <TableCell>{data.tray_type}</TableCell>\r\n                            <TableCell>\r\n                                {new Date(\r\n                                    data?.warehouse_close_date\r\n                                ).toLocaleString('en-GB', {\r\n                                    hour12: true,\r\n                                })}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        )\r\n    }, [item, data])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Report', path: '/' },\r\n                        { name: 'PMT' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n               \r\n            >\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        flexDirection: 'start',\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        id=\"filled-select-currency\"\r\n                        type=\"Date\"\r\n                        onChange={(e) => {\r\n                            setSortDate(e.target.value)\r\n                        }}\r\n                        inputProps={{\r\n                            max: moment().format('YYYY-MM-DD'),\r\n                        }}\r\n                        sx={{ mt: 1, mb: 1 }}\r\n                        helperText=\"Please Select MMT closed Date\"\r\n                        variant=\"filled\"\r\n                    />\r\n                    <Button\r\n                        sx={{\r\n                            mt: 20,\r\n                            m: 2,\r\n                            height: '38px',\r\n                        }}\r\n                        disabled={sortDate == '' ? true : false}\r\n                        variant=\"contained\"\r\n                        style={{\r\n                            backgroundColor: '#206CE2',\r\n                            marginTop: '23px',\r\n                        }}\r\n                        onClick={(e) => {\r\n                            handelSort(e)\r\n                        }}\r\n                    >\r\n                        Sort\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={item.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Report\\Bot-report\\tray.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\BotRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\Bag\\view-assigned-all-bag.jsx",["4537"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosBot } from '../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [bag, setBag] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { user_name } = jwt_decode(token)\r\n                    let res = await axiosBot.post(\r\n                        '/getAssignedBag/' + user_name\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setBag(res.data.data)\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelView = (e, bagId) => {\r\n        navigate('/bot/bag/view/' + bagId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Max',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Valid',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Total',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) => value.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Date Of Closure',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => {\r\n                                handelView(e, value)\r\n                            }}\r\n                            style={{ backgroundColor: 'primery' }}\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Bag', path: '/' }]} />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Bag'}\r\n                data={bag}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\Tray\\assigned-all-tray.jsx",["4538","4539"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosBot } from '../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [trayData, setTrayData] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { user_name } = jwt_decode(token)\r\n                    let res = await axiosBot.post('/assignedTray/' + user_name)\r\n                    if (res.status == 200) {\r\n                        setTrayData(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/bot/tray/item/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta?.rowData[2],\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => {\r\n                                handelViewTray(e, value)\r\n                            }}\r\n                            style={{ backgroundColor: 'primery' }}\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Tray', path: '/' }]} />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\Dashboard\\dashboard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\Dashboard\\card.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\SortingRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\Dashboard\\dashboard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\Sorting-request\\tray.jsx",["4540"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\nimport { axiosSortingAgent } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [botTray, setBotTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { user_name } = jwt_decode(admin)\r\n                    let response = await axiosSortingAgent.post(\r\n                        '/get-assigned-sorting-tray/' + user_name\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setBotTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelStartSorting = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/sorting/request/start-sorting/' + code)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[4],\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_wharehouse_from_bot',\r\n            label: 'Date Of Closure',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        year: 'numeric',\r\n                        month: '2-digit',\r\n                        day: '2-digit',\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        year: 'numeric',\r\n                        month: '2-digit',\r\n                        day: '2-digit',\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelStartSorting(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Start Sorting\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Sorting-Request', path: '/' }]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={botTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\Dashboard\\card.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Charging-components\\ChargingRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Charging-components\\Dashboard\\dashboard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Charging-components\\Tray\\tray.jsx",["4541","4542","4543","4544"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\nimport { axiosCharging } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [tray, setTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { user_name } = jwt_decode(token)\r\n                const fetchData = async () => {\r\n                    let res = await axiosCharging.post(\r\n                        '/assigned-tray/' + user_name\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/charging/tray/charging-in/' + id)\r\n    }\r\n    const handelChargingDone = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/charging/tray/charging-out/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[4],\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'assigned_date',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort:false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return tableMeta.rowData[6] == 'Issued to Charging' ||\r\n                        tableMeta.rowData[6] == 'Issued to Recharging' ? (\r\n                        <Button\r\n                            sx={{ m: 1 }}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            style={{ backgroundColor: '#206CE2' }}\r\n                            onClick={(e) => {\r\n                                handelViewTray(e, value)\r\n                            }}\r\n                        >\r\n                            Charging IN\r\n                        </Button>\r\n                    ) : (\r\n                        <Button\r\n                            sx={{ m: 1 }}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            style={{ backgroundColor: 'green' }}\r\n                            onClick={(e) => {\r\n                                handelChargingDone(e, value)\r\n                            }}\r\n                        >\r\n                            Charging Done\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Charging-Request', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Charging-components\\Dashboard\\card.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bqc-components\\BqcRoutes.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bqc-components\\Dashboard\\dashboard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bqc-components\\Tray\\tray.jsx",["4545","4546","4547","4548"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosBqc } from '../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [tray, setTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { user_name } = jwt_decode(token)\r\n                    let res = await axiosBqc.post('/assigned-tray/' + user_name)\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelBqcIn = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/bqc/tray/item-verify/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'actual_items',\r\n            label: 'actu',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'temp_array',\r\n            label: 'temp',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    tableMeta.rowData[6].length == 0 &&\r\n                    tableMeta.rowData[7].length == 0\r\n                        ? value.length + '/' + tableMeta.rowData[5]\r\n                        : tableMeta.rowData[8] === 'BQC work inprogress'\r\n                        ? tableMeta.rowData[6].length +\r\n                          tableMeta.rowData[7].length +\r\n                          '/' +\r\n                          tableMeta.rowData[5]\r\n                        : tableMeta.rowData[6].length !== 0 ||\r\n                          tableMeta.rowData[7].length !== 0\r\n                        ? value.length +\r\n                          tableMeta.rowData[7].length +\r\n                          tableMeta.rowData[6].length +\r\n                          '/' +\r\n                          tableMeta.rowData[5]\r\n                        : '',\r\n            },\r\n        },\r\n        {\r\n            name: 'assigned_date',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{ m: 1 }}\r\n                            type=\"submit\"\r\n                            variant=\"contained\"\r\n                            style={{ backgroundColor: 'green' }}\r\n                            onClick={(e) => {\r\n                                handelBqcIn(e, value)\r\n                            }}\r\n                        >\r\n                            Start BQC\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Bqc-Request', path: '/' }]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bqc-components\\Dashboard\\card.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\Login\\loginRouter.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\Login\\login.jsx",["4549","4550","4551","4552","4553","4554","4555","4556","4557","4558","4559","4560","4561","4562","4563","4564","4565","4566","4567","4568"],"import { Card, Grid, Button, CircularProgress, IconButton } from '@mui/material'\r\nimport { Box, styled, useTheme } from '@mui/system'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport useAuth from 'app/hooks/useAuth'\r\nimport { Paragraph } from 'app/components/Typography'\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport { H4 } from 'app/components/Typography'\r\nimport InputAdornment from '@mui/material/InputAdornment'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({\r\n    justifyContent: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(JustifyBox)(() => ({\r\n    height: '100%',\r\n    padding: '32px',\r\n    background: 'rgba(0, 0, 0, 0.01)',\r\n}))\r\n\r\nconst IMG = styled('img')(() => ({\r\n    width: '100%',\r\n}))\r\n\r\nconst RegisterRoot = styled(JustifyBox)(({ theme }) => ({\r\n    background: '#1A2038',\r\n    minHeight: '100vh !important',\r\n    '& .card': {\r\n        maxWidth: 650,\r\n        borderRadius: 12,\r\n        margin: '1rem',\r\n    },\r\n    '& .buttonProgress': {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    },\r\n    '& .socialButton': {\r\n        width: '100%',\r\n        '& img': {\r\n            margin: '0 8px',\r\n        },\r\n    },\r\n    '& .labelLink': {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'underline',\r\n    },\r\n}))\r\n\r\nconst Login = () => {\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [state, setState] = useState({})\r\n    const [message, setMessage] = useState('')\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const { LoginPrxo } = useAuth()\r\n    useEffect(() => {\r\n        let userExists = localStorage.getItem('prexo-authentication')\r\n        if (userExists) {\r\n            const { user_type } = jwt_decode(userExists)\r\n            if (user_type == undefined) {\r\n                navigate('/')\r\n            } else if (user_type == 'super-admin') {\r\n                navigate('/sup-admin/dashboard')\r\n            } else if (user_type == 'MIS') {\r\n                navigate('/mis/dashboard')\r\n            } else if (user_type == 'Warehouse') {\r\n                navigate('/warehouse/dashboard')\r\n            } else if (user_type == 'Bag Opening') {\r\n                navigate('/bot/dashboard')\r\n            } else if (user_type == 'Charging') {\r\n                navigate('/charging/dashboard')\r\n            } else if (user_type == 'BQC') {\r\n                navigate('/bqc/dashboard')\r\n            } else if (user_type == 'Sorting Agent') {\r\n                navigate('/sorting/dashboard')\r\n            } else if (user_type == 'Audit') {\r\n                navigate('/audit/dashboard')\r\n            }\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [])\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        setState({\r\n            ...state,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    const handleFormSubmit = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let response = await LoginPrxo(state.username, state.password)\r\n            if (response.status == 200) {\r\n                localStorage.setItem(\r\n                    'prexo-authentication',\r\n                    response.data.data.jwt\r\n                )\r\n                if (response.data.data?.user_type == 'super-admin') {\r\n                    navigate('/sup-admin/dashboard')\r\n                } else if (response.data.data?.user_type == 'MIS') {\r\n                    navigate('/mis/dashboard')\r\n                } else if (response.data.data?.user_type == 'Warehouse') {\r\n                    navigate('/warehouse/dashboard')\r\n                } else if (response.data.data?.user_type == 'Bag Opening') {\r\n                    navigate('/bot/dashboard')\r\n                } else if (response.data.data?.user_type == 'Charging') {\r\n                    navigate('/charging/dashboard')\r\n                } else if (response.data.data?.user_type == 'BQC') {\r\n                    navigate('/bqc/dashboard')\r\n                } else if (response.data.data?.user_type == 'Sorting Agent') {\r\n                    navigate('/sorting/dashboard')\r\n                } else if (response.data.data?.user_type == 'Audit') {\r\n                    navigate('/audit/dashboard')\r\n                }\r\n            } else {\r\n                setLoading(false)\r\n                setMessage(response.data.data.message)\r\n            }\r\n        } catch (e) {\r\n            setLoading(false)\r\n            console.log(e)\r\n            setMessage(e.message)\r\n        }\r\n    }\r\n    let { username, password } = state\r\n    const { palette } = useTheme()\r\n    const textError = palette.error.main\r\n    // PASSWORD SHOW AND HIDE\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword((showPassword) => !showPassword)\r\n    }\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault()\r\n    }\r\n    return (\r\n        <RegisterRoot>\r\n            <Card className=\"card\">\r\n                <Grid container>\r\n                    <Grid item lg={5} md={5} sm={5} xs={12}>\r\n                        <ContentBox>\r\n                            <IMG\r\n                                src=\"/assets/images/illustrations/posting_photo.svg\"\r\n                                alt=\"\"\r\n                            />\r\n                        </ContentBox>\r\n                    </Grid>\r\n                    <Grid item lg={7} md={7} sm={7} xs={12}>\r\n                        <Box p={4} height=\"100%\">\r\n                            <ValidatorForm onSubmit={handleFormSubmit}>\r\n                                <TextValidator\r\n                                    sx={{ mb: 3, width: '100%' }}\r\n                                    variant=\"outlined\"\r\n                                    size=\"large\"\r\n                                    label=\"Username\"\r\n                                    onChange={handleChange}\r\n                                    type=\"text\"\r\n                                    name=\"username\"\r\n                                    value={username || ''}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                />\r\n                                <TextValidator\r\n                                    sx={{ mb: '16px', width: '100%' }}\r\n                                    label=\"Password\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"large\"\r\n                                    onChange={handleChange}\r\n                                    name=\"password\"\r\n                                    type={showPassword ? 'text' : 'password'}\r\n                                    value={password || ''}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={\r\n                                                        handleClickShowPassword\r\n                                                    }\r\n                                                    onMouseDown={\r\n                                                        handleMouseDownPassword\r\n                                                    }\r\n                                                    edge=\"end\"\r\n                                                >\r\n                                                    {showPassword ? (\r\n                                                        <VisibilityOff />\r\n                                                    ) : (\r\n                                                        <Visibility />\r\n                                                    )}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                                {message && (\r\n                                    <Paragraph sx={{ color: textError }}>\r\n                                        {message}\r\n                                    </Paragraph>\r\n                                )}\r\n                                <FlexBox display=\"flex\" alignItems=\"center\">\r\n                                    <Box position=\"relative\">\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            disabled={loading}\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            Login\r\n                                        </Button>\r\n                                        {loading && (\r\n                                            <CircularProgress\r\n                                                size={24}\r\n                                                className=\"buttonProgress\"\r\n                                            />\r\n                                        )}\r\n                                    </Box>\r\n                                </FlexBox>\r\n                            </ValidatorForm>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n        </RegisterRoot>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\contexts\\PrexoAuthContext.js",["4569","4570","4571"],"import React, { createContext, useEffect, useReducer, useState } from 'react'\r\nimport firebase from 'firebase/compat/app'\r\nimport 'firebase/compat/auth'\r\n// import { firebaseConfig } from 'config.js'\r\nimport { MatxLoading } from 'app/components'\r\nimport { useNavigate } from 'react-router-dom'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosSuperAdminPrexo } from '../../axios'\r\n// if (!firebase.apps.length) {\r\n//     firebase.initializeApp(firebaseConfig)\r\n// }\r\nconst initialAuthState = {\r\n    isAuthenticated: false,\r\n    isInitialised: false,\r\n    user: null,\r\n}\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'AUTH_STATE_CHANGED': {\r\n            const { isAuthenticated, user } = action.payload\r\n\r\n            return {\r\n                ...state,\r\n                isAuthenticated,\r\n                isInitialised: true,\r\n                user,\r\n            }\r\n        }\r\n        default: {\r\n            return { ...state }\r\n        }\r\n    }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n    ...initialAuthState,\r\n    LoginPrxo: () => Promise.resolve(),\r\n    logout: () => Promise.resolve(),\r\n})\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const navigate = useNavigate()\r\n    const [state, dispatch] = useReducer(reducer, initialAuthState)\r\n    const LoginPrxo = async (username, password) => {\r\n        let res = await axiosSuperAdminPrexo.post('/login', {\r\n            user_name: username,\r\n            password: password,\r\n        })\r\n        if (res.status == 200) {\r\n            dispatch({\r\n                type: 'AUTH_STATE_CHANGED',\r\n                payload: {\r\n                    isAuthenticated: true,\r\n                    user: {\r\n                        id: res.data.data.data._id,\r\n                        name: res.data.data.data.name,\r\n                        avatar: res.data.data.data.profile,\r\n                        email: res.data.data.data.email,\r\n                        role: res.data.data.data.user_type,\r\n                    },\r\n                },\r\n            })\r\n        }\r\n        return res\r\n    }\r\n    const logout = () => {\r\n        localStorage.removeItem('prexo-authentication')\r\n        dispatch({\r\n            type: 'AUTH_STATE_CHANGED',\r\n            payload: {\r\n                isAuthenticated: true,\r\n                user: null,\r\n            },\r\n        })\r\n        navigate('/')\r\n    }\r\n    useEffect(() => {\r\n        let userExists = localStorage.getItem('prexo-authentication')\r\n        if (userExists) {\r\n            let user = jwt_decode(userExists)\r\n            dispatch({\r\n                type: 'AUTH_STATE_CHANGED',\r\n                payload: {\r\n                    isAuthenticated: true,\r\n                    user: {\r\n                        id: user.adminId,\r\n                        name: user.name,\r\n                        avatar: user.profile,\r\n                        email: user.email,\r\n                        role: user.user_type,\r\n                    },\r\n                },\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: 'AUTH_STATE_CHANGED',\r\n                payload: {\r\n                    isAuthenticated: true,\r\n                    user: null,\r\n                },\r\n            })\r\n        }\r\n        return\r\n    }, [dispatch])\r\n    if (!state.isInitialised) {\r\n        return <MatxLoading />\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider\r\n            value={{\r\n                ...state,\r\n                LoginPrxo,\r\n                logout,\r\n            }}\r\n        >\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\n\r\nexport default AuthContext\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\axios.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-products\\edit-product.jsx",["4572","4573","4574","4575"],"import React, { useState, useEffect } from 'react'\r\nimport { Dialog, Button, TextField } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    setEditFetchData,\r\n}) => {\r\n    const [productImage, setProductImage] = useState({\r\n        preview: '',\r\n        store: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(editFetchData).length !== 0) {\r\n            setProductImage({\r\n                ...productImage,\r\n                preview: editFetchData.image,\r\n            })\r\n            open()\r\n        }\r\n    }, [])\r\n\r\n    const handelEditImage = async () => {\r\n        try {\r\n            let obj = {\r\n                _id: editFetchData?._id,\r\n            }\r\n            let formdata = new FormData()\r\n            formdata.append('image', productImage.store)\r\n            for (let [key, value] of Object.entries(obj)) {\r\n                formdata.append(key, value)\r\n            }\r\n            let response = await axiosSuperAdminPrexo.post(\r\n                '/editProductImage',\r\n                formdata\r\n            )\r\n            if (response.status == 200) {\r\n                handleClose()\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: 'Update Successfully',\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setEditFetchData({})\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else {\r\n                handleClose()\r\n\r\n                setEditFetchData({})\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'error',\r\n                    title: response.data.message,\r\n                    showConfirmButton: false,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            handleClose()\r\n            setEditFetchData({})\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: 'Updation Failed',\r\n            })\r\n        }\r\n    }\r\n\r\n    const handelProfile = (event) => {\r\n        setProductImage({\r\n            preview: URL.createObjectURL(event.target.files[0]),\r\n            store: event.target.files[0],\r\n        })\r\n    }\r\n    return (\r\n        <Dialog open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Update Image</H4>\r\n                <img\r\n                    src={productImage.preview}\r\n                    height=\"60px\"\r\n                    width=\"60px\"\r\n                    style={{ borderRadius: '50%', margin: 'auto' }}\r\n                />\r\n\r\n                <TextFieldCustOm\r\n                    label=\"Image\"\r\n                    type=\"file\"\r\n                    onChange={(e) => {\r\n                        handelProfile(e)\r\n                    }}\r\n                    fullWidth\r\n                    InputLabelProps={{ shrink: true }}\r\n                    accept=\".jpg,.jpeg,.png,\"\r\n                    name=\"image\"\r\n                />\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={productImage.store == ''}\r\n                        onClick={(e) => {\r\n                            handelEditImage()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Update\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-users\\user-history.jsx",["4576","4577"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { styled } from '@mui/system'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport Avatar from '@mui/material/Avatar'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst UserTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [userList, setUserList] = useState([])\r\n    const { username } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchUser = async () => {\r\n            try {\r\n                let res = await axiosSuperAdminPrexo.post(\r\n                    '/getUsersHistoy/' + username\r\n                )\r\n                if (res.status === 200) {\r\n                    setUserList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchUser()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'image',\r\n            label: 'Profile',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: () => {\r\n                    return <Avatar variant=\"rounded\" src=\"profile\"></Avatar>\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'email',\r\n            label: 'Email',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'contact',\r\n            label: 'Mobile No',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'user_name',\r\n            label: 'User name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'user_type',\r\n            label: 'User Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'CPC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'device_name',\r\n            label: 'Device Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'device_id',\r\n            label: 'Device Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    if (value == 'Active') {\r\n                        return (\r\n                            <div style={{ color: 'green', fontWeight: 'bold' }}>\r\n                                {value}\r\n                            </div>\r\n                        )\r\n                    } else {\r\n                        return (\r\n                            <div style={{ color: 'red', fontWeight: 'bold' }}>\r\n                                {value}\r\n                            </div>\r\n                        )\r\n                    }\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'last_update_date',\r\n            label: 'Edited Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    if (value !== undefined) {\r\n                        new Date(value).toLocaleString('en-GB', {\r\n                            hour12: true,\r\n                        })\r\n                    }\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Users', path: '/' },\r\n                        { name: 'History' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <MUIDataTable\r\n                title={'User History'}\r\n                data={userList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default UserTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bag\\bag-audit.jsx",["4578","4579","4580","4581"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [audit, setAudit] = useState([])\r\n\r\n    const { bagId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post(\r\n                    '/getAudit/' + bagId\r\n                )\r\n                if (res.status === 200) {\r\n                    setAudit(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Date Of Closure ',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Max',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Valid',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Valid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Invalid',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Invalid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Duplicate',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Duplicate'\r\n                    }).length,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Total',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) => value.length,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb routeSegments={[{ name: 'Bag', path: '/' }]} />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Bag Audit'}\r\n                data={audit}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Ready-for-charging\\view-item.jsx",["4582","4583","4584"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosWarehouseIn } from '../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [whtTrayItem, setWhtTrayItem] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchWht = async () => {\r\n            try {\r\n                const res = await axiosWarehouseIn.post(\r\n                    '/getWhtTrayItem/' + trayId + '/' + 'all-wht-tray'\r\n                )\r\n                if (res.status === 200) {\r\n                    setWhtTrayItem(res.data?.data?.items)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchWht()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic', // field name in the row object\r\n            label: 'UIC', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand_name',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model_name',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tracking_id',\r\n            label: 'Tracking Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_id',\r\n            label: 'Bot Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'bot_agent',\r\n            label: 'Bot Agent',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Ready For Charging', path: '/' },\r\n                        { name: 'View-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <MUIDataTable\r\n                title={'WHT Tray Item'}\r\n                data={whtTrayItem}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Remove-invalid-item-from-bag\\view-item.jsx",["4585","4586","4587"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo, axiosWarehouseIn } from '../../../../axios'\r\nimport { Button } from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [bagItemList, setBagItemList] = useState([])\r\n    const { bagId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchBrand = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post(\r\n                    '/getBagItemInvalid/' + bagId\r\n                )\r\n                if (res.status === 200) {\r\n                    setBagItemList(res.data.data.items)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchBrand()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelDelete = async (id, awbn, state) => {\r\n        try {\r\n          let obj = {\r\n            id: id,\r\n            bagId: bagId,\r\n            awbn: awbn,\r\n            state: state,\r\n          };\r\n          let data = await axiosWarehouseIn.post(\"/stockin\", obj);\r\n          if (data.status == 200) {\r\n            alert(data.data.message);\r\n            setIsAlive((isAlive)=> !isAlive)\r\n          }\r\n          else{\r\n            alert(data.data.message)\r\n          }\r\n        } catch (error) {\r\n          alert(error);\r\n        }\r\n      };\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'awbn_number', // field name in the row object\r\n            label: 'Tracking Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: '_id', // field name in the row object\r\n            label: 'obj id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n                display:false\r\n            },\r\n        },\r\n        {\r\n            name: 'order_id',\r\n            label: 'Order Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'order_date',\r\n            label: 'Order Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        year: \"numeric\",\r\n                              month: \"2-digit\",\r\n                              day: \"2-digit\",\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n               \r\n            },\r\n        },\r\n        {\r\n            name: 'status',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return value == 'Invalid' ? (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => {\r\n                                if (window.confirm(\"You want to Remove?\")) {\r\n                                  handelDelete(\r\n                                    tableMeta.rowData[2],\r\n                                    tableMeta.rowData[1],\r\n                                    value,\r\n                                  );\r\n                                }\r\n                              }}\r\n                            style={{ backgroundColor: 'red' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Remove\r\n                        </Button>\r\n                    ) : null\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Remove Invalid Item', path: '/' },\r\n                        { name: 'View-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Bag Item'}\r\n                data={bagItemList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-tray\\tray-audit.jsx",["4588","4589","4590","4591"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [audit, setAudit] = useState([])\r\n\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post(\r\n                    '/getAudit/' + trayId\r\n                )\r\n                if (res.status === 200) {\r\n                    setAudit(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Date Of Closure ',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Max',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Valid',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Valid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Invalid',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Invalid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Duplicate',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Duplicate'\r\n                    }).length,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Total',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) => value.length,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Tray', path: '/' },\r\n                        { name: 'Tray-Audit' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray Audit'}\r\n                data={audit}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bot\\assign-dialog.jsx",["4592","4593","4594","4595","4596"],"import React, { useState, useEffect } from 'react'\r\nimport { Dialog, Button, Grid, TextField, MenuItem } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    open,\r\n    handleClose,\r\n    setIsAlive,\r\n    editFetchData,\r\n    botUsers,\r\n    setBotUsers,\r\n    bagId,\r\n}) => {\r\n    const [botName, setBotName] = useState()\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const handelSendRequestConfirm = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                bagId: bagId,\r\n                bot_name: botName,\r\n            }\r\n            let res = await axiosMisUser.post('/issueRequestSend', obj)\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setBotName('')\r\n                setIsAlive((isAlive) => !isAlive)\r\n                handleClose()\r\n            } else {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setBotName('')\r\n                handleClose()\r\n                navigate('/mis/assign-to-agent/bot/uic-genaration/' + res.data.bagId)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Dialog fullWidth\r\n        maxWidth=\"xs\" onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Select Bot User</H4>\r\n                <TextFieldCustOm label=\"Username\" fullWidth select name=\"username\">\r\n                    {botUsers.map((data) => (\r\n                        <MenuItem\r\n                            key={data.user_name}\r\n                            value={data.user_name}\r\n                            onClick={(e) => {\r\n                                setBotName(data.user_name)\r\n                            }}\r\n                        >\r\n                            {data.user_name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextFieldCustOm>\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading || botName == ''}\r\n                        onClick={(e) => {\r\n                            handelSendRequestConfirm()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        \r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bot\\uic-gen.jsx",["4597","4598","4599","4600","4601","4602","4603","4604","4605","4606","4607","4608","4609","4610","4611","4612","4613"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport * as XLSX from 'xlsx'\r\nimport * as FileSaver from 'file-saver'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    Checkbox,\r\n    Box,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const navigate = useNavigate()\r\n    const [isCheckAll, setIsCheckAll] = useState(false)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const { bagId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosMisUser.post('/getBagItemWithUic/' + bagId)\r\n                if (res.status == 200) {\r\n                    setItem(res.data.data)\r\n                } else if (res.status == 202) {\r\n                    alert(res.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 2000,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const handelUicGen = (e) => {\r\n        e.preventDefault()\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Delivered Data')\r\n        } else {\r\n            setLoading(true)\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { user_name } = jwt_decode(token)\r\n\r\n                const addUic = async () => {\r\n                    let count = 0\r\n                    for (let i = 0; i < isCheck.length; i++) {\r\n                        if (\r\n                            item?.[0]?.delivery?.[isCheck[i]].uic_status !=\r\n                            'Pending'\r\n                        ) {\r\n                            alert('Already UIC Created')\r\n\r\n                            break\r\n                        }\r\n                        try {\r\n                            let obj = {\r\n                                _id: item?.[0]?.delivery?.[isCheck[i]]._id,\r\n                                email: user_name,\r\n                                created_at: Date.now(),\r\n                            }\r\n                            let res = await axiosMisUser.post(\r\n                                '/addUicCode',\r\n                                obj\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        count++\r\n                    }\r\n                    if (count == isCheck.length) {\r\n                        alert('Successfully Generated')\r\n                        setLoading(false)\r\n                        setIsCheck([])\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                }\r\n                addUic()\r\n            }\r\n        }\r\n    }\r\n\r\n    const fileType =\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n    const fileExtension = '.xlsx'\r\n\r\n    const exportToCSV = (fileName) => {\r\n        if (isCheck.length == 0) {\r\n            alert('Please Select Atleast One Data')\r\n        } else {\r\n            let arr = []\r\n            let status = false\r\n            let changeStatus = async () => {\r\n                for (let i = 0; i < isCheck.length; i++) {\r\n                    if (\r\n                        item?.[0]?.delivery?.[isCheck[i]].uic_code == undefined\r\n                    ) {\r\n                        alert('Please Generate UIC')\r\n                        status = true\r\n                        break\r\n                    } else {\r\n                        try {\r\n                            let res = await axiosMisUser.post(\r\n                                '/changeUicStatus/' +\r\n                                    item?.[0]?.delivery?.[isCheck[i]]?._id\r\n                            )\r\n                            if (res.status == 200) {\r\n                            } else {\r\n                                alert(res.data.message)\r\n                            }\r\n                        } catch (error) {\r\n                            alert(error)\r\n                        }\r\n                        let obj = {\r\n                            UIC: item?.[0]?.delivery?.[isCheck[i]]?.uic_code\r\n                                ?.code,\r\n                            IMEI: item?.[0]?.delivery?.[\r\n                                isCheck[i]\r\n                            ]?.imei?.replace(/[^a-zA-Z0-9 ]/g, ''),\r\n                            Model: item?.[0]?.delivery?.[\r\n                                isCheck[i]\r\n                            ]?.order_old_item_detail?.replace(\r\n                                /[^a-zA-Z0-9 ]/g,\r\n                                ' '\r\n                            ),\r\n                        }\r\n\r\n                        arr.push(obj)\r\n                    }\r\n                }\r\n                if (status == false) {\r\n                    download(arr, fileName)\r\n                }\r\n            }\r\n            changeStatus()\r\n        }\r\n    }\r\n    function download(arr, fileName) {\r\n        const ws = XLSX.utils.json_to_sheet(arr)\r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, fileName + fileExtension)\r\n        setIsCheck([])\r\n        setIsAlive((isAlive) => !isAlive)\r\n    }\r\n\r\n    const handleSelectAll = (e) => {\r\n        setIsCheckAll(!isCheckAll)\r\n        setIsCheck(item?.[0]?.delivery?.map((li, index) => index.toString()))\r\n        if (isCheckAll) {\r\n            setIsCheck([])\r\n        }\r\n    }\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>\r\n                            {' '}\r\n                            <Checkbox\r\n                                onClick={(e) => {\r\n                                    handleSelectAll()\r\n                                }}\r\n                                checked={\r\n                                    item?.[0]?.delivery?.length ==\r\n                                    isCheck.length\r\n                                        ? true\r\n                                        : false\r\n                                }\r\n                            />{' '}\r\n                            Select All\r\n                        </TableCell>\r\n                        <TableCell>S.NO</TableCell>\r\n                        <TableCell>UIC Status</TableCell>\r\n                        <TableCell>UIC Generated Admin</TableCell>\r\n                        <TableCell>UIC Generated Time</TableCell>\r\n                        <TableCell>UIC Code</TableCell>\r\n                        <TableCell>UIC Downloaded Time</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Actual Delivery Date</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Old Item Details</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {item?.[0]?.delivery?.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>\r\n                                {' '}\r\n                                <Checkbox\r\n                                    onClick={(e) => {\r\n                                        handleClick(e)\r\n                                    }}\r\n                                    id={index}\r\n                                    key={index}\r\n                                    checked={isCheck.includes(\r\n                                        index?.toString()\r\n                                    )}\r\n                                />\r\n                            </TableCell>\r\n                            <TableCell>{index + 1}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data?.uic_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : data?.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data?.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>{data?.uic_code?.user}</TableCell>\r\n                            <TableCell>\r\n                                {' '}\r\n                                {data?.uic_code?.created_at == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data?.uic_code?.created_at\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data?.uic_code?.code}</TableCell>\r\n                            <TableCell>\r\n                                {data?.download_time == undefined\r\n                                    ? ''\r\n                                    : new Date(\r\n                                          data?.download_time\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })}\r\n                            </TableCell>\r\n                            <TableCell>{data.order_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.tracking_id?.toString()}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data?.delivery_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {new Date(data.order_order_date).toLocaleString(\r\n                                    'en-GB',\r\n                                    {\r\n                                        year: 'numeric',\r\n                                        month: '2-digit',\r\n                                        day: '2-digit',\r\n                                    }\r\n                                )}\r\n                            </TableCell>\r\n                            <TableCell>{data.imei?.toString()}</TableCell>\r\n                            <TableCell>{data.item_id?.toString()}</TableCell>\r\n                            <TableCell>\r\n                                {data.order_old_item_detail?.toString()}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [isCheck, item])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'UIC-Manage', path: '/' },\r\n                        { name: 'UIC-Not-Generated' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    sx={{ mb: 2, m: 1 }}\r\n                    disabled={loading}\r\n                    style={{ backgroundColor: 'primery' }}\r\n                    onClick={(e) => {\r\n                        handelUicGen(e)\r\n                    }}\r\n                >\r\n                    Generate UIC\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    sx={{ mb: 2, m: 1 }}\r\n                    onClick={(e) => {\r\n                        exportToCSV('UIC-Printing-Sheet')\r\n                    }}\r\n                >\r\n                    Download\r\n                </Button>\r\n            </Box>\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={item.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bot\\view-bot-tray.jsx",["4614","4615","4616","4617","4618","4619","4620"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport AssignDialogBox from './assign-dialog'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Box } from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosMisUser } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [bagList, setBotBag] = useState([])\r\n    const navigate = useNavigate()\r\n    const [botUsers, setBotUsers] = useState([])\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n    const [bagId, setBagId] = useState('')\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let user = localStorage.getItem('prexo-authentication')\r\n            if (user) {\r\n                let { location } = jwt_decode(user)\r\n                const fetchData = async () => {\r\n                    let res = await axiosMisUser.post('/getStockin/' + location)\r\n                    if (res.status == 200) {\r\n                        setBotBag(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleDialogClose = () => {\r\n        setBagId('')\r\n        setBotUsers([])\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelAssign = (id) => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosMisUser.post('/getBot/' + location)\r\n                    if (res.status == 200) {\r\n                        setBagId(id)\r\n                        setBotUsers(res.data.data)\r\n                        handleDialogOpen()\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'status_change_time',\r\n            label: 'Date Of Closure',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Max',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Valid',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Valid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Invalid',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Invalid'\r\n                    }).length,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Duplicate',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) =>\r\n                    value.filter(function (item) {\r\n                        return item.status == 'Duplicate'\r\n                    }).length,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Total',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, dataIndex) => value.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            {value === 'Closed' ||\r\n                            value === 'Pre-closure' ||\r\n                            value === 'In Progress' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    disabled={value == 'In Progress'}\r\n                                    variant=\"contained\"\r\n                                    onClick={() => {\r\n                                        handelAssign(tableMeta.rowData[1])\r\n                                    }}\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                >\r\n                                    Assign\r\n                                </Button>\r\n                            ) : (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    disabled\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    meadium\r\n                                >\r\n                                    Assigned\r\n                                </Button>\r\n                            )}\r\n                            <Button\r\n                                fullWidth\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: 'primery' }}\r\n                                component=\"span\"\r\n                                onClick={() => {\r\n                                    navigate(\r\n                                        '/mis/assign-to-agent/bot/uic-genaration/' +\r\n                                            tableMeta.rowData[1]\r\n                                    )\r\n                                }}\r\n                            >\r\n                                UIC\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assign-to-agent', path: '/' },\r\n                        { name: 'BOT' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Bot Bag'}\r\n                data={bagList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <AssignDialogBox\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    botUsers={botUsers}\r\n                    setBotUsers={setBotUsers}\r\n                    bagId={bagId}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-charging\\user-dailog.jsx",["4621","4622"],"import React, { useState } from 'react'\r\nimport { Dialog, Button, TextField, MenuItem } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosMisUser } from '../../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    handleClose,\r\n    open,\r\n    setIsAlive,\r\n    chargingUsers,\r\n    isCheck,\r\n}) => {\r\n    const [chargingUserName, setCharging] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const handelSendRequestConfirm = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                tray: isCheck,\r\n                user_name: chargingUserName,\r\n                sort_id: 'Send for charging',\r\n            }\r\n            let res = await axiosMisUser.post('/wht-sendTo-wharehouse', obj)\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setCharging(\"\")\r\n                setIsAlive((isAlive) => !isAlive)\r\n                handleClose()\r\n            } else {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Dialog fullWidth maxWidth=\"xs\" onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Select Charging User</H4>\r\n                <TextFieldCustOm\r\n                    label=\"Username\"\r\n                    fullWidth\r\n                    select\r\n                    name=\"username\"\r\n                >\r\n                    {chargingUsers.map((data) => (\r\n                        <MenuItem\r\n                            key={data.user_name}\r\n                            value={data.user_name}\r\n                            onClick={(e) => {\r\n                                setCharging(data.user_name)\r\n                            }}\r\n                        >\r\n                            {data.user_name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextFieldCustOm>\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading || chargingUserName == ''}\r\n                        onClick={(e) => {\r\n                            handelSendRequestConfirm()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-bqc\\user-dailog.jsx",["4623","4624"],"import React, { useState } from 'react'\r\nimport { Dialog, Button, TextField, MenuItem } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosMisUser } from '../../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    handleClose,\r\n    open,\r\n    setIsAlive,\r\n    chargingUsers,\r\n    isCheck,\r\n}) => {\r\n    const [bqcuserName, setBqcUserName] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const handelSendRequestConfirm = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                tray: isCheck,\r\n                user_name: bqcuserName,\r\n                sort_id: 'Send for BQC',\r\n            }\r\n            let res = await axiosMisUser.post('/wht-sendTo-wharehouse', obj)\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setBqcUserName('')\r\n                setIsAlive((isAlive) => !isAlive)\r\n                handleClose()\r\n            } else {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Dialog fullWidth maxWidth=\"xs\" onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Select Charging User</H4>\r\n                <TextFieldCustOm\r\n                    label=\"Username\"\r\n                    fullWidth\r\n                    select\r\n                    name=\"username\"\r\n                >\r\n                    {chargingUsers.map((data) => (\r\n                        <MenuItem\r\n                            key={data.user_name}\r\n                            value={data.user_name}\r\n                            onClick={(e) => {\r\n                                setBqcUserName(data.user_name)\r\n                            }}\r\n                        >\r\n                            {data.user_name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextFieldCustOm>\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading || bqcuserName == ''}\r\n                        onClick={(e) => {\r\n                            handelSendRequestConfirm()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\assign-for-sorting.jsx",["4625","4626","4627"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Box } from '@mui/material'\r\nimport { useNavigate, useLocation } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport AssignDialogBox from './assign-dailog'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [item, setItem] = useState({})\r\n    const navigate = useNavigate()\r\n    const [sortingAgent, setSortingAgent] = useState([])\r\n    const { state } = useLocation()\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n    const { isCheck, type } = state\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let obj = {\r\n                    trayData: isCheck,\r\n                }\r\n                let res = await axiosMisUser.post('/assign-for-sorting', obj)\r\n                if (res.status === 200) {\r\n                    setItem(res.data.data)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    // NAVIGATE TO ASSIGN FOR SORTING PAGE\r\n    const handelAssignForSorting = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/assign-for-sorting', {\r\n            state: { isCheck: isCheck, type: 'Not From Request' },\r\n        })\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setSortingAgent([])\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelViewDetailClub = (e, muic) => {\r\n        e.preventDefault()\r\n        navigate('/mis/sorting/bot-to-wht/assign-for-sorting/view-item', {\r\n            state: { isCheck: isCheck, muic: muic },\r\n        })\r\n    }\r\n    const handelAssignWht = (e, muic, whtTray) => {\r\n        navigate('/mis/sorting/bot-to-wht/wht-assignment', {\r\n            state: { isCheck: isCheck, muic: muic, whtTrayId: whtTray },\r\n        })\r\n    }\r\n\r\n    const handelGetSortingUser = () => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosMisUser.post(\r\n                        '/getSortingAgent/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setSortingAgent(res.data.data)\r\n                        handleDialogOpen()\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'item',\r\n            label: 'In BOT',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => value.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'wht_tray',\r\n            label: 'Wht Tray',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => value.join(', '),\r\n            },\r\n        },\r\n        {\r\n            name: 'assigned_count',\r\n            label: 'action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: '#206CE2' }}\r\n                                onClick={(e) => {\r\n                                    handelViewDetailClub(\r\n                                        e,\r\n                                        tableMeta.rowData[1]\r\n                                    )\r\n                                }}\r\n                            >\r\n                                View Item\r\n                            </Button>\r\n                            {type === 'Not From Request' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        handelAssignWht(\r\n                                            e,\r\n                                            tableMeta.rowData[1],\r\n                                            tableMeta.rowData[1]\r\n                                        )\r\n                                    }}\r\n                                >\r\n                                    {tableMeta.rowData[4]?.length === value\r\n                                        ? 'Tray Assigned'\r\n                                        : ' Assign Tray'}\r\n                                </Button>\r\n                            ) : null}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Sorting', path: '/' },\r\n                        { name: 'Bot-to-wht' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <h4>BOT Tray - {isCheck.toString()}</h4>\r\n                </Box>\r\n                <Box>\r\n                    {type === 'Not From Request' ? (\r\n                        <Box>\r\n                            <Button\r\n                                sx={{\r\n                                    mb: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: 'green' }}\r\n                                component=\"span\"\r\n                                disabled={item.not_assigned}\r\n                                onClick={(e) => {\r\n                                    handelGetSortingUser()\r\n                                }}\r\n                            >\r\n                                Select Sorting Agent\r\n                            </Button>\r\n                        </Box>\r\n                    ) : null}\r\n                </Box>\r\n            </Box>\r\n\r\n            <MUIDataTable\r\n                title={'Wht Tray'}\r\n                data={item.temp_array}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n\r\n            {shouldOpenEditorDialog && (\r\n                <AssignDialogBox\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    setIsAlive={setIsAlive}\r\n                    sortingAgent={sortingAgent}\r\n                    isCheck={isCheck}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\assign-dailog.jsx",["4628","4629"],"import React, { useState } from 'react'\r\nimport { Dialog, Button, TextField, MenuItem } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosMisUser } from '../../../../../axios'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    handleClose,\r\n    open,\r\n    setIsAlive,\r\n    sortingAgent,\r\n    isCheck,\r\n}) => {\r\n    const [sortingAgentName, setSortingAgentName] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const navigate = useNavigate()\r\n\r\n    const handelSendRequestConfirm = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                agent_name: sortingAgentName,\r\n                trayId: isCheck,\r\n            }\r\n            let checkReadyForSorting = await axiosMisUser.post(\r\n                '/check-all-wht-inuse-for-sorting',\r\n                obj\r\n            )\r\n            if (checkReadyForSorting.status === 200) {\r\n                let res = await axiosMisUser.post(\r\n                    '/assign-to-sorting-agent',\r\n                    obj\r\n                )\r\n                if (res.status === 200) {\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                    navigate('/mis/sorting/bot-to-wht')\r\n                } else if (res.status == 202) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    handleClose()\r\n                    setSortingAgentName('')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog fullWidth maxWidth=\"xs\" onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Select Sorting User</H4>\r\n                <TextFieldCustOm\r\n                    label=\"Username\"\r\n                    fullWidth\r\n                    select\r\n                    name=\"username\"\r\n                >\r\n                    {sortingAgent.map((data) => (\r\n                        <MenuItem\r\n                            key={data.user_name}\r\n                            value={data.user_name}\r\n                            onClick={(e) => {\r\n                                setSortingAgentName(data.user_name)\r\n                            }}\r\n                        >\r\n                            {data.user_name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextFieldCustOm>\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        p\r\n                        disabled={loading || sortingAgentName == ''}\r\n                        onClick={(e) => {\r\n                            handelSendRequestConfirm()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-issue-request\\ex-vs-act.jsx",["4630","4631","4632","4633","4634","4635","4636","4637","4638","4639","4640","4641","4642","4643","4644","4645","4646","4647","4648","4649","4650","4651","4652","4653","4654","4655","4656","4657","4658","4659","4660","4661","4662","4663","4664","4665","4666","4667","4668","4669"],"import { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Table,\r\n    TableHead,\r\n    TableBody,\r\n    TableRow,\r\n    TableCell,\r\n    Button,\r\n    Card,\r\n    Box,\r\n    IconButton,\r\n    TextField,\r\n    Checkbox,\r\n    TableContainer,\r\n    Grid,\r\n    InputAdornment,\r\n    Paper,\r\n} from '@mui/material'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport SearchIcon from '@mui/icons-material/Search'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { H5 } from 'app/components/Typography'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const navigate = useNavigate()\r\n    const [bagData, setBagData] = useState([])\r\n    const { bagId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    /**************************************************************************** */\r\n    const [awbn, setAwbn] = useState('')\r\n    const [uic, setUic] = useState(false)\r\n    const [sleaves, setSleaves] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [readyForAssign, setReadyForAssign] = useState(0)\r\n    const [textBoxDis, setTextBoxDis] = useState(false)\r\n    /*********************************************************** */\r\n    const [botTray, setBotTray] = useState('')\r\n    const [pmtTray, setPmtTray] = useState(null)\r\n    const [autoTray, setAutoTray] = useState({\r\n        mmtTray: '',\r\n        pmtTray: '',\r\n        botTray: '',\r\n    })\r\n    const [mmtTray, setMmtTray] = useState(null)\r\n    const [trayId, setTrayid] = useState({\r\n        mmtTray: '',\r\n        pmtTray: '',\r\n        botTray: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getBagItemRequest/' +\r\n                        bagId +\r\n                        '/' +\r\n                        'Requested to Warehouse'\r\n                )\r\n                if (\r\n                    response.status === 200 &&\r\n                    response.data.data[0]?.sort_id != 'Issued'\r\n                ) {\r\n                    setBagData(response.data.data)\r\n                    setUic(response.data.data[0]?.uic === 'true')\r\n\r\n                    setSleaves(response.data.data[0]?.sleaves === 'true')\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/autoFetchAlreadyAssignedTray/' +\r\n                            response.data.data[0]?.issued_user_name\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setAutoTray({\r\n                            botTray: res.data.botTray,\r\n                            mmtTray: res.data.mmtTray,\r\n                            pmtTray: res.data.pmtTray,\r\n                        })\r\n                    } else {\r\n                        alert(res.data.message)\r\n                        navigate(-1)\r\n                    }\r\n                } else {\r\n                    navigate('/wareshouse/bag/bag-issue-request')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const fetchAgentStatus = async () => {\r\n            try {\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/checkBotUserStatus/' + bagData[0]?.issued_user_name\r\n                )\r\n                if (res.status === 200) {\r\n                    setReadyForAssign(res.data.data)\r\n                } else {\r\n                    alert(res.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        if (bagData[0]?.issued_user_name !== undefined) {\r\n            fetchAgentStatus()\r\n        }\r\n    }, [bagData])\r\n\r\n    const getitem = async () => {\r\n        try {\r\n            let response = await axiosWarehouseIn.post(\r\n                '/getBagItemRequest/' + bagId + '/' + 'Requested to Warehouse'\r\n            )\r\n            if (response.status === 200) {\r\n                setBagData(response.data.data)\r\n                setUic(response.data.data[0]?.uic === 'true')\r\n                setSleaves(response.data.data[0]?.sleaves === 'true')\r\n                //   dataTableFun()\r\n            } else if (response.status == 201) {\r\n                setBagData(response.data.data)\r\n                setUic(response.data.data[0]?.uic === 'true')\r\n                setSleaves(response.data.data[0]?.sleaves === 'true')\r\n                alert(response.data.message)\r\n            } else if (response.status == 202) {\r\n                alert(response.data.status)\r\n                navigate(-1)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelAwbn = async (e) => {\r\n        if (e.target.value.length >= 12) {\r\n            try {\r\n                let obj = {\r\n                    awbn: e.target.value,\r\n                    id: bagId,\r\n                }\r\n                setTextBoxDis(true)\r\n                let res = await axiosWarehouseIn.post('/actualCheckAwbn', obj)\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else if (res.status == 202) {\r\n                    setTextBoxDis(false)\r\n                    setAwbn('')\r\n                    alert(res.data.message)\r\n                } else if (res.status == 203) {\r\n                    setTextBoxDis(false)\r\n                    setAwbn('')\r\n                    alert('This Item Does Not Exist In This Bag')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    /************************************************************************** */\r\n    const addActualitem = async (awbn) => {\r\n        if (\r\n            bagData[0]?.actual_items?.filter(function (item) {\r\n                return item.status == 'Valid'\r\n            }).length +\r\n                bagData[0]?.actual_items?.filter(function (item) {\r\n                    return item.status == 'Invalid'\r\n                }).length >=\r\n            bagData[0].limit\r\n        ) {\r\n            alert('Bag Is Full')\r\n        } else {\r\n            setTextBoxDis(true)\r\n            let data = bagData[0]?.items?.filter(function (item) {\r\n                return item.awbn_number == awbn.tracking_id\r\n            })\r\n            try {\r\n                let obj = {\r\n                    bag_id: bagId,\r\n                    awbn_number: awbn.tracking_id,\r\n                    order_id: awbn.order_id,\r\n                    order_date: awbn.order_date,\r\n                    stock_in: new Date(),\r\n                    status: data[0].status,\r\n                }\r\n                let res = await axiosWarehouseIn.post('/addActualitem', obj)\r\n                if (res?.status == 200) {\r\n                    setAwbn('')\r\n                    setTextBoxDis(false)\r\n                    getitem()\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, type) => {\r\n        try {\r\n            setLoading(true)\r\n            if (uic == false) {\r\n                alert('Please Confirm UIC')\r\n                setLoading(false)\r\n            } else if (sleaves == false) {\r\n                alert('Please Confirm Sleeves')\r\n                setLoading(false)\r\n            } else if (readyForAssign !== 'User is free' && type == 'Issued') {\r\n                alert(readyForAssign)\r\n                setLoading(false)\r\n            } else if (\r\n                (pmtTray == null && type == 'Issued') ||\r\n                (mmtTray == null && type == 'Issued') ||\r\n                (botTray == '' && type == 'Issued')\r\n            ) {\r\n                alert('Please Assign Tray')\r\n                setLoading(false)\r\n            } else {\r\n                let obj = {\r\n                    bagId: bagId,\r\n                    description: description,\r\n                    sleaves: sleaves,\r\n                    uic: uic,\r\n                    try: [pmtTray, mmtTray, botTray],\r\n                    status: type,\r\n                }\r\n\r\n                let res = await axiosWarehouseIn.post('/issueToBot', obj)\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/wareshouse/bag/bag-issue-request')\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelDelete = async (id) => {\r\n        try {\r\n            let obj = {\r\n                bagId: bagId,\r\n                id: id,\r\n            }\r\n            let data = await axiosWarehouseIn.post('/actualBagItem', obj)\r\n            if (data.status == 200) {\r\n                alert(data.data.message)\r\n                getitem()\r\n            } else {\r\n                alert(data.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    /*********************************TRAY ASSIGNEMENT********************************** */\r\n    const handelBotTray = async (e, trayId) => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (trayId !== '') {\r\n                    setBotTray('')\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/checkBotTray/' + trayId + '/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        setBotTray(res.data.data)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                }\r\n            } else {\r\n                alert('Please enter tray id')\r\n            }\r\n        } catch (error) {\r\n            alert(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    const handelMmtTray = async (e, trayId) => {\r\n        try {\r\n            if (trayId !== '') {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    setMmtTray(null)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/checkMmtTray/' + trayId + '/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        setMmtTray(res.data.data)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                } else {\r\n                    alert('Please enter tray id')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    const handelPmtTray = async (e, trayId) => {\r\n        try {\r\n            if (trayId !== '') {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    setPmtTray(null)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/checkPmtTray/' + trayId + '/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        setPmtTray(res.data.data)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                }\r\n            } else {\r\n                alert('Please enter tray id')\r\n            }\r\n        } catch (error) {\r\n            alert(error.response.data.message)\r\n        }\r\n    }\r\n\r\n    const tabelDataExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>Expected</h5>\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {\r\n                                    bagData[0]?.items?.filter(function (item) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{bagData[0]?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '14px', fontSize: '24px' }}>\r\n                                {\r\n                                    bagData[0]?.items?.filter(function (item) {\r\n                                        return item.status == 'Valid'\r\n                                    }).length\r\n                                }\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>AWBN Number</TableCell>\r\n                                <TableCell>Order ID</TableCell>\r\n                                <TableCell>Order Date</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {bagData[0]?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.awbn_number}</TableCell>\r\n                                    <TableCell>{data?.order_id}</TableCell>\r\n                                    <TableCell>\r\n                                        {new Date(\r\n                                            data?.order_date\r\n                                        ).toLocaleString('en-GB', {\r\n                                            year: 'numeric',\r\n                                            month: '2-digit',\r\n                                            day: '2-digit',\r\n                                        })}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={\r\n                                            data.status == 'Valid'\r\n                                                ? { color: 'green' }\r\n                                                : { color: 'red' }\r\n                                        }\r\n                                    >\r\n                                        {data.status}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [bagData[0]?.items])\r\n\r\n    const tableDataActul = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>ACTUAL</h5>\r\n                <TextField\r\n                    sx={{ m: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    disabled={textBoxDis}\r\n                    inputRef={(input) => input && input.focus()}\r\n                    name=\"doorsteps_diagnostics\"\r\n                    label=\"SCAN AWBN\"\r\n                    value={awbn}\r\n                    // onChange={(e) => setAwbn(e.target.value)}\r\n                    onChange={(e) => {\r\n                        setAwbn(e.target.value)\r\n                        handelAwbn(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {\r\n                                    bagData[0]?.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{bagData[0]?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '19px', fontSize: '24px' }}>\r\n                                {\r\n                                    bagData[0]?.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status == 'Valid'\r\n                                    }).length\r\n                                }\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>AWBN Number</TableCell>\r\n                                <TableCell>Order ID</TableCell>\r\n                                <TableCell>Order Date</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {bagData[0]?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.awbn_number}</TableCell>\r\n                                    <TableCell>{data?.order_id}</TableCell>\r\n                                    <TableCell>\r\n                                        {new Date(\r\n                                            data?.order_date\r\n                                        ).toLocaleString('en-GB', {\r\n                                            year: 'numeric',\r\n                                            month: '2-digit',\r\n                                            day: '2-digit',\r\n                                        })}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={\r\n                                            data.status == 'Valid'\r\n                                                ? { color: 'green' }\r\n                                                : { color: 'red' }\r\n                                        }\r\n                                    >\r\n                                        {data.status}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [bagData[0]?.actual_items, textBoxDis, awbn])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Bag', path: '/' },\r\n                        { name: 'Bag-Issue-Request' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                <Box\r\n                    sx={{\r\n                        height: 70,\r\n                        borderRadius: 1,\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                        }}\r\n                    >\r\n                        <h4 style={{ marginLeft: '13px' }}>BAG ID - {bagId}</h4>\r\n                        <H5 style={{ marginLeft: '13px' }}>\r\n                            AGENT NAME - {bagData[0]?.issued_user_name}\r\n                        </H5>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                        }}\r\n                    >\r\n                        <h4 style={{ marginRight: '13px' }}>\r\n                            Closed On --{' '}\r\n                            {new Date(\r\n                                bagData[0]?.status_change_time\r\n                            ).toLocaleString('en-GB', { hour12: true })}\r\n                        </h4>\r\n\r\n                        <Checkbox\r\n                            checked={uic}\r\n                            onClick={(e) => {\r\n                                if (\r\n                                    window.confirm(\r\n                                        uic\r\n                                            ? 'Already Added'\r\n                                            : 'You Want to add UIC ?'\r\n                                    )\r\n                                ) {\r\n                                    setUic(true)\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label>UIC Label</label>\r\n                        <Checkbox\r\n                            checked={sleaves}\r\n                            onClick={(e) => {\r\n                                if (\r\n                                    window.confirm(\r\n                                        sleaves\r\n                                            ? 'Already Added'\r\n                                            : 'You Want to add sleeves ?'\r\n                                    )\r\n                                ) {\r\n                                    setSleaves(true)\r\n                                }\r\n                            }}\r\n                        />\r\n                        <label>Sleeves</label>\r\n                    </Box>\r\n                </Box>\r\n                <Grid container spacing={1}>\r\n                    <Grid item xs={6}>\r\n                        {tabelDataExpected}\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        {tableDataActul}\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n            <Grid container spacing={3} sx={{ mt: 2 }}>\r\n                {bagData[0]?.sort_id !== 'Requested to Warehouse' ? (\r\n                    <Grid item xs={6}>\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                flexDirection: 'row',\r\n                            }}\r\n                        >\r\n                            <Box>\r\n                                <TextField\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    onChange={(e) =>\r\n                                        setTrayid({ botTray: e.target.value })\r\n                                    }\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment>\r\n                                                <IconButton\r\n                                                    onClick={(e) => {\r\n                                                        handelBotTray(\r\n                                                            e,\r\n                                                            trayId.botTray\r\n                                                        )\r\n                                                    }}\r\n                                                >\r\n                                                    <SearchIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    label=\"BOT Tray\"\r\n                                    id=\"standard-size-normal\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                                <p style={{ color: 'red', marginLeft: '8px' }}>\r\n                                    {autoTray.botTray}\r\n                                </p>\r\n                            </Box>\r\n                            <Box>\r\n                                <TextField\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    onChange={(e) =>\r\n                                        setTrayid({ pmtTray: e.target.value })\r\n                                    }\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment>\r\n                                                <IconButton\r\n                                                    onClick={(e) => {\r\n                                                        handelPmtTray(\r\n                                                            e,\r\n                                                            trayId.pmtTray\r\n                                                        )\r\n                                                    }}\r\n                                                >\r\n                                                    <SearchIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    label=\"PMT Tray\"\r\n                                    id=\"standard-size-normal\"\r\n                                    value={pmtTray}\r\n                                    variant=\"standard\"\r\n                                />\r\n                                <p style={{ color: 'red', marginLeft: '8px' }}>\r\n                                    {autoTray.pmtTray}\r\n                                </p>\r\n                            </Box>\r\n                            <Box>\r\n                                <TextField\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    onChange={(e) =>\r\n                                        setTrayid({ mmtTray: e.target.value })\r\n                                    }\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment>\r\n                                                <IconButton\r\n                                                    onClick={(e) => {\r\n                                                        handelMmtTray(\r\n                                                            e,\r\n                                                            trayId.mmtTray\r\n                                                        )\r\n                                                    }}\r\n                                                >\r\n                                                    <SearchIcon />\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                    InputLabelProps={{ shrink: true }}\r\n                                    label=\"MMT Tray\"\r\n                                    value={mmtTray}\r\n                                    id=\"standard-size-normal\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                                <p style={{ color: 'red', marginLeft: '8px' }}>\r\n                                    {autoTray.mmtTray}\r\n                                </p>\r\n                            </Box>\r\n                        </Box>\r\n                    </Grid>\r\n                ) : (\r\n                    <Grid item xs={6}></Grid>\r\n                )}\r\n\r\n                <Grid item xs={6}>\r\n                    {bagData[0]?.sort_id !== 'Requested to Warehouse' ? (\r\n                        <Box sx={{ float: 'right', mb: 4 }}>\r\n                            <textarea\r\n                                onChange={(e) => {\r\n                                    setDescription(e.target.value)\r\n                                }}\r\n                                style={{ width: '300px', height: '60px' }}\r\n                                placeholder=\"Description\"\r\n                            ></textarea>\r\n                            <Button\r\n                                sx={{ m: 3, mb: 9 }}\r\n                                variant=\"contained\"\r\n                                disabled={\r\n                                    loading == true ||\r\n                                    description == '' ||\r\n                                    readyForAssign == ''\r\n                                }\r\n                                style={{ backgroundColor: 'primery' }}\r\n                                onClick={(e) => {\r\n                                    if (window.confirm('You Want to Issue?')) {\r\n                                        handelIssue(e, 'Issued')\r\n                                    }\r\n                                }}\r\n                            >\r\n                                Handeover to Agent\r\n                            </Button>\r\n                        </Box>\r\n                    ) : (\r\n                        <Button\r\n                            sx={{ m: 3, mb: 9, float: 'right' }}\r\n                            variant=\"contained\"\r\n                            disabled={\r\n                                bagData[0]?.actual_items?.length !==\r\n                                bagData[0]?.items?.length\r\n                            }\r\n                            style={{ backgroundColor: 'primery' }}\r\n                            onClick={(e) => {\r\n                                handelIssue(e, 'Ready For Issue')\r\n                            }}\r\n                        >\r\n                            Save Data\r\n                        </Button>\r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Track\\item-track.jsx",["4670","4671","4672","4673","4674","4675","4676","4677","4678","4679","4680","4681","4682","4683","4684","4685","4686","4687","4688","4689","4690","4691","4692","4693","4694","4695","4696","4697","4698","4699","4700"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    MenuItem,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    TextField,\r\n    Box,\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [item, setItem] = useState([])\r\n    const [data, setData] = useState([])\r\n    const navigate = useNavigate()\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [count, setCount] = useState(0)\r\n    const [search, setSearch] = useState({\r\n        type: '',\r\n        searchData: '',\r\n        location: '',\r\n    })\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const { location } = jwt_decode(admin)\r\n            const fetchData = async () => {\r\n                try {\r\n                    let res = await axiosMisUser.post(\r\n                        '/getDeliveredOrders/' +\r\n                            location +\r\n                            '/' +\r\n                            page +\r\n                            '/' +\r\n                            rowsPerPage\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setCount(res.data.count)\r\n\r\n                        setItem(res.data.data)\r\n                        // dataTableFun();\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [refresh, page])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item.map((d, index) => {\r\n                d.id = page * rowsPerPage + index + 1\r\n                return d\r\n            })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const ProductTable = styled(Table)(() => ({\r\n        minWidth: 750,\r\n        width: 6050,\r\n        whiteSpace: 'pre',\r\n        '& thead': {\r\n            '& th:first-of-type': {\r\n                paddingLeft: 16,\r\n            },\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-of-type': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    }))\r\n\r\n    const searchTrackItem = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (e.target.value == '') {\r\n                    setRefresh((refresh) => !refresh)\r\n                } else {\r\n                    let obj = {\r\n                        location: location,\r\n                        type: search.type,\r\n                        searchData: e.target.value,\r\n                    }\r\n                    let res = await axiosMisUser.post(\r\n                        '/search-mis-track-item',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setRowsPerPage(10)\r\n                        setPage(0)\r\n                        setItem(res.data.data)\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <ProductTable>\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Delivery Status</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Uic Status</TableCell>\r\n                        <TableCell>UIC</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>Stockin Date</TableCell>\r\n                        <TableCell>Bag ID</TableCell>\r\n                        <TableCell>Stockin Status</TableCell>\r\n                        <TableCell>Bag close Date</TableCell>\r\n                        <TableCell>BOT Agent Name</TableCell>\r\n                        <TableCell>Assigned to BOT Agent Date</TableCell>\r\n                        <TableCell>Tray ID</TableCell>\r\n                        <TableCell>Tray Type</TableCell>\r\n                        <TableCell>Tray Status</TableCell>\r\n                        <TableCell>Tray Location</TableCell>\r\n                        <TableCell>Tray Closed Time BOT</TableCell>\r\n                        <TableCell>\r\n                            Tray Received From BOT Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>Tray Closed Time Warehouse</TableCell>\r\n                        <TableCell>Sorting Agent Name</TableCell>\r\n                        <TableCell>Handover to Sorting Date</TableCell>\r\n                        <TableCell>WHT Tray</TableCell>\r\n                        <TableCell>WHT Tray Assigned Date</TableCell>\r\n                        <TableCell>WHT Tray Received From Sorting</TableCell>\r\n                        <TableCell>WHT Tray Closed After Sorting</TableCell>\r\n                        <TableCell>Charging Username</TableCell>\r\n                        <TableCell>Charging Assigned Date</TableCell>\r\n                        <TableCell>Charge In Date</TableCell>\r\n                        <TableCell>Charge Done Date</TableCell>\r\n                        <TableCell>\r\n                            Tray Received From Charging Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Charging Done Tray Closed Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>BQC Agent Name</TableCell>\r\n                        <TableCell>Assigned to BQC</TableCell>\r\n\r\n                        <TableCell>BQC Done Date</TableCell>\r\n                        <TableCell>\r\n                            Tray Received From BQC Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            Bqc Done Tray Closed Time Warehouse\r\n                        </TableCell>\r\n                        <TableCell>Issued to Audit Date</TableCell>\r\n                        <TableCell>Audit Agnet Name</TableCell>\r\n                        <TableCell>Audit Done Date</TableCell>\r\n                        <TableCell>Audit Done Tray Recieved Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery_status == 'Pending'\r\n                                        ? { color: 'red' }\r\n                                        : { color: 'green' }\r\n                                }\r\n                            >\r\n                                {data?.delivery_status}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.tracking_id}</TableCell>\r\n                            <TableCell>{data.delivery.order_id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery.uic_status == 'Printed'\r\n                                        ? { color: 'green' }\r\n                                        : data.delivery.uic_status == 'Created'\r\n                                        ? { color: 'orange' }\r\n                                        : { color: 'red' }\r\n                                }\r\n                            >\r\n                                {data.delivery.uic_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.uic_code?.code}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.imei}</TableCell>\r\n\r\n                            <TableCell>{data.delivery.item_id}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.stockin_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.stockin_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.bag_id}</TableCell>\r\n                            <TableCell\r\n                                style={\r\n                                    data.delivery.stock_in_status == 'Valid'\r\n                                        ? { color: 'green' }\r\n                                        : { color: 'red' }\r\n                                }\r\n                            >\r\n                                {data.delivery.stock_in_status}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bag_close_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bag_close_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.agent_name}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.assign_to_agent != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.assign_to_agent\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.tray_id}</TableCell>\r\n                            <TableCell>{data.delivery.tray_type}</TableCell>\r\n                            <TableCell>{data.delivery.tray_status}</TableCell>\r\n                            <TableCell>{data.delivery.tray_location}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.tray_closed_by_bot != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.tray_closed_by_bot\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bot_done_received != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bot_done_received\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.warehouse_close_date !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.warehouse_close_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : data?.delivery.tray_close_wh_date !=\r\n                                      undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.tray_close_wh_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : null}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.sorting_agent_name}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.handover_sorting_date !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.handover_sorting_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.delivery.wht_tray}</TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.wht_tray_assigned_date !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.wht_tray_assigned_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.received_from_sorting !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.received_from_sorting\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.closed_from_sorting != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.closed_from_sorting\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.agent_name_charging}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.assign_to_agent_charging !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.assign_to_agent_charging\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_in_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_in_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_done_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_done_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_done_received !=\r\n                                undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_done_received\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.charging_done_close != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.charging_done_close\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data.delivery.agent_name_bqc}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.assign_to_agent_bqc != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.assign_to_agent_bqc\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n\r\n                            <TableCell>\r\n                                {data?.delivery.bqc_out_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bqc_out_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bqc_done_received != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bqc_done_received\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.bqc_done_close != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.bqc_done_close\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.issued_to_audit != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.issued_to_audit\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.audit_user_name }\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.audit_done_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.audit_done_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery.audit_done_recieved != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery.audit_done_recieved\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </ProductTable>\r\n        )\r\n    }, [item, data])\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Track', path: '/' },\r\n                        { name: 'Track-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <Box>\r\n                    <TextField\r\n                        select\r\n                        label=\"Select\"\r\n                        variant=\"outlined\"\r\n                        sx={{ mb: 1, width: '140px' }}\r\n                        onChange={(e) => {\r\n                            setSearch((p) => ({ ...p, type: e.target.value }))\r\n                        }}\r\n                    >\r\n                        <MenuItem value=\"order_id\">Order Id</MenuItem>\r\n                        <MenuItem value=\"uic\">UIC</MenuItem>\r\n                        <MenuItem value=\"tracking_id\">Tracking ID</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        onChange={(e) => {\r\n                            searchTrackItem(e)\r\n                        }}\r\n                        disabled={search.type == '' ? true : false}\r\n                        label=\"Search\"\r\n                        variant=\"outlined\"\r\n                        sx={{ ml: 2, mb: 1 }}\r\n                    />\r\n                </Box>\r\n            </Box>\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={count}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\Tray\\view-item-tray.jsx",["4701","4702"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { axiosBot } from '../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosBot.post('/trayItem/' + trayId)\r\n                if (res.status == 200) {\r\n                    setTrayData(res.data.data?.items)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Tray', path: '/' },\r\n                        { name: 'Tray-Item', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst columns = [\r\n    {\r\n        name: 'index',\r\n        label: 'Record No',\r\n        options: {\r\n            filter: false,\r\n            sort: false,\r\n            customBodyRender: (rowIndex, dataIndex) => dataIndex.rowIndex + 1,\r\n        },\r\n    },\r\n    {\r\n        name: 'uic',\r\n        label: 'UIC',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'imei',\r\n        label: 'IMEI',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'bag_id',\r\n        label: 'Bag Id',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'body_damage',\r\n        label: 'Body Damage',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'body_damage_des',\r\n        label: 'Body Damage Description',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'item_recieved',\r\n        label: 'Item Received In Packet',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'model_brand',\r\n        label: 'Mismatched Model Brand Name',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerOne',\r\n        label: 'Other Info 1',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerTwo',\r\n        label: 'Other Info 2',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerThree',\r\n        label: 'Other Info 3',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerFour',\r\n        label: 'Other Info 4',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'added_time',\r\n        label: 'Added Date',\r\n        options: {\r\n            filter: true,\r\n            customBodyRender: (value) =>\r\n                new Date(value).toLocaleString('en-GB', {\r\n                    hour12: true,\r\n                }),\r\n        },\r\n    },\r\n]\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bot-components\\Bag\\bot-tray-transcation.jsx",["4703","4704","4705","4706","4707","4708","4709","4710","4711","4712","4713","4714","4715","4716","4717","4718","4719","4720","4721","4722","4723","4724","4725","4726","4727","4728","4729","4730","4731","4732","4733","4734","4735","4736","4737","4738","4739","4740","4741","4742","4743","4744","4745","4746"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\summer.jsx",["4747","4748"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [bot, setBot] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    const { bagId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let botTray = await axiosWarehouseIn.post(\r\n                    '/summeryBotTrayBag/' + bagId\r\n                )\r\n                if (botTray.status == 200) {\r\n                    setBot(botTray.data.data)\r\n                } else {\r\n                    alert(botTray.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic_code',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => value.code,\r\n            },\r\n        },\r\n        {\r\n            name: 'tracking_id',\r\n            label: 'Tracking Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_id',\r\n            label: 'Tray id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_type',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_status',\r\n            label: 'Tray Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'bot?.[0]?.description',\r\n            label: 'Description',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return bot?.[0]?.description\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Bag', path: '/' },\r\n                        { name: 'Bag-Close-Request' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={bot[0]?.delivery}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\view-tray-item.jsx",["4749","4750"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { axiosBot } from '../../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosBot.post('/trayItem/' + trayId)\r\n                if (res.status == 200) {\r\n                    setTrayData(res.data.data?.items)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Tray', path: '/' },\r\n                        { name: 'Tray-Item', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst columns = [\r\n    {\r\n        name: 'index',\r\n        label: 'Record No',\r\n        options: {\r\n            filter: false,\r\n            sort: false,\r\n            customBodyRender: (rowIndex, dataIndex) => dataIndex.rowIndex + 1,\r\n        },\r\n    },\r\n    {\r\n        name: 'uic',\r\n        label: 'UIC',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'imei',\r\n        label: 'IMEI',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'bag_id',\r\n        label: 'Bag Id',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'body_damage',\r\n        label: 'Body Damage',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'body_damage_des',\r\n        label: 'Body Damage Description',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'item_recieved',\r\n        label: 'Item Received In Packet',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'model_brand',\r\n        label: 'Mismatched Model Brand Name',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerOne',\r\n        label: 'Other Info 1',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerTwo',\r\n        label: 'Other Info 2',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerThree',\r\n        label: 'Other Info 3',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerFour',\r\n        label: 'Other Info 4',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'added_time',\r\n        label: 'Added Date',\r\n        options: {\r\n            filter: true,\r\n            customBodyRender: (value) =>\r\n                new Date(value).toLocaleString('en-GB', {\r\n                    hour12: true,\r\n                }),\r\n        },\r\n    },\r\n]\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bag\\bag-close-request\\close.jsx",["4751","4752","4753","4754","4755","4756","4757","4758","4759","4760","4761","4762","4763","4764","4765","4766","4767","4768","4769","4770","4771","4772","4773","4774","4775","4776","4777","4778","4779","4780"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport Checkbox from '@mui/material/Checkbox'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [employeeData, setEmployeeData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [awbn, setAwbn] = useState('')\r\n    const [bagReuse, setBagReuse] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [bagStatus, setBagStatus] = useState(0)\r\n    const [loading, setLoading] = useState(false)\r\n    /******************************************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getBagItemRequest/' + trayId + '/' + 'Received From BOT'\r\n                )\r\n                if (response.status === 200) {\r\n                    setEmployeeData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    useEffect(() => {\r\n        const checkBagValidation = async () => {\r\n            try {\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/bagValidation/' + employeeData[0]?.items[0]?.bag_id\r\n                )\r\n                if (res.status === 200) {\r\n                    setBagStatus(res.data.status)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        if (\r\n            employeeData[0]?.items[0]?.bag_id !== undefined &&\r\n            employeeData[0].type_taxanomy == 'BOT'\r\n        ) {\r\n            checkBagValidation()\r\n        } else {\r\n            setBagStatus(1)\r\n        }\r\n    }, [employeeData])\r\n    console.log(employeeData[0]?.items[0]?.bag_id)\r\n    /******************************************************************************** */\r\n    const getitem = async () => {\r\n        try {\r\n            let response = await axiosWarehouseIn.post(\r\n                '/getBagItemRequest/' + trayId + '/' + 'Received From BOT'\r\n            )\r\n            if (response.status === 200) {\r\n                setEmployeeData(response.data.data)\r\n\r\n                //   dataTableFun()\r\n            } else if (response.status == 201) {\r\n                setEmployeeData(response.data.data)\r\n                alert(response.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /******************************************************************************** */\r\n    const handelAwbn = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post('/check-uic', obj)\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else if (res.status == 202) {\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                setTextDisable(false)\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (uic) => {\r\n        if (\r\n            employeeData[0]?.actual_items?.filter(function (item) {\r\n                return item.status == 'Valid'\r\n            }).length +\r\n                employeeData[0]?.actual_items?.filter(function (item) {\r\n                    return item.status == 'Invalid'\r\n                }).length >=\r\n            employeeData[0].limit\r\n        ) {\r\n            alert('Bag Is Full')\r\n        } else {\r\n            let data = employeeData[0]?.items?.filter(function (item) {\r\n                return item.awbn_number == uic.awbn_number\r\n            })\r\n            setTextDisable(true)\r\n            try {\r\n                let obj = {\r\n                    bag_id: trayId,\r\n                    awbn_number: uic.awbn_number,\r\n                    order_id: uic.order_id,\r\n                    order_date: uic.order_date,\r\n                    uic: uic.uic,\r\n                    stock_in: new Date(),\r\n                    status: data[0].status,\r\n                }\r\n                let res = await axiosWarehouseIn.post('/addActualitem', obj)\r\n                if (res?.status == 200) {\r\n                    setAwbn('')\r\n                    setTextDisable(false)\r\n                    getitem()\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, bagId) => {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        try {\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                if (description == '') {\r\n                    alert('Please Add Description')\r\n                    setLoading(false)\r\n                } else if (\r\n                    employeeData[0]?.type_taxanomy == 'BOT' &&\r\n                    bagReuse == false\r\n                ) {\r\n                    alert('Please confirm bag release')\r\n                    setLoading(false)\r\n                } else if (\r\n                    employeeData[0]?.actual_items?.filter(function (item) {\r\n                        return item.status == 'Duplicate'\r\n                    })?.length != 0\r\n                ) {\r\n                    alert('Please Remove Duplicate Items')\r\n                    setLoading(false)\r\n                } else if (\r\n                    employeeData[0]?.actual_items?.length ==\r\n                    employeeData[0]?.items?.length\r\n                ) {\r\n                    let obj = {\r\n                        trayId: trayId,\r\n                        description: description,\r\n                        bagId: bagId,\r\n                        location: location,\r\n                    }\r\n                    if (employeeData?.[0]?.type_taxanomy != 'BOT') {\r\n                        let res = await axiosWarehouseIn.post('/trayclose', obj)\r\n                        if (res.status == 200) {\r\n                            alert(res.data.message)\r\n                            setLoading(false)\r\n                            navigate('/wareshouse/pmt-mmt/tray-close-request')\r\n                        } else {\r\n                            alert(res.data.message)\r\n                        }\r\n                    } else {\r\n                        let res = await axiosWarehouseIn.post(\r\n                            '/traycloseBot',\r\n                            obj\r\n                        )\r\n                        if (res.status == 200) {\r\n                            alert(res.data.message)\r\n                            setLoading(false)\r\n                            navigate('/wareshouse/bag/bag-close-requests')\r\n                        } else {\r\n                            alert(res.data.message)\r\n                        }\r\n                    }\r\n                } else {\r\n                    alert('Please Verify Actual Data')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /******************************************************************************** */\r\n    const handelDelete = async (id) => {\r\n        try {\r\n            let obj = {\r\n                bagId: trayId,\r\n                id: id,\r\n            }\r\n            let data = await axiosWarehouseIn.post('/actualBagItem', obj)\r\n            if (data.status == 200) {\r\n                alert(data.data.message)\r\n                getitem()\r\n            } else {\r\n                alert(data.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /***************************************************************************************** */\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    /******************************************************************************** */\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h4>Expected</h4>\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '1px', fontSize: '22px' }}>\r\n                                {employeeData[0]?.items?.length}/\r\n                                {employeeData[0]?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>Bag Id</TableCell>\r\n                                <TableCell>Order ID</TableCell>\r\n                                <TableCell>Order Date</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {employeeData[0]?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.bag_id}</TableCell>\r\n\r\n                                    <TableCell>{data?.order_id}</TableCell>\r\n                                    <TableCell>\r\n                                        {new Date(\r\n                                            data?.order_date\r\n                                        ).toLocaleString('en-GB', {\r\n                                            year: 'numeric',\r\n                                            month: '2-digit',\r\n                                            day: '2-digit',\r\n                                        })}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={\r\n                                            data.status == 'Valid'\r\n                                                ? { color: 'green' }\r\n                                                : { color: 'red' }\r\n                                        }\r\n                                    >\r\n                                        {data.status}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [employeeData[0]?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h4>ACTUAL</h4>\r\n                <TextField\r\n                    sx={{ m: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    name=\"doorsteps_diagnostics\"\r\n                    inputRef={(input) => input && input.focus()}\r\n                    disabled={textDisable}\r\n                    label=\"SCAN UIC\"\r\n                    value={awbn}\r\n                    onChange={(e) => {\r\n                        setAwbn(e.target.value)\r\n                        handelAwbn(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {employeeData[0]?.actual_items?.length}/\r\n                                {employeeData[0]?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>Bag Id</TableCell>\r\n                                <TableCell>Order ID</TableCell>\r\n                                <TableCell>Order Date</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {employeeData[0]?.actual_items?.map(\r\n                                (data, index) => (\r\n                                    <TableRow\r\n                                        hover\r\n                                        role=\"checkbox\"\r\n                                        tabIndex={-1}\r\n                                    >\r\n                                        <TableCell>{index + 1}</TableCell>\r\n                                        <TableCell>{data?.uic}</TableCell>\r\n                                        <TableCell>{data?.bag_id}</TableCell>\r\n                                        <TableCell>{data?.order_id}</TableCell>\r\n                                        <TableCell>\r\n                                            {new Date(\r\n                                                data?.order_date\r\n                                            ).toLocaleString('en-GB', {\r\n                                                year: 'numeric',\r\n                                                month: '2-digit',\r\n                                                day: '2-digit',\r\n                                            })}\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            style={\r\n                                                data.status == 'Valid'\r\n                                                    ? { color: 'green' }\r\n                                                    : { color: 'red' }\r\n                                            }\r\n                                        >\r\n                                            {data.status}\r\n                                        </TableCell>\r\n                                        {data.status !== 'Valid' ? (\r\n                                            <TableCell>\r\n                                                <Button\r\n                                                    sx={{\r\n                                                        ml: 2,\r\n                                                    }}\r\n                                                    variant=\"contained\"\r\n                                                    style={{\r\n                                                        backgroundColor: 'red',\r\n                                                    }}\r\n                                                    component=\"span\"\r\n                                                    onClick={() => {\r\n                                                        if (\r\n                                                            window.confirm(\r\n                                                                'Delete the item?'\r\n                                                            )\r\n                                                        ) {\r\n                                                            handelDelete(\r\n                                                                data._id\r\n                                                            )\r\n                                                        }\r\n                                                    }}\r\n                                                >\r\n                                                    Remove\r\n                                                </Button>\r\n                                            </TableCell>\r\n                                        ) : null}\r\n                                    </TableRow>\r\n                                )\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [employeeData[0]?.actual_items, textDisable, awbn])\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h3 style={{ marginLeft: '13px' }}>Tray ID - {trayId}</h3>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {employeeData[0]?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Closed On --{' '}\r\n                        {new Date(\r\n                            employeeData[0]?.closed_time_bot\r\n                        ).toLocaleString('en-GB', { hour12: true })}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n                    {employeeData[0]?.type_taxanomy == 'BOT' ? (\r\n                        <>\r\n                            <Checkbox\r\n                                checked={bagReuse}\r\n                                onClick={(e) => {\r\n                                    if (\r\n                                        window.confirm(\r\n                                            bagReuse\r\n                                                ? 'Already Added'\r\n                                                : 'You Want to Release Bag ?'\r\n                                        )\r\n                                    ) {\r\n                                        setBagReuse(true)\r\n                                    }\r\n                                }}\r\n                                {...label}\r\n                            />\r\n                            <label>Bag Release</label>\r\n                        </>\r\n                    ) : (\r\n                        ''\r\n                    )}\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'primery' }}\r\n                        disabled={\r\n                            loading == true ||\r\n                            description == '' ||\r\n                            bagStatus !== 1\r\n                                ? true\r\n                                : false\r\n                        }\r\n                        onClick={(e) => {\r\n                            handelIssue(e, employeeData[0]?.items[0]?.bag_id)\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Pmt-mmt\\issued-pmt-mmt\\view-item.jsx",["4781","4782"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\wht-assignment.jsx",["4783","4784","4785","4786","4787"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n    FormControl,\r\n    MenuItem,\r\n    InputLabel,\r\n    Select,\r\n} from '@mui/material'\r\nimport { useNavigate, useLocation } from 'react-router-dom'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn, axiosMisUser } from '../../../../../axios'\r\nimport Checkbox from '@mui/material/Checkbox'\r\n\r\nexport default function DialogBox() {\r\n    const [clubModel, setClubModel] = useState({})\r\n    const navigate = useNavigate()\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const [assignedTray, setAssignedTray] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [currentstate, setCurrentState] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [trayDataCheck, setTrayDataCheck] = useState(false)\r\n    const [whtTrayId, setWhtTrayId] = useState([])\r\n    const { state } = useLocation()\r\n    const [count, setCount] = useState(0)\r\n    const { isCheck, muic } = state\r\n    /**************************************************************************** */\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let obj = {\r\n                    tray: isCheck,\r\n                    muic: muic,\r\n                }\r\n                let res = await axiosMisUser.post(\r\n                    '/view-bot-clubed-data-model',\r\n                    obj\r\n                )\r\n                if (res.status === 200) {\r\n                    setClubModel(res.data.data)\r\n                } else {\r\n                    alert(res.data.message)\r\n                    navigate('/bag-issue-request')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n    useEffect(() => {\r\n        setCount(0)\r\n        if (clubModel?.items !== undefined) {\r\n            for (let x of clubModel?.items) {\r\n                if (x.muic === clubModel.muic) {\r\n                }\r\n                if (x.wht_tray !== null && x.muic === clubModel.muic) {\r\n                    setCount((count) => count + 1)\r\n                }\r\n            }\r\n        }\r\n    }, [clubModel])\r\n\r\n    /******************************************USEEFFECT FOR READY TO ASSIGN TRAY******************************/\r\n    useEffect(() => {\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            const fetchData = async () => {\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let obj = {\r\n                        brand: clubModel.brand,\r\n                        model: clubModel.model,\r\n                        location: location,\r\n                        trayId: isCheck,\r\n                        whtTrayId: clubModel?.items,\r\n                    }\r\n                    if (clubModel?.items !== undefined) {\r\n                        let res = await axiosWarehouseIn.post(\r\n                            '/getAssignedTray',\r\n                            obj\r\n                        )\r\n                        handeTrayGet('use_new_tray')\r\n                        if (res.status === 200) {\r\n                            setAssignedTray(res.data.data)\r\n                        }\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [refresh, clubModel])\r\n    /***********************************GET TRAY***************************************************** */\r\n    const handeTrayGet = async (type) => {\r\n        try {\r\n            setCurrentState(type)\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let { location } = jwt_decode(admin)\r\n                let obj = {\r\n                    type: type,\r\n                    brand_name: clubModel.brand,\r\n                    model_name: clubModel.model,\r\n                    location: location,\r\n                }\r\n                let res = await axiosWarehouseIn.post('/getWhtTray', obj)\r\n                if (res.status === 200) {\r\n                    if (res.data.data?.length === 0) {\r\n                        setTrayDataCheck(true)\r\n                    } else {\r\n                        setTrayDataCheck(false)\r\n                    }\r\n                    setWhtTray(res.data.data)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /****************************************SELECT TRAY*********************************************** */\r\n    const handelSelect = async (\r\n        whtTrayId,\r\n        trayLimit,\r\n        trayQunatity,\r\n        tempLength\r\n    ) => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                wht_tray: whtTrayId,\r\n                item: [],\r\n                sku: clubModel.temp_array?.[0].vendor_sku_id,\r\n                muic: clubModel?.muic,\r\n                botTray: isCheck,\r\n            }\r\n            let i = 1\r\n            let count = trayLimit - trayQunatity\r\n            let tempCount = trayLimit - tempLength\r\n            for (let x of clubModel.items) {\r\n                if (x.wht_tray === null && x.muic === clubModel?.muic) {\r\n                    if (trayLimit >= i && count >= i && tempCount >= i) {\r\n                        x.model_name = clubModel?.model\r\n                        x.brand_name = clubModel?.brand\r\n                        x.muic = clubModel?.muic\r\n                        x.created = clubModel.temp_array?.[0].created_at\r\n                        obj.item.push(x)\r\n                    } else {\r\n                        break\r\n                    }\r\n                    i++\r\n                }\r\n            }\r\n            if (obj.item.length !== 0) {\r\n                let res = await axiosWarehouseIn.post('/itemAssignToWht', obj)\r\n                if (res.status === 200) {\r\n                    setLoading(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                    handeTrayGet(currentstate)\r\n                    alert(res.data.message)\r\n                }\r\n            } else {\r\n                alert('Tray Already Full')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /**********************************DATATABLE************************************************* */\r\n\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    /********************************************HANDEL REMOVE********************************************* */\r\n    const handelRemoveTray = async (WhttrayId) => {\r\n        try {\r\n            let obj = {\r\n                code: WhttrayId,\r\n                botTray: isCheck,\r\n                muic: clubModel?.muic,\r\n            }\r\n            let res = await axiosWarehouseIn.post('/removeItemWht', obj)\r\n            if (res.status === 200) {\r\n                setRefresh((refresh)=> !refresh)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelIssue = async (e) => {\r\n        e.preventDefault()\r\n        navigate(-1)\r\n    }\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    ml: 1,\r\n                }}\r\n            >\r\n                <Grid container spacing={1}>\r\n                    <Grid itme xs={6}>\r\n                        <Box>\r\n                            <h4 style={{ marginLeft: '13px' }}>\r\n                                MUIC - {clubModel?.muic}\r\n                            </h4>\r\n                            <h4 style={{ marginLeft: '13px' }}>\r\n                                Model Name - {clubModel?.model}\r\n                            </h4>\r\n                            <FormControl sx={{ mt: 1, width: '300px' }}>\r\n                                <InputLabel\r\n                                    sx={{ pt: 1 }}\r\n                                    id=\"demo-simple-select-label\"\r\n                                >\r\n                                    Select\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-label\"\r\n                                    label=\"Select search field\"\r\n                                    sx={{ m: 1 }}\r\n                                >\r\n                                    {/* <MenuItem\r\n                    onClick={(e) => {\r\n                      handeTrayGet(\"Use_existing_tray\");\r\n                    }}\r\n                    value=\"Use_existing_tray\"\r\n                  >\r\n                    Use Existing Tray\r\n                  </MenuItem> */}\r\n\r\n                                    <MenuItem\r\n                                        onClick={(e) => {\r\n                                            handeTrayGet('use_new_tray')\r\n                                        }}\r\n                                        value=\"use_new_tray\"\r\n                                    >\r\n                                        Use New Tray\r\n                                    </MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid xs={6}>\r\n                        <Box>\r\n                            <h4 style={{ marginLeft: '13px' }}>\r\n                                Brand Name - {clubModel?.brand}\r\n                            </h4>\r\n                            <h4 style={{ marginLeft: '13px' }}>\r\n                                Number of Pieces - {count} /{' '}\r\n                                {clubModel?.temp_array?.length}\r\n                            </h4>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid xs={6}>\r\n                        <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                            <TableContainer>\r\n                                <Table\r\n                                    style={{ width: '100%' }}\r\n                                    // id=\"trayTable\"\r\n                                    stickyHeader\r\n                                    aria-label=\"sticky table\"\r\n                                >\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>S.NO</TableCell>\r\n                                            <TableCell>Tray Id</TableCell>\r\n                                            <TableCell>Quantity</TableCell>\r\n                                            {count ===\r\n                                            clubModel?.temp_array?.length ? (\r\n                                                <TableCell>Select</TableCell>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n\r\n                                    <TableBody>\r\n                                        {whtTray.map((data, index) => (\r\n                                            <TableRow\r\n                                                hover\r\n                                                role=\"checkbox\"\r\n                                                tabIndex={-1}\r\n                                            >\r\n                                                <TableCell>\r\n                                                    {index + 1}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data.code}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data.items.length +\r\n                                                        '/' +\r\n                                                        data?.temp_array\r\n                                                            ?.length +\r\n                                                        '/' +\r\n                                                        data?.limit}\r\n                                                </TableCell>\r\n                                                {count ===\r\n                                                clubModel?.temp_array\r\n                                                    ?.length ? null : (\r\n                                                    <TableCell>\r\n                                                        {data?.items?.length <\r\n                                                            data.limit &&\r\n                                                        data?.temp_array\r\n                                                            ?.length <\r\n                                                            data.limit ? (\r\n                                                            <Checkbox\r\n                                                                {...label}\r\n                                                                disabled={\r\n                                                                    loading ===\r\n                                                                        true ||\r\n                                                                    clubModel?.items?.filter(\r\n                                                                        (\r\n                                                                            item\r\n                                                                        ) => {\r\n                                                                            return (\r\n                                                                                item.wht_tray ==\r\n                                                                                data.code\r\n                                                                            )\r\n                                                                        }\r\n                                                                    ).length !==\r\n                                                                        0\r\n                                                                        ? true\r\n                                                                        : false\r\n                                                                }\r\n                                                                onClick={(\r\n                                                                    e\r\n                                                                ) => {\r\n                                                                    handelSelect(\r\n                                                                        data.code,\r\n                                                                        data.limit,\r\n                                                                        data\r\n                                                                            ?.items\r\n                                                                            ?.length,\r\n                                                                        data\r\n                                                                            ?.temp_array\r\n                                                                            ?.length\r\n                                                                    )\r\n                                                                }}\r\n                                                                id={index}\r\n                                                                key={index}\r\n                                                            />\r\n                                                        ) : null}\r\n                                                    </TableCell>\r\n                                                )}\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                            {trayDataCheck === true ? (\r\n                                <p style={{ textAlign: 'center' }}>\r\n                                    No data available in table\r\n                                </p>\r\n                            ) : null}\r\n                        </Paper>\r\n                    </Grid>\r\n                    <Grid xs={6}>\r\n                        <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                            <TableContainer>\r\n                                <Table\r\n                                    style={{ width: '100%' }}\r\n                                    // id=\"trayTable2\"\r\n                                    stickyHeader\r\n                                    aria-label=\"sticky table\"\r\n                                >\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell>S.NO</TableCell>\r\n                                            <TableCell>Tray Id</TableCell>\r\n                                            <TableCell>Quantity</TableCell>\r\n                                            <TableCell>Action</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n\r\n                                    <TableBody>\r\n                                        {assignedTray.map((data, index) => (\r\n                                            <TableRow\r\n                                                hover\r\n                                                role=\"checkbox\"\r\n                                                tabIndex={-1}\r\n                                            >\r\n                                                <TableCell>\r\n                                                    {index + 1}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data?.code}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data.items.length +\r\n                                                        '/' +\r\n                                                        data?.temp_array\r\n                                                            ?.length +\r\n                                                        '/' +\r\n                                                        data?.limit}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    <Button\r\n                                                        sx={{\r\n                                                            ml: 2,\r\n                                                        }}\r\n                                                        variant=\"contained\"\r\n                                                        style={{\r\n                                                            backgroundColor:\r\n                                                                'red',\r\n                                                        }}\r\n                                                        component=\"span\"\r\n                                                        onClick={() => {\r\n                                                            if (\r\n                                                                window.confirm(\r\n                                                                    'You Want to Remove?'\r\n                                                                )\r\n                                                            ) {\r\n                                                                handelRemoveTray(\r\n                                                                    data?.code\r\n                                                                )\r\n                                                            }\r\n                                                        }}\r\n                                                    >\r\n                                                        Remove\r\n                                                    </Button>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n                <div style={{ float: 'right' }}>\r\n                    <Box sx={{ float: 'right' }}>\r\n                        <Button\r\n                            sx={{ m: 3, mb: 9 }}\r\n                            variant=\"contained\"\r\n                            disabled={loading === true ? true : false}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            onClick={(e) => {\r\n                                handelIssue(e)\r\n                            }}\r\n                        >\r\n                            Back to List\r\n                        </Button>\r\n                    </Box>\r\n                </div>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Merge\\Mmt-merge\\view-item.jsx",["4788","4789"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { axiosBot } from '../../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosBot.post('/trayItem/' + trayId)\r\n                if (res.status == 200) {\r\n                    setTrayData(res.data.data?.items)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Tray', path: '/' },\r\n                        { name: 'Tray-Item', path: '/' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst columns = [\r\n    {\r\n        name: 'index',\r\n        label: 'Record No',\r\n        options: {\r\n            filter: true,\r\n            sort: true,\r\n            customBodyRender: (rowIndex, dataIndex) => dataIndex.rowIndex + 1,\r\n        },\r\n    },\r\n    {\r\n        name: 'uic',\r\n        label: 'UIC',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'imei',\r\n        label: 'IMEI',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'bag_id',\r\n        label: 'Bag Id',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'body_damage',\r\n        label: 'Body Damage',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'body_damage_des',\r\n        label: 'Body Damage Description',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'item_recieved',\r\n        label: 'Item Received In Packet',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'model_brand',\r\n        label: 'Mismatched Model Brand Name',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerOne',\r\n        label: 'Other Info 1',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerTwo',\r\n        label: 'Other Info 2',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerThree',\r\n        label: 'Other Info 3',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'stickerFour',\r\n        label: 'Other Info 4',\r\n        options: {\r\n            filter: true,\r\n        },\r\n    },\r\n    {\r\n        name: 'added_time',\r\n        label: 'Added Date',\r\n        options: {\r\n            filter: true,\r\n            customBodyRender: (value) =>\r\n                new Date(value).toLocaleString('en-GB', {\r\n                    hour12: true,\r\n                }),\r\n        },\r\n    },\r\n]\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Bot\\bot-to-release\\view-tray-item.jsx",["4790","4791"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport { axiosBot, } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [botTray, setBotTray] = useState([])\r\n    const {trayId}=useParams()\r\n   \r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosBot.post('/trayItem/' + trayId)\r\n                if (response.status === 200) {\r\n                    setBotTray(response.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'imei',\r\n            label: 'IMEI',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'wht_tray',\r\n            label: 'WHT Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'BOT', path: '/' },\r\n                        { name: 'View-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={botTray.items}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\wht-tray\\wht-tray-item.jsx",["4792","4793","4794"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getWhtTrayItem/' + trayId + '/' + 'all-wht-tray'\r\n                )\r\n                if (response.status === 200) {\r\n                    if (response.data.data?.items?.length == 0) {\r\n                        setWhtTray(response.data.data.actual_items)\r\n                    } else {\r\n                        setWhtTray(response.data.data.items)\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand_name',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model_name',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tracking_id',\r\n            label: 'Tracking Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_id',\r\n            label: 'BOT Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'bot_agent',\r\n            label: 'BOT Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'WHT-Tray-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Sorting\\Sorting-requests\\detailed-view.jsx",["4795","4796","4797","4798","4799","4800","4801","4802","4803","4804","4805","4806","4807","4808"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button, Box } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [botTray, setBotTray] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [userAgent, setUserAgent] = useState('')\r\n    const { trayId } = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/get-tray-sorting-requests/' + trayId\r\n                )\r\n                if (response.status === 200) {\r\n                    setBotTray(response.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    useEffect(() => {\r\n        const userStatusApiCall = async () => {\r\n            try {\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/sortingAgnetStatus/' + botTray[0]?.issued_user_name\r\n                )\r\n                if (res.status === 200) {\r\n                    setUserAgent(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        if (botTray[0]?.issued_user_name !== undefined) {\r\n            userStatusApiCall()\r\n        }\r\n    }, [botTray])\r\n\r\n    const handelExvsAt = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/request/approve/item-verifiying/' + code)\r\n    }\r\n\r\n    const handelIssue = async (e, type) => {\r\n        try {\r\n            if (userAgent !== 'User is free') {\r\n                alert(userAgent)\r\n            } else {\r\n                setLoading(true)\r\n                let flag = false\r\n                for (let x of botTray) {\r\n                    if (x.items.length !== x.actual_items.length) {\r\n                        flag = true\r\n                        break\r\n                    }\r\n                }\r\n                if (flag == false) {\r\n                    let obj = {\r\n                        allTray: botTray,\r\n                        type: type,\r\n                        username: botTray[0]?.issued_user_name,\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/assign-to-sorting-confirm',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        setLoading(false)\r\n                        navigate('/wareshouse/sorting/request')\r\n                    } else {\r\n                        setLoading(false)\r\n                        alert(res.data.message)\r\n                    }\r\n                } else {\r\n                    setLoading(false)\r\n                    alert('Please Issue all Tray')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta.rowData[3],\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return value == 'Sorting Request Sent To Warehouse' &&\r\n                        tableMeta.rowData[6] == 'BOT'\r\n                        ? 'Not Issued'\r\n                        : tableMeta.rowData[6] == 'WHT' &&\r\n                          tableMeta.rowData[4]?.length !== 0\r\n                        ? 'Not Issued'\r\n                        : tableMeta.rowData[6] == 'WHT'\r\n                        ? 'New WHT'\r\n                        : 'Issued'\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort_id: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return tableMeta.rowData[6] == 'BOT' ||\r\n                        (tableMeta.rowData[6] == 'WHT' &&\r\n                            tableMeta.rowData[4]?.length !== 0) ? (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            disabled={\r\n                                tableMeta.rowData[4]?.length ===\r\n                                tableMeta.rowData[7]?.length\r\n                                    ? true\r\n                                    : false\r\n                            }\r\n                            onClick={(e) =>\r\n                                handelExvsAt(e, tableMeta.rowData[1])\r\n                            }\r\n                            style={{ backgroundColor: 'primery' }}\r\n                            component=\"span\"\r\n                        >\r\n                            {tableMeta.rowData[4]?.length ===\r\n                            tableMeta.rowData[7]?.length\r\n                                ? 'Scanned'\r\n                                : ' Issue Now'}\r\n                        </Button>\r\n                    ) : null\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'actual_items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: false,\r\n                display: false,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Sorting', path: '/' },\r\n                        { name: 'Request-Approve' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <Box\r\n                sx={{\r\n                    float: 'right',\r\n                }}\r\n            >\r\n                <h4>\r\n                    Assigned Date -{' '}\r\n                    {new Date(botTray[0]?.status_change_time).toLocaleString(\r\n                        'en-GB',\r\n                        {\r\n                            year: 'numeric',\r\n                            month: '2-digit',\r\n                            day: '2-digit',\r\n                        }\r\n                    )}\r\n                </h4>\r\n                <h4>Agent Name- {botTray[0]?.issued_user_name}</h4>\r\n            </Box>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={botTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            <Box sx={{ float: 'right' }}>\r\n                {botTray?.[0]?.sort_id == 'Assigned to sorting agent' ? (\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            botTray?.[0]?.items.length !==\r\n                            botTray?.[0]?.actual_items.length\r\n                                ? true\r\n                                : loading == true\r\n                                ? true\r\n                                : false\r\n                        }\r\n                        style={{ backgroundColor: 'primery' }}\r\n                        onClick={(e) => {\r\n                            handelIssue(e, 'Issued to sorting agent')\r\n                        }}\r\n                    >\r\n                        Handover Done\r\n                    </Button>\r\n                ) : botTray?.[0]?.sort_id !== 'Issued to sorting agent' ? (\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={loading || userAgent == ''}\r\n                        style={{ backgroundColor: 'primery' }}\r\n                        onClick={(e) => {\r\n                            handelIssue(e, 'Assigned to sorting agent')\r\n                        }}\r\n                    >\r\n                        Assign To Agent\r\n                    </Button>\r\n                ) : null}\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Sorting\\Sorting-requests\\ex-vs-act.jsx",["4809","4810","4811","4812","4813","4814","4815","4816","4817","4818","4819","4820"],"import React, { useEffect, useState, useMemo } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Grid,\r\n} from \"@mui/material\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport { axiosWarehouseIn } from \"../../../../../axios\";\r\n\r\nexport default function DialogBox() {\r\n  const navigate = useNavigate();\r\n  const [trayData, setTrayData] = useState([]);\r\n  const { trayId, sortId } = useParams();\r\n  const [textDisable, setTextDisable] = useState(false);\r\n  /**************************************************************************** */\r\n  const [uic, setUic] = useState(\"\");\r\n  const [refresh, setRefresh] = useState(false);\r\n  /*********************************************************** */\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        let response = await axiosWarehouseIn.post(\r\n          \"/get-tray-sorting/\" + trayId\r\n        );\r\n        if (response.status === 200) {\r\n          setTrayData(response.data.data);\r\n        } else {\r\n          alert(response.data.message);\r\n          navigate(-1);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [refresh]);\r\n\r\n  const handelUic = async (e) => {\r\n    if (e.target.value.length === 11) {\r\n      try {\r\n        let obj = {\r\n          uic: e.target.value,\r\n          trayId: trayId,\r\n        };\r\n        setTextDisable(true);\r\n        let res = await axiosWarehouseIn.post(\"/check-uic\", obj);\r\n        if (res?.status === 200) {\r\n          addActualitem(res.data.data);\r\n        } else {\r\n          setTextDisable(false);\r\n          setUic(\"\");\r\n          alert(res.data.message);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    }\r\n  };\r\n  /************************************************************************** */\r\n  const addActualitem = async (obj) => {\r\n    if (trayData.limit <= trayData?.actual_items?.length) {\r\n      alert(\"All Items Scanned\");\r\n    } else {\r\n      setTextDisable(true);\r\n      try {\r\n        let objData = {\r\n          trayId: trayId,\r\n          item: obj,\r\n        };\r\n        let res = await axiosWarehouseIn.post(\"/wht-add-actual-item\", objData);\r\n        if (res.status === 200) {\r\n          setUic(\"\");\r\n          setTextDisable(false);\r\n          setRefresh((refresh) => !refresh);\r\n        } else {\r\n          setTextDisable(false);\r\n          alert(res.data.message);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    }\r\n  };\r\n  /************************************************************************** */\r\n  const handelIssue = async (e) => {\r\n    e.preventDefault();\r\n    navigate(-1);\r\n  };\r\n  /************************************************************************** */\r\n  const tableExpected = useMemo(() => {\r\n    return (\r\n      <Paper sx={{ width: \"95%\", overflow: \"hidden\", m: 1 }}>\r\n        <Box sx={{}}>\r\n          <Box\r\n            sx={{\r\n              float: \"left\",\r\n              ml: 2,\r\n            }}\r\n          >\r\n            <h5>Expected</h5>\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              float: \"right\",\r\n              mr: 2,\r\n            }}\r\n          >\r\n            <Box sx={{}}>\r\n              <h5>Total</h5>\r\n              <p style={{ paddingLeft: \"5px\", fontSize: \"22px\" }}>\r\n                {\r\n                  trayData?.items?.length\r\n                }\r\n                /{trayData?.limit}\r\n              </p>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <TableContainer>\r\n          <Table\r\n            style={{ width: \"100%\" }}\r\n            id=\"example\"\r\n            stickyHeader\r\n            aria-label=\"sticky table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>S.NO</TableCell>\r\n                <TableCell>UIC</TableCell>\r\n                {trayData?.type_taxanomy === \"MMT\" &&\r\n                trayData?.prefix == \"tray-master\" ? (\r\n                  <TableCell>AWBN Number</TableCell>\r\n                ) : (\r\n                  <TableCell>MUIC</TableCell>\r\n                )}\r\n                {trayData?.type_taxanomy === \"MMT\" &&\r\n                trayData?.prefix == \"tray-master\" ? (\r\n                  <TableCell>Bag ID</TableCell>\r\n                ) : (\r\n                  <TableCell>BOT Tray</TableCell>\r\n                )}\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {trayData?.items?.map((data, index) => (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                  <TableCell>{index + 1}</TableCell>\r\n                  <TableCell>{data?.uic}</TableCell>\r\n                  {trayData?.type_taxanomy === \"MMT\" &&\r\n                  trayData?.prefix == \"tray-master\" ? (\r\n                    <TableCell>{data?.awbn_number}</TableCell>\r\n                  ) : (\r\n                    <TableCell>{data?.muic}</TableCell>\r\n                  )}\r\n                  {trayData?.type_taxanomy === \"MMT\" &&\r\n                  trayData?.prefix == \"tray-master\" ? (\r\n                    <TableCell>{data?.bag_id}</TableCell>\r\n                  ) : (\r\n                    <TableCell>{data?.tray_id}</TableCell>\r\n                  )}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    );\r\n  }, [trayData?.items]);\r\n  const tableActul = useMemo(() => {\r\n    return (\r\n      <Paper sx={{ width: \"98%\", overflow: \"hidden\", m: 1 }}>\r\n        <Box sx={{}}>\r\n          <Box\r\n            sx={{\r\n              float: \"left\",\r\n              ml: 2,\r\n            }}\r\n          >\r\n            <h5>ACTUAL</h5>\r\n            <TextField\r\n              sx={{ mt: 1 }}\r\n              id=\"outlined-password-input\"\r\n              type=\"text\"\r\n              inputRef={(input) => input && input.focus()}\r\n              name=\"doorsteps_diagnostics\"\r\n              disabled={textDisable}\r\n              label=\"SCAN UIC\"\r\n              value={uic}\r\n              onChange={(e) => {\r\n                setUic(e.target.value);\r\n                handelUic(e);\r\n              }}\r\n              inputProps={{\r\n                style: {\r\n                  width: \"auto\",\r\n                },\r\n              }}\r\n            />\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              float: \"right\",\r\n              mr: 2,\r\n            }}\r\n          >\r\n            <Box sx={{}}>\r\n              <h5>Total</h5>\r\n              <p style={{ marginLeft: \"5px\", fontSize: \"24px\" }}>\r\n                {\r\n                  trayData.actual_items?.length\r\n                }\r\n                /{trayData?.limit}\r\n              </p>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <TableContainer>\r\n          <Table\r\n            style={{ width: \"100%\" }}\r\n            id=\"example\"\r\n            stickyHeader\r\n            aria-label=\"sticky table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>S.NO</TableCell>\r\n                <TableCell>UIC</TableCell>\r\n                {trayData?.type_taxanomy === \"MMT\" &&\r\n                trayData?.prefix == \"tray-master\" ? (\r\n                  <TableCell>AWBN Number</TableCell>\r\n                ) : (\r\n                  <TableCell>MUIC</TableCell>\r\n                )}\r\n                {trayData?.type_taxanomy === \"MMT\" &&\r\n                trayData?.prefix == \"tray-master\" ? (\r\n                  <TableCell>Bag ID</TableCell>\r\n                ) : (\r\n                  <TableCell>BOT Tray</TableCell>\r\n                )}\r\n              </TableRow>\r\n            </TableHead>\r\n\r\n            <TableBody>\r\n              {trayData?.actual_items?.map((data, index) => (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                  <TableCell>{index + 1}</TableCell>\r\n                  <TableCell>{data?.uic}</TableCell>\r\n                  {trayData?.type_taxanomy === \"MMT\" &&\r\n                  trayData?.prefix == \"tray-master\" ? (\r\n                    <TableCell>{data?.awbn_number}</TableCell>\r\n                  ) : (\r\n                    <TableCell>{data?.muic}</TableCell>\r\n                  )}\r\n                  {trayData?.type_taxanomy === \"MMT\" &&\r\n                  trayData?.prefix == \"tray-master\" ? (\r\n                    <TableCell>{data?.bag_id}</TableCell>\r\n                  ) : (\r\n                    <TableCell>{data?.tray_id}</TableCell>\r\n                  )}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    );\r\n  }, [trayData?.actual_items, textDisable,uic]);\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          mt: 1,\r\n          height: 70,\r\n          borderRadius: 1,\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            float: \"left\",\r\n          }}\r\n        >\r\n          <h4 style={{ marginLeft: \"13px\" }}>TRAY ID - {trayId}</h4>\r\n          <h4 style={{ marginLeft: \"13px\" }}>\r\n            AGENT NAME - {trayData?.issued_user_name}\r\n          </h4>\r\n        </Box>\r\n      </Box>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={6}>\r\n          {tableExpected}\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          {tableActul}\r\n        </Grid>\r\n      </Grid>\r\n      <div style={{ float: \"right\" }}>\r\n        <Box sx={{ float: \"right\" }}>\r\n          <Button\r\n            sx={{ m: 3, mb: 9 }}\r\n            variant=\"contained\"\r\n            style={{ backgroundColor: \"primery\" }}\r\n            onClick={(e) => {\r\n              handelIssue(e);\r\n            }}\r\n          >\r\n            Back to List\r\n          </Button>\r\n        </Box>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\Sorting-request\\start-sorting.jsx",["4821","4822","4823","4824"],"import React, { useEffect, useMemo, useState } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    DialogTitle,\r\n    IconButton,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport { useParams } from 'react-router-dom'\r\n// import jwt from \"jsonwebtoken\" \r\nimport jwt_decode from 'jwt-decode'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport { styled } from '@mui/material/styles'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nimport { axiosSortingAgent } from '../../../../axios'\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [tray, setTray] = useState([])\r\n    const { trayId } = useParams()\r\n    /**************************************************************************** */\r\n    const [awbn, setAwbn] = useState('')\r\n    const [open, setOpen] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [itemDetails, setItemDetails] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [loading2, setLoading2] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { user_name } = jwt_decode(admin)\r\n                    let response = await axiosSortingAgent.post(\r\n                        '/get-data-for-start-sorting/' +\r\n                            user_name +\r\n                            '/' +\r\n                            trayId\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setTray(response.data.data)\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        setLoading(false)\r\n        setAwbn('')\r\n    }\r\n\r\n    const handelAwbn = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                    wht_tray: tray?.wht,\r\n                }\r\n                let res = await axiosSortingAgent.post(\r\n                    '/cheack-uic-for-sorting',\r\n                    obj\r\n                )\r\n                if (res?.status === 200) {\r\n                    setItemDetails(res.data.data)\r\n                    setOpen(true)\r\n                } else {\r\n                    setAwbn('')\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                setAwbn('')\r\n\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (e) => {\r\n        try {\r\n            if (e.keyCode === 32) {\r\n            } else {\r\n                setLoading(true)\r\n                setTextDisable(true)\r\n                let res = await axiosSortingAgent.post(\r\n                    '/item-move-to-wht',\r\n                    itemDetails\r\n                )\r\n                if (res?.status === 200) {\r\n                    setRefresh((refresh) => !refresh)\r\n                    setAwbn('')\r\n                    setTextDisable(false)\r\n                    handleClose()\r\n                    setLoading(false)\r\n                } else {\r\n                    setAwbn('')\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, trayId) => {\r\n        e.preventDefault()\r\n        try {\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n            } else {\r\n                setLoading2(true)\r\n                let obj = {\r\n                    wht: tray?.wht,\r\n                    trayId: trayId,\r\n                }\r\n                let res = await axiosSortingAgent.post(\r\n                    '/bot-and-wht-send-to-warehouse',\r\n                    obj\r\n                )\r\n                if (res.status === 200) {\r\n                    alert(res.data.message)\r\n                    setLoading2(false)\r\n                    navigate('/sorting/request')\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelViewItem = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/tray/item/' + code)\r\n    }\r\n\r\n    const tableFrom = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>BOT TRAY ITEM</h5>\r\n\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {tray?.bot?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [tray?.bot?.actual_items])\r\n\r\n    const tableTo = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>WHT TRAY</h5>\r\n                <TextField\r\n                    sx={{ m: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    name=\"doorsteps_diagnostics\"\r\n                    label=\"SCAN UIC\"\r\n                    disabled={textDisable}\r\n                    value={awbn}\r\n                    // onChange={(e) => setAwbn(e.target.value)}\r\n                    onChange={(e) => {\r\n                        setAwbn(e.target.value)\r\n                        handelAwbn(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>WHT TRay ID</TableCell>\r\n                                <TableCell>Brand</TableCell>\r\n                                <TableCell>Model</TableCell>\r\n                                <TableCell>Quantity</TableCell>\r\n                                <TableCell>Action</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {tray?.wht?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.code}</TableCell>\r\n                                    <TableCell>{data?.brand}</TableCell>\r\n                                    <TableCell>{data?.model}</TableCell>\r\n                                    <TableCell>\r\n                                        {data?.items.length}/{data.limit}\r\n                                    </TableCell>\r\n\r\n                                    <TableCell>\r\n                                        <Button\r\n                                            sx={{\r\n                                                m: 1,\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                            onClick={(e) =>\r\n                                                handelViewItem(e, data.code)\r\n                                            }\r\n                                            style={{\r\n                                                backgroundColor: 'primery',\r\n                                            }}\r\n                                            component=\"span\"\r\n                                        >\r\n                                            View\r\n                                        </Button>\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [tray?.wht, awbn, textDisable])\r\n\r\n    /***************************************************************************************** */\r\n    return (\r\n        <>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                    width=\"600px\"\r\n                >\r\n                    You are moving\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            alignItems: 'flex-start',\r\n                            flexDirection: 'column',\r\n                            p: 1,\r\n                            m: 1,\r\n                            bgcolor: 'background.paper',\r\n                            borderRadius: 1,\r\n                        }}\r\n                    >\r\n                        <Grid container spacing={1}>\r\n                            <Grid item xs={6}>\r\n                                <h4>MUIC:-{itemDetails?.muic}</h4>\r\n                                <h4>UIC:-{itemDetails?.uic}</h4>\r\n                                <h4>From:-{itemDetails?.tray_id}</h4>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                                <h4>Model Name:-{itemDetails?.model}</h4>\r\n                                <h4>Brand Name:-{itemDetails?.brand}</h4>\r\n                                <h4>To:-{itemDetails?.wht_tray}</h4>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            ml: 2,\r\n                        }}\r\n                        fullwidth\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'primery' }}\r\n                        disabled={loading}\r\n                        component=\"span\"\r\n                        onClick={(e) => {\r\n                            addActualitem(e)\r\n                        }}\r\n                    >\r\n                        YES\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        BOT Tray Id - {trayId}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Assigned Date --{' '}\r\n                        {new Date(tray?.bot?.status_change_time).toLocaleString(\r\n                            'en-GB',\r\n                            {\r\n                                hour12: true,\r\n                            }\r\n                        )}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableFrom}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableTo}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            tray?.bot?.actual_items?.length !== 0\r\n                                ? true\r\n                                : loading2 == true\r\n                                ? true\r\n                                : false\r\n                        }\r\n                        style={{ backgroundColor: 'primery' }}\r\n                        onClick={(e) => {\r\n                            handelIssue(e, trayId)\r\n                        }}\r\n                    >\r\n                        Close BOT Tray\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Merge\\Merge-request\\approve-request.jsx",["4825","4826","4827","4828","4829","4830","4831"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Box,\r\n    Button,\r\n} from '@mui/material'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\n\r\nexport default function StickyHeadTable({ props }) {\r\n    const [mmtTray, setMmtTray] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [userAgent, setUserAgent] = useState('')\r\n    const navigate = useNavigate()\r\n    const { mmtTrayId } = useParams()\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/viewTrayFromAndTo/' + location + '/' + mmtTrayId\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setMmtTray(response.data.data)\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    useEffect(() => {\r\n        const userStatusApiCall = async () => {\r\n            try {\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/sortingAgnetStatus/' + mmtTray[0]?.issued_user_name\r\n                )\r\n                if (res.status === 200) {\r\n                    setUserAgent(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        if (mmtTray[0]?.issued_user_name !== undefined) {\r\n            userStatusApiCall()\r\n        }\r\n    }, [mmtTray])\r\n\r\n    const handelExvsAt = (e, code) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/request/approve/item-verifiying/' + code)\r\n    }\r\n\r\n    /******************************************************************************* */\r\n    const handelIssue = async (e, type) => {\r\n        try {\r\n            if (userAgent !== 'User is free') {\r\n                alert(userAgent)\r\n            } else {\r\n                setLoading(true)\r\n                let flag = false\r\n                for (let x of mmtTray) {\r\n                    if (x.items.length !== x.actual_items.length) {\r\n                        flag = true\r\n                        break\r\n                    }\r\n                }\r\n                if (flag == false) {\r\n                    let obj = {\r\n                        fromTray: mmtTray[0].code,\r\n                        toTray: mmtTray[1].code,\r\n                        username: mmtTray[0]?.issued_user_name,\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/mmtTraySendToSorting',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        setLoading(false)\r\n                        navigate('/wareshouse/merge/request')\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                } else {\r\n                    setLoading(false)\r\n                    alert('Please Issue all Tray')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    m: 3,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4>\r\n                        Assigned Date -{' '}\r\n                        {new Date(\r\n                            mmtTray[0]?.status_change_time\r\n                        ).toLocaleString('en-GB', {\r\n                            year: 'numeric',\r\n                            month: '2-digit',\r\n                            day: '2-digit',\r\n                        })}\r\n                    </h4>\r\n                    <h4>Agent Name- {mmtTray[0]?.issued_user_name}</h4>\r\n                </Box>\r\n                <Box sx={{}}>\r\n                    <Paper sx={{ width: '100%', overflow: 'auto' }}>\r\n                        <TableContainer>\r\n                            <Table\r\n                                id=\"example\"\r\n                                style={{ width: '100%' }}\r\n                                aria-label=\"sticky table\"\r\n                            >\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>Record.NO</TableCell>\r\n                                        <TableCell>Tray Id</TableCell>\r\n                                        <TableCell>Tray Type</TableCell>\r\n                                        <TableCell>Quantity</TableCell>\r\n                                        <TableCell>Status</TableCell>\r\n                                        <TableCell>Action</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {mmtTray.map((data, index) => (\r\n                                        <TableRow\r\n                                            hover\r\n                                            role=\"checkbox\"\r\n                                            tabIndex={-1}\r\n                                        >\r\n                                            <TableCell>{index + 1}</TableCell>\r\n                                            <TableCell>{data.code}</TableCell>\r\n                                            <TableCell>\r\n                                                {data.type_taxanomy}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {data.items.length}/{data.limit}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {data.sort_id ==\r\n                                                    'Sorting Request Sent To Warehouse' &&\r\n                                                data.type_taxanomy == 'BOT'\r\n                                                    ? 'Not Issued'\r\n                                                    : data.type_taxanomy ==\r\n                                                          'WHT' &&\r\n                                                      data.items.length !== 0\r\n                                                    ? 'Not Issued'\r\n                                                    : data.type_taxanomy ==\r\n                                                      'WHT'\r\n                                                    ? 'New WHT'\r\n                                                    : 'Issued'}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                <Button\r\n                                                    variant=\"contained\"\r\n                                                    disabled={\r\n                                                        data.items.length ===\r\n                                                        data.actual_items.length\r\n                                                            ? true\r\n                                                            : false\r\n                                                    }\r\n                                                    onClick={(e) =>\r\n                                                        handelExvsAt(\r\n                                                            e,\r\n                                                            data.code\r\n                                                        )\r\n                                                    }\r\n                                                    style={{\r\n                                                        backgroundColor:\r\n                                                            'green',\r\n                                                    }}\r\n                                                    component=\"span\"\r\n                                                >\r\n                                                    {data.items.length ===\r\n                                                    data.actual_items.length\r\n                                                        ? 'Scanned'\r\n                                                        : 'Issue'}\r\n                                                </Button>\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Box>\r\n                <div style={{ float: 'right' }}>\r\n                    <Box sx={{ float: 'right' }}>\r\n                        <Button\r\n                            sx={{ m: 3, mb: 9 }}\r\n                            variant=\"contained\"\r\n                            disabled={loading}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            onClick={(e) => {\r\n                                handelIssue(e, 'Assigned to sorting agent')\r\n                            }}\r\n                        >\r\n                            Assign To Agent\r\n                        </Button>\r\n                    </Box>\r\n                </div>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n ","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Merge\\Return-from-merge\\close.jsx",["4832","4833","4834","4835","4836","4837","4838","4839","4840","4841","4842","4843","4844","4845","4846","4847","4848"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport Checkbox from '@mui/material/Checkbox'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [employeeData, setEmployeeData] = useState([])\r\n    const { trayId } = useParams()\r\n    /**************************************************************************** */\r\n    const [awbn, setAwbn] = useState('')\r\n    const [bagReuse, setBagReuse] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /******************************************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getBagItemRequest/' +\r\n                        trayId +\r\n                        '/' +\r\n                        'Received From Merging'\r\n                )\r\n                if (response.status === 200) {\r\n                    setEmployeeData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n    /******************************************************************************** */\r\n    const getitem = async () => {\r\n        try {\r\n            let response = await axiosWarehouseIn.post(\r\n                '/getBagItemRequest/' + trayId + '/' + 'Received From Merging'\r\n            )\r\n            if (response.status === 200) {\r\n                setEmployeeData(response.data.data)\r\n\r\n                //   dataTableFun()\r\n            } else if (response.status == 201) {\r\n                setEmployeeData(response.data.data)\r\n                alert(response.data.message)\r\n            } else if (response.status == 202) {\r\n                alert(response.data.message)\r\n                navigate(-1)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /******************************************************************************** */\r\n    const handelAwbn = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post('/check-uic', obj)\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (uic) => {\r\n        setTextDisable(true)\r\n        try {\r\n            let obj = {\r\n                bag_id: trayId,\r\n                awbn_number: uic.awbn_number,\r\n                order_id: uic.order_id,\r\n                order_date: uic.order_date,\r\n                uic: uic.uic,\r\n                status:uic.status,\r\n                stock_in: new Date(),\r\n            }\r\n            let res = await axiosWarehouseIn.post('/addActualitem', obj)\r\n            if (res?.status == 200) {\r\n                setAwbn('')\r\n                setTextDisable(false)\r\n                getitem()\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, trayId, type, length, limit,status) => {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                let obj = {\r\n                    toTray: trayId,\r\n                    fromTray: employeeData[0].from_merge,\r\n                    type: type,\r\n                    length: length,\r\n                    limit: limit,\r\n                    status:status\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/mergeDoneMmttrayClose',\r\n                    obj\r\n                )\r\n                if (res.status === 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/wareshouse/merge/return-from-merge')\r\n                } else {\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    /***************************************************************************************** */\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } }\r\n    /******************************************************************************** */\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>Expected</h5>\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {\r\n                                    employeeData[0]?.items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{employeeData[0]?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n\r\n                                {/* <TableCell>AWBN Number</TableCell> */}\r\n                                <TableCell>Order ID</TableCell>\r\n                                <TableCell>Order Date</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {employeeData[0]?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n\r\n                                    <TableCell>{data?.order_id}</TableCell>\r\n                                    <TableCell>\r\n                                        {new Date(\r\n                                            data?.order_date\r\n                                        ).toLocaleString('en-GB', {\r\n                                            year: 'numeric',\r\n                                            month: '2-digit',\r\n                                            day: '2-digit',\r\n                                        })}\r\n                                    </TableCell>\r\n                                    <TableCell\r\n                                        style={\r\n                                            data.status == 'Valid'\r\n                                                ? { color: 'green' }\r\n                                                : { color: 'red' }\r\n                                        }\r\n                                    >\r\n                                        {data.status}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [employeeData[0]?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>ACTUAL</h5>\r\n                <TextField\r\n                    sx={{ m: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    inputRef={(input) => input && input.focus()}\r\n                    disabled={textDisable}\r\n                    name=\"doorsteps_diagnostics\"\r\n                    label=\"SCAN UIC\"\r\n                    value={awbn}\r\n                    onChange={(e) => {\r\n                        setAwbn(e.target.value)\r\n                        handelAwbn(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {\r\n                                    employeeData[0]?.actual_items?.filter(\r\n                                        function (item) {\r\n                                            return item.status != 'Duplicate'\r\n                                        }\r\n                                    ).length\r\n                                }\r\n                                /{employeeData[0]?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                {/* <TableCell>Bag Id</TableCell> */}\r\n                                {/* <TableCell>AWBN Number</TableCell> */}\r\n                                <TableCell>Order ID</TableCell>\r\n                                <TableCell>Order Date</TableCell>\r\n                                <TableCell>Status</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {employeeData[0]?.actual_items?.map(\r\n                                (data, index) => (\r\n                                    <TableRow\r\n                                        hover\r\n                                        role=\"checkbox\"\r\n                                        tabIndex={-1}\r\n                                    >\r\n                                        <TableCell>{index + 1}</TableCell>\r\n                                        <TableCell>{data?.uic}</TableCell>\r\n                                        <TableCell>{data?.order_id}</TableCell>\r\n                                        <TableCell>\r\n                                            {new Date(\r\n                                                data?.order_date\r\n                                            ).toLocaleString('en-GB', {\r\n                                                year: 'numeric',\r\n                                                month: '2-digit',\r\n                                                day: '2-digit',\r\n                                            })}\r\n                                        </TableCell>\r\n                                        <TableCell\r\n                                            style={\r\n                                                data.status == 'Valid'\r\n                                                    ? { color: 'green' }\r\n                                                    : { color: 'red' }\r\n                                            }\r\n                                        >\r\n                                            {data.status}\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                )\r\n                            )}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [employeeData[0]?.actual_items, textDisable, awbn])\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>Tray ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {employeeData[0]?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Closed On --{' '}\r\n                        {new Date(\r\n                            employeeData[0]?.closed_time_sorting_agent\r\n                        ).toLocaleString('en-GB', { hour12: true })}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <>\r\n                        <Checkbox\r\n                            checked={bagReuse}\r\n                            onClick={(e) => {\r\n                                if (\r\n                                    window.confirm(\r\n                                        bagReuse\r\n                                            ? 'Already Added'\r\n                                            : 'You Want to Release Tray ?'\r\n                                    )\r\n                                ) {\r\n                                    setBagReuse(true)\r\n                                }\r\n                            }}\r\n                            {...label}\r\n                        />\r\n                        <label>{employeeData[0]?.from_merge} - Release</label>\r\n                    </>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'green' }}\r\n                        disabled={\r\n                            loading == true ||\r\n                            description == '' ||\r\n                            bagReuse == false ||\r\n                            employeeData[0]?.actual_items?.length !==\r\n                                employeeData[0]?.items?.length\r\n                                ? true\r\n                                : false\r\n                        }\r\n                        onClick={(e) => {\r\n                            handelIssue(\r\n                                e,\r\n                                employeeData[0]?.code,\r\n                                employeeData[0]?.type_taxanomy,\r\n                                employeeData[0]?.items.length,\r\n                                employeeData[0]?.limit,\r\n                                employeeData[0]?.sort_id\r\n                            )\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Sorting\\Return-from-sorting\\close.jsx",["4849","4850","4851","4852","4853","4854","4855","4856","4857"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n    Container,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    /************************************************************/\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/charging-done-recieved/' +\r\n                        trayId +\r\n                        '/' +\r\n                        'Received From Sorting'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData?.items.length < trayData?.actual_items?.length) {\r\n            alert('All Items are Verified')\r\n        } else {\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/sorting-done-put-item',\r\n                    objData\r\n                )\r\n                if (res?.status == 200) {\r\n                    setRefresh((refresh) => !refresh)\r\n                    setTextDisable(false)\r\n                    setUic('')\r\n                } else {\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            setLoading(true)\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n                setLoading(false)\r\n            } else {\r\n                trayData.description = description\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/wht-tray-close-from-sorting',\r\n                    trayData\r\n                )\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/wareshouse/sorting/return-from-sorting')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/check-uic-sorting-done',\r\n                    obj\r\n                )\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setUic('')\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /***************************************************************************************** */\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>Expected</h5>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {trayData?.items?.length}/{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '14px', fontSize: '24px' }}>\r\n                                {trayData?.items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>ACTUAL</h5>\r\n                <TextField\r\n                    sx={{ mt: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    inputRef={(input) => input && input.focus()}\r\n                    disabled={textDisable}\r\n                    name=\"doorsteps_diagnostics\"\r\n                    label=\"Please Enter UIC\"\r\n                    value={uic}\r\n                    // onChange={(e) => setAwbn(e.target.value)}\r\n                    onChange={(e) => {\r\n                        setUic(e.target.value)\r\n                        handelUic(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {trayData?.actual_items?.length}/\r\n                                {trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '19px', fontSize: '24px' }}>\r\n                                {trayData?.actual_items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textDisable, uic])\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>Tray ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Closed On --{' '}\r\n                        {new Date(\r\n                            trayData?.closed_time_sorting_agent\r\n                        ).toLocaleString('en-GB', {\r\n                            hour12: true,\r\n                        })}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            trayData?.items?.length !==\r\n                                trayData?.actual_items?.length ||\r\n                            loading == false\r\n                                ? false\r\n                                : true\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Close?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Charging-request\\approve.jsx",["4858","4859","4860","4861","4862","4863","4864","4865","4866","4867","4868","4869","4870"],"import React, { useEffect, useState, useMemo } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  TextField,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Grid,\r\n} from \"@mui/material\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// import jwt from \"jsonwebtoken\"\r\nimport { axiosWarehouseIn } from \"../../../../../axios\";\r\nexport default function DialogBox() {\r\n  const navigate = useNavigate();\r\n  const [trayData, setTrayData] = useState([]);\r\n  const { trayId } = useParams();\r\n  const [loading, setLoading] = useState(false);\r\n  const [textDisable, setTextDisable] = useState(false);\r\n  /**************************************************************************** */\r\n  const [uic, setUic] = useState(\"\");\r\n  const [description, setDescription] = useState([]);\r\n  const [refresh, setRefresh] = useState(false);\r\n  /*********************************************************** */\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        let response = await axiosWarehouseIn.post(\r\n          \"/getWhtTrayItem/\" + trayId + \"/\" + \"Send for charging\"\r\n        );\r\n        if (response.status === 200) {\r\n          setTrayData(response.data.data);\r\n        } else {\r\n          alert(response.data.message);\r\n          navigate(-1);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [refresh]);\r\n \r\n\r\n  const handelUic = async (e) => {\r\n    if (e.target.value.length === 11) {\r\n      try {\r\n        let obj = {\r\n          uic: e.target.value,\r\n          trayId: trayId,\r\n        };\r\n        setTextDisable(true);\r\n\r\n        let res = await axiosWarehouseIn.post(\"/check-uic\", obj);\r\n        if (res?.status == 200) {\r\n          addActualitem(res.data.data);\r\n        } else {\r\n          setTextDisable(false);\r\n          setUic(\"\");\r\n          alert(res.data.message);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    }\r\n  };\r\n  /************************************************************************** */\r\n  const addActualitem = async (obj) => {\r\n    if (trayData.items.length < trayData?.actual_items?.length) {\r\n      alert(\"All Items Scanned\");\r\n    } else {\r\n      try {\r\n        let objData = {\r\n          trayId: trayId,\r\n          item: obj,\r\n        };\r\n        setTextDisable(true);\r\n        let res = await axiosWarehouseIn.post(\"/wht-add-actual-item\", objData);\r\n        if (res.status == 200) {\r\n          setUic(\"\");\r\n          setTextDisable(false);\r\n          setRefresh((refresh) => !refresh);\r\n        }\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    }\r\n  };\r\n  /************************************************************************** */\r\n  const handelIssue = async (e, sortId) => {\r\n    try {\r\n     if (trayData?.actual_items?.length == trayData?.items?.length) {\r\n        setLoading(true);\r\n        let obj = {\r\n          trayId: trayId,\r\n          description: description,\r\n          sortId: trayData?.sort_id,\r\n        };\r\n        let res = await axiosWarehouseIn.post(\"/issue-to-agent-wht\", obj);\r\n        if (res.status == 200) {\r\n          alert(res.data.message);\r\n          if (trayData?.sort_id == \"Send for BQC\") {\r\n            setLoading(false);\r\n            navigate(\"/bqc-request\");\r\n          } else {\r\n            setLoading(false);\r\n            navigate(\"/wareshouse/wht/charging-request\");\r\n          }\r\n        } else {\r\n          alert(res.data.message);\r\n        }\r\n      } else {\r\n        setLoading(false);\r\n        alert(\"Please Verify Actual Data\");\r\n      }\r\n    } catch (error) {\r\n      alert(error);\r\n    }\r\n  };\r\n\r\n  const tableExpected = useMemo(() => {\r\n    return (\r\n      <Paper sx={{ width: \"95%\", overflow: \"hidden\", m: 1 }}>\r\n        <Box sx={{}}>\r\n          <Box\r\n            sx={{\r\n              float: \"left\",\r\n              ml: 2,\r\n            }}\r\n          >\r\n            <h5>Expected</h5>\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              float: \"right\",\r\n              mr: 2,\r\n            }}\r\n          >\r\n            <Box sx={{}}>\r\n              <h5>Total</h5>\r\n              <p style={{ paddingLeft: \"5px\", fontSize: \"22px\" }}>\r\n                {\r\n                  trayData?.items?.filter(function (item) {\r\n                    return item.status != \"Duplicate\";\r\n                  }).length\r\n                }\r\n                /{trayData?.limit}\r\n              </p>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <TableContainer>\r\n          <Table\r\n            style={{ width: \"100%\" }}\r\n            id=\"example\"\r\n            stickyHeader\r\n            aria-label=\"sticky table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>S.NO</TableCell>\r\n                <TableCell>UIC</TableCell>\r\n                <TableCell>MUIC</TableCell>\r\n                <TableCell>BOT Tray</TableCell>\r\n                <TableCell>BOT Agent</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {trayData?.items?.map((data, index) => (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                  <TableCell>{index + 1}</TableCell>\r\n                  <TableCell>{data?.uic}</TableCell>\r\n                  <TableCell>{data?.muic}</TableCell>\r\n                  <TableCell>{data?.tray_id}</TableCell>\r\n                  <TableCell>{data?.bot_agent}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    );\r\n  }, [trayData?.items]);\r\n  const tableActual = useMemo(() => {\r\n    return (\r\n      <Paper sx={{ width: \"98%\", overflow: \"hidden\", m: 1 }}>\r\n        <Box sx={{}}>\r\n          <Box\r\n            sx={{\r\n              float: \"left\",\r\n              ml: 2,\r\n            }}\r\n          >\r\n            <h5>ACTUAL</h5>\r\n            <TextField\r\n              sx={{ mt: 1 }}\r\n              id=\"outlined-password-input\"\r\n              type=\"text\"\r\n              disabled={textDisable}\r\n              name=\"doorsteps_diagnostics\"\r\n              inputRef={(input) => input && input.focus()}\r\n              label=\"SCAN UIC\"\r\n              value={uic}\r\n              onChange={(e) => {\r\n                setUic(e.target.value);\r\n                handelUic(e);\r\n              }}\r\n              inputProps={{\r\n                style: {\r\n                  width: \"auto\",\r\n                },\r\n              }}\r\n            />\r\n          </Box>\r\n          <Box\r\n            sx={{\r\n              float: \"right\",\r\n              mr: 2,\r\n            }}\r\n          >\r\n            <Box sx={{}}>\r\n              <h5>Total</h5>\r\n              <p style={{ marginLeft: \"5px\", fontSize: \"24px\" }}>\r\n                {\r\n                  trayData.actual_items?.filter(function (item) {\r\n                    return item.status != \"Duplicate\";\r\n                  }).length\r\n                }\r\n                /{trayData?.limit}\r\n              </p>\r\n            </Box>\r\n          </Box>\r\n        </Box>\r\n        <TableContainer>\r\n          <Table\r\n            style={{ width: \"100%\" }}\r\n            id=\"example\"\r\n            stickyHeader\r\n            aria-label=\"sticky table\"\r\n          >\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>S.NO</TableCell>\r\n                <TableCell>UIC</TableCell>\r\n                <TableCell>MUIC</TableCell>\r\n                <TableCell>BOT Tray</TableCell>\r\n                <TableCell>BOT Agent</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n\r\n            <TableBody>\r\n              {trayData?.actual_items?.map((data, index) => (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                  <TableCell>{index + 1}</TableCell>\r\n                  <TableCell>{data?.uic}</TableCell>\r\n                  <TableCell>{data?.muic}</TableCell>\r\n                  <TableCell>{data?.tray_id}</TableCell>\r\n                  <TableCell>{data?.bot_agent}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Paper>\r\n    );\r\n  }, [trayData?.actual_items, textDisable,uic]);\r\n  return (\r\n    <>\r\n      <Box\r\n        sx={{\r\n          mt: 1,\r\n          height: 70,\r\n          borderRadius: 1,\r\n        }}\r\n      >\r\n        <Box\r\n          sx={{\r\n            float: \"left\",\r\n          }}\r\n        >\r\n          <h4 style={{ marginLeft: \"13px\" }}>TRAY ID - {trayId}</h4>\r\n          <h4 style={{ marginLeft: \"13px\" }}>\r\n            AGENT NAME - {trayData?.issued_user_name}\r\n          </h4>\r\n        </Box>\r\n        <Box\r\n          sx={{\r\n            float: \"right\",\r\n          }}\r\n        >\r\n          <h4 style={{ marginRight: \"13px\" }}>Brand -- {trayData?.brand}</h4>\r\n          <h4 style={{ marginRight: \"13px\" }}>Model -- {trayData?.model}</h4>\r\n        </Box>\r\n      </Box>\r\n      <Grid container spacing={1}>\r\n        <Grid item xs={6}>\r\n          {tableExpected}\r\n        </Grid>\r\n        <Grid item xs={6}>\r\n          {tableActual}\r\n        </Grid>\r\n      </Grid>\r\n      <div style={{ float: \"right\" }}>\r\n        <Box sx={{ float: \"right\" }}>\r\n          <textarea\r\n            onChange={(e) => {\r\n              setDescription(e.target.value);\r\n            }}\r\n            style={{ width: '300px', height: '60px' }}\r\n            placeholder=\"Description\"\r\n          ></textarea>\r\n          <Button\r\n            sx={{ m: 3, mb: 9 }}\r\n            variant=\"contained\"\r\n            disabled={loading == true  || description == \"\" ? true : false}\r\n            style={{ backgroundColor: \"green\" }}\r\n            onClick={(e) => {\r\n              if (window.confirm(\"You Want to Issue?\")) {\r\n                handelIssue(e);\r\n              }\r\n            }}\r\n          >\r\n            Issue To Agent\r\n          </Button>\r\n        </Box>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Bqc-request\\approve.jsx",["4871","4872","4873","4874","4875","4876","4877","4878","4879","4880","4881","4882","4883"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\n\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getWhtTrayItem/' + trayId + '/' + 'Send for charging'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n\r\n                let res = await axiosWarehouseIn.post('/check-uic', obj)\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setTextDisable(false)\r\n                    setUic('')\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData.items.length < trayData?.actual_items?.length) {\r\n            alert('All Items Scanned')\r\n        } else {\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/wht-add-actual-item',\r\n                    objData\r\n                )\r\n                if (res.status == 200) {\r\n                    setUic('')\r\n                    setTextDisable(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, sortId) => {\r\n        try {\r\n            if (trayData?.actual_items?.length == trayData?.items?.length) {\r\n                setLoading(true)\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                    sortId: trayData?.sort_id,\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/issue-to-agent-wht',\r\n                    obj\r\n                )\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    if (trayData?.sort_id == 'Send for BQC') {\r\n                        setLoading(false)\r\n                        navigate('/wareshouse/wht/bqc-request')\r\n                    } else {\r\n                        setLoading(false)\r\n                        navigate('/wareshouse/wht/charging-request')\r\n                    }\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } else {\r\n                setLoading(false)\r\n                alert('Please Verify Actual Data')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n \r\n\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>Expected</h5>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {\r\n                                    trayData?.items?.filter(function (item) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>ACTUAL</h5>\r\n                        <TextField\r\n                            sx={{ mt: 1 }}\r\n                            id=\"outlined-password-input\"\r\n                            type=\"text\"\r\n                            disabled={textDisable}\r\n                            name=\"doorsteps_diagnostics\"\r\n                            inputRef={(input) => input && input.focus()}\r\n                            label=\"SCAN UIC\"\r\n                            value={uic}\r\n                            onChange={(e) => {\r\n                                setUic(e.target.value)\r\n                                handelUic(e)\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    width: 'auto',\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {\r\n                                    trayData.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textDisable, uic])\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>TRAY ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                  \r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n               \r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            loading == true || description == '' ? true : false\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Issue?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Issue To Agent\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Charging-components\\Tray\\charging-in.jsx",["4884","4885","4886","4887","4888","4889","4890","4891","4892","4893","4894","4895","4896"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\n// import jwt from \"jsonwebtoken\"\r\n\r\nimport { axiosCharging, axiosWarehouseIn } from '../../../../axios'\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    /**************************************************************************** */\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [resDataUic, setResDataUic] = useState({})\r\n    const [loading, setLoading] = useState(false)\r\n    const [textBoxDis, setTextBoxDis] = useState(false)\r\n\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getWhtTrayItem/' + trayId + '/' + 'Issued to Charging'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else if (response.status === 202) {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                } else {\r\n                    navigate('/bag-issue-request')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextBoxDis(true)\r\n                let res = await axiosWarehouseIn.post('/check-uic', obj)\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else if (res.status == 202) {\r\n                    setTextBoxDis(false)\r\n                    setUic('')\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData.limit <= trayData?.actual_items?.length) {\r\n            alert('All Items Scanned')\r\n        } else {\r\n            resDataUic.remark = description\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                setTextBoxDis(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/wht-add-actual-item',\r\n                    objData\r\n                )\r\n                if (res.status == 200) {\r\n                    setUic('')\r\n                    setTextBoxDis(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        try {\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n            } else if (\r\n                trayData?.actual_items?.length == trayData?.items?.length\r\n            ) {\r\n                setLoading(true)\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                }\r\n                let res = await axiosCharging.post('/charge-in', obj)\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/charging/tray')\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } else {\r\n                alert('Please Verify Actual Data')\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            alert(error)\r\n        }\r\n    }\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>Expected</h5>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {\r\n                                    trayData?.items?.filter(function (item) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                                {/* <TableCell>Tracking Number</TableCell> */}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items])\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>ACTUAL</h5>\r\n                        <TextField\r\n                            sx={{ mt: 1 }}\r\n                            id=\"outlined-password-input\"\r\n                            type=\"text\"\r\n                            disabled={textBoxDis}\r\n                            name=\"doorsteps_diagnostics\"\r\n                            label=\"SCAN UIC\"\r\n                            inputRef={(input) => input && input.focus()}\r\n                            value={uic}\r\n                            // onChange={(e) => setAwbn(e.target.value)}\r\n                            onChange={(e) => {\r\n                                setUic(e.target.value)\r\n                                handelUic(e)\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    width: 'auto',\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {\r\n                                    trayData.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textBoxDis, uic])\r\n\r\n    /***************************************************************************************** */\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>TRAY ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={loading}\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={() => {\r\n                            if (window.confirm('Are you want to charge IN?')) {\r\n                                handelIssue()\r\n                            }\r\n                        }}\r\n                    >\r\n                        Charging IN\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Charging-components\\Tray\\charging-out.jsx",["4897","4898","4899","4900","4901","4902","4903","4904","4905","4906","4907","4908","4909","4910","4911","4912","4913","4914","4915","4916","4917","4918","4919","4920","4921","4922","4923","4924","4925","4926","4927","4928","4929","4930","4931"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport { styled, alpha } from '@mui/material/styles'\r\nimport {\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    DialogTitle,\r\n    IconButton,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n    MenuItem,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    FormLabel,\r\n    FormControlLabel,\r\n    RadioGroup,\r\n    Radio,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport * as Yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport { axiosCharging, axiosWarehouseIn } from '../../../../axios'\r\n\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    /**************************************************************************** */\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [open, setOpen] = useState(false)\r\n    const [resDataUic, setResDataUic] = useState({})\r\n    const [bodyDamage, setBodyDamage] = useState(false)\r\n    const [loading, setlLoading] = useState(false)\r\n    const [textBoxDis, setTextBoxDis] = useState(false)\r\n    const [charge, setCharge] = useState('')\r\n    const handleClose = () => {\r\n        reset({})\r\n        setOpen(false)\r\n    }\r\n    /************************************************************************** */\r\n    const schema = Yup.object().shape({\r\n        battery_status: Yup.string().required('Required*').nullable(),\r\n        charge_percentage: Yup.string()\r\n            .when('battery_status', (battery_status, schema) => {\r\n                if (\r\n                    battery_status == 'Charge' ||\r\n                    battery_status == 'Heat Problem'\r\n                ) {\r\n                    return schema.required('Required')\r\n                }\r\n            })\r\n            .nullable(),\r\n        body_condition: Yup.string().required('Required*').nullable(),\r\n        display_condition: Yup.string().required('Required*').nullable(),\r\n        lock_status: Yup.string()\r\n            .when('battery_status', (battery_status, schema) => {\r\n                if (\r\n                    battery_status == 'Charge' ||\r\n                    battery_status == 'Heat Problem'\r\n                ) {\r\n                    return schema.required('Required')\r\n                }\r\n            })\r\n            .nullable(),\r\n        charging_jack_type: Yup.string().required('Required*').nullable(),\r\n        cimei_1: Yup.string()\r\n            .when(\r\n                ['battery_status', 'lock_status'],\r\n                (battery_status, lock_status, schema) => {\r\n                    if (\r\n                        battery_status !== 'Charge failed' &&\r\n                        battery_status !== 'Battery Bulging' &&\r\n                        battery_status !== 'No-battery' &&\r\n                        lock_status !== 'Pin/Pattern Lock' &&\r\n                        lock_status !== 'Google Locked' &&\r\n                        lock_status !== 'iCloud Locked'\r\n                    ) {\r\n                        return schema.required('Required').min(15)\r\n                    }\r\n                }\r\n            )\r\n            .nullable(),\r\n        cimei_2: Yup.string()\r\n            .when(\r\n                ['battery_status', 'lock_status'],\r\n                (battery_status, lock_status, schema) => {\r\n                    if (\r\n                        battery_status !== 'Charge failed' &&\r\n                        battery_status !== 'Battery Bulging' &&\r\n                        battery_status !== 'No-battery' &&\r\n                        lock_status !== 'Pin/Pattern Lock' &&\r\n                        lock_status !== 'Google Locked' &&\r\n                        lock_status !== 'iCloud Locked'\r\n                    ) {\r\n                        return schema.required('Required').min(15)\r\n                    }\r\n                }\r\n            )\r\n            .nullable(),\r\n        part_name: Yup.string()\r\n            .when('boady_part_missing', (boady_part_missing, schema) => {\r\n                if (boady_part_missing == 'YES') {\r\n                    return schema.required('Required')\r\n                }\r\n            })\r\n            .nullable(),\r\n    })\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n    /*********************************************************** */\r\n    let admin = localStorage.getItem('prexo-authentication')\r\n    let user_name1\r\n    if (admin) {\r\n        let { user_name } = jwt_decode(admin)\r\n        user_name1 = user_name\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getWhtTrayItem/' + trayId + '/' + 'Charging Station IN'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                    //   dataTableFun()\r\n                } else if (response.status === 202) {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                } else {\r\n                    navigate('/bag-issue-request')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextBoxDis(true)\r\n                let res = await axiosWarehouseIn.post('/check-uic', obj)\r\n                if (res?.status == 200) {\r\n                    reset({\r\n                        ...res.data.data?.charging,\r\n                    })\r\n                    setCharge(res.data.data?.charging?.battery_status)\r\n                    if (res.data.data?.charging?.boady_part_missing == 'YES') {\r\n                        setBodyDamage(true)\r\n                    }\r\n                    console.log(res.data.data?.charging?.boady_part_missing)\r\n                    setResDataUic(res.data.data)\r\n                    handleClickOpen()\r\n                } else {\r\n                    setTextBoxDis(false)\r\n                    setUic('')\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    const onSubmit = async (values) => {\r\n        values.charging_person = user_name1\r\n\r\n        if (trayData.limit <= trayData?.actual_items?.length) {\r\n            alert('All Items Scanned')\r\n        } else {\r\n            setlLoading(true)\r\n            if (\r\n                values.battery_status !== 'Charge' &&\r\n                values.battery_status !== 'Heat Problem'\r\n            ) {\r\n                values.charge_percentage = ''\r\n                values.lock_status = ''\r\n            }\r\n\r\n            if (\r\n                values.battery_status !== 'Charge' &&\r\n                values.battery_status !== 'Heat Problem' &&\r\n                values.lock_status == 'Unlocked' &&\r\n                values.lock_status == 'Software Issue'\r\n            ) {\r\n                values.cimei_1 = ''\r\n                values.cimei_2 = ''\r\n            }\r\n\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: resDataUic,\r\n                }\r\n                objData.item.charging = values\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/wht-add-actual-item',\r\n                    objData\r\n                )\r\n                if (res.status == 200) {\r\n                    setUic('')\r\n                    setlLoading(false)\r\n                    setTextBoxDis(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                    handleClose()\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        try {\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n            } else if (\r\n                trayData?.actual_items?.length == trayData?.items?.length\r\n            ) {\r\n                setlLoading(true)\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                }\r\n\r\n                let res = await axiosCharging.post('/charging-done', obj)\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setlLoading(false)\r\n                    navigate('/charging/tray')\r\n                }\r\n            } else {\r\n                alert('Please Verify Actual Data')\r\n            }\r\n        } catch (error) {\r\n            setlLoading(false)\r\n            alert(error)\r\n        }\r\n    }\r\n    const handleClickOpen = () => {\r\n        if (trayData.sort_id !== 'Recharging Station IN') {\r\n            setBodyDamage(false)\r\n        }\r\n        setOpen(true)\r\n    }\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>Expected</h5>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {\r\n                                    trayData?.items?.filter(function (item) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                                {/* <TableCell>Tracking Number</TableCell> */}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>ACTUAL</h5>\r\n                        <TextField\r\n                            sx={{ mt: 1 }}\r\n                            id=\"outlined-password-input\"\r\n                            type=\"text\"\r\n                            name=\"doorsteps_diagnostics\"\r\n                            label=\"SCAN UIC\"\r\n                            disabled={textBoxDis}\r\n                            inputRef={(input) => input && input.focus()}\r\n                            value={uic}\r\n                            // onChange={(e) => setAwbn(e.target.value)}\r\n                            onChange={(e) => {\r\n                                setUic(e.target.value)\r\n                                handelUic(e)\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    width: 'auto',\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {\r\n                                    trayData.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textBoxDis, uic])\r\n    /***************************************************************************************** */\r\n    console.log()\r\n    return (\r\n        <>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    ADD\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            alignItems: 'flex-start',\r\n                            flexDirection: 'column',\r\n                            p: 1,\r\n                            m: 1,\r\n                            bgcolor: 'background.paper',\r\n                            borderRadius: 1,\r\n                        }}\r\n                    >\r\n                        <FormControl fullWidth>\r\n                            <InputLabel\r\n                                sx={{ pt: 2 }}\r\n                                id=\"demo-simple-select-label\"\r\n                            >\r\n                                Battery Status\r\n                            </InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                fullWidth\r\n                                label=\"Battery Status\"\r\n                                defaultValue={getValues('battery_status')}\r\n                                {...register('battery_status')}\r\n                                error={errors.battery_status ? true : false}\r\n                                helperText={errors.battery_status?.message}\r\n                                sx={{ mt: 2 }}\r\n                            >\r\n                                <MenuItem\r\n                                    value=\"Charge failed\"\r\n                                    onClick={(e) => setCharge('Charge failed')}\r\n                                >\r\n                                    Charge failed\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                    value=\"Charge\"\r\n                                    onClick={(e) => setCharge('Charge')}\r\n                                >\r\n                                    Charge\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                    value=\"Heat Problem\"\r\n                                    onClick={(e) => setCharge('Heat Problem')}\r\n                                >\r\n                                    Heat Problem\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                    value=\"Battery Bulging\"\r\n                                    onClick={(e) =>\r\n                                        setCharge('Battery Bulging')\r\n                                    }\r\n                                >\r\n                                    Battery Bulging\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                    value=\"No-battery\"\r\n                                    onClick={(e) => setCharge('No-battery')}\r\n                                >\r\n                                    No-battery\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        {charge == 'Charge' || charge == 'Heat Problem' ? (\r\n                            <FormControl fullWidth>\r\n                                <InputLabel\r\n                                    sx={{ pt: 2 }}\r\n                                    id=\"demo-simple-select-label\"\r\n                                >\r\n                                    Charge Percentage\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-label\"\r\n                                    fullWidth\r\n                                    defaultValue={getValues(\r\n                                        'charge_percentage'\r\n                                    )}\r\n                                    label=\"Charge Percentage\"\r\n                                    {...register('charge_percentage')}\r\n                                    error={\r\n                                        errors.charge_percentage ? true : false\r\n                                    }\r\n                                    helperText={\r\n                                        errors.charge_percentage?.message\r\n                                    }\r\n                                    sx={{ mt: 2 }}\r\n                                >\r\n                                    <MenuItem value=\"1-10% Charged\">\r\n                                        1-10% Charged\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"10-50% Charged\">\r\n                                        10-50% Charged\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"50-80% Charged\">\r\n                                        50-80% Charged\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"80%+ Charged\">\r\n                                        80%+ Charged\r\n                                    </MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        ) : null}\r\n\r\n                        <FormControl fullWidth>\r\n                            <InputLabel\r\n                                sx={{ pt: 2 }}\r\n                                id=\"demo-simple-select-label\"\r\n                            >\r\n                                Body Condition\r\n                            </InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                fullWidth\r\n                                disabled={\r\n                                    trayData.sort_id == 'Recharging Station IN'\r\n                                }\r\n                                label=\"Body Condition\"\r\n                                defaultValue={getValues('body_condition')}\r\n                                {...register('body_condition')}\r\n                                error={errors.body_condition ? true : false}\r\n                                helperText={errors.body_condition?.message}\r\n                                sx={{ mt: 2 }}\r\n                            >\r\n                                <MenuItem value=\"Body Condition Ok\">\r\n                                    Body Condition Ok\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Body Broken\">\r\n                                    Body Broken\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Body with minor scratches\">\r\n                                    Body with minor scratches\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Body with major scratches\">\r\n                                    Body with major scratches\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel\r\n                                sx={{ pt: 2 }}\r\n                                id=\"demo-simple-select-label\"\r\n                            >\r\n                                Display Condition\r\n                            </InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                fullWidth\r\n                                defaultValue={getValues('display_condition')}\r\n                                disabled={\r\n                                    trayData.sort_id == 'Recharging Station IN'\r\n                                }\r\n                                label=\"Display Condition\"\r\n                                {...register('display_condition')}\r\n                                error={errors.display_condition ? true : false}\r\n                                helperText={errors.display_condition?.message}\r\n                                sx={{ mt: 2 }}\r\n                            >\r\n                                <MenuItem value=\"Display Condition Ok\">\r\n                                    Display Condition Ok\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Display Broken\">\r\n                                    Display Broken\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Display With Minor Scratches\">\r\n                                    Display With Minor Scratches\r\n                                </MenuItem>\r\n                                <MenuItem value=\"Display With Major Scratches\">\r\n                                    Display With Major scratches\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        {charge === 'Heat Problem' || charge === 'Charge' ? (\r\n                            <FormControl fullWidth>\r\n                                <InputLabel\r\n                                    sx={{ pt: 2 }}\r\n                                    id=\"demo-simple-select-label\"\r\n                                >\r\n                                    Lock Status\r\n                                </InputLabel>\r\n                                <Select\r\n                                    disabled={\r\n                                        trayData.sort_id ==\r\n                                        'Recharging Station IN'\r\n                                    }\r\n                                    labelId=\"demo-simple-select-label\"\r\n                                    fullWidth\r\n                                    label=\"Lock Status\"\r\n                                    defaultValue={getValues('lock_status')}\r\n                                    {...register('lock_status')}\r\n                                    error={errors.lock_status ? true : false}\r\n                                    helperText={errors.lock_status?.message}\r\n                                    sx={{ mt: 2 }}\r\n                                >\r\n                                    <MenuItem value=\"Unlocked\">\r\n                                        Unlocked\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"Pin/Pattern Lock\">\r\n                                        Pin/Pattern Lock\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"Google Locked\">\r\n                                        Google Locked\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"iCloud Locked\">\r\n                                        iCloud Locked\r\n                                    </MenuItem>\r\n                                    <MenuItem value=\"Software Issue\">\r\n                                        Software Issue\r\n                                    </MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        ) : null}\r\n\r\n                        <FormControl fullWidth>\r\n                            <InputLabel\r\n                                sx={{ pt: 2 }}\r\n                                id=\"demo-simple-select-label\"\r\n                            >\r\n                                Charging Jack type\r\n                            </InputLabel>\r\n                            <Select\r\n                                disabled={\r\n                                    trayData.sort_id == 'Recharging Station IN'\r\n                                }\r\n                                labelId=\"demo-simple-select-label\"\r\n                                fullWidth\r\n                                defaultValue={getValues('charging_jack_type')}\r\n                                label=\"Charging Jack type\"\r\n                                {...register('charging_jack_type')}\r\n                                error={errors.charging_jack_type ? true : false}\r\n                                helperText={errors.charging_jack_type?.message}\r\n                                sx={{ mt: 2 }}\r\n                            >\r\n                                <MenuItem value=\"Micro USB\">Micro USB</MenuItem>\r\n                                <MenuItem value=\"Type C\">Type C</MenuItem>\r\n                                <MenuItem value=\"lightning\">lightning</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl>\r\n                            <FormLabel\r\n                                id=\"demo-radio-buttons-group-label\"\r\n                                sx={{ mt: 2 }}\r\n                            >\r\n                                Any Body Part missing\r\n                            </FormLabel>\r\n                            <RadioGroup\r\n                                aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                                defaultValue={\r\n                                    trayData?.sort_id == 'Recharging Station IN'\r\n                                        ? getValues('boady_part_missing')\r\n                                        : 'NO'\r\n                                }\r\n                                name=\"boady_part_missing\"\r\n                            >\r\n                                <Box>\r\n                                    <FormControlLabel\r\n                                        value=\"YES\"\r\n                                        disabled={\r\n                                            trayData.sort_id ==\r\n                                            'Recharging Station IN'\r\n                                        }\r\n                                        {...register('boady_part_missing')}\r\n\r\n                                        onClick={(e) => {\r\n                                            if (\r\n                                                trayData?.sort_id ==\r\n                                                'Recharging Station IN'\r\n                                            ) {\r\n                                                return false\r\n                                            } else {\r\n                                                setBodyDamage(true)\r\n                                            }\r\n                                        }}\r\n                                        control={<Radio />}\r\n                                        label=\"YES\"\r\n                                    />\r\n                                    <FormControlLabel\r\n                                    disabled={\r\n                                        trayData.sort_id ==\r\n                                        'Recharging Station IN'\r\n                                    }\r\n                                        {...register('boady_part_missing')}\r\n                                        value=\"NO\"\r\n                                        onClick={(e) => {\r\n                                            if (\r\n                                                trayData?.sort_id ==\r\n                                                'Recharging Station IN'\r\n                                            ) {\r\n                                                return false\r\n                                            } else {\r\n                                                setBodyDamage(false)\r\n                                            }\r\n                                        }}\r\n                                        control={<Radio />}\r\n                                        label=\"NO\"\r\n                                    />\r\n                                </Box>\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                        {bodyDamage == true ? (\r\n                            <TextField\r\n                                defaultValue={getValues('part_name')}\r\n                                label=\"Missing Part Name\"\r\n                                variant=\"outlined\"\r\n                                type=\"text\"\r\n                                disabled={\r\n                                    trayData.sort_id == 'Recharging Station IN'\r\n                                }\r\n                                {...register('part_name')}\r\n                                error={errors.part_name ? true : false}\r\n                                helperText={errors.part_name?.message}\r\n                                fullWidth\r\n                                sx={{ mt: 2 }}\r\n                            />\r\n                        ) : null}\r\n                        <TextField\r\n                            label=\"CIMEI-1\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            disabled={\r\n                                trayData.sort_id == 'Recharging Station IN'\r\n                            }\r\n                            defaultValue={getValues('cimei_1')}\r\n                            {...register('cimei_1')}\r\n                            inputProps={{ maxLength: 15 }}\r\n                            onKeyPress={(event) => {\r\n                                if (!/[0-9]/.test(event.key)) {\r\n                                    event.preventDefault()\r\n                                }\r\n                            }}\r\n                            error={errors.cimei_1 ? true : false}\r\n                            helperText={errors.cimei_1?.message}\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n                        <TextField\r\n                            label=\"CIMEI-2\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            disabled={\r\n                                trayData.sort_id == 'Recharging Station IN'\r\n                            }\r\n                            defaultValue={getValues('cimei_2')}\r\n                            {...register('cimei_2')}\r\n                            inputProps={{ maxLength: 15 }}\r\n                            onKeyPress={(event) => {\r\n                                if (!/[0-9]/.test(event.key)) {\r\n                                    event.preventDefault()\r\n                                }\r\n                            }}\r\n                            error={errors.cimei_2 ? true : false}\r\n                            helperText={errors.cimei_2?.message}\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n                        <TextField\r\n                            label=\"Supervisor name\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            value={user_name1}\r\n                            fullWidth\r\n                            sx={{ mt: 2 }}\r\n                        />\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            ml: 2,\r\n                        }}\r\n                        fullwidth\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'green' }}\r\n                        component=\"span\"\r\n                        disabled={loading}\r\n                        type=\"submit\"\r\n                        onClick={handleSubmit(onSubmit)}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>TRAY ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={loading}\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={() => {\r\n                            if (window.confirm('You Want send to warehouse?')) {\r\n                                handelIssue()\r\n                            }\r\n                        }}\r\n                    >\r\n                        Charging Done\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bqc-components\\Tray\\item-segrgation.jsx",["4932","4933","4934","4935","4936","4937","4938","4939","4940","4941","4942","4943","4944","4945","4946","4947","4948","4949","4950","4951","4952","4953","4954","4955","4956","4957","4958","4959","4960","4961","4962","4963"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Bqc-components\\Tray\\bqc-out.jsx",["4964","4965","4966","4967","4968","4969","4970","4971","4972","4973","4974","4975","4976","4977"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport { styled } from '@mui/material/styles'\r\n\r\nimport {\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogActions,\r\n    DialogTitle,\r\n    IconButton,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n    MenuItem,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Swal from 'sweetalert2'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport * as Yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useForm } from 'react-hook-form'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\n\r\nimport { axiosBqc, axiosWarehouseIn } from '../../../../axios'\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    /**************************************************************************** */\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [open, setOpen] = useState(false)\r\n    const [resDataUic, setResDataUic] = useState({})\r\n    const [bqcStatus, setBqcStatus] = useState('')\r\n    const [incompleteRes, setIncompleteRes] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [textBoxDis, setTextBoxDis] = useState(false)\r\n    const [addButDis, setAddButDis] = useState(false)\r\n    const [restFact, setResFact] = useState('')\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n    /************************************************************************** */\r\n    const schema = Yup.object().shape({\r\n        blancoo_qc_status: Yup.string().required('Required*').nullable(),\r\n        bqc_incomplete_reason: Yup.string()\r\n            .when('blancoo_qc_status', (blancoo_qc_status, schema) => {\r\n                if (blancoo_qc_status == 'BQC Incomplete') {\r\n                    return schema.required('Required')\r\n                }\r\n            })\r\n            .nullable(),\r\n        technical_issue: Yup.string()\r\n            .when('bqc_incomplete_reason', (bqc_incomplete_reason, schema) => {\r\n                if (bqc_incomplete_reason == 'Blancco Technical Issue') {\r\n                    return schema.required('Required')\r\n                }\r\n            })\r\n            .nullable(),\r\n        other: Yup.string()\r\n            .when('bqc_incomplete_reason', (bqc_incomplete_reason, schema) => {\r\n                if (bqc_incomplete_reason == 'Other') {\r\n                    return schema.required('Required')\r\n                }\r\n            })\r\n            .nullable(),\r\n        factory_reset_status: Yup.string()\r\n            .when('blancoo_qc_status', (blancoo_qc_status, schema) => {\r\n                if (blancoo_qc_status == 'BQC Finished') {\r\n                    return schema.required('Required')\r\n                }\r\n            })\r\n            .nullable(),\r\n    })\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        getValues,\r\n        formState: { errors },\r\n        reset,\r\n    } = useForm({\r\n        resolver: yupResolver(schema),\r\n    })\r\n    /*********************************************************** */\r\n    let admin = localStorage.getItem('prexo-authentication')\r\n    let user_name1\r\n    if (admin) {\r\n        let { user_name } = jwt_decode(admin)\r\n        user_name1 = user_name\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosBqc.post(\r\n                    '/assigned-wht-item/' +\r\n                        trayId +\r\n                        '/' +\r\n                        user_name1 +\r\n                        '/' +\r\n                        'Issued to BQC' +\r\n                        '/' +\r\n                        'Page-1'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                    //   dataTableFun()\r\n                } else if (response.status === 202) {\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: response.data.message,\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed) {\r\n                            navigate(-1)\r\n                        }\r\n                    })\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    confirmButtonText: 'Ok',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextBoxDis(true)\r\n                let res = await axiosBqc.post('/bqc-done-uic-check', obj)\r\n                if (res?.status == 200) {\r\n                    setResDataUic(res.data.data)\r\n                    handleClickOpen()\r\n                } else if (res.status === 202) {\r\n                    setUic('')\r\n                    setTextBoxDis(false)\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: res.data.message,\r\n                    })\r\n                }\r\n            } catch (error) {\r\n                setTextBoxDis(false)\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n    }\r\n    const onSubmit = async (value) => {\r\n        if (trayData.actual_items.length <= trayData?.items?.length) {\r\n            alert('All Items Scanned')\r\n        } else {\r\n            setAddButDis(true)\r\n            if (value.blancoo_qc_status == 'BQC Finished') {\r\n                value.bqc_incomplete_reason = ''\r\n                value.technical_issue = ''\r\n                value.other = ''\r\n            } else {\r\n                value.factory_reset_status = ''\r\n            }\r\n\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: resDataUic,\r\n                    page: 'bqc',\r\n                }\r\n                objData.item.bqc_report = value\r\n                setTextBoxDis(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/wht-add-actual-item',\r\n                    objData\r\n                )\r\n                if (res.status == 200) {\r\n                    setUic('')\r\n                    setTextBoxDis(false)\r\n                    setAddButDis(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                    handleClose()\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        try {\r\n            if (trayData?.actual_items?.length == trayData?.items?.length) {\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                }\r\n                setLoading(true)\r\n\r\n                let res = await axiosBqc.post('/bqc-done', obj)\r\n                if (res.status == 200) {\r\n                    // alert(res.data.message);\r\n                    setLoading(false)\r\n                    Swal.fire({\r\n                        icon: 'success',\r\n                        title: res.data.message,\r\n                        showConfirmButton: true,\r\n                    }).then((result) => {\r\n                        if (result.isConfirmed) {\r\n                            navigate('/bqc/tray')\r\n                        }\r\n                    })\r\n                    // navigate(\"/view-assigned-tray-bqc\");\r\n                }\r\n            } else {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: 'Please Verify Actual Data',\r\n                })\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n    const handleClickOpen = () => {\r\n        setBqcStatus('')\r\n        setIncompleteRes('')\r\n        setResFact('')\r\n        reset({})\r\n        setOpen(true)\r\n    }\r\n\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>Expected</h5>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {trayData?.actual_items?.length}/\r\n                                {trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                                {/* <TableCell>Tracking Number</TableCell> */}\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>ACTUAL</h5>\r\n                        <TextField\r\n                            sx={{ mt: 1 }}\r\n                            id=\"outlined-password-input\"\r\n                            type=\"text\"\r\n                            disabled={textBoxDis}\r\n                            inputRef={(input) => input && input.focus()}\r\n                            name=\"doorsteps_diagnostics\"\r\n                            label=\"Please Enter UIC\"\r\n                            value={uic}\r\n                            // onChange={(e) => setAwbn(e.target.value)}\r\n                            onChange={(e) => {\r\n                                setUic(e.target.value)\r\n                                handelUic(e)\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    width: 'auto',\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {trayData.items?.length}/{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items, textBoxDis, uic])\r\n    return (\r\n        <>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    ADD\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <Box\r\n                        sx={{\r\n                            display: 'flex',\r\n                            alignItems: 'flex-start',\r\n                            flexDirection: 'column',\r\n                            p: 1,\r\n                            m: 1,\r\n                            bgcolor: 'background.paper',\r\n                            borderRadius: 1,\r\n                        }}\r\n                    >\r\n                        <TextField\r\n                            label=\"UIC\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            value={resDataUic?.uic}\r\n                            sx={{ mt: 2 }}\r\n                            fullWidth\r\n                        />\r\n                        <TextField\r\n                            label=\"Model Name\"\r\n                            variant=\"outlined\"\r\n                            type=\"text\"\r\n                            value={resDataUic?.model_name}\r\n                            sx={{ mt: 2 }}\r\n                            fullWidth\r\n                        />\r\n                        <FormControl fullWidth>\r\n                            <InputLabel\r\n                                sx={{ pt: 2 }}\r\n                                id=\"demo-simple-select-label\"\r\n                            >\r\n                                Blancco QC Status\r\n                            </InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                fullWidth\r\n                                label=\"Battery Status\"\r\n                                value={getValues('blancoo_qc_status')}\r\n                                {...register('blancoo_qc_status')}\r\n                                error={errors.blancoo_qc_status ? true : false}\r\n                                helperText={errors.blancoo_qc_status?.message}\r\n                                sx={{ mt: 2 }}\r\n                            >\r\n                                <MenuItem\r\n                                    value=\"BQC Finished\"\r\n                                    onClick={(e) => {\r\n                                        setBqcStatus('BQC Finished')\r\n                                    }}\r\n                                >\r\n                                    BQC Finished\r\n                                </MenuItem>\r\n                                <MenuItem\r\n                                    value=\"BQC Incomplete\"\r\n                                    onClick={(e) => {\r\n                                        setBqcStatus('BQC Incomplete')\r\n                                        setResFact('NO')\r\n                                    }}\r\n                                >\r\n                                    BQC Incomplete\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        {bqcStatus === 'BQC Incomplete' ? (\r\n                            <FormControl fullWidth>\r\n                                <InputLabel\r\n                                    sx={{ pt: 2 }}\r\n                                    id=\"demo-simple-select-label\"\r\n                                >\r\n                                    BQC Incomplete Reason\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-label\"\r\n                                    fullWidth\r\n                                    label=\"BQC incomplete reason\"\r\n                                    value={getValues('bqc_incomplete_reason')}\r\n                                    {...register('bqc_incomplete_reason')}\r\n                                    error={\r\n                                        errors.bqc_incomplete_reason\r\n                                            ? true\r\n                                            : false\r\n                                    }\r\n                                    helperText={\r\n                                        errors.bqc_incomplete_reason?.message\r\n                                    }\r\n                                    sx={{ mt: 2 }}\r\n                                >\r\n                                    <MenuItem\r\n                                        value=\"Jack Issue\"\r\n                                        onClick={(e) => {\r\n                                            setIncompleteRes('Jack Issue')\r\n                                        }}\r\n                                    >\r\n                                        Jack Issue\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value=\"Blancco Technical Issue\"\r\n                                        onClick={(e) => {\r\n                                            setIncompleteRes(\r\n                                                'Blancco Technical Issue'\r\n                                            )\r\n                                        }}\r\n                                    >\r\n                                        Blancco Technical Issue\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value=\"Other\"\r\n                                        onClick={(e) => {\r\n                                            setIncompleteRes('Other')\r\n                                        }}\r\n                                    >\r\n                                        BQC Remark\r\n                                    </MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        ) : null}\r\n                        {incompleteRes === 'Blancco Technical Issue' &&\r\n                        bqcStatus === 'BQC Incomplete' ? (\r\n                            <>\r\n                                <FormControl fullWidth>\r\n                                    <InputLabel\r\n                                        sx={{ pt: 2 }}\r\n                                        id=\"demo-simple-select-label\"\r\n                                    >\r\n                                        Technical Issue\r\n                                    </InputLabel>\r\n                                    <Select\r\n                                        labelId=\"demo-simple-select-label\"\r\n                                        fullWidth\r\n                                        label=\"Body Condition\"\r\n                                        value={getValues('technical_issue')}\r\n                                        {...register('technical_issue')}\r\n                                        error={\r\n                                            errors.technical_issue\r\n                                                ? true\r\n                                                : false\r\n                                        }\r\n                                        helperText={\r\n                                            errors.technical_issue?.message\r\n                                        }\r\n                                        sx={{ mt: 2 }}\r\n                                    >\r\n                                        <MenuItem value=\"App installation issue\">\r\n                                            App installation issue\r\n                                        </MenuItem>\r\n                                        <MenuItem value=\"App hanging issue\">\r\n                                            App hanging issue\r\n                                        </MenuItem>\r\n                                        <MenuItem value=\"Test result not correct in blancco app\">\r\n                                            Test result not correct in blancco\r\n                                            app\r\n                                        </MenuItem>\r\n                                        <MenuItem value=\"Taking too much time in processing\">\r\n                                            Taking too much time in processing\r\n                                        </MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </>\r\n                        ) : null}\r\n                        {incompleteRes === 'Other' &&\r\n                        bqcStatus === 'BQC Incomplete' ? (\r\n                            <TextField\r\n                                label=\"BQC Remark\"\r\n                                variant=\"outlined\"\r\n                                type=\"text\"\r\n                                {...register('other')}\r\n                                error={errors.other ? true : false}\r\n                                helperText={errors.other?.message}\r\n                                sx={{ mt: 2 }}\r\n                                fullWidth\r\n                            />\r\n                        ) : null}\r\n                        {bqcStatus === 'BQC Finished' ? (\r\n                            <FormControl fullWidth>\r\n                                <InputLabel\r\n                                    sx={{ pt: 2 }}\r\n                                    id=\"demo-simple-select-label\"\r\n                                >\r\n                                    Factory reset status\r\n                                </InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-label\"\r\n                                    fullWidth\r\n                                    label=\"Factory reset status\"\r\n                                    value={getValues('factory_reset_status')}\r\n                                    {...register('factory_reset_status')}\r\n                                    error={\r\n                                        errors.factory_reset_status\r\n                                            ? true\r\n                                            : false\r\n                                    }\r\n                                    helperText={\r\n                                        errors.factory_reset_status?.message\r\n                                    }\r\n                                    sx={{ mt: 2 }}\r\n                                >\r\n                                    <MenuItem\r\n                                        value=\"Yes\"\r\n                                        onClick={(e) => {\r\n                                            setResFact('Yes')\r\n                                        }}\r\n                                    >\r\n                                        YES\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        value=\"NO\"\r\n                                        onClick={(e) => {\r\n                                            setResFact('NO')\r\n                                        }}\r\n                                    >\r\n                                        NO\r\n                                    </MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        ) : null}\r\n                    </Box>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            ml: 2,\r\n                        }}\r\n                        fullwidth\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            addButDis ||\r\n                            (bqcStatus === 'BQC Finished' && restFact == 'NO')\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        component=\"span\"\r\n                        type=\"submit\"\r\n                        onClick={handleSubmit(onSubmit)}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>TRAY ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            loading ||\r\n                            description == '' ||\r\n                            trayData?.items?.length !==\r\n                                trayData?.actual_items?.length\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={() => {\r\n                            handelIssue()\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-charging\\close.jsx",["4978","4979","4980","4981","4982","4983","4984"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [uic, setUic] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/charging-done-recieved/' +\r\n                        trayId +\r\n                        '/' +\r\n                        'Received From Charging'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData?.actual_items?.length < trayData?.items.length) {\r\n            alert('All Items are Verified')\r\n        } else {\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/charging-done-put-item',\r\n                    objData\r\n                )\r\n                if (res?.status == 200) {\r\n                    setRefresh((refresh) => !refresh)\r\n                    setTextDisable(false)\r\n                    setUic('')\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            setLoading(true)\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n                setLoading(false)\r\n            } else {\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                    type: 'Ready to bqc',\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/close-wht-tray-ready-to-next',\r\n                    obj\r\n                )\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/wareshouse/wht/return-from-charging')\r\n                } else {\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/check-uic-charging-done',\r\n                    obj\r\n                )\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setUic('')\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>Expected</h5>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {trayData?.actual_items?.length}/\r\n                                {trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '14px', fontSize: '24px' }}>\r\n                                {trayData?.actual_items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>ACTUAL</h5>\r\n                <TextField\r\n                    sx={{ mt: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    inputRef={(input) => input && input.focus()}\r\n                    disabled={textDisable}\r\n                    name=\"doorsteps_diagnostics\"\r\n                    label=\"SCAN UIC\"\r\n                    value={uic}\r\n                    // onChange={(e) => setAwbn(e.target.value)}\r\n                    onChange={(e) => {\r\n                        setUic(e.target.value)\r\n                        handelUic(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {trayData?.items?.length}/{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '19px', fontSize: '24px' }}>\r\n                                {trayData?.items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items, textDisable, uic])\r\n\r\n    /***************************************************************************************** */\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>Tray ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Closed On --{' '}\r\n                        {new Date(trayData?.closed_time_bot).toLocaleString(\r\n                            'en-GB',\r\n                            {\r\n                                hour12: true,\r\n                            }\r\n                        )}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            trayData?.items?.length !==\r\n                                trayData?.actual_items?.length || loading\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Close?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-bqc\\close.jsx",["4985","4986","4987","4988","4989","4990","4991"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/charging-done-recieved/' +\r\n                        trayId +\r\n                        '/' +\r\n                        'Received From BQC'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData?.actual_items?.length < trayData?.items.length) {\r\n            alert('All Items are Verified')\r\n        } else {\r\n            setTextDisable(true)\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/charging-done-put-item',\r\n                    objData\r\n                )\r\n                if (res?.status == 200) {\r\n                    setTextDisable(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                    setUic('')\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            setLoading(true)\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n                setLoading(false)\r\n            } else {\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                    type: 'Ready to audit',\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/close-wht-tray-ready-to-next',\r\n                    obj\r\n                )\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/wareshouse/wht/return-from-bqc')\r\n                } else {\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/check-uic-charging-done',\r\n                    obj\r\n                )\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setUic('')\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>Expected</h5>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {trayData?.actual_items?.length}/\r\n                                {trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '14px', fontSize: '24px' }}>\r\n                                {trayData?.actual_items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>ACTUAL</h5>\r\n                <TextField\r\n                    sx={{ mt: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    inputRef={(input) => input && input.focus()}\r\n                    name=\"doorsteps_diagnostics\"\r\n                    disabled={textDisable}\r\n                    label=\"SCAN UIC\"\r\n                    value={uic}\r\n                    onChange={(e) => {\r\n                        setUic(e.target.value)\r\n                        handelUic(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {trayData?.items?.length}/{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p style={{ marginLeft: '19px', fontSize: '24px' }}>\r\n                                {trayData?.items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items, textDisable, uic])\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>Tray ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Closed On --{' '}\r\n                        {new Date(trayData?.closed_time_bot).toLocaleString(\r\n                            'en-GB',\r\n                            {\r\n                                hour12: true,\r\n                            }\r\n                        )}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            trayData?.items?.length !==\r\n                                trayData?.actual_items?.length || loading\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Close?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Sorting\\Bot-to-wht\\view-clubed-item.jsx",["4992"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate, useLocation } from 'react-router-dom'\r\nimport { axiosMisUser } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [item, setItem] = useState({})\r\n    const navigate = useNavigate()\r\n    const { state } = useLocation()\r\n    const { isCheck, muic } = state\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const fetchData = async () => {\r\n                try {\r\n                    let obj = {\r\n                        tray: isCheck,\r\n                        muic: muic,\r\n                    }\r\n                    let res = await axiosMisUser.post(\r\n                        '/view-bot-clubed-data-model',\r\n                        obj\r\n                    )\r\n                    if (res.status === 200) {\r\n                        setItem(res.data.data)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'imei',\r\n            label: 'IMEI',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return item.muic\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return item.brand\r\n                },\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return item.model\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'bag_id',\r\n            label: 'Bag Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'user_name',\r\n            label: 'Bot Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_id',\r\n            label: 'Bot Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'added_time',\r\n            label: 'Added Time',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Sorting', path: '/' },\r\n                        { name: 'Bot-to-wht' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Wht Tray'}\r\n                data={item?.temp_array}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-charging\\view-item.jsx",["4993"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport { axiosBot } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    let res = await axiosBot.post('/trayItem/' + trayId)\r\n                    if (res.status === 200) {\r\n                        setTrayData(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'imei',\r\n            label: 'IMEI',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'Brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return trayData.brand\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return trayData.model\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Battery Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.battery_status\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Charge Percentage',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.charge_percentage\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Body Condiation',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.body_condition\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Display Condiation',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.display_condition\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Lock Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.lock_status\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Charging Jack Type',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.charging_jack_type\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'Body Part missing',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.part_name\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'CIMEI-1',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.cimei_1\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'charging',\r\n            label: 'CIMEI-2',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.cimei_2\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Return-from-charging' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData.actual_items}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-bqc\\view-item.jsx",["4994","4995"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\n\r\nimport { axiosBot } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let res = await axiosBot.post('/trayItem/' + trayId)\r\n                if (res.status === 200) {\r\n                    setTrayData(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'imei',\r\n            label: 'IMEI',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return trayData.brand\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return trayData.model\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'bqc_status',\r\n            label: 'BQC STAGE',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'bqc_report',\r\n            label: 'Blancco QC Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.blancoo_qc_status\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'bqc_report',\r\n            label: 'BQC Incomplete Reason',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.bqc_incomplete_reason\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'bqc_report',\r\n            label: 'Technical Issue',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.technical_issue\r\n                },\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'bqc_report',\r\n            label: 'BQC User Remark',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.other\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'bqc_report',\r\n            label: 'Factory reset status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return value?.factory_reset_status\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Return-from-BQC' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData.actual_items}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Report\\Bot-report\\sku-summery.jsx",["4996"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [botTray, setBotTray] = useState([])\r\n    const { trayId } = useParams()\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let obj = {\r\n                        location: location,\r\n                        botTray: trayId,\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/bot-tray-report',\r\n                        obj\r\n                    )\r\n                    if (res.status === 200) {\r\n                        console.log(res.data.data.temp_array)\r\n                        setBotTray(res.data.data.temp_array)\r\n                    }\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n\r\n    const handelViewTray = (e, muic) => {\r\n        e.preventDefault()\r\n        navigate(\r\n            '/wareshouse/report/bot/sku-summery/details/' + trayId + '/' + muic\r\n        )\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'item',\r\n            label: 'Units',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => value?.length,\r\n            },\r\n        },\r\n        {\r\n            name: 'wht_tray',\r\n            label: 'Open WHT',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => value?.join(', '),\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            style={{ backgroundColor: 'green' }}\r\n                            onClick={(e) => {\r\n                                handelViewTray(e, value)\r\n                            }}\r\n                        >\r\n                            Details\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Report', path: '/' },\r\n                        { name: 'Bot-Report' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Report'}\r\n                data={botTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Report\\Bot-report\\from-sku-summery-view-item.jsx",["4997","4998","4999"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate, useParams } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [botTray, setBotTray] = useState([])\r\n    const navigate = useNavigate()\r\n    const { trayId, muic } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let user = localStorage.getItem('prexo-authentication')\r\n                if (user) {\r\n                    let { location } = jwt_decode(user)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/bot-tray-report-item-details/' +\r\n                            location +\r\n                            '/' +\r\n                            trayId +\r\n                            '/' +\r\n                            muic\r\n                    )\r\n                    if (res.status === 200) {\r\n                        setBotTray(res.data.data.temp_array)\r\n                    } else {\r\n                        alert(res.data.message)\r\n                        navigate('/bot-tray-report')\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const handelViewTray = (e, muic) => {\r\n        e.preventDefault()\r\n        navigate('/bot-tray-report-details/' + trayId + '/' + muic)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: () => {\r\n                    return botTray[0]?.muic\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'Brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: () => {\r\n                    return botTray[0]?.brand\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'Model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: () => {\r\n                    return botTray[0]?.model\r\n                },\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'awbn_number',\r\n            label: 'Tracking Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'order_id',\r\n            label: 'Order Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'order_date',\r\n            label: 'Order Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'bag_id',\r\n            label: 'BOT ID',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Report', path: '/' },\r\n                        { name: 'Bot-Report' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Report'}\r\n                data={botTray?.[0]?.item}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-tray\\history.jsx",["5000"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [mastersEditHistory, setMastersEditHistory] = useState([])\r\n\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        try {\r\n          const fetchData = async () => {\r\n            let response = await axiosSuperAdminPrexo.post(\r\n              \"/mastersEditHistory/\" + trayId\r\n            );\r\n            if (response.status === 200) {\r\n              setMastersEditHistory(response.data.data);\r\n            }\r\n          };\r\n          fetchData();\r\n        } catch (error) {\r\n          alert(error);\r\n        }\r\n      }, []);\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'cpc',\r\n            label: 'Location',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Display Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Limit',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n      \r\n        {\r\n            name: 'created_at',\r\n            label: 'Edited Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Tray', path: '/' },\r\n                        { name: 'Tray-History' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray Audit'}\r\n                data={mastersEditHistory}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Report\\mmt-report.jsx",["5001","5002","5003","5004","5005","5006","5007","5008","5009"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    Button,\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    MenuItem,\r\n    Box,\r\n    TextField,\r\n} from '@mui/material'\r\nimport moment from 'moment'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const [sortDate, setSortDate] = useState('')\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((d, index) => {\r\n                    d.id = page * rowsPerPage + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const { location } = jwt_decode(admin)\r\n            const fetchData = async () => {\r\n                try {\r\n                    let obj = {\r\n                        location: location,\r\n                        trayType: 'MMT',\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/mmt-pmt-report',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setItem(res.data.data)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [])\r\n\r\n    /****************************************DATE WISE SORT *************************************************** */\r\n    const handelSort = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                const { location } = jwt_decode(admin)\r\n                let obj = {\r\n                    date: sortDate,\r\n                    location: location,\r\n                    trayType: 'MMT',\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/sort-mmt-pmt-report',\r\n                    obj\r\n                )\r\n                if (res.status == 200) {\r\n                    setItem(res.data.data)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <Table id=\"example\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>Tracking ID</TableCell>\r\n                        <TableCell>Order ID</TableCell>\r\n                        <TableCell>Order Date</TableCell>\r\n                        <TableCell>Delivery Date</TableCell>\r\n                        <TableCell>UIC</TableCell>\r\n                        <TableCell>IMEI</TableCell>\r\n                        <TableCell>Item ID</TableCell>\r\n                        <TableCell>MUIC</TableCell>\r\n                        <TableCell>Brand</TableCell>\r\n                        <TableCell>Model</TableCell>\r\n                        <TableCell>Bag ID</TableCell>\r\n                        <TableCell>BOT Agent Name</TableCell>\r\n                        <TableCell>Assigned Date</TableCell>\r\n                        <TableCell>Tray ID</TableCell>\r\n                        <TableCell>Tray Type</TableCell>\r\n                        <TableCell>Tray Closed Date</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {data.map((data, index) => (\r\n                        <TableRow tabIndex={-1}>\r\n                            <TableCell>{data.id}</TableCell>\r\n                            <TableCell>{data.tracking_id}</TableCell>\r\n                            <TableCell>{data.order_id}</TableCell>\r\n                            <TableCell>\r\n                                {data?.order[0]?.order_date != undefined\r\n                                    ? new Date(\r\n                                          data?.order[0]?.order_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.delivery_date != undefined\r\n                                    ? new Date(\r\n                                          data?.delivery_date\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.uic_code?.code}</TableCell>\r\n                            <TableCell>{data.imei}</TableCell>\r\n                            <TableCell>{data.item_id}</TableCell>\r\n                            <TableCell>{data?.product[0]?.muic}</TableCell>\r\n                            <TableCell>\r\n                                {data?.product[0]?.brand_name}\r\n                            </TableCell>\r\n                            <TableCell>\r\n                                {data?.product[0]?.model_name}\r\n                            </TableCell>\r\n                            <TableCell>{data.bag_id}</TableCell>\r\n                            <TableCell>{data.agent_name}</TableCell>\r\n                            <TableCell>\r\n                                {data?.assign_to_agent != undefined\r\n                                    ? new Date(\r\n                                          data?.assign_to_agent\r\n                                      ).toLocaleString('en-GB', {\r\n                                          hour12: true,\r\n                                      })\r\n                                    : ''}\r\n                            </TableCell>\r\n                            <TableCell>{data.tray_id}</TableCell>\r\n                            <TableCell>{data.tray_type}</TableCell>\r\n                            <TableCell>\r\n                                {new Date(\r\n                                    data?.warehouse_close_date\r\n                                ).toLocaleString('en-GB', {\r\n                                    hour12: true,\r\n                                })}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        )\r\n    }, [item, data])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Report', path: '/' },\r\n                        { name: 'MMT' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        flexDirection: 'start',\r\n                    }}\r\n                >\r\n                    <TextField\r\n                        id=\"filled-select-currency\"\r\n                        type=\"Date\"\r\n                        onChange={(e) => {\r\n                            setSortDate(e.target.value)\r\n                        }}\r\n                        inputProps={{\r\n                            max: moment().format('YYYY-MM-DD'),\r\n                        }}\r\n                        sx={{ mt: 1, mb: 1 }}\r\n                        helperText=\"Please Select MMT closed Date\"\r\n                        variant=\"filled\"\r\n                    />\r\n                    <Button\r\n                        sx={{\r\n                            mt: 20,\r\n                            m: 2,\r\n                            height: '38px',\r\n                        }}\r\n                        disabled={sortDate == '' ? true : false}\r\n                        variant=\"contained\"\r\n                        style={{\r\n                            backgroundColor: '#206CE2',\r\n                            marginTop: '23px',\r\n                        }}\r\n                        onClick={(e) => {\r\n                            handelSort(e)\r\n                        }}\r\n                    >\r\n                        Sort\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[5, 10, 25]}\r\n                component=\"div\"\r\n                count={item.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Change-password\\change-password-router.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Change-password\\change -password.jsx",["5010","5011","5012","5013","5014","5015","5016","5017","5018","5019","5020","5021"],"import { Card, Grid, Button, CircularProgress, IconButton } from '@mui/material'\r\nimport { Box, styled, useTheme } from '@mui/system'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport useAuth from 'app/hooks/useAuth'\r\nimport { Paragraph } from 'app/components/Typography'\r\nimport { Visibility, VisibilityOff } from '@mui/icons-material'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport InputAdornment from '@mui/material/InputAdornment'\r\nimport { axiosSuperAdminPrexo } from '../../../axios'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst JustifyBox = styled(FlexBox)(() => ({\r\n    justifyContent: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(JustifyBox)(() => ({\r\n    height: '100%',\r\n    padding: '32px',\r\n    background: 'rgba(0, 0, 0, 0.01)',\r\n}))\r\n\r\nconst IMG = styled('img')(() => ({\r\n    width: '100%',\r\n}))\r\n\r\nconst RegisterRoot = styled(JustifyBox)(({ theme }) => ({\r\n    background: '#1A2038',\r\n    minHeight: '100vh !important',\r\n    '& .card': {\r\n        maxWidth: 650,\r\n        borderRadius: 12,\r\n        margin: '1rem',\r\n    },\r\n    '& .buttonProgress': {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    },\r\n    '& .socialButton': {\r\n        width: '100%',\r\n        '& img': {\r\n            margin: '0 8px',\r\n        },\r\n    },\r\n    '& .labelLink': {\r\n        color: theme.palette.primary.main,\r\n        textDecoration: 'underline',\r\n    },\r\n}))\r\n\r\nconst Login = () => {\r\n    const navigate = useNavigate()\r\n    const [loading, setLoading] = useState(false)\r\n    const [state, setState] = useState({})\r\n    const [message, setMessage] = useState('')\r\n    const [showPassword, setShowPassword] = useState(false)\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        setState({\r\n            ...state,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    let { old_password, new_password } = state\r\n    const { palette } = useTheme()\r\n    const textError = palette.error.main\r\n    // PASSWORD SHOW AND HIDE\r\n    const handleClickShowPassword = () => {\r\n        setShowPassword((showPassword) => !showPassword)\r\n    }\r\n\r\n    const handleMouseDownPassword = (event) => {\r\n        event.preventDefault()\r\n    }\r\n\r\n    const handleFormSubmit = async (data) => {\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { adminId, user_type } = jwt_decode(token)\r\n                state._id = adminId\r\n                let response = await axiosSuperAdminPrexo.post(\r\n                    '/changePassword',\r\n                    state\r\n                )\r\n                if (response.status == 200) {\r\n                    alert(response.data.message)\r\n                    if (user_type == 'MIS') {\r\n                        navigate('/mis/dashboard')\r\n                    } else if (user_type == 'Warehouse') {\r\n                        navigate('/warehouse/dashboard')\r\n                    } else if (user_type == 'Bag Opening') {\r\n                        navigate('/bot/dashboard')\r\n                    } else if (user_type == 'Charging') {\r\n                        navigate('/charging/dashboard')\r\n                    } else if (user_type == 'BQC') {\r\n                        navigate('/bqc/dashboard')\r\n                    } else if (user_type == 'Sorting Agent') {\r\n                        navigate('/sorting/dashboard')\r\n                    }\r\n                } else if (response.status == 202) {\r\n                    alert(response.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <RegisterRoot>\r\n            <Card className=\"card\">\r\n                <Grid container>\r\n                    <Grid item lg={5} md={5} sm={5} xs={12}>\r\n                        <ContentBox>\r\n                            <IMG\r\n                                src=\"/assets/images/illustrations/posting_photo.svg\"\r\n                                alt=\"\"\r\n                            />\r\n                        </ContentBox>\r\n                    </Grid>\r\n                    <Grid item lg={7} md={7} sm={7} xs={12}>\r\n                        <Box p={4} height=\"100%\">\r\n                            <ValidatorForm onSubmit={handleFormSubmit}>\r\n                                <TextValidator\r\n                                    sx={{ mb: 3, width: '100%' }}\r\n                                    variant=\"outlined\"\r\n                                    size=\"large\"\r\n                                    label=\"Old Password\"\r\n                                    onChange={handleChange}\r\n                                    type=\"text\"\r\n                                    name=\"old_password\"\r\n                                    value={old_password || ''}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                />\r\n                                <TextValidator\r\n                                    sx={{ mb: '16px', width: '100%' }}\r\n                                    label=\"New Password\"\r\n                                    variant=\"outlined\"\r\n                                    size=\"large\"\r\n                                    onChange={handleChange}\r\n                                    name=\"new_password\"\r\n                                    type={showPassword ? 'text' : 'password'}\r\n                                    value={new_password || ''}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                    InputProps={{\r\n                                        endAdornment: (\r\n                                            <InputAdornment position=\"end\">\r\n                                                <IconButton\r\n                                                    aria-label=\"toggle password visibility\"\r\n                                                    onClick={\r\n                                                        handleClickShowPassword\r\n                                                    }\r\n                                                    onMouseDown={\r\n                                                        handleMouseDownPassword\r\n                                                    }\r\n                                                    edge=\"end\"\r\n                                                >\r\n                                                    {showPassword ? (\r\n                                                        <VisibilityOff />\r\n                                                    ) : (\r\n                                                        <Visibility />\r\n                                                    )}\r\n                                                </IconButton>\r\n                                            </InputAdornment>\r\n                                        ),\r\n                                    }}\r\n                                />\r\n\r\n                                {message && (\r\n                                    <Paragraph sx={{ color: textError }}>\r\n                                        {message}\r\n                                    </Paragraph>\r\n                                )}\r\n                                <FlexBox display=\"flex\" alignItems=\"center\">\r\n                                    <Box position=\"relative\">\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            disabled={loading}\r\n                                            type=\"submit\"\r\n                                        >\r\n                                            Submit\r\n                                        </Button>\r\n                                        {loading && (\r\n                                            <CircularProgress\r\n                                                size={24}\r\n                                                className=\"buttonProgress\"\r\n                                            />\r\n                                        )}\r\n                                    </Box>\r\n                                </FlexBox>\r\n                            </ValidatorForm>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </Card>\r\n        </RegisterRoot>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\Tray-merge\\start-merge.jsx",["5022","5023","5024","5025","5026","5027","5028","5029","5030"],"import React, { useEffect, useState } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\n// import jwt from \"jsonwebtoken\"\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nimport { axiosSortingAgent, axiosWarehouseIn } from '../../../../axios'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [tray, setTray] = useState([])\r\n    const { trayId } = useParams()\r\n    /**************************************************************************** */\r\n    const [awbn, setAwbn] = useState('')\r\n    const [open, setOpen] = useState(false)\r\n    const [description, setDescription] = useState([])\r\n    const [itemDetails, setItemDetails] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n    const [loading2, setLoading2] = useState(false)\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/viewTrayFromAndTo/' + location + '/' + trayId\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setTray(response.data.data)\r\n                    } else {\r\n                        alert(response.data.message)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        setLoading(false)\r\n        setAwbn('')\r\n    }\r\n\r\n    const handelAwbn = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                    wht_tray: tray?.wht,\r\n                }\r\n                let res = await axiosSortingAgent.post(\r\n                    '/cheack-uic-for-sorting',\r\n                    obj\r\n                )\r\n                if (res?.status === 200) {\r\n                    addActualitem(res.data.data)\r\n                    setOpen(true)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                setAwbn('')\r\n\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (data) => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                fromTray: trayId,\r\n                toTray: tray[1].code,\r\n                item: data,\r\n            }\r\n            let res = await axiosSortingAgent.post('/itemShifteToMmtTray', obj)\r\n            if (res?.status === 200) {\r\n                setRefresh((refresh) => !refresh)\r\n                setAwbn('')\r\n                handleClose()\r\n                setLoading(false)\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, trayId) => {\r\n        e.preventDefault()\r\n        try {\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n            } else {\r\n                setLoading2(true)\r\n                let obj = {\r\n                    fromTray: trayId,\r\n                    toTray: tray?.[1].code,\r\n                }\r\n                let res = await axiosSortingAgent.post(\r\n                    '/mergeDoneTraySendToWarehouse',\r\n                    obj\r\n                )\r\n                if (res.status === 200) {\r\n                    alert(res.data.message)\r\n                    setLoading2(false)\r\n                    navigate('/sorting/merge')\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    \r\n    /***************************************************************************************** */\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>FROM TRAY - {trayId}</h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Assigned Date --{' '}\r\n                        {new Date(tray?.[0]?.assigned_date).toLocaleString(\r\n                            'en-GB',\r\n                            {\r\n                                hour12: true,\r\n                            }\r\n                        )}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                        <h4>FROM TRAY ITEMS - {tray[0]?.code}</h4>\r\n\r\n                        <TableContainer>\r\n                            <Table\r\n                                style={{ width: '100%' }}\r\n                                id=\"example\"\r\n                                stickyHeader\r\n                                aria-label=\"sticky table\"\r\n                            >\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>S.NO</TableCell>\r\n                                        <TableCell>UIC</TableCell>\r\n                                        <TableCell>Order Id</TableCell>\r\n                                        <TableCell>AWBN</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {tray[0]?.actual_items?.map(\r\n                                        (data, index) => (\r\n                                            <TableRow\r\n                                                hover\r\n                                                role=\"checkbox\"\r\n                                                tabIndex={-1}\r\n                                            >\r\n                                                <TableCell>\r\n                                                    {index + 1}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data?.uic}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data?.order_id}\r\n                                                </TableCell>\r\n                                                <TableCell>\r\n                                                    {data?.awbn_number ==\r\n                                                    undefined\r\n                                                        ? data?.tracking_id\r\n                                                        : data?.awbn_number}\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        )\r\n                                    )}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                        <h4>TO TRAY ITEMS - {tray?.[1]?.code}</h4>\r\n                        <TextField\r\n                            sx={{ m: 1 }}\r\n                            id=\"outlined-password-input\"\r\n                            type=\"text\"\r\n                            name=\"doorsteps_diagnostics\"\r\n                            label=\"Please Enter UIC\"\r\n                            value={awbn}\r\n                            // onChange={(e) => setAwbn(e.target.value)}\r\n                            onChange={(e) => {\r\n                                setAwbn(e.target.value)\r\n                                handelAwbn(e)\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    width: 'auto',\r\n                                },\r\n                            }}\r\n                        />\r\n\r\n                        <TableContainer>\r\n                            <Table\r\n                                style={{ width: '100%' }}\r\n                                id=\"example\"\r\n                                stickyHeader\r\n                                aria-label=\"sticky table\"\r\n                            >\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell>S.NO</TableCell>\r\n                                        <TableCell>UIC</TableCell>\r\n                                        <TableCell>Order Id</TableCell>\r\n                                        <TableCell>AWBN</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n\r\n                                <TableBody>\r\n                                    {tray?.[1]?.items?.map((data, index) => (\r\n                                        <TableRow\r\n                                            hover\r\n                                            role=\"checkbox\"\r\n                                            tabIndex={-1}\r\n                                        >\r\n                                            <TableCell>{index + 1}</TableCell>\r\n                                            <TableCell>{data?.uic}</TableCell>\r\n                                            <TableCell>\r\n                                                {data?.order_id}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {data?.awbn_number == undefined\r\n                                                    ? data?.tracking_id\r\n                                                    : data?.awbn_number}\r\n                                            </TableCell>\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            tray?.[0]?.actual_items?.length !== 0\r\n                                ? true\r\n                                : loading2 == true\r\n                                ? true\r\n                                : false\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelIssue(e, trayId)\r\n                        }}\r\n                    >\r\n                        Close Tray\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Sorting-agent-components\\Tray-merge\\tray.jsx",["5031","5032"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { axiosSortingAgent } from '../../../../axios'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [tray, setTray] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            let token = localStorage.getItem('prexo-authentication')\r\n            if (token) {\r\n                const { user_name } = jwt_decode(token)\r\n                const fetchData = async () => {\r\n                    let res = await axiosSortingAgent.post(\r\n                        '/getAssignedFromTray/' + user_name\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                }\r\n                fetchData()\r\n            } else {\r\n                navigate('/')\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n\r\n    const handelApprove = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/sorting/merge/start/' + id)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[4],\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Sorting Agent',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'to_merge',\r\n            label: 'To Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'assigned_date',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelApprove(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Start Merge\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Tray-Merge', path: '/' }]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Report\\sales-bin.jsx",["5033","5034","5035","5036","5037","5038"],"import jwt_decode from 'jwt-decode'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect, useMemo } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport {\r\n    TableCell,\r\n    TableHead,\r\n    Table,\r\n    TableRow,\r\n    TableBody,\r\n    Card,\r\n    TablePagination,\r\n    TextField,\r\n    Box,\r\n    Button\r\n} from '@mui/material'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport * as FileSaver from 'file-saver'\r\nimport * as XLSX from 'xlsx'\r\nimport { axiosWarehouseIn } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [page, setPage] = React.useState(0)\r\n    const [item, setItem] = useState([])\r\n    const [rowsPerPage, setRowsPerPage] = React.useState(10)\r\n    const [data, setData] = useState([])\r\n    const [tableMessage, setTableMessage] = useState('')\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        setData((_) =>\r\n            item\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((d, index) => {\r\n                    d.id = page * rowsPerPage + index + 1\r\n                    return d\r\n                })\r\n        )\r\n    }, [page, item, rowsPerPage])\r\n\r\n    useEffect(() => {\r\n        let admin = localStorage.getItem('prexo-authentication')\r\n        if (admin) {\r\n            const { location } = jwt_decode(admin)\r\n            const fetchData = async () => {\r\n                try {\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/salesBinItem/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        if (res.data.data?.length == 0) {\r\n                            setTableMessage('Sorry no records found')\r\n                        } else {\r\n                            setItem(res.data.data)\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n            fetchData()\r\n        } else {\r\n            navigate('/')\r\n        }\r\n    }, [])\r\n\r\n\r\n    const download = (e) => {\r\n\r\n        const fileExtension = '.xlsx'\r\n        const fileType =\r\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8'\r\n        const ws = XLSX.utils.json_to_sheet(item, {header: []})\r\n       \r\n        const wb = { Sheets: { data: ws }, SheetNames: ['data'] }\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' })\r\n        const data = new Blob([excelBuffer], { type: fileType })\r\n        FileSaver.saveAs(data, 'sales-bin' + fileExtension)\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage)\r\n    }\r\n\r\n    console.log(item);\r\n\r\n    const searchItem = async (inputData) => {\r\n        try {\r\n            let res = await axiosWarehouseIn.post(\r\n                '/salesBinItem/search/' + inputData\r\n            )\r\n            if (res.status == 200) {\r\n                setRowsPerPage(10)\r\n                setPage(0)\r\n                setItem(res.data.data)\r\n            } else {\r\n                setTableMessage(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableData = useMemo(() => {\r\n        return (\r\n            <Table id=\"example\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Record.NO</TableCell>\r\n                        <TableCell>UIC</TableCell>\r\n                        <TableCell>Grade</TableCell>\r\n                        <TableCell>Added Agent Name</TableCell>\r\n                        <TableCell>Added Time</TableCell>\r\n                        <TableCell>From Tray ID</TableCell>\r\n                        <TableCell>Description</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                {tableMessage !== '' ? (\r\n                    <h4 style={{ textAlign: 'center' }}>{tableMessage}</h4>\r\n                ) : (\r\n                    <TableBody>\r\n                        {data.map((data, index) => (\r\n                            <TableRow tabIndex={-1}>\r\n                                <TableCell>{data.id}</TableCell>\r\n\r\n                                <TableCell>{data.uic_code}</TableCell>\r\n                                <TableCell>{data.sales_bin_grade}</TableCell>\r\n\r\n                                <TableCell>\r\n                                    {data.sales_bin_wh_agent_name}\r\n                                </TableCell>\r\n                                <TableCell>\r\n                                    {data?.sales_bin_date != undefined\r\n                                        ? new Date(\r\n                                              data?.sales_bin_date\r\n                                          ).toLocaleString('en-GB', {\r\n                                              hour12: true,\r\n                                          })\r\n                                        : ''}\r\n                                </TableCell>\r\n                                <TableCell>{data.wht_tray}</TableCell>\r\n                                <TableCell>\r\n                                    {data.sales_bin_desctiption}\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                )}\r\n            </Table>\r\n        )\r\n    }, [item, data, tableMessage])\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Report', path: '/' },\r\n                        { name: 'Sales Bin' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box\r\n                sx={{\r\n                    display: 'flex',\r\n                    justifyContent: 'space-between',\r\n                }}\r\n            >\r\n                <TextField\r\n                    onChange={(e) => {\r\n                        searchItem(e.target.value)\r\n                    }}\r\n                    label=\"Search\"\r\n                    variant=\"outlined\"\r\n                    sx={{ mb: 1 }}\r\n                />\r\n                <Button\r\n                    sx={{ mb: 2 }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={(e) => {\r\n                        download(e)\r\n                    }}\r\n                >\r\n                    Download\r\n                </Button>\r\n            </Box>\r\n            <Card sx={{ maxHeight: '100%', overflow: 'auto' }} elevation={6}>\r\n                {tableData}\r\n            </Card>\r\n            <TablePagination\r\n                sx={{ px: 2 }}\r\n                rowsPerPageOptions={[50, 100, 150]}\r\n                component=\"div\"\r\n                count={item.length}\r\n                rowsPerPage={rowsPerPage}\r\n                page={page}\r\n                showFirstButton=\"true\"\r\n                showLastButton=\"true\"\r\n                backIconButtonProps={{\r\n                    'aria-label': 'Previous Page',\r\n                }}\r\n                nextIconButtonProps={{\r\n                    'aria-label': 'Next Page',\r\n                }}\r\n                onPageChange={handleChangePage}\r\n                onRowsPerPageChange={({ target: { value } }) =>\r\n                    setRowsPerPage(value)\r\n                }\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Ready-for-audit\\wht-tray-view.jsx",["5039","5040"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [whtTray, setWhtTray] = useState([])\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/wht-tray/' + 'Ready to Audit/' + location\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setWhtTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const handelDetailPage = (e, trayId) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/ready-for-audit/view/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'name', // field name in the row object\r\n            label: 'Name', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[9],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelDetailPage(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Ready-for-audit', path: '/' },\r\n                        { name: 'Audit' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'WHT'}\r\n                data={whtTray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Ready-for-audit\\action.jsx",["5041","5042","5043","5044","5045","5046","5047","5048","5049","5050","5051","5052","5053","5054","5055","5056","5057","5058","5059"],"import React, { useEffect, useState, useMemo, useRef } from 'react'\r\n\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n    MenuItem,\r\n    DialogContent,\r\n    DialogActions,\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport { styled } from '@mui/material/styles'\r\nimport jwt_decode from 'jwt-decode'\r\n// import jwt from \"jsonwebtoken\"\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [uic, setUic] = useState('')\r\n    const [addButDis, setAddButDis] = useState(false)\r\n    const [description, setDescription] = useState('')\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [stateData, setStateData] = useState({})\r\n    const [itemDataVer, setItemDataVer] = useState({})\r\n    const [open, setOpen] = React.useState(false)\r\n    const inputRef = useRef(null)\r\n\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/readyForAuditView/' + trayId + '/' + 'Ready to Audit'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/check-uic-ready-for-audit',\r\n                    obj\r\n                )\r\n                if (res?.status == 200) {\r\n                    setItemDataVer(res.data.data)\r\n                    setTextDisable(false)\r\n\r\n                    handleOpen()\r\n                } else {\r\n                    setTextDisable(false)\r\n                    setUic('')\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    /************************************************************************** */\r\n    const handelAdd = async (e) => {\r\n        if (e.keyCode !== 32) {\r\n            let admin = localStorage.getItem('prexo-authentication')\r\n            if (admin) {\r\n                const { user_name } = jwt_decode(admin)\r\n                try {\r\n                    setAddButDis(true)\r\n                    let obj = {\r\n                        uic: uic,\r\n                        trayId: trayId,\r\n                        item: itemDataVer,\r\n                        username: user_name,\r\n                    }\r\n                    obj.stage = stateData.stage\r\n                    if (stateData.stage == 'Shift to Sales Bin') {\r\n                        console.log('wor')\r\n                        obj.grade = stateData.grade\r\n                        obj.description = stateData.description\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/readyForAudit/itemSegrigation',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        handleClose()\r\n                        setAddButDis(false)\r\n                        setUic('')\r\n                        alert(res.data.message)\r\n\r\n                        setRefresh((refresh) => !refresh)\r\n                    } else {\r\n                        handleClose()\r\n                        setUic('')\r\n                        setAddButDis(false)\r\n\r\n                        alert(res.data.message)\r\n                    }\r\n                } catch (error) {\r\n                    alert(error)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        if (name === 'stage') {\r\n            setStateData({\r\n                [name]: value,\r\n            })\r\n        } else {\r\n            setStateData({\r\n                ...stateData,\r\n                [name]: value,\r\n            })\r\n        }\r\n    }\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n        setStateData({})\r\n    }\r\n    const handleOpen = () => {\r\n        setOpen(true)\r\n    }\r\n\r\n    /************************************************************************** */\r\n    const handelIssue = async (e, sortId) => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                trayId: trayId,\r\n                sortId: trayData?.sort_id,\r\n                temp_array: trayData?.temp_array?.length,\r\n            }\r\n            let res = await axiosWarehouseIn.post(\r\n                '/readyForAudit/closeTray',\r\n                obj\r\n            )\r\n            if (res.status == 200) {\r\n                alert(res.data.message)\r\n                navigate('/wareshouse/wht/ready-for-audit')\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>Sales Bin</h5>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ paddingLeft: '5px', fontSize: '22px' }}>\r\n                                {trayData?.temp_array?.length}/{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.temp_array?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.temp_array])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h5>Leave the Item in the tray</h5>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p style={{ marginLeft: '5px', fontSize: '24px' }}>\r\n                                {\r\n                                    trayData.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textDisable, uic])\r\n\r\n    return (\r\n        <Box>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Add\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <TextField\r\n                        label=\"Select\"\r\n                        fullWidth\r\n                        select\r\n                        sx={{\r\n                            mb: 2,\r\n                        }}\r\n                        onChange={(e) => {\r\n                            handleChange(e)\r\n                        }}\r\n                        name=\"stage\"\r\n                    >\r\n                        <MenuItem value=\"Leave the Item in the tray\">\r\n                            Leave the Item in the tray\r\n                        </MenuItem>\r\n\r\n                        <MenuItem value=\"Shift to Sales Bin\">\r\n                            Shift to Sales Bin\r\n                        </MenuItem>\r\n                    </TextField>\r\n                    {stateData?.stage == 'Shift to Sales Bin' ? (\r\n                        <>\r\n                            <TextField\r\n                                label=\"Select Grade\"\r\n                                select\r\n                                fullWidth\r\n                                sx={{\r\n                                    mb: 2,\r\n                                }}\r\n                                onChange={(e) => {\r\n                                    handleChange(e)\r\n                                }}\r\n                                name=\"grade\"\r\n                            >\r\n                                <MenuItem value=\"A\">A</MenuItem>\r\n                                <MenuItem value=\"B\">B</MenuItem>\r\n                                <MenuItem value=\"C\">C</MenuItem>\r\n                                <MenuItem value=\"D\">D</MenuItem>\r\n                            </TextField>\r\n                            <TextField\r\n                                label=\"Description\"\r\n                                fullWidth\r\n                                name=\"description\"\r\n                                sx={{\r\n                                    mb: 2,\r\n                                }}\r\n                                type=\"text\"\r\n                                onChange={(e) => handleChange(e)}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </>\r\n                    ) : null}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{ ml: 2 }}\r\n                        disabled={\r\n                            (stateData?.stage == 'Shift to Sales Bin' &&\r\n                                stateData?.grade == undefined) ||\r\n                            (stateData?.stage == 'Shift to Sales Bin' &&\r\n                                stateData.description == undefined) ||\r\n                            stateData?.stage == undefined ||\r\n                            addButDis\r\n                        }\r\n                        onClick={(e) => handelAdd(e)}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                    >\r\n                        ADD\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>TRAY ID - {trayId}</h4>\r\n                    <TextField\r\n                        sx={{ mt: 1, ml: 1 }}\r\n                        id=\"outlined-password-input\"\r\n                        type=\"text\"\r\n                        disabled={textDisable}\r\n                        name=\"doorsteps_diagnostics\"\r\n                        label=\"SCAN UIC\"\r\n                        autoFocus\r\n                        value={uic}\r\n                        onChange={(e) => {\r\n                            setUic(e.target.value)\r\n                            handelUic(e)\r\n                        }}\r\n                        inputProps={{\r\n                            style: {\r\n                                width: 'auto',\r\n                            },\r\n                        }}\r\n                    />\r\n                </Box>\r\n\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            trayData?.items?.length !==\r\n                                trayData?.temp_array?.length +\r\n                                    trayData?.actual_items?.length ||\r\n                            loading == true\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Issue?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </Box>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\AuditRouter.js",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\start-segrigation.jsx",["5060","5061","5062","5063","5064","5065","5066","5067"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Audit-requests.jsx",["5068","5069","5070"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\report-data-display.jsx",["5071","5072","5073","5074","5075","5076","5077","5078","5079","5080","5081","5082","5083","5084","5085","5086","5087","5088","5089","5090","5091","5092","5093","5094","5095","5096","5097","5098","5099","5100","5101","5102","5103","5104","5105","5106","5107","5108","5109","5110","5111","5112","5113","5114","5115","5116","5117","5118","5119","5120","5121","5122"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Assigned-other-tray\\view-item.jsx",["5123"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport { axiosAuditAgent } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [trayItem, setTrayItem] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosAuditAgent.post(\r\n                    '/view-items/' + trayId\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayItem(response.data.data.items)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand_name',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model_name',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tracking_id',\r\n            label: 'Tracking Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'tray_id',\r\n            label: 'BOT Tray',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'bot_agent',\r\n            label: 'BOT Agent',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assigned Tray', path: '/' },\r\n                        { name: 'Tray-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayItem}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Dashboard\\dashboard.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Assigned-other-tray\\assigned-other-tray.jsx",["5124","5125","5126"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosAuditAgent } from '../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [trayData, setTrayData] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let token = localStorage.getItem('prexo-authentication')\r\n                if (token) {\r\n                    const { user_name } = jwt_decode(token)\r\n                    let res = await axiosAuditAgent.post(\r\n                        '/getAssignedOtherTray/' + user_name\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTrayData(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/audit/assigned-tray/view-item/' + id)\r\n    }\r\n    const handelClose = async (e, id) => {\r\n        e.preventDefault()\r\n        try {\r\n            let res = await axiosAuditAgent.post('/trayClose/' + id)\r\n            if (res.status == 200) {\r\n                alert(res.data.message)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: false,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value?.length + '/' + tableMeta?.rowData[2],\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'assigned_date',\r\n            label: 'Assigned Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    handelViewTray(e, value)\r\n                                }}\r\n                                style={{ backgroundColor: 'primery' }}\r\n                            >\r\n                                View\r\n                            </Button>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                onClick={(e) => {\r\n                                    if (window.confirm('You want to Close?')) {\r\n                                        handelClose(e, value)\r\n                                    }\r\n                                }}\r\n                                style={{ backgroundColor: 'red' }}\r\n                            >\r\n                                Close\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Assigned Tray', path: '/' }]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayData}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Dashboard\\card.jsx",[],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bqc-all-api-report.jsx",["5127","5128","5129"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst BqcSowftwareReportPage = ({ BqcSowftwareReport }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>BQC Report</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    <TableRow key={BqcSowftwareReport?.uic}>\r\n                        <TableCell sx={{ pl: 2 }}>UIC</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.uic}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.tray_id}>\r\n                        <TableCell sx={{ pl: 2 }}>Tray ID</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.tray_id}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.date}>\r\n                        <TableCell sx={{ pl: 2 }}>Date</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.date}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.testing_duration}>\r\n                        <TableCell sx={{ pl: 2 }}>Testing Duration</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.testing_duration}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.erasure_technician}>\r\n                        <TableCell sx={{ pl: 2 }}>Technician</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.erasure_technician}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.final_grade}>\r\n                        <TableCell sx={{ pl: 2 }}>Final Grade</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.final_grade}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.hardware_test_summary}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Hardware Test Summary\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.hardware_test_summary}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mandatory_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Mandatory Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mandatory_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Mobile Name</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.mobile_name}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.market_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Market Name</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.market_name}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.device_color_one}>\r\n                        <TableCell sx={{ pl: 2 }}>Device Color</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.device_color_one}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.bq_batterychargerange}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Bq Battery Charge Range\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.bq_batterychargerange}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_imei}>\r\n                        <TableCell sx={{ pl: 2 }}>Mobile IMEI</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.mobile_imei}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_imei2}>\r\n                        <TableCell sx={{ pl: 2 }}>Mobile IMEI 2</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mobile_imei2}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?._ro_imei_check}>\r\n                        <TableCell sx={{ pl: 2 }}>Ro IMEI Check</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?._ro_imei_check}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.chargingjack}>\r\n                        <TableCell sx={{ pl: 2 }}>Charging Jack</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.chargingjack}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.crackedlens}>\r\n                        <TableCell sx={{ pl: 2 }}>Cracked Lens</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.crackedlens}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.fingerprint}>\r\n                        <TableCell sx={{ pl: 2 }}>Finger Print</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.fingerprint}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.flashlight}>\r\n                        <TableCell sx={{ pl: 2 }}>Flash Light</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.flashlight}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.homekey}>\r\n                        <TableCell sx={{ pl: 2 }}>Home Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.homekey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_batterybulging}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Battery Bulging</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_batterybulging}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_bentondevicebody}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Benton device Body\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_bentondevicebody}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_crackdevicebody}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Crack Device Body\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_crackdevicebody}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_dentdevicebody}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Dentdevice Body</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_dentdevicebody}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_headphonejack_3_5mm}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Headphone Jack 3.5 mm\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_headphonejack_3_5mm}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_missingparts}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Missing Parts</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_missingparts}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_scratchchromeside}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Scratch Chrome Side\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_scratchchromeside}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_scratchesbackpanel}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Scratches Back Panel\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_scratchesbackpanel}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_scratchesdisplay}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Scratches Display\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_scratchesdisplay}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_screencracked}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Screen Cracked</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_screencracked}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_screen_type}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Screen Type</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_screen_type}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.powerkey}>\r\n                        <TableCell sx={{ pl: 2 }}> Power Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.powerkey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.simtray}>\r\n                        <TableCell sx={{ pl: 2 }}>SIM Tray</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.simtray}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.silentkey}>\r\n                        <TableCell sx={{ pl: 2 }}>Silent Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.silentkey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.volumekey}>\r\n                        <TableCell sx={{ pl: 2 }}>Volume Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.volumekey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.carrier_signal_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Carrier Signel Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.carrier_signal_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.carrier_signal_sim_2_test}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Carrier Signel Sim 2 Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.carrier_signal_sim_2_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.wi_fi_test}>\r\n                        <TableCell sx={{ pl: 2 }}>WI-Fi Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.wi_fi_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.bluetooth_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Bluetooth Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.bluetooth_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Microphone Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.speaker_microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Speaker Microphone Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.speaker_microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.front_microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Front Microphone Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.front_microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.headset_microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Headset Microphone Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.headset_microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.speaker_microphone_front_test}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Speaker Microphone Front Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.speaker_microphone_front_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.receiver_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Received Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.receiver_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.headset_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Headset Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.headset_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.front_camera_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Front Camera Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.front_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.video_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Video Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.video_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.auto_focus_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Auto Focus Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.auto_focus_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.camera_flash_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Camera Flash Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.camera_flash_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.front_camera_flash_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Front Camera Flash Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.front_camera_flash_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.device_color}>\r\n                        <TableCell sx={{ pl: 2 }}>Device Color</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.device_color}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.battery_charging_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Battery Charging Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.battery_charging_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.touch_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Touch Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.touch_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.proximity_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Proximity Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.proximity_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.compass_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Compass Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.compass_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.light_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Light Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.light_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.vibration_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Vibration Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.vibration_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.home_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Home Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.home_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.volume_keys_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Volume Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.volume_keys_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.screen_lock_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Screen Lock Key Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.screen_lock_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.back_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>back Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.back_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.recent_menu_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Recent Menu Key Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.recent_menu_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.screen_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Screen Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.screen_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.live_call_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Live Call Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.live_call_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.live_call_sim_2_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Live Call Sim 2 Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.live_call_sim_2_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.screen_damage_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Screen Damage Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.screen_damage_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.assisted_front_camera_test}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Assisted Front Camera Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.assisted_front_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.fingerprint_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Fingerprint Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.fingerprint_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.multi_touch_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Multi Touch Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.multi_touch_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n\r\n                    <TableRow key={BqcSowftwareReport?.face_id_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Face ID Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.face_id_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.auto_rotation_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Auto Rotation Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.auto_rotation_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.infrared_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Infrared Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.infrared_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.fm_radio_test}>\r\n                        <TableCell sx={{ pl: 2 }}>FM Radio Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.fm_radio_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.product_version}>\r\n                        <TableCell sx={{ pl: 2 }}>Product Version</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.product_version}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.product_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Product Name</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.product_name}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.operating_system_version}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Operating System Version\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.operating_system_version}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.system_manufacturer}>\r\n                        <TableCell sx={{ pl: 2 }}>System Manufacture</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.system_manufacturer}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.system_model}>\r\n                        <TableCell sx={{ pl: 2 }}>System Model</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.system_model}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_internal_model}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Mobile Internal Model\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mobile_internal_model}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.system_serial}>\r\n                        <TableCell sx={{ pl: 2 }}>System Serial</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.system_serial}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.operating_system_name}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Operating System Name\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.operating_system_name}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.total_memory}>\r\n                        <TableCell sx={{ pl: 2 }}>Total Memory</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.total_memory}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.business_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Business Name</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.business_name}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.business_location}>\r\n                        <TableCell sx={{ pl: 2 }}>Business Location</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.business_location}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.report_id}>\r\n                        <TableCell sx={{ pl: 2 }}>Report Id</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.report_id}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.rooted}>\r\n                        <TableCell sx={{ pl: 2 }}>Rooted</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.rooted}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.frp}>\r\n                        <TableCell sx={{ pl: 2 }}>FRP</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.frp}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.frp_status}>\r\n                        <TableCell sx={{ pl: 2 }}>FRP Status</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.frp_status}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={\r\n                            BqcSowftwareReport?.blancco_data_blancco_hardware_report_system_mdm_status\r\n                        }\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Blancco Data Blancco Hardware Report System MDM\r\n                            Status\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {\r\n                                BqcSowftwareReport?.blancco_data_blancco_hardware_report_system_mdm_status\r\n                            }\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={\r\n                            BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                        }\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Blancco Data Blancco Hardware Report Hardware Tests\r\n                            Auto Fingerprint\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {\r\n                                BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                            }\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.disk_capacity}>\r\n                        <TableCell sx={{ pl: 2 }}>Disk Capacity</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.disk_capacity}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.agps_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Agps Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.agps_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.assisted_camera_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Assisted Camera Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.assisted_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.silent_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Silent Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.silent_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.speaker_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Speaker Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.speaker_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?._ro_ril_miui_imei0}>\r\n                        <TableCell sx={{ pl: 2 }}>RO Ril Miui IMEI 0</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?._ro_ril_miui_imei0}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.back_camera_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Back Camera Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.back_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BqcSowftwareReportPage\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bqc-user-report.jsx",["5130","5131","5132"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst BqcUserReportPage = ({ BqcUserReport }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>BQC User Report</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    <TableRow key={BqcUserReport?.bqc_status}>\r\n                        <TableCell sx={{ pl: 2 }}>Status</TableCell>\r\n                        <TableCell>{BqcUserReport?.bqc_status}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcUserReport?.blancoo_qc_status}>\r\n                        <TableCell sx={{ pl: 2 }}>Blancco QC Status</TableCell>\r\n                        <TableCell>\r\n                            {BqcUserReport?.blancoo_qc_status}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcUserReport?.bqc_incomplete_reason}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            BQC Incomplete Reason\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcUserReport?.bqc_incomplete_reason}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcUserReport?.technical_issue}>\r\n                        <TableCell sx={{ pl: 2 }}>Technical Issue</TableCell>\r\n                        <TableCell>{BqcUserReport?.technical_issue}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcUserReport?.other}>\r\n                        <TableCell sx={{ pl: 2 }}>BQC User Remark</TableCell>\r\n                        <TableCell>{BqcUserReport?.other}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcUserReport?.factory_reset_status}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Factory reset status\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcUserReport?.factory_reset_status}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BqcUserReportPage\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Report\\amazon-data.jsx",["5133","5134","5135","5136"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst CustomerBillings = ({ Order }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>Purchase Data</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    {/* <TableRow key={Order?.vc_eligible}>\r\n                        <TableCell sx={{ pl: 2 }}>VC Eligible</TableCell>\r\n                        <TableCell>{Order?.vc_eligible}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={\r\n                            Order?.customer_declaration_physical_defect_present\r\n                        }\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            {' '}\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {\r\n                                Order?.customer_declaration_physical_defect_present\r\n                            }\r\n                        </TableCell>\r\n                    </TableRow> */}\r\n                    <TableRow\r\n                        key={Order?.customer_declaration_physical_defect_type}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            {' '}\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {Order?.customer_declaration_physical_defect_type == undefined ? \"N/A\" : Order?.customer_declaration_physical_defect_type}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CustomerBillings\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bot-user-rport.jsx",["5137","5138","5139"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst BqcUserReportPage = ({ BOt }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>BOT User Report</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    {/* <TableRow key={BOt?.stickerOne}>\r\n                        <TableCell sx={{ pl: 2 }}>Sticker One</TableCell>\r\n                        <TableCell>{BOt?.stickerOne}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BOt?.stickerTwo}>\r\n                        <TableCell sx={{ pl: 2 }}>Sticker Two</TableCell>\r\n                        <TableCell>{BOt?.stickerTwo}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BOt?.stickerThree}>\r\n                        <TableCell sx={{ pl: 2 }}>Sticker Three</TableCell>\r\n                        <TableCell>{BOt?.stickerThree}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BOt?.stickerFour}>\r\n                        <TableCell sx={{ pl: 2 }}>Sticker Four</TableCell>\r\n                        <TableCell>{BOt?.stickerFour}</TableCell>\r\n                    </TableRow> */}\r\n                    <TableRow key={BOt?.body_damage}>\r\n                        <TableCell sx={{ pl: 2 }}>Any body Damage</TableCell>\r\n                        <TableCell>{BOt?.body_damage}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BOt?.body_damage_des}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Details of Damage parts\r\n                        </TableCell>\r\n                        <TableCell>{BOt?.body_damage_des}</TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BqcUserReportPage\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Report\\bqc-api-data.jsx",["5140","5141","5142","5143","5144","5145","5146","5147","5148","5149","5150","5151","5152","5153","5154","5155","5156","5157","5158","5159","5160","5161","5162","5163","5164","5165","5166","5167","5168","5169","5170","5171","5172","5173","5174","5175","5176","5177","5178","5179","5180","5181","5182","5183","5184","5185","5186","5187","5188","5189","5190","5191","5192","5193","5194","5195","5196","5197","5198","5199","5200","5201","5202","5203","5204","5205","5206","5207","5208","5209","5210","5211","5212","5213","5214","5215","5216","5217","5218","5219","5220","5221","5222","5223","5224","5225","5226","5227","5228","5229","5230","5231","5232","5233","5234","5235","5236","5237","5238","5239","5240","5241","5242","5243","5244","5245","5246","5247","5248","5249","5250","5251","5252","5253","5254","5255","5256","5257","5258","5259","5260","5261","5262","5263","5264","5265","5266","5267","5268","5269","5270","5271","5272","5273","5274","5275","5276","5277","5278","5279","5280","5281","5282","5283","5284","5285","5286","5287","5288","5289","5290","5291","5292","5293","5294","5295","5296","5297","5298","5299","5300","5301","5302","5303","5304","5305","5306","5307","5308","5309","5310","5311","5312","5313","5314","5315","5316","5317","5318","5319","5320","5321","5322","5323","5324","5325","5326","5327","5328","5329","5330","5331","5332","5333","5334","5335","5336","5337","5338","5339","5340","5341","5342","5343","5344","5345","5346","5347","5348","5349","5350","5351","5352","5353","5354","5355","5356","5357","5358","5359","5360","5361","5362","5363","5364","5365","5366","5367","5368","5369","5370","5371"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\Report\\charging-user-report.jsx",["5372","5373","5374"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst CustomerBillings = ({ Charging,ChargeDoneDate }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>Charging User Report</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    <TableRow key={Charging?.battery_status}>\r\n                        <TableCell sx={{ pl: 2 }}>Battery Status</TableCell>\r\n                        <TableCell>{Charging?.battery_status}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.charge_percentage}>\r\n                        <TableCell sx={{ pl: 2 }}>Charge Percentage</TableCell>\r\n                        <TableCell>{Charging?.charge_percentage}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.body_condition}>\r\n                        <TableCell sx={{ pl: 2 }}>Body Condition</TableCell>\r\n                        <TableCell>{Charging?.body_condition}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.display_condition}>\r\n                        <TableCell sx={{ pl: 2 }}>Display Condition</TableCell>\r\n                        <TableCell>{Charging?.display_condition}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.lock_status}>\r\n                        <TableCell sx={{ pl: 2 }}>Lock Status</TableCell>\r\n                        <TableCell>{Charging?.lock_status}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.charging_jack_type}>\r\n                        <TableCell sx={{ pl: 2 }}>Charging Jack Type</TableCell>\r\n                        <TableCell>{Charging?.charging_jack_type}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.boady_part_missing}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Any Body Part Missing\r\n                        </TableCell>\r\n                        <TableCell>{Charging?.boady_part_missing}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={Charging?.part_name}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Missing Body Part Name\r\n                        </TableCell>\r\n                        <TableCell>{Charging?.part_name}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={ChargeDoneDate}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                           Last Charge Done Date\r\n                        </TableCell>\r\n                        <TableCell>{  new Date(ChargeDoneDate).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    })}</TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CustomerBillings\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Ready-for-rdl\\wht-tray.jsx",["5375"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [whtTrayList, setWhtTrayList] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchWht = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post('/auditDoneWht')\r\n                if (res.status === 200) {\r\n                    setWhtTrayList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchWht()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n    const handelReadyForRdl = async () => {\r\n        try {\r\n            let obj = {\r\n                ischeck: isCheck,\r\n            }\r\n            let res = await axiosSuperAdminPrexo.post('/sendToRdl', obj)\r\n            setIsCheck([])\r\n            if (res.status === 200) {\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsCheck([])\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else if (res.status == 202) {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelViewItem = (trayId) => {\r\n        navigate('/sup-admin/wht/view-item/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code', // field name in the row object\r\n            label: 'Tray Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            hide: true,\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: false,\r\n                sort: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[8],\r\n            },\r\n        },\r\n        {\r\n            name: 'display',\r\n            label: 'Tray Display',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Ready For RDL', path: '/' }]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isCheck.length === 0}\r\n                onClick={(e) => {\r\n                    handelReadyForRdl(e)\r\n                }}\r\n            >\r\n                Ready For RDL\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'WHT Tray'}\r\n                data={whtTrayList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\search.jsx",["5376","5377","5378"],"import React, { useState, useEffect } from 'react'\r\nimport { Breadcrumb } from 'app/components'\r\nimport { styled } from '@mui/system'\r\nimport { Box, Grid, TextField, Button } from '@mui/material'\r\nimport ChargingDetails from './ChargingDetails'\r\nimport BqcReport from './BqcReport'\r\nimport BqcUserReport from './BqcUserReport'\r\nimport AmazonDetails from './AmazonDetails'\r\nimport BotUserReprt from './Bot-user-report'\r\nimport BqcApiSummery from './Bqc-api-data-summery'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport Swal from 'sweetalert2'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nexport default function CenteredTabs() {\r\n    const [value, setValue] = React.useState('1')\r\n    const [uicCode, setUicCode] = useState('')\r\n    const [reportData, setReportData] = useState({})\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue)\r\n    }\r\n\r\n    useEffect(() => {}, [])\r\n\r\n    const fetchData = async () => {\r\n        try {\r\n            let res = await axiosSuperAdminPrexo.post('/bqcReport/' + uicCode)\r\n            if (res.status === 200) {\r\n                setReportData(res.data.data)\r\n            } else {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    confirmButtonText: 'Ok',\r\n                    text: res.data.message,\r\n                })\r\n            }\r\n        } catch (error) {\r\n            Swal.fire({\r\n                icon: 'error',\r\n                title: 'Oops...',\r\n                confirmButtonText: 'Ok',\r\n                text: error,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Report', path: '/' },\r\n                        { name: 'BQC' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Box>\r\n                <TextField\r\n                    onChange={(e) => setUicCode(e.target.value)}\r\n                    label=\"Please enter uic\"\r\n                    variant=\"outlined\"\r\n                />\r\n                <Button\r\n                    disabled={uicCode == ''}\r\n                    sx={{ ml: 2, mt: 1 }}\r\n                    variant=\"contained\"\r\n                    onClick={(e) => fetchData()}\r\n                    color=\"primary\"\r\n                >\r\n                    Search\r\n                </Button>\r\n            </Box>\r\n            {Object.keys(reportData)?.length !== 0 ? (\r\n                <Grid sx={{ mt: 1 }} container spacing={3}>\r\n                    <Grid item lg={3} md={6} xs={12}>\r\n                        <AmazonDetails Order={reportData?.order} />\r\n                    </Grid>\r\n                    <Grid item lg={3} md={6} xs={12}>\r\n                        <BotUserReprt BOt={reportData?.delivery?.bot_report} />\r\n                    </Grid>\r\n                    <Grid item lg={3} md={6} xs={12}>\r\n                        <ChargingDetails\r\n                            Charging={reportData?.delivery?.charging}\r\n                            ChargeDoneDate={\r\n                                reportData?.delivery?.charging_done_date\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item lg={3} md={6} xs={12}>\r\n                        <BqcUserReport\r\n                            BqcUserReport={reportData?.delivery?.bqc_report}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item lg={6} md={6} xs={12}>\r\n                        <BqcReport\r\n                            BqcSowftwareReport={\r\n                                reportData?.delivery?.bqc_software_report\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item lg={6} md={6} xs={12}>\r\n                        <BqcApiSummery\r\n                            BqcSowftwareReport={\r\n                                reportData?.delivery?.bqc_software_report\r\n                            }\r\n                            grade={\r\n                                reportData?.delivery?.bqc_software_report\r\n                                    ?.final_grade\r\n                            }\r\n                            imei={reportData?.order?.imei}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            ) : null}\r\n        </Container>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\AmazonDetails.jsx",["5379","5380","5381","5382"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst CustomerBillings = ({ Order }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>Purchase Data</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    {/* <TableRow key={Order?.vc_eligible}>\r\n                        <TableCell sx={{ pl: 2 }}>VC Eligible</TableCell>\r\n                        <TableCell>{Order?.vc_eligible}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={\r\n                            Order?.customer_declaration_physical_defect_present\r\n                        }\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            {' '}\r\n                            Customer Declaration Physical Defect Present\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {\r\n                                Order?.customer_declaration_physical_defect_present\r\n                            }\r\n                        </TableCell>\r\n                    </TableRow> */}\r\n                    <TableRow\r\n                        key={Order?.customer_declaration_physical_defect_type}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            {' '}\r\n                            Customer Declaration Physical Defect Type\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {Order?.customer_declaration_physical_defect_type ==\r\n                            undefined\r\n                                ? 'N/A'\r\n                                : Order?.customer_declaration_physical_defect_type}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CustomerBillings\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\Bot-user-report.jsx",["5383","5384","5385"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\Bqc-api-data-summery.jsx",["5386","5387","5388","5389","5390","5391","5392","5393","5394","5395","5396","5397","5398","5399","5400","5401","5402","5403","5404","5405","5406","5407","5408","5409","5410","5411","5412","5413","5414","5415","5416","5417","5418","5419","5420","5421","5422","5423","5424","5425","5426","5427","5428","5429","5430","5431","5432","5433","5434","5435","5436","5437","5438","5439","5440","5441","5442","5443","5444","5445","5446","5447","5448","5449","5450","5451","5452","5453","5454","5455","5456","5457","5458","5459","5460","5461","5462","5463","5464","5465","5466","5467","5468","5469","5470","5471","5472","5473","5474","5475","5476","5477","5478","5479","5480","5481","5482","5483","5484","5485","5486","5487","5488","5489","5490","5491","5492","5493","5494","5495","5496","5497","5498","5499","5500","5501","5502","5503","5504","5505","5506","5507","5508","5509","5510","5511","5512","5513","5514","5515","5516","5517","5518","5519","5520","5521","5522","5523","5524","5525","5526","5527","5528","5529","5530","5531","5532","5533","5534","5535","5536","5537","5538","5539","5540","5541","5542","5543","5544","5545","5546","5547","5548","5549","5550","5551","5552","5553","5554","5555","5556","5557","5558","5559","5560","5561","5562","5563","5564","5565","5566","5567","5568","5569","5570","5571","5572","5573","5574","5575","5576","5577","5578","5579","5580","5581","5582","5583","5584","5585","5586","5587","5588","5589","5590","5591","5592","5593","5594"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst BqcSowftwareReportPage = ({ BqcSowftwareReport, grade, imei }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>BQC Summery</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    <TableRow key={BqcSowftwareReport?.mandatory_test}>\r\n                        <TableCell sx={{ pl: 2 }}>IMEI Verification</TableCell>\r\n                        {imei == BqcSowftwareReport?.mobile_imei ||\r\n                        imei == BqcSowftwareReport?.mobile_imei2 ||\r\n                        imei == BqcSowftwareReport?._ro_ril_miui_imei0 ? (\r\n                            <TableCell>Verified</TableCell>\r\n                        ) : (\r\n                            <TableCell>No Verified</TableCell>\r\n                        )}\r\n                    </TableRow>\r\n\r\n                    <TableRow key={BqcSowftwareReport?.mandatory_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Mandatory Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mandatory_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n\r\n                    <TableRow key={BqcSowftwareReport?.hardware_test_summary}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Hardware Test Summary\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.hardware_test_summary}\r\n                        </TableCell>\r\n                    </TableRow>\r\n\r\n                    <TableRow key={BqcSowftwareReport?.frp}>\r\n                        <TableCell sx={{ pl: 2 }}>FRP</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.frp}</TableCell>\r\n                    </TableRow>\r\n                    {BqcSowftwareReport?.operating_system_name?.toLowerCase() ==\r\n                    'android' ? (\r\n                        <TableRow key={BqcSowftwareReport?.device_color_one}>\r\n                            <TableCell sx={{ pl: 2 }}>Device Color</TableCell>\r\n                            <TableCell>\r\n                                {BqcSowftwareReport?.device_color_one}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ) : (\r\n                        <TableRow key={BqcSowftwareReport?.device_color}>\r\n                            <TableCell sx={{ pl: 2 }}>Device Color</TableCell>\r\n                            <TableCell>\r\n                                {BqcSowftwareReport?.device_color}\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    )}\r\n                    {grade == 'A' ? (\r\n                        <>\r\n                            {BqcSowftwareReport?.pq_headphonejack_3_5mm?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_headphonejack_3_5mm\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Headphone Jack 3.5 mm\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_headphonejack_3_5mm\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_screencracked?.toLowerCase() !=\r\n                            'no' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_screencracked}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Screen Cracked\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_screencracked}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_missingparts?.toLowerCase() !=\r\n                            'no' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_missingparts}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Missing Parts\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_missingparts}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_scratchchromeside > 2 ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_scratchchromeside\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Scratch Chrome Side\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_scratchchromeside\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_dentdevicebody > 2 ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_dentdevicebody}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Dentdevice Body\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_dentdevicebody}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_scratchesdisplay > 2 ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_scratchesdisplay\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Scratches Display\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_scratchesdisplay\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n\r\n                            {BqcSowftwareReport?.pq_scratchesbackpanel > 2 ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_scratchesbackpanel\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Scratches Back Panel\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_scratchesbackpanel\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_crackdevicebody > 2 ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_crackdevicebody}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Crack Device Body\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_crackdevicebody}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_bentondevicebody?.toLowerCase() !=\r\n                            'no' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_bentondevicebody\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Benton device Body\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_bentondevicebody\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_batterybulging?.toLowerCase() !=\r\n                            'no' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_batterybulging}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Battery Bulging\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_batterybulging}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_screen_type?.toLowerCase() !==\r\n                            'original folder' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_screen_type}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Screen Type\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_screen_type}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.powerkey?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.powerkey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        {' '}\r\n                                        Power Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.powerkey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.volumekey?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.volumekey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Volume Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.volumekey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.silentkey?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.silentkey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Silent Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.silentkey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.homekey?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.homekey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Home Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.homekey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.simtray?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.simtray}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        SIM Tray\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.simtray}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.chargingjack?.toLowerCase() !==\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.chargingjack}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Charging Jack\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.chargingjack}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.fingerprint?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.fingerprint}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Finger Print\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.fingerprint}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.flashlight?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.flashlight}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Flash Light\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.flashlight}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.front_camera_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.front_camera_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Front Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.front_camera_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.assisted_camera_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.assisted_camera_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Assisted Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.assisted_camera_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.touch_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.touch_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Touch Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.touch_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.live_call_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.live_call_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Live Call Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.live_call_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.live_call_sim_2_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.live_call_sim_2_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Live Call Sim 2 Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.live_call_sim_2_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.screen_damage_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.screen_damage_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Screen Damage Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.screen_damage_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.carrier_signal_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.carrier_signal_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Carrier Signel Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.carrier_signal_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.carrier_signal_sim_2_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.carrier_signal_sim_2_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Carrier Signel Sim 2 Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.carrier_signal_sim_2_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.speaker_microphone_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.speaker_microphone_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Speaker Microphone Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.speaker_microphone_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.wi_fi_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.wi_fi_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        WI-Fi Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.wi_fi_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.battery_charging_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.battery_charging_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Battery Charging Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.battery_charging_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.microphone_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.microphone_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Microphone Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.microphone_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.home_key_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.home_key_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Home Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.home_key_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.screen_lock_key_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.screen_lock_key_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Screen Lock Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.screen_lock_key_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.volume_keys_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.volume_keys_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Volume Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.volume_keys_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.recent_menu_key_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.recent_menu_key_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Recent Menu Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.recent_menu_key_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n\r\n                            {BqcSowftwareReport?.receiver_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.receiver_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Received Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.receiver_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.speaker_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.speaker_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Speaker Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.speaker_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.speaker_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.speaker_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Speaker Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.speaker_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.vibration_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.vibration_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Vibration Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.vibration_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.camera_flash_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.camera_flash_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Camera Flash Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.camera_flash_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.auto_focus_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.auto_focus_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Auto Focus Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.auto_focus_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Blancco Data Blancco Hardware Report\r\n                                        Hardware Tests Auto Fingerprint\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.front_camera_flash_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.front_camera_flash_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Front Camera Flash Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.front_camera_flash_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.auto_rotation_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.auto_rotation_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Auto Rotation Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.auto_rotation_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.bluetooth_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.bluetooth_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Bluetooth Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.bluetooth_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.assisted_front_camera_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.assisted_front_camera_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Assisted Front Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.assisted_front_camera_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.assisted_camera_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.assisted_camera_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Assisted Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.assisted_camera_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.video_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.video_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Video Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.video_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.proximity_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.proximity_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Proximity Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.proximity_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.compass_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.compass_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Compass Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.compass_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.light_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.light_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Light Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.light_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.agps_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.agps_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Agps Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.agps_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.multi_touch_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.multi_touch_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Multi Touch Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.multi_touch_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.infrared_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.infrared_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Infrared Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.infrared_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.silent_key_test?.toLowerCase() !==\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.silent_key_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Silent Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.silent_key_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.screen_damage_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.screen_damage_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Screen Damage Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.screen_damage_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.face_id_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.face_id_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Face ID Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.face_id_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                        </>\r\n                    ) : grade == 'B' ? (\r\n                        <>\r\n                            {BqcSowftwareReport?.pq_headphonejack_3_5mm?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_headphonejack_3_5mm\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Headphone Jack 3.5 mm\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_headphonejack_3_5mm\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_screencracked?.toLowerCase() !=\r\n                            'no' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_screencracked}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Screen Cracked\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_screencracked}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_missingparts?.toLowerCase() !=\r\n                            'no' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_missingparts}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Missing Parts\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_missingparts}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_scratchchromeside > 4 ||\r\n                            BqcSowftwareReport?.pq_scratchchromeside < 3 ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_scratchchromeside\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Scratch Chrome Side\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_scratchchromeside\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_dentdevicebody > 4 ||\r\n                            BqcSowftwareReport?.pq_dentdevicebody < 3 ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_dentdevicebody}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Dentdevice Body\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_dentdevicebody}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_scratchesdisplay > 4 ||\r\n                            BqcSowftwareReport?.pq_scratchesdisplay < 3 ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_scratchesdisplay\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Scratches Display\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_scratchesdisplay\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n\r\n                            {BqcSowftwareReport?.pq_scratchesbackpanel > 4 ||\r\n                            BqcSowftwareReport?.pq_scratchesbackpanel < 3 ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_scratchesbackpanel\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Scratches Back Panel\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_scratchesbackpanel\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_crackdevicebody > 4 ||\r\n                            BqcSowftwareReport?.pq_crackdevicebody < 3 ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_crackdevicebody}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Crack Device Body\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_crackdevicebody}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_bentondevicebody?.toLowerCase() !=\r\n                            'no' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_bentondevicebody\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Benton device Body\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_bentondevicebody\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_batterybulging?.toLowerCase() !=\r\n                            'no' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_batterybulging}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Battery Bulging\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_batterybulging}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_screen_type?.toLowerCase() !==\r\n                            'original folder' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_screen_type}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Screen Type\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_screen_type}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.powerkey?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.powerkey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        {' '}\r\n                                        Power Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.powerkey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.volumekey?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.volumekey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Volume Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.volumekey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.silentkey?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.silentkey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Silent Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.silentkey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.homekey?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.homekey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Home Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.homekey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.simtray?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.simtray}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        SIM Tray\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.simtray}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.chargingjack?.toLowerCase() !==\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.chargingjack}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Charging Jack\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.chargingjack}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.fingerprint?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.fingerprint}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Finger Print\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.fingerprint}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.flashlight?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.flashlight}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Flash Light\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.flashlight}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.front_camera_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.front_camera_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Front Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.front_camera_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.assisted_camera_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.assisted_camera_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Assisted Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.assisted_camera_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.touch_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.touch_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Touch Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.touch_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.live_call_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.live_call_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Live Call Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.live_call_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.live_call_sim_2_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.live_call_sim_2_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Live Call Sim 2 Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.live_call_sim_2_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.screen_damage_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.screen_damage_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Screen Damage Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.screen_damage_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.carrier_signal_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.carrier_signal_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Carrier Signel Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.carrier_signal_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.carrier_signal_sim_2_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.carrier_signal_sim_2_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Carrier Signel Sim 2 Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.carrier_signal_sim_2_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.speaker_microphone_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.speaker_microphone_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Speaker Microphone Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.speaker_microphone_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.wi_fi_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.wi_fi_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        WI-Fi Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.wi_fi_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.battery_charging_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.battery_charging_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Battery Charging Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.battery_charging_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.microphone_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.microphone_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Microphone Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.microphone_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.home_key_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.home_key_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Home Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.home_key_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.screen_lock_key_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.screen_lock_key_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Screen Lock Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.screen_lock_key_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.volume_keys_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.volume_keys_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Volume Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.volume_keys_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.recent_menu_key_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.recent_menu_key_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Recent Menu Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.recent_menu_key_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n\r\n                            {BqcSowftwareReport?.receiver_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.receiver_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Received Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.receiver_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.speaker_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.speaker_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Speaker Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.speaker_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.speaker_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.speaker_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Speaker Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.speaker_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.vibration_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.vibration_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Vibration Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.vibration_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.camera_flash_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.camera_flash_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Camera Flash Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.camera_flash_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.auto_focus_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.auto_focus_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Auto Focus Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.auto_focus_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Blancco Data Blancco Hardware Report\r\n                                        Hardware Tests Auto Fingerprint\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.front_camera_flash_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.front_camera_flash_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Front Camera Flash Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.front_camera_flash_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.auto_rotation_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.auto_rotation_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Auto Rotation Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.auto_rotation_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.bluetooth_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.bluetooth_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Bluetooth Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.bluetooth_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.assisted_front_camera_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.assisted_front_camera_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Assisted Front Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.assisted_front_camera_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.assisted_camera_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.assisted_camera_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Assisted Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.assisted_camera_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.video_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.video_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Video Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.video_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.proximity_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.proximity_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Proximity Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.proximity_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.compass_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.compass_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Compass Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.compass_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.light_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.light_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Light Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.light_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.agps_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.agps_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Agps Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.agps_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.multi_touch_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.multi_touch_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Multi Touch Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.multi_touch_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.infrared_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.infrared_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Infrared Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.infrared_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.silent_key_test?.toLowerCase() !==\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.silent_key_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Silent Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.silent_key_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.screen_damage_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.screen_damage_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Screen Damage Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.screen_damage_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.face_id_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.face_id_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Face ID Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.face_id_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                        </>\r\n                    ) : grade == 'C' ? (\r\n                        <>\r\n                            {BqcSowftwareReport?.pq_headphonejack_3_5mm?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_headphonejack_3_5mm\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Headphone Jack 3.5 mm\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_headphonejack_3_5mm\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_screencracked?.toLowerCase() !=\r\n                            'no' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_screencracked}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Screen Cracked\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_screencracked}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_missingparts?.toLowerCase() !=\r\n                            'no' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_missingparts}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Missing Parts\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_missingparts}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_scratchchromeside > 6 ||\r\n                            BqcSowftwareReport?.pq_scratchchromeside < 5 ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_scratchchromeside\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Scratch Chrome Side\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_scratchchromeside\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_dentdevicebody > 6 ||\r\n                            BqcSowftwareReport?.pq_dentdevicebody < 5 ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_dentdevicebody}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Dentdevice Body\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_dentdevicebody}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_scratchesdisplay > 6 ||\r\n                            BqcSowftwareReport?.pq_scratchesdisplay < 5 ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_scratchesdisplay\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Scratches Display\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_scratchesdisplay\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n\r\n                            {BqcSowftwareReport?.pq_scratchesbackpanel > 6 ||\r\n                            BqcSowftwareReport?.pq_scratchesbackpanel < 5 ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_scratchesbackpanel\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Scratches Back Panel\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_scratchesbackpanel\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_crackdevicebody > 6 ||\r\n                            BqcSowftwareReport?.pq_crackdevicebody < 5 ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_crackdevicebody}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Crack Device Body\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_crackdevicebody}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_bentondevicebody?.toLowerCase() !=\r\n                            'yes' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_bentondevicebody\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Benton device Body\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_bentondevicebody\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_batterybulging?.toLowerCase() !=\r\n                            'yes' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_batterybulging}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Battery Bulging\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_batterybulging}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_screen_type?.toLowerCase() !==\r\n                            'copy folder' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_screen_type}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Screen Type\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_screen_type}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.powerkey?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.powerkey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        {' '}\r\n                                        Power Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.powerkey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.volumekey?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.volumekey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Volume Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.volumekey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.silentkey?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.silentkey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Silent Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.silentkey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.homekey?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.homekey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Home Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.homekey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.simtray?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.simtray}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        SIM Tray\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.simtray}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.chargingjack?.toLowerCase() !==\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.chargingjack}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Charging Jack\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.chargingjack}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.fingerprint?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.fingerprint}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Finger Print\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.fingerprint}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.flashlight?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.flashlight}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Flash Light\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.flashlight}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.front_camera_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.front_camera_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Front Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.front_camera_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.assisted_camera_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.assisted_camera_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Assisted Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.assisted_camera_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.touch_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow key={BqcSowftwareReport?.touch_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Touch Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.touch_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.live_call_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.live_call_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Live Call Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.live_call_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.live_call_sim_2_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.live_call_sim_2_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Live Call Sim 2 Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.live_call_sim_2_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.screen_damage_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.screen_damage_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Screen Damage Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.screen_damage_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.carrier_signal_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.carrier_signal_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Carrier Signel Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.carrier_signal_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.carrier_signal_sim_2_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.carrier_signal_sim_2_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Carrier Signel Sim 2 Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.carrier_signal_sim_2_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.speaker_microphone_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.speaker_microphone_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Speaker Microphone Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.speaker_microphone_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.wi_fi_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.wi_fi_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        WI-Fi Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.wi_fi_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.battery_charging_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.battery_charging_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Battery Charging Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.battery_charging_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.microphone_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.microphone_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Microphone Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.microphone_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.home_key_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.home_key_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Home Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.home_key_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.screen_lock_key_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.screen_lock_key_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Screen Lock Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.screen_lock_key_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.volume_keys_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.volume_keys_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Volume Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.volume_keys_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.recent_menu_key_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.recent_menu_key_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Recent Menu Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.recent_menu_key_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n\r\n                            {BqcSowftwareReport?.receiver_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.receiver_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Received Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.receiver_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.speaker_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.speaker_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Speaker Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.speaker_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.speaker_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.speaker_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Speaker Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.speaker_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.vibration_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.vibration_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Vibration Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.vibration_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.camera_flash_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.camera_flash_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Camera Flash Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.camera_flash_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.auto_focus_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.auto_focus_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Auto Focus Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.auto_focus_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Blancco Data Blancco Hardware Report\r\n                                        Hardware Tests Auto Fingerprint\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.front_camera_flash_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.front_camera_flash_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Front Camera Flash Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.front_camera_flash_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.auto_rotation_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.auto_rotation_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Auto Rotation Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.auto_rotation_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.bluetooth_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.bluetooth_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Bluetooth Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.bluetooth_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.assisted_front_camera_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.assisted_front_camera_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Assisted Front Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.assisted_front_camera_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.assisted_camera_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.assisted_camera_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Assisted Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.assisted_camera_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.video_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.video_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Video Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.video_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.proximity_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.proximity_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Proximity Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.proximity_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.compass_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.compass_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Compass Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.compass_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.light_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.light_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Light Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.light_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.agps_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.agps_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Agps Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.agps_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.multi_touch_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.multi_touch_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Multi Touch Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.multi_touch_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.infrared_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.infrared_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Infrared Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.infrared_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.silent_key_test?.toLowerCase() !==\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.silent_key_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Silent Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.silent_key_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.screen_damage_test?.toLowerCase() !=\r\n                            'successful' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.screen_damage_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Screen Damage Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.screen_damage_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.face_id_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.face_id_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Face ID Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.face_id_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                        </>\r\n                    ) : grade == 'D' ? (\r\n                        <>\r\n                            {BqcSowftwareReport?.pq_headphonejack_3_5mm?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_headphonejack_3_5mm\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Headphone Jack 3.5 mm\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_headphonejack_3_5mm\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_screencracked?.toLowerCase() !=\r\n                            'yes' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_screencracked}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Screen Cracked\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_screencracked}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_missingparts?.toLowerCase() !=\r\n                            'yes' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_missingparts}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Missing Parts\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_missingparts}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_scratchchromeside >= 7 ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_scratchchromeside\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Scratch Chrome Side\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_scratchchromeside\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_dentdevicebody >= 7 ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_dentdevicebody}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Dentdevice Body\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_dentdevicebody}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_scratchesdisplay >= 7 ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_scratchesdisplay\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Scratches Display\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_scratchesdisplay\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n\r\n                            {BqcSowftwareReport?.pq_scratchesbackpanel >= 7 ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_scratchesbackpanel\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Scratches Back Panel\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_scratchesbackpanel\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_crackdevicebody >= 7 ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_crackdevicebody}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Crack Device Body\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_crackdevicebody}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_bentondevicebody?.toLowerCase() !=\r\n                            'yes' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.pq_bentondevicebody\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Benton device Body\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.pq_bentondevicebody\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_batterybulging?.toLowerCase() !=\r\n                            'yes' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_batterybulging}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Battery Bulging\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_batterybulging}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.pq_screen_type?.toLowerCase() ==\r\n                                'copy folder' ||\r\n                            BqcSowftwareReport?.pq_screen_type?.toLowerCase() ==\r\n                                'orginel folder' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.pq_screen_type}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        PQ Screen Type\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.pq_screen_type}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.powerkey?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.powerkey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        {' '}\r\n                                        Power Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.powerkey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.volumekey?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.volumekey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Volume Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.volumekey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.silentkey?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.silentkey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Silent Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.silentkey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.homekey?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.homekey}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Home Key\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.homekey}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.simtray?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.simtray}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        SIM Tray\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.simtray}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.chargingjack?.toLowerCase() !==\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.chargingjack}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Charging Jack\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.chargingjack}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.fingerprint?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.fingerprint}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Finger Print\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.fingerprint}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.flashlight?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.flashlight}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Flash Light\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.flashlight}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.front_camera_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.front_camera_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Front Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.front_camera_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.assisted_camera_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.assisted_camera_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Assisted Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.assisted_camera_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.touch_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.touch_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Touch Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.touch_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.live_call_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.live_call_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Live Call Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.live_call_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.live_call_sim_2_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.live_call_sim_2_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Live Call Sim 2 Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.live_call_sim_2_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.screen_damage_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.screen_damage_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Screen Damage Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.screen_damage_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.carrier_signal_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.carrier_signal_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Carrier Signel Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.carrier_signal_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.carrier_signal_sim_2_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.carrier_signal_sim_2_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Carrier Signel Sim 2 Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.carrier_signal_sim_2_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.speaker_microphone_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.speaker_microphone_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Speaker Microphone Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.speaker_microphone_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.wi_fi_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.wi_fi_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        WI-Fi Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.wi_fi_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.battery_charging_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.battery_charging_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Battery Charging Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.battery_charging_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.microphone_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.microphone_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Microphone Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.microphone_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.home_key_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.home_key_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Home Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.home_key_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.screen_lock_key_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.screen_lock_key_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Screen Lock Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.screen_lock_key_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.volume_keys_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.volume_keys_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Volume Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.volume_keys_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.recent_menu_key_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.recent_menu_key_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Recent Menu Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.recent_menu_key_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n\r\n                            {BqcSowftwareReport?.receiver_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.receiver_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Received Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.receiver_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.speaker_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.speaker_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Speaker Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.speaker_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.speaker_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.speaker_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Speaker Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.speaker_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.vibration_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.vibration_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Vibration Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.vibration_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.camera_flash_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.camera_flash_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Camera Flash Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.camera_flash_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.auto_focus_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.auto_focus_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Auto Focus Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.auto_focus_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Blancco Data Blancco Hardware Report\r\n                                        Hardware Tests Auto Fingerprint\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.front_camera_flash_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.front_camera_flash_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Front Camera Flash Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.front_camera_flash_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.auto_rotation_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.auto_rotation_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Auto Rotation Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.auto_rotation_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.bluetooth_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.bluetooth_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Bluetooth Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.bluetooth_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.assisted_front_camera_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.assisted_front_camera_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Assisted Front Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.assisted_front_camera_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.assisted_camera_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={\r\n                                        BqcSowftwareReport?.assisted_camera_test\r\n                                    }\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Assisted Camera Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {\r\n                                            BqcSowftwareReport?.assisted_camera_test\r\n                                        }\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.video_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.video_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Video Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.video_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.proximity_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.proximity_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Proximity Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.proximity_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.compass_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.compass_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Compass Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.compass_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.light_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.light_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Light Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.light_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.agps_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow key={BqcSowftwareReport?.agps_test}>\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Agps Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.agps_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.multi_touch_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.multi_touch_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Multi Touch Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.multi_touch_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.infrared_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.infrared_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Infrared Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.infrared_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.silent_key_test?.toLowerCase() !==\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.silent_key_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Silent Key Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.silent_key_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.screen_damage_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.screen_damage_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Screen Damage Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.screen_damage_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                            {BqcSowftwareReport?.face_id_test?.toLowerCase() !=\r\n                            'failed' ? (\r\n                                <TableRow\r\n                                    key={BqcSowftwareReport?.face_id_test}\r\n                                >\r\n                                    <TableCell sx={{ pl: 2 }}>\r\n                                        Face ID Test\r\n                                    </TableCell>\r\n                                    <TableCell>\r\n                                        {BqcSowftwareReport?.face_id_test}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            ) : null}\r\n                        </>\r\n                    ) : null}\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BqcSowftwareReportPage\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\BqcReport.jsx",["5595","5596","5597"],"import {\r\n    Button,\r\n    Card,\r\n    Divider,\r\n    Icon,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableRow,\r\n} from '@mui/material'\r\nimport React from 'react'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\n\r\nconst FlexBox = styled(Box)(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n}))\r\n\r\nconst ContentBox = styled(FlexBox)(() => ({\r\n    flexDirection: 'column',\r\n    alignItems: 'flex-start',\r\n}))\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n    fontSize: '13px',\r\n    marginBottom: '16px',\r\n    color: theme.palette.text.primary,\r\n    '& span, svg': {\r\n        fontSize: '1.25rem',\r\n        marginRight: '16px',\r\n    },\r\n}))\r\n\r\nconst BqcSowftwareReportPage = ({ BqcSowftwareReport }) => {\r\n    return (\r\n        <Card elevation={3}>\r\n            <H4 sx={{ p: 2 }}>BQC Report</H4>\r\n            <Divider />\r\n            <Table sx={{ mb: 2 }}>\r\n                <TableBody>\r\n                    <TableRow key={BqcSowftwareReport?.uic}>\r\n                        <TableCell sx={{ pl: 2 }}>UIC</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.uic}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.tray_id}>\r\n                        <TableCell sx={{ pl: 2 }}>Tray ID</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.tray_id}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.date}>\r\n                        <TableCell sx={{ pl: 2 }}>Date</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.date}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.testing_duration}>\r\n                        <TableCell sx={{ pl: 2 }}>Testing Duration</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.testing_duration}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.erasure_technician}>\r\n                        <TableCell sx={{ pl: 2 }}>Technician</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.erasure_technician}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.final_grade}>\r\n                        <TableCell sx={{ pl: 2 }}>Final Grade</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.final_grade}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.hardware_test_summary}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Hardware Test Summary\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.hardware_test_summary}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mandatory_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Mandatory Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mandatory_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Mobile Name</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.mobile_name}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.market_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Market Name</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.market_name}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.device_color}>\r\n                        <TableCell sx={{ pl: 2 }}>Device Color</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.device_color}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.bq_batterychargerange}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Bq Battery Charge Range\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.bq_batterychargerange}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_imei}>\r\n                        <TableCell sx={{ pl: 2 }}>Mobile IMEI</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.mobile_imei}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_imei2}>\r\n                        <TableCell sx={{ pl: 2 }}>Mobile IMEI 2</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mobile_imei2}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?._ro_imei_check}>\r\n                        <TableCell sx={{ pl: 2 }}>Ro IMEI Check</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?._ro_imei_check}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.chargingjack}>\r\n                        <TableCell sx={{ pl: 2 }}>Charging Jack</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.chargingjack}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.crackedlens}>\r\n                        <TableCell sx={{ pl: 2 }}>Cracked Lens</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.crackedlens}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.fingerprint}>\r\n                        <TableCell sx={{ pl: 2 }}>Finger Print</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.fingerprint}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.flashlight}>\r\n                        <TableCell sx={{ pl: 2 }}>Flash Light</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.flashlight}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.homekey}>\r\n                        <TableCell sx={{ pl: 2 }}>Home Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.homekey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_batterybulging}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Battery Bulging</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_batterybulging}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_bentondevicebody}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Benton device Body\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_bentondevicebody}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_crackdevicebody}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Crack Device Body\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_crackdevicebody}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_dentdevicebody}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Dentdevice Body</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_dentdevicebody}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_headphonejack_3_5mm}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Headphone Jack 3.5 mm\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_headphonejack_3_5mm}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_missingparts}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Missing Parts</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_missingparts}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_scratchchromeside}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Scratch Chrome Side\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_scratchchromeside}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_scratchesbackpanel}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Scratches Back Panel\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_scratchesbackpanel}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_scratchesdisplay}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            PQ Scratches Display\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_scratchesdisplay}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_screencracked}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Screen Cracked</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_screencracked}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.pq_screen_type}>\r\n                        <TableCell sx={{ pl: 2 }}>PQ Screen Type</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.pq_screen_type}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.powerkey}>\r\n                        <TableCell sx={{ pl: 2 }}> Power Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.powerkey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.simtray}>\r\n                        <TableCell sx={{ pl: 2 }}>SIM Tray</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.simtray}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.silentkey}>\r\n                        <TableCell sx={{ pl: 2 }}>Silent Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.silentkey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.volumekey}>\r\n                        <TableCell sx={{ pl: 2 }}>Volume Key</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.volumekey}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.carrier_signal_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Carrier Signel Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.carrier_signal_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.carrier_signal_sim_2_test}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Carrier Signel Sim 2 Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.carrier_signal_sim_2_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.wi_fi_test}>\r\n                        <TableCell sx={{ pl: 2 }}>WI-Fi Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.wi_fi_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.bluetooth_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Bluetooth Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.bluetooth_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Microphone Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.speaker_microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Speaker Microphone Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.speaker_microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.front_microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Front Microphone Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.front_microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.headset_microphone_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Headset Microphone Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.headset_microphone_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.speaker_microphone_front_test}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Speaker Microphone Front Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.speaker_microphone_front_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.receiver_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Received Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.receiver_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.headset_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Headset Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.headset_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.front_camera_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Front Camera Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.front_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.video_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Video Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.video_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.auto_focus_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Auto Focus Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.auto_focus_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.camera_flash_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Camera Flash Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.camera_flash_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.front_camera_flash_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Front Camera Flash Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.front_camera_flash_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.battery_charging_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Battery Charging Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.battery_charging_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.touch_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Touch Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.touch_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.proximity_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Proximity Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.proximity_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.compass_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Compass Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.compass_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.light_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Light Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.light_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.vibration_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Vibration Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.vibration_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.home_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Home Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.home_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.volume_keys_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Volume Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.volume_keys_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.screen_lock_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Screen Lock Key Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.screen_lock_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.back_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>back Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.back_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.recent_menu_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Recent Menu Key Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.recent_menu_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.screen_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Screen Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.screen_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.live_call_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Live Call Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.live_call_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.live_call_sim_2_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Live Call Sim 2 Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.live_call_sim_2_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.screen_damage_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Screen Damage Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.screen_damage_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.assisted_front_camera_test}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Assisted Front Camera Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.assisted_front_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.fingerprint_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Fingerprint Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.fingerprint_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.multi_touch_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Multi Touch Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.multi_touch_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n\r\n                    <TableRow key={BqcSowftwareReport?.face_id_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Face ID Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.face_id_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.auto_rotation_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Auto Rotation Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.auto_rotation_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.infrared_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Infrared Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.infrared_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.fm_radio_test}>\r\n                        <TableCell sx={{ pl: 2 }}>FM Radio Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.fm_radio_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.product_version}>\r\n                        <TableCell sx={{ pl: 2 }}>Product Version</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.product_version}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.product_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Product Name</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.product_name}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={BqcSowftwareReport?.operating_system_version}\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Operating System Version\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.operating_system_version}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.system_manufacturer}>\r\n                        <TableCell sx={{ pl: 2 }}>System Manufacture</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.system_manufacturer}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.system_model}>\r\n                        <TableCell sx={{ pl: 2 }}>System Model</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.system_model}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.mobile_internal_model}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Mobile Internal Model\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.mobile_internal_model}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.system_serial}>\r\n                        <TableCell sx={{ pl: 2 }}>System Serial</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.system_serial}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.operating_system_name}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Operating System Name\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.operating_system_name}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.total_memory}>\r\n                        <TableCell sx={{ pl: 2 }}>Total Memory</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.total_memory}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.business_name}>\r\n                        <TableCell sx={{ pl: 2 }}>Business Name</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.business_name}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.business_location}>\r\n                        <TableCell sx={{ pl: 2 }}>Business Location</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.business_location}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.report_id}>\r\n                        <TableCell sx={{ pl: 2 }}>Report Id</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.report_id}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.rooted}>\r\n                        <TableCell sx={{ pl: 2 }}>Rooted</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.rooted}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.frp}>\r\n                        <TableCell sx={{ pl: 2 }}>FRP</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.frp}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.frp_status}>\r\n                        <TableCell sx={{ pl: 2 }}>FRP Status</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.frp_status}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={\r\n                            BqcSowftwareReport?.blancco_data_blancco_hardware_report_system_mdm_status\r\n                        }\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Blancco Data Blancco Hardware Report System MDM\r\n                            Status\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {\r\n                                BqcSowftwareReport?.blancco_data_blancco_hardware_report_system_mdm_status\r\n                            }\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow\r\n                        key={\r\n                            BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                        }\r\n                    >\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Blancco Data Blancco Hardware Report Hardware Tests\r\n                            Auto Fingerprint\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {\r\n                                BqcSowftwareReport?.blancco_data_blancco_hardware_report_hardware_tests_auto_fingerprint\r\n                            }\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.disk_capacity}>\r\n                        <TableCell sx={{ pl: 2 }}>Disk Capacity</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.disk_capacity}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.agps_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Agps Test</TableCell>\r\n                        <TableCell>{BqcSowftwareReport?.agps_test}</TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.assisted_camera_test}>\r\n                        <TableCell sx={{ pl: 2 }}>\r\n                            Assisted Camera Test\r\n                        </TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.assisted_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.silent_key_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Silent Key Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.silent_key_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.speaker_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Speaker Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.speaker_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?._ro_ril_miui_imei0}>\r\n                        <TableCell sx={{ pl: 2 }}>RO Ril Miui IMEI 0</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?._ro_ril_miui_imei0}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                    <TableRow key={BqcSowftwareReport?.back_camera_test}>\r\n                        <TableCell sx={{ pl: 2 }}>Back Camera Test</TableCell>\r\n                        <TableCell>\r\n                            {BqcSowftwareReport?.back_camera_test}\r\n                        </TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default BqcSowftwareReportPage\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\BqcUserReport.jsx",["5598","5599","5600"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Manage-bqc-report\\ChargingDetails.jsx",["5601","5602","5603"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Assign-to-agent\\Assign-to-audit\\user-dailog.jsx",["5604","5605"],"import React, { useState } from 'react'\r\nimport { Dialog, Button, TextField, MenuItem } from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosMisUser } from '../../../../../axios'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    handleClose,\r\n    open,\r\n    setIsAlive,\r\n    auditUsers,\r\n    isCheck,\r\n}) => {\r\n    const [auditUserName, setAuditUsername] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const handelSendRequestConfirm = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let obj = {\r\n                tray: isCheck,\r\n                user_name: auditUserName,\r\n                sort_id: 'Send for Audit',\r\n            }\r\n            let res = await axiosMisUser.post('/wht-sendTo-wharehouse', obj)\r\n            if (res.status == 200) {\r\n                handleClose()\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            } else {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Dialog fullWidth maxWidth=\"xs\" onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Select Audit User</H4>\r\n                <TextFieldCustOm\r\n                    label=\"Username\"\r\n                    fullWidth\r\n                    select\r\n                    name=\"username\"\r\n                >\r\n                    {auditUsers.map((data) => (\r\n                        <MenuItem\r\n                            key={data.user_name}\r\n                            value={data.user_name}\r\n                            onClick={(e) => {\r\n                                setAuditUsername(data.user_name)\r\n                            }}\r\n                        >\r\n                            {data.user_name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextFieldCustOm>\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading || auditUserName == ''}\r\n                        onClick={(e) => {\r\n                            handelSendRequestConfirm()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\sup-admin-components\\Ready-for-charging\\bqc-tray.jsx",["5606"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { Button, Checkbox } from '@mui/material'\r\nimport Swal from 'sweetalert2'\r\nimport { axiosSuperAdminPrexo } from '../../../../axios'\r\nimport { useNavigate } from 'react-router-dom'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [isCheck, setIsCheck] = useState([])\r\n    const [whtTrayList, setWhtTrayList] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchWht = async () => {\r\n            try {\r\n                const res = await axiosSuperAdminPrexo.post(\r\n                    '/chargeDoneFourDifferenceTray'\r\n                )\r\n                if (res.status === 200) {\r\n                    setWhtTrayList(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: error,\r\n                })\r\n            }\r\n        }\r\n        fetchWht()\r\n        return () => setIsAlive(false)\r\n    }, [isAlive])\r\n\r\n    const handleClick = (e) => {\r\n        const { id, checked } = e.target\r\n        setIsCheck([...isCheck, id])\r\n        if (!checked) {\r\n            setIsCheck(isCheck.filter((item) => item !== id))\r\n        }\r\n    }\r\n\r\n    const handelReadyForCharging = async () => {\r\n        try {\r\n            let obj = {\r\n                ischeck: isCheck,\r\n                status: 'Recharging',\r\n            }\r\n            let res = await axiosSuperAdminPrexo.post(\r\n                '/ready-for-charging',\r\n                obj\r\n            )\r\n            setIsCheck([])\r\n            if (res.status === 200) {\r\n                Swal.fire({\r\n                    position: 'top-center',\r\n                    icon: 'success',\r\n                    title: res.data.message,\r\n                    confirmButtonText: 'Ok',\r\n                }).then((result) => {\r\n                    if (result.isConfirmed) {\r\n                        setIsCheck([])\r\n                        setIsAlive((isAlive) => !isAlive)\r\n                    }\r\n                })\r\n            } else if (res.status == 202) {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handelViewItem = (trayId) => {\r\n        navigate('/sup-admin/wht/view-item/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'code',\r\n            label: 'Select',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, dataIndex) => {\r\n                    return (\r\n                        <Checkbox\r\n                            onClick={(e) => {\r\n                                handleClick(e)\r\n                            }}\r\n                            id={value}\r\n                            key={value}\r\n                            checked={isCheck.includes(value)}\r\n                        />\r\n                    )\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code', // field name in the row object\r\n            label: 'Tray Id', // column title that will be shown in table\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Category',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            label: 'Tray Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'Limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'name',\r\n            hide: true,\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: false,\r\n                sort: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[8],\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'Charging Done Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Actions',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={() => handelViewItem(value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[{ name: 'Ready For Charging', path: '/' }]}\r\n                />\r\n            </div>\r\n            <Button\r\n                sx={{ mb: 2 }}\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                disabled={isCheck.length === 0}\r\n                onClick={(e) => {\r\n                    handelReadyForCharging(e)\r\n                }}\r\n            >\r\n                Ready For Recharging\r\n            </Button>\r\n            <MUIDataTable\r\n                title={'WHT Tray'}\r\n                data={whtTrayList}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\close-tray.jsx",["5607","5608","5609","5610","5611","5612","5613"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    /**************************************************************************** */\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/charging-done-recieved/' +\r\n                        trayId +\r\n                        '/' +\r\n                        'Received From Audit'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData?.items.length < trayData?.actual_items?.length) {\r\n            alert('All Items are Verified')\r\n        } else {\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/sorting-done-put-item',\r\n                    objData\r\n                )\r\n                if (res?.status == 200) {\r\n                    setRefresh((refresh) => !refresh)\r\n                    setTextDisable(false)\r\n                    setUic('')\r\n                } else {\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const handelIssue = async (e) => {\r\n        e.preventDefault()\r\n        try {\r\n            setLoading(true)\r\n            if (description == '') {\r\n                alert('Please Add Description')\r\n                setLoading(false)\r\n            } else {\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    description: description,\r\n                    type: 'Audit Done Closed By Warehouse',\r\n                    length: trayData?.items?.length,\r\n                    limit: trayData?.limit,\r\n                }\r\n                let res = await axiosWarehouseIn.post('/auditDoneClose', obj)\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setLoading(false)\r\n                    navigate('/wareshouse/wht/return-from-audit')\r\n                } else {\r\n                    setLoading(false)\r\n                    alert(res.data.message)\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setLoading(false)\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/check-uic-sorting-done',\r\n                    obj\r\n                )\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setUic('')\r\n                    setTextDisable(false)\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <h5>Expected</h5>\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    fontSize: '22px',\r\n                                }}\r\n                            >\r\n                                {trayData?.items?.length}/{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    fontSize: '24px',\r\n                                }}\r\n                            >\r\n                                {trayData?.items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <h5>ACTUAL</h5>\r\n                <TextField\r\n                    sx={{ mt: 1 }}\r\n                    id=\"outlined-password-input\"\r\n                    type=\"text\"\r\n                    inputRef={(input) => input && input.focus()}\r\n                    name=\"doorsteps_diagnostics\"\r\n                    disabled={textDisable}\r\n                    label=\"SCAN UIC\"\r\n                    value={uic}\r\n                    onChange={(e) => {\r\n                        setUic(e.target.value)\r\n                        handelUic(e)\r\n                    }}\r\n                    inputProps={{\r\n                        style: {\r\n                            width: 'auto',\r\n                        },\r\n                    }}\r\n                />\r\n\r\n                <Box\r\n                    sx={{\r\n                        display: 'flex',\r\n                        justifyContent: 'end',\r\n                    }}\r\n                >\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Total</h5>\r\n                            <p\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    fontSize: '24px',\r\n                                }}\r\n                            >\r\n                                {trayData?.actual_items?.length}/\r\n                                {trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            m: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h5>Valid</h5>\r\n                            <p\r\n                                style={{\r\n                                    textAlign: 'center',\r\n                                    fontSize: '24px',\r\n                                }}\r\n                            >\r\n                                {trayData?.actual_items?.length}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>IMEI</TableCell>\r\n                                <TableCell>Brand Name</TableCell>\r\n                                <TableCell>Model Name</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.imei}</TableCell>\r\n                                    <TableCell>{data?.brand_name}</TableCell>\r\n                                    <TableCell>{data?.model_name}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textDisable, uic])\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>Tray ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Closed On --{' '}\r\n                        {new Date(trayData?.closed_time_bot).toLocaleString(\r\n                            'en-GB',\r\n                            {\r\n                                hour12: true,\r\n                            }\r\n                        )}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n\r\n                    <Button\r\n                        sx={{ m: 3, mb: 9 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            trayData?.items?.length !==\r\n                                trayData?.actual_items?.length || loading\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Close?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Tray Close\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\handel-view-tray-item.jsx",["5614"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport { axiosAuditAgent } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [trayItem, setTrayItem] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosAuditAgent.post(\r\n                    '/view-items/' + trayId\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayItem(response.data.data.items)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand_name',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model_name',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Audit Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.stage,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Orginel Grade',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.orgGrade,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Audit Recomendad Grade',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.grade,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Reason',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.reason,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Description',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.description,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assigned Tray', path: '/' },\r\n                        { name: 'Tray-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayItem}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Audit-request\\tray.jsx",["5615","5616","5617"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [chargingRequest, setChargingRequest] = useState([])\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        try {\r\n            const fetchData = async () => {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/request-for-assign/' + 'Send_for_audit/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setChargingRequest(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            }\r\n            fetchData()\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }, [])\r\n    const handelDetailPage = (e, trayId) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/audit-request/approve/' + trayId)\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'warehouse',\r\n            label: 'Warehouse',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    value.length + '/' + tableMeta.rowData[6],\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value) => {\r\n                    return (\r\n                        <Button\r\n                            sx={{\r\n                                m: 1,\r\n                            }}\r\n                            variant=\"contained\"\r\n                            onClick={(e) => handelDetailPage(e, value)}\r\n                            style={{ backgroundColor: 'green' }}\r\n                            component=\"span\"\r\n                        >\r\n                            Approve\r\n                        </Button>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Audit-Requests' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Requests'}\r\n                data={chargingRequest}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\other-tray-return-from-audit.jsx",["5618","5619","5620","5621","5622","5623","5624"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport AssignTrayDialogBox from './assign-tray'\r\n\r\nimport {\r\n    Button,\r\n    TextField,\r\n    Dialog,\r\n    DialogTitle,\r\n    IconButton,\r\n    DialogContent,\r\n    DialogActions,\r\n} from '@mui/material'\r\nimport PropTypes from 'prop-types'\r\nimport CloseIcon from '@mui/icons-material/Close'\r\nimport Checkbox from '@mui/material/Checkbox'\r\nimport { axiosMisUser, axiosWarehouseIn } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst BootstrapDialog = styled(Dialog)(({ theme }) => ({\r\n    '& .MuiDialogContent-root': {\r\n        padding: theme.spacing(2),\r\n    },\r\n    '& .MuiDialogActions-root': {\r\n        padding: theme.spacing(1),\r\n    },\r\n}))\r\nconst BootstrapDialogTitle = (props) => {\r\n    const { children, onClose, ...other } = props\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    )\r\n}\r\nBootstrapDialogTitle.propTypes = {\r\n    children: PropTypes.node,\r\n    onClose: PropTypes.func.isRequired,\r\n}\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [tray, setTray] = useState([])\r\n    const [open, setOpen] = React.useState(false)\r\n    const [counts, setCounts] = useState('')\r\n    const [trayId, setTrayId] = useState('')\r\n    const [auditUsers, setAuditUsers] = useState([])\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/retunrFromAudit/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setTray(res.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    const handelViewDetailTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/return-from-audit/close/' + id)\r\n    }\r\n\r\n    const handelTrayReceived = async () => {\r\n        if (counts === '') {\r\n            alert('Please confirm counts')\r\n        } else {\r\n            try {\r\n                let obj = {\r\n                    trayId: trayId,\r\n                    counts: counts,\r\n                }\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/recievedFromOtherTray',\r\n                    obj\r\n                )\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setOpen(false)\r\n                    setIsAlive((isAlive) => !isAlive)\r\n                } else {\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handelViewTray = (e, id) => {\r\n        e.preventDefault()\r\n        navigate('/wareshouse/wht/return-from-audit/tray-items/' + id)\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const handelGetAuditUser = () => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let res = await axiosMisUser.post(\r\n                        '/get-charging-users/' + 'Audit/' + location\r\n                    )\r\n                    if (res.status == 200) {\r\n                        setAuditUsers(res.data.data)\r\n                        handleDialogOpen()\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'Audit Done Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            {tableMeta.rowData[3] != 'Received From Audit' ? (\r\n                                <Button\r\n                                    sx={{\r\n                                        m: 1,\r\n                                    }}\r\n                                    variant=\"contained\"\r\n                                    style={{ backgroundColor: 'green' }}\r\n                                    onClick={(e) => {\r\n                                        setOpen(true)\r\n                                        setTrayId(value)\r\n                                    }}\r\n                                >\r\n                                    RECEIVE\r\n                                </Button>\r\n                            ) : (\r\n                                <>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: '#206CE2' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        View\r\n                                    </Button>\r\n                                    <Button\r\n                                        sx={{\r\n                                            m: 1,\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                        style={{ backgroundColor: 'red' }}\r\n                                        onClick={(e) => {\r\n                                            handelViewDetailTray(e, value)\r\n                                        }}\r\n                                    >\r\n                                        Close\r\n                                    </Button>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <BootstrapDialog\r\n                aria-labelledby=\"customized-dialog-title\"\r\n                open={open}\r\n                fullWidth\r\n                maxWidth=\"xs\"\r\n            >\r\n                <BootstrapDialogTitle\r\n                    id=\"customized-dialog-title\"\r\n                    onClose={handleClose}\r\n                >\r\n                    Please verify the count of - {trayId}\r\n                </BootstrapDialogTitle>\r\n                <DialogContent dividers>\r\n                    <TextField\r\n                        label=\"Enter Item Count\"\r\n                        variant=\"outlined\"\r\n                        onChange={(e) => {\r\n                            setCounts(e.target.value)\r\n                        }}\r\n                        inputProps={{ maxLength: 3 }}\r\n                        onKeyPress={(event) => {\r\n                            if (!/[0-9]/.test(event.key)) {\r\n                                event.preventDefault()\r\n                            }\r\n                        }}\r\n                        fullWidth\r\n                        sx={{ mt: 2 }}\r\n                    />\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        sx={{\r\n                            m: 1,\r\n                        }}\r\n                        disabled={counts === ''}\r\n                        variant=\"contained\"\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            handelTrayReceived(e)\r\n                        }}\r\n                    >\r\n                        RECEIVED\r\n                    </Button>\r\n                </DialogActions>\r\n            </BootstrapDialog>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Return-from-Audit' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <Button\r\n                variant=\"contained\"\r\n                sx={{ mb: 1 }}\r\n                style={{ backgroundColor: 'primery' }}\r\n                onClick={(e) => {\r\n                    handelGetAuditUser()\r\n                }}\r\n            >\r\n                Assign new tray\r\n            </Button>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n            {shouldOpenEditorDialog && (\r\n                <AssignTrayDialogBox\r\n                    handleClose={handleDialogClose}\r\n                    open={handleDialogOpen}\r\n                    auditUsers={auditUsers}\r\n                    setIsAlive={setIsAlive}\r\n                />\r\n            )}\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Audit-request\\request-approve.jsx",["5625","5626","5627","5628","5629","5630","5631","5632","5633","5634","5635","5636","5637","5638","5639","5640","5641","5642"],"import React, { useEffect, useState, useMemo } from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    TextField,\r\n    Paper,\r\n    Table,\r\n    TableBody,\r\n    TableCell,\r\n    TableContainer,\r\n    TableHead,\r\n    TableRow,\r\n    Grid,\r\n} from '@mui/material'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport TrayAssignDialogBox from './trayAssignMent'\r\n\r\n// import jwt from \"jsonwebtoken\"\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\nexport default function DialogBox() {\r\n    const navigate = useNavigate()\r\n    const [trayData, setTrayData] = useState([])\r\n    const { trayId } = useParams()\r\n    const [loading, setLoading] = useState(false)\r\n    const [textDisable, setTextDisable] = useState(false)\r\n    const [userAgent, setUserAgent] = useState('')\r\n    /**************************************************************************** */\r\n    const [uic, setUic] = useState('')\r\n    const [description, setDescription] = useState([])\r\n    const [refresh, setRefresh] = useState(false)\r\n    const [trayIdNotChangeAble, setTrayIdNotChangeAble] = useState({})\r\n    const [otherTrayAssign, setOtherTrayAssign] = useState({\r\n        CTA: '',\r\n        CTB: '',\r\n        CTC: '',\r\n        CTD: '',\r\n        WHT: '',\r\n    })\r\n\r\n    const [shouldOpenEditorDialog, setShouldOpenEditorDialog] = useState(false)\r\n\r\n    /*********************************************************** */\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosWarehouseIn.post(\r\n                    '/getWhtTrayItem/' + trayId + '/' + 'Send for Audit'\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayData(response.data.data)\r\n                } else {\r\n                    alert(response.data.message)\r\n                    navigate(-1)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [refresh])\r\n    useEffect(() => {\r\n        const userStatusApiCall = async () => {\r\n            try {\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/auditUserStatusChecking/' + trayData.issued_user_name + \"/\" + trayData.brand + \"/\" + trayData.model\r\n                )\r\n                let trayFetch = await axiosWarehouseIn.post(\r\n                    '/fetchAssignedTrayForAudit/' + trayData.issued_user_name + \"/\" + trayData.brand + \"/\" + trayData.model\r\n                )\r\n                if (trayFetch.status == 200) {\r\n                    setOtherTrayAssign({\r\n                        CTA: trayFetch.data.data.CTA,\r\n                        CTB: trayFetch.data.data.CTB,\r\n                        CTC: trayFetch.data.data.CTC,\r\n                        CTD: trayFetch.data.data.CTD,\r\n                        WHT: trayId,\r\n                    })\r\n                    setTrayIdNotChangeAble(trayFetch.data.data)\r\n                }\r\n                if (res.status === 200) {\r\n                    setUserAgent(res.data.data)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        if (trayData.issued_user_name !== undefined) {\r\n            userStatusApiCall()\r\n        }\r\n    }, [trayData])\r\n\r\n    const handelUic = async (e) => {\r\n        if (e.target.value.length === 11) {\r\n            try {\r\n                let obj = {\r\n                    uic: e.target.value,\r\n                    trayId: trayId,\r\n                }\r\n                setTextDisable(true)\r\n\r\n                let res = await axiosWarehouseIn.post('/check-uic', obj)\r\n                if (res?.status == 200) {\r\n                    addActualitem(res.data.data)\r\n                } else {\r\n                    setTextDisable(false)\r\n                    setUic('')\r\n                    alert(res.data.message)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n    /************************************************************************** */\r\n    const addActualitem = async (obj) => {\r\n        if (trayData.items.length < trayData?.actual_items?.length) {\r\n            alert('All Items Scanned')\r\n        } else {\r\n            try {\r\n                let objData = {\r\n                    trayId: trayId,\r\n                    item: obj,\r\n                }\r\n                setTextDisable(true)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/wht-add-actual-item',\r\n                    objData\r\n                )\r\n                if (res.status == 200) {\r\n                    setUic('')\r\n                    setTextDisable(false)\r\n                    setRefresh((refresh) => !refresh)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n    }\r\n     /************************************************************************** */\r\n    const handelIssue = async (e, sortId) => {\r\n        try {\r\n            if (userAgent !== 'User is free') {\r\n                alert(userAgent)\r\n            } else if (\r\n                otherTrayAssign.CTA == '' ||\r\n                otherTrayAssign.CTB == '' ||\r\n                otherTrayAssign.CTC == '' ||\r\n                otherTrayAssign.CTD == ''\r\n            ) {\r\n                alert('Please assign other tray')\r\n                handleDialogOpen()\r\n            } else {\r\n                if (trayData?.actual_items?.length == trayData?.items?.length) {\r\n                    setLoading(true)\r\n                    let obj = {\r\n                        trayId: Object.values(otherTrayAssign),\r\n                        description: description,\r\n                        username: trayData.issued_user_name,\r\n                    }\r\n                    let res = await axiosWarehouseIn.post(\r\n                        '/auditTrayIssueToAgent',\r\n                        obj\r\n                    )\r\n                    if (res.status == 200) {\r\n                        alert(res.data.message)\r\n                        navigate('/wareshouse/wht/audit-request')\r\n                    } else {\r\n                        alert(res.data.message)\r\n                    }\r\n                } else {\r\n                    setLoading(false)\r\n                    alert('Please Verify Actual Data')\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const handleDialogClose = () => {\r\n        setShouldOpenEditorDialog(false)\r\n    }\r\n\r\n    const handleDialogOpen = () => {\r\n        setShouldOpenEditorDialog(true)\r\n    }\r\n\r\n    const tableExpected = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '95%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h4>Expected</h4>\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h4>Total</h4>\r\n                            <p style={{ fontSize: '22px' }}>\r\n                                {\r\n                                    trayData?.items?.filter(function (item) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {trayData?.items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.items])\r\n    const tableActual = useMemo(() => {\r\n        return (\r\n            <Paper sx={{ width: '98%', overflow: 'hidden', m: 1 }}>\r\n                <Box sx={{}}>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'left',\r\n                            ml: 2,\r\n                        }}\r\n                    >\r\n                        <h4>ACTUAL</h4>\r\n                        <TextField\r\n                            sx={{ mt: 1 }}\r\n                            id=\"outlined-password-input\"\r\n                            type=\"text\"\r\n                            disabled={textDisable}\r\n                            name=\"doorsteps_diagnostics\"\r\n                            inputRef={(input) => input && input.focus()}\r\n                            label=\"SCAN UIC\"\r\n                            value={uic}\r\n                            onChange={(e) => {\r\n                                setUic(e.target.value)\r\n                                handelUic(e)\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    width: 'auto',\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Box>\r\n                    <Box\r\n                        sx={{\r\n                            float: 'right',\r\n                            mr: 2,\r\n                        }}\r\n                    >\r\n                        <Box sx={{}}>\r\n                            <h4>Total</h4>\r\n                            <p style={{ fontSize: '24px' }}>\r\n                                {\r\n                                    trayData.actual_items?.filter(function (\r\n                                        item\r\n                                    ) {\r\n                                        return item.status != 'Duplicate'\r\n                                    }).length\r\n                                }\r\n                                /{trayData?.limit}\r\n                            </p>\r\n                        </Box>\r\n                    </Box>\r\n                </Box>\r\n                <TableContainer>\r\n                    <Table\r\n                        style={{ width: '100%' }}\r\n                        id=\"example\"\r\n                        stickyHeader\r\n                        aria-label=\"sticky table\"\r\n                    >\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell>S.NO</TableCell>\r\n                                <TableCell>UIC</TableCell>\r\n                                <TableCell>MUIC</TableCell>\r\n                                <TableCell>BOT Tray</TableCell>\r\n                                <TableCell>BOT Agent</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n\r\n                        <TableBody>\r\n                            {trayData?.actual_items?.map((data, index) => (\r\n                                <TableRow hover role=\"checkbox\" tabIndex={-1}>\r\n                                    <TableCell>{index + 1}</TableCell>\r\n                                    <TableCell>{data?.uic}</TableCell>\r\n                                    <TableCell>{data?.muic}</TableCell>\r\n                                    <TableCell>{data?.tray_id}</TableCell>\r\n                                    <TableCell>{data?.bot_agent}</TableCell>\r\n                                </TableRow>\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </Paper>\r\n        )\r\n    }, [trayData?.actual_items, textDisable, uic])\r\n\r\n\r\n    return (\r\n        <>\r\n            <Box\r\n                sx={{\r\n                    mt: 1,\r\n                    height: 70,\r\n                    borderRadius: 1,\r\n                }}\r\n            >\r\n                <Box\r\n                    sx={{\r\n                        float: 'left',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginLeft: '13px' }}>TRAY ID - {trayId}</h4>\r\n                    <h4 style={{ marginLeft: '13px' }}>\r\n                        AGENT NAME - {trayData?.issued_user_name}\r\n                    </h4>\r\n                    <Button\r\n                        sx={{ m: 2 }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={() => handleDialogOpen()}\r\n                    >\r\n                        Assign Other Tray\r\n                    </Button>\r\n                </Box>\r\n                <Box\r\n                    sx={{\r\n                        float: 'right',\r\n                    }}\r\n                >\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Brand -- {trayData?.brand}\r\n                    </h4>\r\n                    <h4 style={{ marginRight: '13px' }}>\r\n                        Model -- {trayData?.model}\r\n                    </h4>\r\n                </Box>\r\n                {shouldOpenEditorDialog && (\r\n                    <TrayAssignDialogBox\r\n                        handleClose={handleDialogClose}\r\n                        open={handleDialogOpen}\r\n                        setOtherTrayAssign={setOtherTrayAssign}\r\n                        otherTrayAssign={otherTrayAssign}\r\n                        trayIdNotChangeAble={trayIdNotChangeAble}\r\n                        brand={trayData?.brand}\r\n                        model={trayData?.model}\r\n                    />\r\n                )}\r\n            </Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={6}>\r\n                    {tableExpected}\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                    {tableActual}\r\n                </Grid>\r\n            </Grid>\r\n            <div style={{ float: 'right' }}>\r\n                <Box sx={{ float: 'right' }}>\r\n                    <textarea\r\n                        onChange={(e) => {\r\n                            setDescription(e.target.value)\r\n                        }}\r\n                        style={{ width: '300px', height: '60px' }}\r\n                        placeholder=\"Description\"\r\n                    ></textarea>\r\n                    <Button\r\n                        sx={{ m: 3, mb: 7 }}\r\n                        variant=\"contained\"\r\n                        disabled={\r\n                            loading == true || description == '' ? true : false\r\n                        }\r\n                        style={{ backgroundColor: 'green' }}\r\n                        onClick={(e) => {\r\n                            if (window.confirm('You Want to Issue?')) {\r\n                                handelIssue(e)\r\n                            }\r\n                        }}\r\n                    >\r\n                        Issue To Agent\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\wht-tray-release.jsx",["5643"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport jwt_decode from 'jwt-decode'\r\nimport { Button } from '@mui/material'\r\n\r\nimport { axiosWarehouseIn } from '../../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\n\r\nconst SimpleMuiTable = () => {\r\n    const [isAlive, setIsAlive] = useState(true)\r\n    const [tray, setTray] = useState([])\r\n\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let admin = localStorage.getItem('prexo-authentication')\r\n                if (admin) {\r\n                    let { location } = jwt_decode(admin)\r\n                    let response = await axiosWarehouseIn.post(\r\n                        '/tray-for-release/' +\r\n                            location +\r\n                            '/' +\r\n                            'Audit Done' +\r\n                            '/' +\r\n                            'WHT'\r\n                    )\r\n                    if (response.status === 200) {\r\n                        setTray(response.data.data)\r\n                    }\r\n                } else {\r\n                    navigate('/')\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [isAlive])\r\n\r\n    const handelClose = async (e, id) => {\r\n        e.preventDefault()\r\n        try {\r\n            let res = await axiosWarehouseIn.post('/wht-relase/' + id)\r\n            if (res.status === 200) {\r\n                alert(res.data.message)\r\n                setIsAlive((isAlive) => !isAlive)\r\n            } else {\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Tray Id',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'type_taxanomy',\r\n            label: 'Tray Type',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'sort_id',\r\n            label: 'Status',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'issued_user_name',\r\n            label: 'Agent Name',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'limit',\r\n            label: 'limit',\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'items',\r\n            label: 'Quantity',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) =>\r\n                    0 + '/' + tableMeta.rowData[7],\r\n            },\r\n        },\r\n        {\r\n            name: 'closed_time_bot',\r\n            label: 'Audit Done Date',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value) =>\r\n                    new Date(value).toLocaleString('en-GB', {\r\n                        hour12: true,\r\n                    }),\r\n            },\r\n        },\r\n        {\r\n            name: 'code',\r\n            label: 'Action',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <>\r\n                            <Button\r\n                                sx={{\r\n                                    m: 1,\r\n                                }}\r\n                                variant=\"contained\"\r\n                                style={{ backgroundColor: 'green' }}\r\n                                onClick={(e) => {\r\n                                    handelClose(e, value)\r\n                                }}\r\n                            >\r\n                                Release\r\n                            </Button>\r\n                        </>\r\n                    )\r\n                },\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'WHT', path: '/' },\r\n                        { name: 'Return-from-Audit' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={tray}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download:false,\r\n                    print:false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Return-from-audit\\assign-tray.jsx",["5644","5645","5646","5647","5648","5649","5650"],"import React, { useState, useEffect } from 'react'\r\nimport {\r\n    Dialog,\r\n    Button,\r\n    TextField,\r\n    MenuItem,\r\n    InputAdornment,\r\n    IconButton,\r\n} from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosMisUser, axiosWarehouseIn } from '../../../../../axios'\r\nimport SearchIcon from '@mui/icons-material/Search'\r\nimport jwt_decode from 'jwt-decode'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({ handleClose, open, setIsAlive, auditUsers }) => {\r\n    const [auditUserName, setAuditUsername] = useState('')\r\n    const [loading, setLoading] = useState(false)\r\n    const [state, setState] = useState({})\r\n    const [err, setErr] = useState('')\r\n    const [assignButDIs, setAssignButDis] = useState(true)\r\n    const [trayStatus, setTrayStatus] = useState('')\r\n    const handleChange = ({ target: { name, value } }) => {\r\n        setState({\r\n            ...state,\r\n            [name]: value,\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        const user = localStorage.getItem('prexo-authentication')\r\n        if (user) {\r\n            const { location } = jwt_decode(user)\r\n            setState({\r\n                ...state,\r\n                location: location,\r\n            })\r\n        }\r\n    }, [])\r\n\r\n    const handelSendRequestConfirm = async () => {\r\n        try {\r\n            setLoading(true)\r\n            let res = await axiosWarehouseIn.post('/oneTrayAssigToAudit', state)\r\n            if (res.status == 200) {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n                setIsAlive((isAlive) => !isAlive)\r\n                handleClose()\r\n            } else {\r\n                setLoading(false)\r\n                alert(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    const handelTrayId = async () => {\r\n        try {\r\n            let res = await axiosWarehouseIn.post(\r\n                '/auditUserTrayForAssign',\r\n                state\r\n            )\r\n            if (res.status === 200) {\r\n                console.log(res.data)\r\n                setTrayStatus(res.data.trayStatus)\r\n                setErr('')\r\n                setAssignButDis(false)\r\n            } else {\r\n                console.log(res)\r\n                setTrayStatus(res.data.trayStatus)\r\n                setErr(res.data.message)\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n    return (\r\n        <Dialog fullWidth maxWidth=\"xs\" onClose={handleClose} open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Assign Tray</H4>\r\n                <TextFieldCustOm\r\n                    label=\"Username\"\r\n                    fullWidth\r\n                    select\r\n                    name=\"username\"\r\n                    onChange={handleChange}\r\n                >\r\n                    {auditUsers.map((data) => (\r\n                        <MenuItem\r\n                            key={data.user_name}\r\n                            value={data.user_name}\r\n                            onClick={(e) => {\r\n                                setAuditUsername(data.user_name)\r\n                            }}\r\n                        >\r\n                            {data.user_name}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextFieldCustOm>\r\n                <TextFieldCustOm\r\n                    label=\"Tray Type\"\r\n                    fullWidth\r\n                    select\r\n                    name=\"tray_type\"\r\n                    onChange={handleChange}\r\n                >\r\n                    <MenuItem value={'CTA'}>CTA</MenuItem>\r\n                    <MenuItem value={'CTB'}>CTB</MenuItem>\r\n                    <MenuItem value={'CTC'}>CTC</MenuItem>\r\n                    <MenuItem value={'CTD'}>CTD</MenuItem>\r\n                </TextFieldCustOm>\r\n                <TextFieldCustOm\r\n                    label=\"Tray Id\"\r\n                    onChange={handleChange}\r\n                    type=\"text\"\r\n                    name=\"tray_id\"\r\n                    error={err !== ''}\r\n                    helperText={err}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment>\r\n                                <IconButton\r\n                                    disabled={\r\n                                        state?.username == '' ||\r\n                                        state?.tray_type == '' ||\r\n                                        state?.tray_id == ''\r\n                                    }\r\n                                    onClick={(e) => {\r\n                                        handelTrayId()\r\n                                    }}\r\n                                >\r\n                                    <SearchIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                />\r\n                <TextFieldCustOm\r\n                    label=\"Tray Status\"\r\n                    disabled\r\n                    type=\"text\"\r\n                    value={trayStatus}\r\n                    name=\"tray_status\"\r\n                />\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        disabled={loading || assignButDIs}\r\n                        onClick={(e) => {\r\n                            handelSendRequestConfirm()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Assign\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Warehouse-components\\Wht\\Audit-request\\trayAssignMent.jsx",["5651","5652","5653","5654","5655","5656"],"import React, { useState } from 'react'\r\nimport {\r\n    Dialog,\r\n    Button,\r\n    TextField,\r\n    InputAdornment,\r\n    IconButton,\r\n} from '@mui/material'\r\nimport { Box, styled } from '@mui/system'\r\nimport { H4 } from 'app/components/Typography'\r\nimport { axiosMisUser, axiosWarehouseIn } from '../../../../../axios'\r\nimport SearchIcon from '@mui/icons-material/Search'\r\nimport jwt_decode from 'jwt-decode'\r\n\r\nconst TextFieldCustOm = styled(TextField)(() => ({\r\n    width: '100%',\r\n    marginBottom: '16px',\r\n}))\r\n\r\nconst FormHandlerBox = styled('div')(() => ({\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n}))\r\n\r\nconst MemberEditorDialog = ({\r\n    handleClose,\r\n    open,\r\n    setOtherTrayAssign,\r\n    otherTrayAssign,\r\n    trayIdNotChangeAble,\r\n    brand,\r\n    model\r\n}) => {\r\n    const [err, setErr] = useState({\r\n        CTA: '',\r\n        CTB: '',\r\n        CTC: '',\r\n        CTD: '',\r\n    })\r\n    const [trayId, setTrayId] = useState({\r\n        cta: '',\r\n        ctb: '',\r\n        ctc: '',\r\n        ctd: '',\r\n    })\r\n\r\n    const handelTrayId = async (trayId, trayType) => {\r\n        try {\r\n            const user = localStorage.getItem('prexo-authentication')\r\n            if (user) {\r\n                const { location } = jwt_decode(user)\r\n                let res = await axiosWarehouseIn.post(\r\n                    '/trayIdCheckAuditApprovePage/' +\r\n                        trayId +\r\n                        '/' +\r\n                        trayType +\r\n                        '/' +\r\n                        location  +\r\n                        \"/\" + brand +  \"/\" + model\r\n                )\r\n                if (res.status == 200) {\r\n                    alert(res.data.message)\r\n                    setOtherTrayAssign((otherTrayAssign) => ({\r\n                        ...otherTrayAssign,\r\n                        [trayType]: res.data.trayId,\r\n                    }))\r\n                    setErr((err) => ({ ...err, [trayType]: '' }))\r\n                } else {\r\n                    setErr((err) => ({ ...err, [trayType]: res.data.message }))\r\n                }\r\n            }\r\n        } catch (error) {\r\n            alert(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog fullWidth maxWidth=\"xs\" open={open}>\r\n            <Box p={3}>\r\n                <H4 sx={{ mb: '20px' }}>Assign Tray</H4>\r\n\r\n                <TextFieldCustOm\r\n                    onChange={(e) => {\r\n                        setTrayId((trayId) => ({\r\n                            ...trayId,\r\n                            cta: e.target.value,\r\n                        }))\r\n                    }}\r\n                    disabled={trayIdNotChangeAble.CTA !== ''}\r\n                    value={trayId.cta || otherTrayAssign.CTA}\r\n                    error={err.CTA !== ''}\r\n                    helperText={err.CTA}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment>\r\n                                <IconButton\r\n                                    disabled={trayId.cta == ''}\r\n                                    onClick={(e) => {\r\n                                        handelTrayId(trayId.cta, 'CTA')\r\n                                    }}\r\n                                >\r\n                                    <SearchIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                    label=\"CTA Tray\"\r\n                    fullWidth\r\n                    name=\"cta\"\r\n                />\r\n                <TextFieldCustOm\r\n                    onChange={(e) => {\r\n                        setTrayId((trayId) => ({\r\n                            ...trayId,\r\n                            ctb: e.target.value,\r\n                        }))\r\n                    }}\r\n                    disabled={trayIdNotChangeAble.CTB !== ''}\r\n                    value={trayId.ctb || otherTrayAssign.CTB}\r\n                    error={err.CTB !== ''}\r\n                    helperText={err.CTB}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment>\r\n                                <IconButton\r\n                                    disabled={trayId.ctb == ''}\r\n                                    onClick={(e) => {\r\n                                        handelTrayId(trayId.ctb, 'CTB')\r\n                                    }}\r\n                                >\r\n                                    <SearchIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                    label=\"CTB Tray\"\r\n                    fullWidth\r\n                    name=\"ctb\"\r\n                />\r\n                <TextFieldCustOm\r\n                    onChange={(e) => {\r\n                        setTrayId((trayId) => ({\r\n                            ...trayId,\r\n                            ctc: e.target.value,\r\n                        }))\r\n                    }}\r\n                    disabled={trayIdNotChangeAble.CTC !== ''}\r\n                    value={trayId.ctc || otherTrayAssign.CTC}\r\n                    error={err.CTC !== ''}\r\n                    helperText={err.CTC}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment>\r\n                                <IconButton\r\n                                    disabled={trayId.ctc == ''}\r\n                                    onClick={(e) => {\r\n                                        handelTrayId(trayId.ctc, 'CTC')\r\n                                    }}\r\n                                >\r\n                                    <SearchIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                    label=\"CTC Tray\"\r\n                    fullWidth\r\n                    name=\"ctc\"\r\n                />\r\n                <TextFieldCustOm\r\n                    onChange={(e) => {\r\n                        setTrayId((trayId) => ({\r\n                            ...trayId,\r\n                            ctd: e.target.value,\r\n                        }))\r\n                    }}\r\n                    disabled={trayIdNotChangeAble.CTD !== ''}\r\n                    value={trayId.ctd || otherTrayAssign.CTD}\r\n                    error={err.CTD !== ''}\r\n                    helperText={err.CTD}\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment>\r\n                                <IconButton\r\n                                    disabled={trayId.ctd == ''}\r\n                                    onClick={(e) => {\r\n                                        handelTrayId(trayId.ctd, 'CTD')\r\n                                    }}\r\n                                >\r\n                                    <SearchIcon />\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                        ),\r\n                    }}\r\n                    label=\"CTD Tray\"\r\n                    fullWidth\r\n                    name=\"ctd\"\r\n                />\r\n                <FormHandlerBox>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        onClick={(e) => {\r\n                            handleClose()\r\n                        }}\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Confirm\r\n                    </Button>\r\n                    <Button\r\n                        variant=\"outlined\"\r\n                        color=\"secondary\"\r\n                        onClick={() => handleClose()}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                </FormHandlerBox>\r\n            </Box>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default MemberEditorDialog\r\n","C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Mis-components\\Imei-search\\search.jsx",["5657","5658","5659","5660","5661","5662","5663","5664","5665","5666","5667","5668","5669","5670","5671","5672","5673","5674","5675","5676","5677","5678","5679","5680","5681","5682","5683","5684","5685","5686","5687"],"C:\\DEALSDRAY\\PREXO-WEB-APP-CODE\\prexo-v5-uiux\\matx-pro-3.3.0\\src\\app\\components\\Audit-components\\Audit-request\\view-tray.jsx",["5688"],"import MUIDataTable from 'mui-datatables'\r\nimport { Breadcrumb } from 'app/components'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { styled } from '@mui/system'\r\nimport { useParams } from 'react-router-dom'\r\nimport { axiosAuditAgent } from '../../../../axios'\r\n\r\nconst Container = styled('div')(({ theme }) => ({\r\n    margin: '30px',\r\n    [theme.breakpoints.down('sm')]: {\r\n        margin: '16px',\r\n    },\r\n    '& .breadcrumb': {\r\n        marginBottom: '30px',\r\n        [theme.breakpoints.down('sm')]: {\r\n            marginBottom: '16px',\r\n        },\r\n    },\r\n}))\r\nconst SimpleMuiTable = () => {\r\n    const [trayItem, setTrayItem] = useState([])\r\n    const { trayId } = useParams()\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                let response = await axiosAuditAgent.post(\r\n                    '/view-items/' + trayId\r\n                )\r\n                if (response.status === 200) {\r\n                    setTrayItem(response.data.data.items)\r\n                }\r\n            } catch (error) {\r\n                alert(error)\r\n            }\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const columns = [\r\n        {\r\n            name: 'index',\r\n            label: 'Record No',\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (rowIndex, dataIndex) =>\r\n                    dataIndex.rowIndex + 1,\r\n            },\r\n        },\r\n        {\r\n            name: 'uic',\r\n            label: 'UIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'muic',\r\n            label: 'MUIC',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n\r\n        {\r\n            name: 'brand_name',\r\n            label: 'Brand',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'model_name',\r\n            label: 'Model',\r\n            options: {\r\n                filter: true,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Audit Status',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.stage,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Orginel Grade',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.orgGrade,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Audit Recomendad Grade',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.grade,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Reason',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.reason,\r\n            },\r\n        },\r\n        {\r\n            name: 'audit_report',\r\n            label: 'Description',\r\n            options: {\r\n                filter: true,\r\n                customBodyRender: (value, dataIndex) => value?.description,\r\n            },\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <Container>\r\n            <div className=\"breadcrumb\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'Assigned Tray', path: '/' },\r\n                        { name: 'Tray-Item' },\r\n                    ]}\r\n                />\r\n            </div>\r\n\r\n            <MUIDataTable\r\n                title={'Tray'}\r\n                data={trayItem}\r\n                columns={columns}\r\n                options={{\r\n                    filterType: 'textField',\r\n                    responsive: 'simple',\r\n                    download: false,\r\n                    print: false,\r\n                    selectableRows: 'none', // set checkbox for each row\r\n                    // search: false, // set search option\r\n                    // filter: false, // set data filter option\r\n                    // download: false, // set download option\r\n                    // print: false, // set print option\r\n                    // pagination: true, //set pagination option\r\n                    // viewColumns: false, // set column option\r\n                    customSort: (data, colIndex, order) => {\r\n                        return data.sort((a, b) => {\r\n                            if (colIndex === 1) {\r\n                                return (\r\n                                    (a.data[colIndex].price <\r\n                                    b.data[colIndex].price\r\n                                        ? -1\r\n                                        : 1) * (order === 'desc' ? 1 : -1)\r\n                                )\r\n                            }\r\n                            return (\r\n                                (a.data[colIndex] < b.data[colIndex] ? -1 : 1) *\r\n                                (order === 'desc' ? 1 : -1)\r\n                            )\r\n                        })\r\n                    },\r\n                    elevation: 0,\r\n                    rowsPerPageOptions: [10, 20, 40, 80, 100],\r\n                }}\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default SimpleMuiTable\r\n",{"ruleId":"5689","replacedBy":"5690"},{"ruleId":"5691","replacedBy":"5692"},{"ruleId":"5693","severity":1,"message":"5694","line":22,"column":8,"nodeType":"5695","messageId":"5696","endLine":22,"endColumn":21},{"ruleId":"5693","severity":1,"message":"5697","line":12,"column":21,"nodeType":"5695","messageId":"5696","endLine":12,"endColumn":25},{"ruleId":"5693","severity":1,"message":"5698","line":33,"column":7,"nodeType":"5695","messageId":"5696","endLine":33,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5699","line":75,"column":13,"nodeType":"5695","messageId":"5696","endLine":75,"endColumn":43},{"ruleId":"5693","severity":1,"message":"5700","line":75,"column":45,"nodeType":"5695","messageId":"5696","endLine":75,"endColumn":61},{"ruleId":"5693","severity":1,"message":"5701","line":83,"column":11,"nodeType":"5695","messageId":"5696","endLine":83,"endColumn":31},{"ruleId":"5693","severity":1,"message":"5702","line":114,"column":13,"nodeType":"5695","messageId":"5696","endLine":114,"endColumn":39},{"ruleId":"5693","severity":1,"message":"5700","line":114,"column":41,"nodeType":"5695","messageId":"5696","endLine":114,"endColumn":57},{"ruleId":"5689","replacedBy":"5703"},{"ruleId":"5691","replacedBy":"5704"},{"ruleId":"5705","severity":1,"message":"5706","line":48,"column":35,"nodeType":"5707","messageId":"5708","endLine":48,"endColumn":37},{"ruleId":"5705","severity":1,"message":"5706","line":48,"column":61,"nodeType":"5707","messageId":"5708","endLine":48,"endColumn":63},{"ruleId":"5705","severity":1,"message":"5706","line":56,"column":51,"nodeType":"5707","messageId":"5708","endLine":56,"endColumn":53},{"ruleId":"5709","severity":1,"message":"5710","line":85,"column":8,"nodeType":"5711","endLine":85,"endColumn":34,"suggestions":"5712"},{"ruleId":"5693","severity":1,"message":"5713","line":3,"column":8,"nodeType":"5695","messageId":"5696","endLine":3,"endColumn":30},{"ruleId":"5689","replacedBy":"5714"},{"ruleId":"5691","replacedBy":"5715"},{"ruleId":"5693","severity":1,"message":"5697","line":3,"column":14,"nodeType":"5695","messageId":"5696","endLine":3,"endColumn":18},{"ruleId":"5693","severity":1,"message":"5716","line":21,"column":13,"nodeType":"5695","messageId":"5696","endLine":21,"endColumn":20},{"ruleId":"5693","severity":1,"message":"5717","line":1,"column":10,"nodeType":"5695","messageId":"5696","endLine":1,"endColumn":26},{"ruleId":"5693","severity":1,"message":"5718","line":2,"column":27,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":36},{"ruleId":"5693","severity":1,"message":"5697","line":3,"column":14,"nodeType":"5695","messageId":"5696","endLine":3,"endColumn":18},{"ruleId":"5693","severity":1,"message":"5716","line":21,"column":13,"nodeType":"5695","messageId":"5696","endLine":21,"endColumn":20},{"ruleId":"5693","severity":1,"message":"5697","line":3,"column":14,"nodeType":"5695","messageId":"5696","endLine":3,"endColumn":18},{"ruleId":"5693","severity":1,"message":"5716","line":21,"column":13,"nodeType":"5695","messageId":"5696","endLine":21,"endColumn":20},{"ruleId":"5693","severity":1,"message":"5717","line":1,"column":10,"nodeType":"5695","messageId":"5696","endLine":1,"endColumn":26},{"ruleId":"5693","severity":1,"message":"5718","line":2,"column":27,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":36},{"ruleId":"5693","severity":1,"message":"5717","line":1,"column":10,"nodeType":"5695","messageId":"5696","endLine":1,"endColumn":26},{"ruleId":"5693","severity":1,"message":"5718","line":2,"column":27,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":36},{"ruleId":"5693","severity":1,"message":"5717","line":1,"column":10,"nodeType":"5695","messageId":"5696","endLine":1,"endColumn":26},{"ruleId":"5693","severity":1,"message":"5718","line":2,"column":27,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":36},{"ruleId":"5693","severity":1,"message":"5717","line":1,"column":10,"nodeType":"5695","messageId":"5696","endLine":1,"endColumn":26},{"ruleId":"5693","severity":1,"message":"5718","line":2,"column":27,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":36},{"ruleId":"5693","severity":1,"message":"5717","line":1,"column":10,"nodeType":"5695","messageId":"5696","endLine":1,"endColumn":26},{"ruleId":"5693","severity":1,"message":"5718","line":2,"column":27,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":36},{"ruleId":"5693","severity":1,"message":"5717","line":1,"column":10,"nodeType":"5695","messageId":"5696","endLine":1,"endColumn":26},{"ruleId":"5693","severity":1,"message":"5718","line":2,"column":27,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":36},{"ruleId":"5693","severity":1,"message":"5719","line":24,"column":12,"nodeType":"5695","messageId":"5696","endLine":24,"endColumn":34},{"ruleId":"5693","severity":1,"message":"5720","line":33,"column":11,"nodeType":"5695","messageId":"5696","endLine":33,"endColumn":28},{"ruleId":"5705","severity":1,"message":"5706","line":19,"column":32,"nodeType":"5707","messageId":"5708","endLine":19,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":59,"column":33,"nodeType":"5707","messageId":"5708","endLine":59,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":82,"column":41,"nodeType":"5707","messageId":"5708","endLine":82,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":77,"column":36,"nodeType":"5707","messageId":"5708","endLine":77,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":81,"column":45,"nodeType":"5707","messageId":"5708","endLine":81,"endColumn":47},{"ruleId":"5705","severity":1,"message":"5706","line":122,"column":33,"nodeType":"5707","messageId":"5708","endLine":122,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":59,"column":33,"nodeType":"5707","messageId":"5708","endLine":59,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":86,"column":41,"nodeType":"5707","messageId":"5708","endLine":86,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":63,"column":33,"nodeType":"5707","messageId":"5708","endLine":63,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":92,"column":41,"nodeType":"5707","messageId":"5708","endLine":92,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":122,"column":41,"nodeType":"5707","messageId":"5708","endLine":122,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":232,"column":31,"nodeType":"5707","messageId":"5708","endLine":232,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5706","line":262,"column":36,"nodeType":"5707","messageId":"5708","endLine":262,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":42,"column":39,"nodeType":"5707","messageId":"5708","endLine":42,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":63,"column":19,"nodeType":"5707","messageId":"5708","endLine":63,"endColumn":21},{"ruleId":"5705","severity":1,"message":"5721","line":64,"column":28,"nodeType":"5707","messageId":"5708","endLine":64,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":77,"column":33,"nodeType":"5707","messageId":"5708","endLine":77,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":111,"column":36,"nodeType":"5707","messageId":"5708","endLine":111,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":115,"column":45,"nodeType":"5707","messageId":"5708","endLine":115,"endColumn":47},{"ruleId":"5705","severity":1,"message":"5706","line":61,"column":40,"nodeType":"5707","messageId":"5708","endLine":61,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":82,"column":28,"nodeType":"5707","messageId":"5708","endLine":82,"endColumn":30},{"ruleId":"5722","severity":1,"message":"5723","line":191,"column":25,"nodeType":"5724","endLine":201,"endColumn":27},{"ruleId":"5705","severity":1,"message":"5706","line":195,"column":39,"nodeType":"5707","messageId":"5708","endLine":195,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":78,"column":36,"nodeType":"5707","messageId":"5708","endLine":78,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":82,"column":45,"nodeType":"5707","messageId":"5708","endLine":82,"endColumn":47},{"ruleId":"5705","severity":1,"message":"5706","line":111,"column":33,"nodeType":"5707","messageId":"5708","endLine":111,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":79,"column":35,"nodeType":"5707","messageId":"5708","endLine":79,"endColumn":37},{"ruleId":"5709","severity":1,"message":"5725","line":36,"column":8,"nodeType":"5711","endLine":36,"endColumn":10,"suggestions":"5726"},{"ruleId":"5705","severity":1,"message":"5706","line":90,"column":33,"nodeType":"5707","messageId":"5708","endLine":90,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":126,"column":33,"nodeType":"5707","messageId":"5708","endLine":126,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":41,"column":37,"nodeType":"5707","messageId":"5708","endLine":41,"endColumn":39},{"ruleId":"5709","severity":1,"message":"5727","line":60,"column":8,"nodeType":"5711","endLine":60,"endColumn":10,"suggestions":"5728"},{"ruleId":"5705","severity":1,"message":"5706","line":123,"column":28,"nodeType":"5707","messageId":"5708","endLine":123,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":126,"column":37,"nodeType":"5707","messageId":"5708","endLine":126,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":173,"column":33,"nodeType":"5707","messageId":"5708","endLine":173,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":38,"column":37,"nodeType":"5707","messageId":"5708","endLine":38,"endColumn":39},{"ruleId":"5709","severity":1,"message":"5725","line":55,"column":8,"nodeType":"5711","endLine":55,"endColumn":10,"suggestions":"5729"},{"ruleId":"5705","severity":1,"message":"5706","line":59,"column":21,"nodeType":"5707","messageId":"5708","endLine":59,"endColumn":23},{"ruleId":"5705","severity":1,"message":"5706","line":63,"column":32,"nodeType":"5707","messageId":"5708","endLine":63,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":66,"column":28,"nodeType":"5707","messageId":"5708","endLine":66,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":70,"column":32,"nodeType":"5707","messageId":"5708","endLine":70,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":81,"column":33,"nodeType":"5707","messageId":"5708","endLine":81,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":145,"column":33,"nodeType":"5707","messageId":"5708","endLine":145,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":185,"column":33,"nodeType":"5707","messageId":"5708","endLine":185,"endColumn":35},{"ruleId":"5693","severity":1,"message":"5730","line":2,"column":26,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":30},{"ruleId":"5709","severity":1,"message":"5725","line":37,"column":8,"nodeType":"5711","endLine":37,"endColumn":10,"suggestions":"5731"},{"ruleId":"5705","severity":1,"message":"5706","line":63,"column":33,"nodeType":"5707","messageId":"5708","endLine":63,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":99,"column":33,"nodeType":"5707","messageId":"5708","endLine":99,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":36,"column":32,"nodeType":"5707","messageId":"5708","endLine":36,"endColumn":34},{"ruleId":"5709","severity":1,"message":"5725","line":48,"column":8,"nodeType":"5711","endLine":48,"endColumn":10,"suggestions":"5732"},{"ruleId":"5705","severity":1,"message":"5706","line":104,"column":33,"nodeType":"5707","messageId":"5708","endLine":104,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":136,"column":33,"nodeType":"5707","messageId":"5708","endLine":136,"endColumn":35},{"ruleId":"5709","severity":1,"message":"5725","line":58,"column":8,"nodeType":"5711","endLine":58,"endColumn":10,"suggestions":"5733"},{"ruleId":"5734","severity":1,"message":"5735","line":100,"column":18,"nodeType":"5695","messageId":"5736","endLine":100,"endColumn":19},{"ruleId":"5705","severity":1,"message":"5706","line":117,"column":33,"nodeType":"5707","messageId":"5708","endLine":117,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":156,"column":33,"nodeType":"5707","messageId":"5708","endLine":156,"endColumn":35},{"ruleId":"5722","severity":1,"message":"5723","line":198,"column":17,"nodeType":"5724","endLine":203,"endColumn":19},{"ruleId":"5705","severity":1,"message":"5706","line":40,"column":32,"nodeType":"5707","messageId":"5708","endLine":40,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":44,"column":37,"nodeType":"5707","messageId":"5708","endLine":44,"endColumn":39},{"ruleId":"5709","severity":1,"message":"5725","line":62,"column":8,"nodeType":"5711","endLine":62,"endColumn":10,"suggestions":"5737"},{"ruleId":"5705","severity":1,"message":"5706","line":68,"column":28,"nodeType":"5707","messageId":"5708","endLine":68,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":70,"column":26,"nodeType":"5707","messageId":"5708","endLine":70,"endColumn":28},{"ruleId":"5705","severity":1,"message":"5706","line":80,"column":33,"nodeType":"5707","messageId":"5708","endLine":80,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":90,"column":33,"nodeType":"5707","messageId":"5708","endLine":90,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":100,"column":33,"nodeType":"5707","messageId":"5708","endLine":100,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":130,"column":33,"nodeType":"5707","messageId":"5708","endLine":130,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":180,"column":28,"nodeType":"5707","messageId":"5708","endLine":180,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":203,"column":33,"nodeType":"5707","messageId":"5708","endLine":203,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":241,"column":33,"nodeType":"5707","messageId":"5708","endLine":241,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":302,"column":60,"nodeType":"5707","messageId":"5708","endLine":302,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":348,"column":60,"nodeType":"5707","messageId":"5708","endLine":348,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":371,"column":60,"nodeType":"5707","messageId":"5708","endLine":371,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":389,"column":60,"nodeType":"5707","messageId":"5708","endLine":389,"endColumn":62},{"ruleId":"5693","severity":1,"message":"5738","line":40,"column":20,"nodeType":"5695","messageId":"5696","endLine":40,"endColumn":29},{"ruleId":"5705","severity":1,"message":"5706","line":54,"column":36,"nodeType":"5707","messageId":"5708","endLine":54,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5739","line":66,"column":8,"nodeType":"5711","endLine":66,"endColumn":23,"suggestions":"5740"},{"ruleId":"5705","severity":1,"message":"5706","line":104,"column":36,"nodeType":"5707","messageId":"5708","endLine":104,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":118,"column":36,"nodeType":"5707","messageId":"5708","endLine":118,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":196,"column":58,"nodeType":"5707","messageId":"5708","endLine":196,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":207,"column":62,"nodeType":"5707","messageId":"5708","endLine":207,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":209,"column":68,"nodeType":"5707","messageId":"5708","endLine":209,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":223,"column":62,"nodeType":"5707","messageId":"5708","endLine":223,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":234,"column":67,"nodeType":"5707","messageId":"5708","endLine":234,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":242,"column":64,"nodeType":"5707","messageId":"5708","endLine":242,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5721","line":252,"column":65,"nodeType":"5707","messageId":"5708","endLine":252,"endColumn":67},{"ruleId":"5705","severity":1,"message":"5721","line":265,"column":68,"nodeType":"5707","messageId":"5708","endLine":265,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":274,"column":67,"nodeType":"5707","messageId":"5708","endLine":274,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":283,"column":70,"nodeType":"5707","messageId":"5708","endLine":283,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":290,"column":73,"nodeType":"5707","messageId":"5708","endLine":290,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":303,"column":71,"nodeType":"5707","messageId":"5708","endLine":303,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5721","line":314,"column":72,"nodeType":"5707","messageId":"5708","endLine":314,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5721","line":324,"column":71,"nodeType":"5707","messageId":"5708","endLine":324,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5721","line":334,"column":69,"nodeType":"5707","messageId":"5708","endLine":334,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5721","line":346,"column":74,"nodeType":"5707","messageId":"5708","endLine":346,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":356,"column":66,"nodeType":"5707","messageId":"5708","endLine":356,"endColumn":68},{"ruleId":"5705","severity":1,"message":"5721","line":365,"column":68,"nodeType":"5707","messageId":"5708","endLine":365,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":374,"column":72,"nodeType":"5707","messageId":"5708","endLine":374,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5721","line":384,"column":69,"nodeType":"5707","messageId":"5708","endLine":384,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5721","line":396,"column":69,"nodeType":"5707","messageId":"5708","endLine":396,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5721","line":406,"column":62,"nodeType":"5707","messageId":"5708","endLine":406,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5721","line":415,"column":67,"nodeType":"5707","messageId":"5708","endLine":415,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":424,"column":64,"nodeType":"5707","messageId":"5708","endLine":424,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5721","line":433,"column":65,"nodeType":"5707","messageId":"5708","endLine":433,"endColumn":67},{"ruleId":"5705","severity":1,"message":"5721","line":445,"column":65,"nodeType":"5707","messageId":"5708","endLine":445,"endColumn":67},{"ruleId":"5705","severity":1,"message":"5721","line":454,"column":69,"nodeType":"5707","messageId":"5708","endLine":454,"endColumn":71},{"ruleId":"5709","severity":1,"message":"5741","line":467,"column":8,"nodeType":"5711","endLine":467,"endColumn":20,"suggestions":"5742"},{"ruleId":"5693","severity":1,"message":"5743","line":3,"column":38,"nodeType":"5695","messageId":"5696","endLine":3,"endColumn":45},{"ruleId":"5705","severity":1,"message":"5706","line":59,"column":36,"nodeType":"5707","messageId":"5708","endLine":59,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":70,"column":8,"nodeType":"5711","endLine":70,"endColumn":17,"suggestions":"5744"},{"ruleId":"5705","severity":1,"message":"5706","line":124,"column":36,"nodeType":"5707","messageId":"5708","endLine":124,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":126,"column":40,"nodeType":"5707","messageId":"5708","endLine":126,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":135,"column":36,"nodeType":"5707","messageId":"5708","endLine":135,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":182,"column":47,"nodeType":"5707","messageId":"5708","endLine":182,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":252,"column":47,"nodeType":"5707","messageId":"5708","endLine":252,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":68,"column":36,"nodeType":"5707","messageId":"5708","endLine":68,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5739","line":79,"column":8,"nodeType":"5711","endLine":79,"endColumn":23,"suggestions":"5745"},{"ruleId":"5705","severity":1,"message":"5706","line":118,"column":36,"nodeType":"5707","messageId":"5708","endLine":118,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":127,"column":36,"nodeType":"5707","messageId":"5708","endLine":127,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5721","line":170,"column":56,"nodeType":"5707","messageId":"5708","endLine":170,"endColumn":58},{"ruleId":"5705","severity":1,"message":"5721","line":175,"column":53,"nodeType":"5707","messageId":"5708","endLine":175,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":189,"column":53,"nodeType":"5707","messageId":"5708","endLine":189,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":191,"column":59,"nodeType":"5707","messageId":"5708","endLine":191,"endColumn":61},{"ruleId":"5705","severity":1,"message":"5706","line":212,"column":41,"nodeType":"5707","messageId":"5708","endLine":212,"endColumn":43},{"ruleId":"5709","severity":1,"message":"5741","line":262,"column":8,"nodeType":"5711","endLine":262,"endColumn":20,"suggestions":"5746"},{"ruleId":"5705","severity":1,"message":"5706","line":299,"column":47,"nodeType":"5707","messageId":"5708","endLine":299,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":59,"column":36,"nodeType":"5707","messageId":"5708","endLine":59,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":70,"column":8,"nodeType":"5711","endLine":70,"endColumn":17,"suggestions":"5747"},{"ruleId":"5705","severity":1,"message":"5706","line":122,"column":36,"nodeType":"5707","messageId":"5708","endLine":122,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":131,"column":36,"nodeType":"5707","messageId":"5708","endLine":131,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":183,"column":47,"nodeType":"5707","messageId":"5708","endLine":183,"endColumn":49},{"ruleId":"5693","severity":1,"message":"5748","line":15,"column":5,"nodeType":"5695","messageId":"5696","endLine":15,"endColumn":16},{"ruleId":"5693","severity":1,"message":"5749","line":16,"column":5,"nodeType":"5695","messageId":"5696","endLine":16,"endColumn":15},{"ruleId":"5693","severity":1,"message":"5750","line":17,"column":5,"nodeType":"5695","messageId":"5696","endLine":17,"endColumn":11},{"ruleId":"5705","severity":1,"message":"5706","line":72,"column":36,"nodeType":"5707","messageId":"5708","endLine":72,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5739","line":89,"column":8,"nodeType":"5711","endLine":89,"endColumn":23,"suggestions":"5751"},{"ruleId":"5705","severity":1,"message":"5706","line":110,"column":36,"nodeType":"5707","messageId":"5708","endLine":110,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":121,"column":36,"nodeType":"5707","messageId":"5708","endLine":121,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":189,"column":47,"nodeType":"5707","messageId":"5708","endLine":189,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":258,"column":62,"nodeType":"5707","messageId":"5708","endLine":258,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":61,"column":36,"nodeType":"5707","messageId":"5708","endLine":61,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5739","line":73,"column":8,"nodeType":"5711","endLine":73,"endColumn":23,"suggestions":"5752"},{"ruleId":"5705","severity":1,"message":"5706","line":111,"column":36,"nodeType":"5707","messageId":"5708","endLine":111,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":123,"column":36,"nodeType":"5707","messageId":"5708","endLine":123,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":197,"column":58,"nodeType":"5707","messageId":"5708","endLine":197,"endColumn":60},{"ruleId":"5709","severity":1,"message":"5741","line":345,"column":8,"nodeType":"5711","endLine":345,"endColumn":20,"suggestions":"5753"},{"ruleId":"5705","severity":1,"message":"5706","line":384,"column":47,"nodeType":"5707","messageId":"5708","endLine":384,"endColumn":49},{"ruleId":"5693","severity":1,"message":"5754","line":6,"column":5,"nodeType":"5695","messageId":"5696","endLine":6,"endColumn":11},{"ruleId":"5693","severity":1,"message":"5755","line":14,"column":5,"nodeType":"5695","messageId":"5696","endLine":14,"endColumn":8},{"ruleId":"5693","severity":1,"message":"5756","line":15,"column":5,"nodeType":"5695","messageId":"5696","endLine":15,"endColumn":13},{"ruleId":"5693","severity":1,"message":"5757","line":16,"column":5,"nodeType":"5695","messageId":"5696","endLine":16,"endColumn":14},{"ruleId":"5693","severity":1,"message":"5738","line":42,"column":20,"nodeType":"5695","messageId":"5696","endLine":42,"endColumn":29},{"ruleId":"5705","severity":1,"message":"5706","line":62,"column":36,"nodeType":"5707","messageId":"5708","endLine":62,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5739","line":74,"column":8,"nodeType":"5711","endLine":74,"endColumn":23,"suggestions":"5758"},{"ruleId":"5693","severity":1,"message":"5759","line":106,"column":11,"nodeType":"5695","messageId":"5696","endLine":106,"endColumn":23},{"ruleId":"5705","severity":1,"message":"5706","line":112,"column":36,"nodeType":"5707","messageId":"5708","endLine":112,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":123,"column":36,"nodeType":"5707","messageId":"5708","endLine":123,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":197,"column":58,"nodeType":"5707","messageId":"5708","endLine":197,"endColumn":60},{"ruleId":"5709","severity":1,"message":"5741","line":345,"column":8,"nodeType":"5711","endLine":345,"endColumn":20,"suggestions":"5760"},{"ruleId":"5705","severity":1,"message":"5706","line":66,"column":36,"nodeType":"5707","messageId":"5708","endLine":66,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5739","line":78,"column":8,"nodeType":"5711","endLine":78,"endColumn":23,"suggestions":"5761"},{"ruleId":"5705","severity":1,"message":"5706","line":127,"column":28,"nodeType":"5707","messageId":"5708","endLine":127,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":137,"column":57,"nodeType":"5707","messageId":"5708","endLine":137,"endColumn":59},{"ruleId":"5705","severity":1,"message":"5706","line":152,"column":44,"nodeType":"5707","messageId":"5708","endLine":152,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":161,"column":31,"nodeType":"5707","messageId":"5708","endLine":161,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5706","line":178,"column":28,"nodeType":"5707","messageId":"5708","endLine":178,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":185,"column":51,"nodeType":"5707","messageId":"5708","endLine":185,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":194,"column":44,"nodeType":"5707","messageId":"5708","endLine":194,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":217,"column":28,"nodeType":"5707","messageId":"5708","endLine":217,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":240,"column":36,"nodeType":"5707","messageId":"5708","endLine":240,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":256,"column":36,"nodeType":"5707","messageId":"5708","endLine":256,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":281,"column":49,"nodeType":"5707","messageId":"5708","endLine":281,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":361,"column":53,"nodeType":"5707","messageId":"5708","endLine":361,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":363,"column":59,"nodeType":"5707","messageId":"5708","endLine":363,"endColumn":61},{"ruleId":"5705","severity":1,"message":"5706","line":373,"column":60,"nodeType":"5707","messageId":"5708","endLine":373,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":383,"column":54,"nodeType":"5707","messageId":"5708","endLine":383,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":453,"column":59,"nodeType":"5707","messageId":"5708","endLine":453,"endColumn":61},{"ruleId":"5709","severity":1,"message":"5762","line":546,"column":8,"nodeType":"5711","endLine":546,"endColumn":29,"suggestions":"5763"},{"ruleId":"5705","severity":1,"message":"5706","line":585,"column":47,"nodeType":"5707","messageId":"5708","endLine":585,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":60,"column":36,"nodeType":"5707","messageId":"5708","endLine":60,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5739","line":72,"column":8,"nodeType":"5711","endLine":72,"endColumn":22,"suggestions":"5764"},{"ruleId":"5705","severity":1,"message":"5706","line":124,"column":28,"nodeType":"5707","messageId":"5708","endLine":124,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":131,"column":51,"nodeType":"5707","messageId":"5708","endLine":131,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":140,"column":44,"nodeType":"5707","messageId":"5708","endLine":140,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":163,"column":28,"nodeType":"5707","messageId":"5708","endLine":163,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":181,"column":28,"nodeType":"5707","messageId":"5708","endLine":181,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":191,"column":57,"nodeType":"5707","messageId":"5708","endLine":191,"endColumn":59},{"ruleId":"5705","severity":1,"message":"5706","line":206,"column":44,"nodeType":"5707","messageId":"5708","endLine":206,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":215,"column":31,"nodeType":"5707","messageId":"5708","endLine":215,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5706","line":239,"column":49,"nodeType":"5707","messageId":"5708","endLine":239,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":319,"column":53,"nodeType":"5707","messageId":"5708","endLine":319,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":321,"column":59,"nodeType":"5707","messageId":"5708","endLine":321,"endColumn":61},{"ruleId":"5705","severity":1,"message":"5706","line":331,"column":60,"nodeType":"5707","messageId":"5708","endLine":331,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":341,"column":54,"nodeType":"5707","messageId":"5708","endLine":341,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":411,"column":59,"nodeType":"5707","messageId":"5708","endLine":411,"endColumn":61},{"ruleId":"5709","severity":1,"message":"5762","line":504,"column":8,"nodeType":"5711","endLine":504,"endColumn":29,"suggestions":"5765"},{"ruleId":"5705","severity":1,"message":"5706","line":66,"column":36,"nodeType":"5707","messageId":"5708","endLine":66,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5739","line":78,"column":8,"nodeType":"5711","endLine":78,"endColumn":23,"suggestions":"5766"},{"ruleId":"5705","severity":1,"message":"5706","line":130,"column":28,"nodeType":"5707","messageId":"5708","endLine":130,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":137,"column":51,"nodeType":"5707","messageId":"5708","endLine":137,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":146,"column":44,"nodeType":"5707","messageId":"5708","endLine":146,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":169,"column":28,"nodeType":"5707","messageId":"5708","endLine":169,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":191,"column":36,"nodeType":"5707","messageId":"5708","endLine":191,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":207,"column":36,"nodeType":"5707","messageId":"5708","endLine":207,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":232,"column":49,"nodeType":"5707","messageId":"5708","endLine":232,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":312,"column":53,"nodeType":"5707","messageId":"5708","endLine":312,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":314,"column":59,"nodeType":"5707","messageId":"5708","endLine":314,"endColumn":61},{"ruleId":"5705","severity":1,"message":"5706","line":324,"column":60,"nodeType":"5707","messageId":"5708","endLine":324,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":334,"column":54,"nodeType":"5707","messageId":"5708","endLine":334,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":404,"column":59,"nodeType":"5707","messageId":"5708","endLine":404,"endColumn":61},{"ruleId":"5709","severity":1,"message":"5762","line":497,"column":8,"nodeType":"5711","endLine":497,"endColumn":29,"suggestions":"5767"},{"ruleId":"5705","severity":1,"message":"5706","line":535,"column":43,"nodeType":"5707","messageId":"5708","endLine":535,"endColumn":45},{"ruleId":"5705","severity":1,"message":"5706","line":66,"column":36,"nodeType":"5707","messageId":"5708","endLine":66,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5739","line":78,"column":8,"nodeType":"5711","endLine":78,"endColumn":23,"suggestions":"5768"},{"ruleId":"5705","severity":1,"message":"5706","line":130,"column":28,"nodeType":"5707","messageId":"5708","endLine":130,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":137,"column":51,"nodeType":"5707","messageId":"5708","endLine":137,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":146,"column":44,"nodeType":"5707","messageId":"5708","endLine":146,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":169,"column":28,"nodeType":"5707","messageId":"5708","endLine":169,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":192,"column":36,"nodeType":"5707","messageId":"5708","endLine":192,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":208,"column":36,"nodeType":"5707","messageId":"5708","endLine":208,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":233,"column":49,"nodeType":"5707","messageId":"5708","endLine":233,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":313,"column":53,"nodeType":"5707","messageId":"5708","endLine":313,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":315,"column":59,"nodeType":"5707","messageId":"5708","endLine":315,"endColumn":61},{"ruleId":"5705","severity":1,"message":"5706","line":325,"column":60,"nodeType":"5707","messageId":"5708","endLine":325,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":335,"column":54,"nodeType":"5707","messageId":"5708","endLine":335,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":405,"column":59,"nodeType":"5707","messageId":"5708","endLine":405,"endColumn":61},{"ruleId":"5709","severity":1,"message":"5762","line":498,"column":8,"nodeType":"5711","endLine":498,"endColumn":29,"suggestions":"5769"},{"ruleId":"5705","severity":1,"message":"5706","line":536,"column":47,"nodeType":"5707","messageId":"5708","endLine":536,"endColumn":49},{"ruleId":"5770","severity":1,"message":"5771","line":39,"column":38,"nodeType":"5707","messageId":"5772","endLine":39,"endColumn":39},{"ruleId":"5709","severity":1,"message":"5710","line":53,"column":8,"nodeType":"5711","endLine":53,"endColumn":17,"suggestions":"5773"},{"ruleId":"5770","severity":1,"message":"5771","line":80,"column":48,"nodeType":"5707","messageId":"5772","endLine":80,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":82,"column":36,"nodeType":"5707","messageId":"5708","endLine":82,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":258,"column":42,"nodeType":"5707","messageId":"5708","endLine":258,"endColumn":44},{"ruleId":"5770","severity":1,"message":"5771","line":39,"column":38,"nodeType":"5707","messageId":"5772","endLine":39,"endColumn":39},{"ruleId":"5709","severity":1,"message":"5710","line":53,"column":8,"nodeType":"5711","endLine":53,"endColumn":17,"suggestions":"5774"},{"ruleId":"5770","severity":1,"message":"5771","line":80,"column":48,"nodeType":"5707","messageId":"5772","endLine":80,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":82,"column":36,"nodeType":"5707","messageId":"5708","endLine":82,"endColumn":38},{"ruleId":"5770","severity":1,"message":"5771","line":39,"column":38,"nodeType":"5707","messageId":"5772","endLine":39,"endColumn":39},{"ruleId":"5709","severity":1,"message":"5710","line":53,"column":8,"nodeType":"5711","endLine":53,"endColumn":17,"suggestions":"5775"},{"ruleId":"5770","severity":1,"message":"5771","line":80,"column":48,"nodeType":"5707","messageId":"5772","endLine":80,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":82,"column":36,"nodeType":"5707","messageId":"5708","endLine":82,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":253,"column":42,"nodeType":"5707","messageId":"5708","endLine":253,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":44,"column":36,"nodeType":"5707","messageId":"5708","endLine":44,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":56,"column":8,"nodeType":"5711","endLine":56,"endColumn":17,"suggestions":"5776"},{"ruleId":"5705","severity":1,"message":"5706","line":69,"column":32,"nodeType":"5707","messageId":"5708","endLine":69,"endColumn":34},{"ruleId":"5693","severity":1,"message":"5777","line":85,"column":11,"nodeType":"5695","messageId":"5696","endLine":85,"endColumn":16},{"ruleId":"5705","severity":1,"message":"5721","line":201,"column":38,"nodeType":"5707","messageId":"5708","endLine":201,"endColumn":40},{"ruleId":"5705","severity":1,"message":"5706","line":201,"column":56,"nodeType":"5707","messageId":"5708","endLine":201,"endColumn":58},{"ruleId":"5705","severity":1,"message":"5706","line":237,"column":44,"nodeType":"5707","messageId":"5708","endLine":237,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":93,"column":36,"nodeType":"5707","messageId":"5708","endLine":93,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":104,"column":8,"nodeType":"5711","endLine":104,"endColumn":17,"suggestions":"5778"},{"ruleId":"5693","severity":1,"message":"5779","line":72,"column":12,"nodeType":"5695","messageId":"5696","endLine":72,"endColumn":20},{"ruleId":"5693","severity":1,"message":"5780","line":72,"column":22,"nodeType":"5695","messageId":"5696","endLine":72,"endColumn":33},{"ruleId":"5770","severity":1,"message":"5771","line":91,"column":38,"nodeType":"5707","messageId":"5772","endLine":91,"endColumn":39},{"ruleId":"5709","severity":1,"message":"5710","line":104,"column":8,"nodeType":"5711","endLine":104,"endColumn":17,"suggestions":"5781"},{"ruleId":"5693","severity":1,"message":"5782","line":2,"column":5,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":15},{"ruleId":"5693","severity":1,"message":"5783","line":8,"column":5,"nodeType":"5695","messageId":"5696","endLine":8,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5784","line":9,"column":5,"nodeType":"5695","messageId":"5696","endLine":9,"endColumn":9},{"ruleId":"5709","severity":1,"message":"5785","line":98,"column":8,"nodeType":"5711","endLine":98,"endColumn":42,"suggestions":"5786"},{"ruleId":"5705","severity":1,"message":"5706","line":153,"column":32,"nodeType":"5707","messageId":"5708","endLine":153,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":184,"column":36,"nodeType":"5707","messageId":"5708","endLine":184,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":185,"column":36,"nodeType":"5707","messageId":"5708","endLine":185,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":196,"column":38,"nodeType":"5707","messageId":"5708","endLine":196,"endColumn":40},{"ruleId":"5705","severity":1,"message":"5706","line":197,"column":38,"nodeType":"5707","messageId":"5708","endLine":197,"endColumn":40},{"ruleId":"5705","severity":1,"message":"5706","line":205,"column":40,"nodeType":"5707","messageId":"5708","endLine":205,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":206,"column":40,"nodeType":"5707","messageId":"5708","endLine":206,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":212,"column":35,"nodeType":"5707","messageId":"5708","endLine":212,"endColumn":37},{"ruleId":"5705","severity":1,"message":"5706","line":213,"column":35,"nodeType":"5707","messageId":"5708","endLine":213,"endColumn":37},{"ruleId":"5705","severity":1,"message":"5706","line":221,"column":61,"nodeType":"5707","messageId":"5708","endLine":221,"endColumn":63},{"ruleId":"5705","severity":1,"message":"5706","line":222,"column":61,"nodeType":"5707","messageId":"5708","endLine":222,"endColumn":63},{"ruleId":"5705","severity":1,"message":"5706","line":230,"column":61,"nodeType":"5707","messageId":"5708","endLine":230,"endColumn":63},{"ruleId":"5705","severity":1,"message":"5706","line":231,"column":61,"nodeType":"5707","messageId":"5708","endLine":231,"endColumn":63},{"ruleId":"5705","severity":1,"message":"5706","line":238,"column":36,"nodeType":"5707","messageId":"5708","endLine":238,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":239,"column":38,"nodeType":"5707","messageId":"5708","endLine":239,"endColumn":40},{"ruleId":"5705","severity":1,"message":"5706","line":241,"column":32,"nodeType":"5707","messageId":"5708","endLine":241,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":242,"column":31,"nodeType":"5707","messageId":"5708","endLine":242,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5706","line":252,"column":39,"nodeType":"5707","messageId":"5708","endLine":252,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":255,"column":40,"nodeType":"5707","messageId":"5708","endLine":255,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":256,"column":40,"nodeType":"5707","messageId":"5708","endLine":256,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":265,"column":42,"nodeType":"5707","messageId":"5708","endLine":265,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":266,"column":42,"nodeType":"5707","messageId":"5708","endLine":266,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":273,"column":44,"nodeType":"5707","messageId":"5708","endLine":273,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":274,"column":44,"nodeType":"5707","messageId":"5708","endLine":274,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":279,"column":39,"nodeType":"5707","messageId":"5708","endLine":279,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":280,"column":39,"nodeType":"5707","messageId":"5708","endLine":280,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":287,"column":65,"nodeType":"5707","messageId":"5708","endLine":287,"endColumn":67},{"ruleId":"5705","severity":1,"message":"5706","line":288,"column":65,"nodeType":"5707","messageId":"5708","endLine":288,"endColumn":67},{"ruleId":"5705","severity":1,"message":"5706","line":295,"column":65,"nodeType":"5707","messageId":"5708","endLine":295,"endColumn":67},{"ruleId":"5705","severity":1,"message":"5706","line":296,"column":65,"nodeType":"5707","messageId":"5708","endLine":296,"endColumn":67},{"ruleId":"5705","severity":1,"message":"5706","line":302,"column":40,"nodeType":"5707","messageId":"5708","endLine":302,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":303,"column":42,"nodeType":"5707","messageId":"5708","endLine":303,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":305,"column":36,"nodeType":"5707","messageId":"5708","endLine":305,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":306,"column":35,"nodeType":"5707","messageId":"5708","endLine":306,"endColumn":37},{"ruleId":"5705","severity":1,"message":"5706","line":317,"column":28,"nodeType":"5707","messageId":"5708","endLine":317,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":345,"column":66,"nodeType":"5707","messageId":"5708","endLine":345,"endColumn":68},{"ruleId":"5705","severity":1,"message":"5706","line":407,"column":34,"nodeType":"5707","messageId":"5708","endLine":407,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5721","line":445,"column":34,"nodeType":"5707","messageId":"5708","endLine":445,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5721","line":549,"column":78,"nodeType":"5707","messageId":"5708","endLine":549,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":551,"column":74,"nodeType":"5707","messageId":"5708","endLine":551,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":553,"column":78,"nodeType":"5707","messageId":"5708","endLine":553,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":555,"column":74,"nodeType":"5707","messageId":"5708","endLine":555,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":563,"column":67,"nodeType":"5707","messageId":"5708","endLine":563,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":585,"column":67,"nodeType":"5707","messageId":"5708","endLine":585,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":586,"column":76,"nodeType":"5707","messageId":"5708","endLine":586,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":589,"column":67,"nodeType":"5707","messageId":"5708","endLine":589,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":590,"column":76,"nodeType":"5707","messageId":"5708","endLine":590,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":620,"column":67,"nodeType":"5707","messageId":"5708","endLine":620,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":668,"column":67,"nodeType":"5707","messageId":"5708","endLine":668,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":707,"column":78,"nodeType":"5707","messageId":"5708","endLine":707,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":717,"column":67,"nodeType":"5707","messageId":"5708","endLine":717,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":726,"column":78,"nodeType":"5707","messageId":"5708","endLine":726,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":774,"column":78,"nodeType":"5707","messageId":"5708","endLine":774,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":776,"column":76,"nodeType":"5707","messageId":"5708","endLine":776,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":778,"column":78,"nodeType":"5707","messageId":"5708","endLine":778,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":780,"column":76,"nodeType":"5707","messageId":"5708","endLine":780,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":788,"column":67,"nodeType":"5707","messageId":"5708","endLine":788,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":809,"column":67,"nodeType":"5707","messageId":"5708","endLine":809,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":810,"column":78,"nodeType":"5707","messageId":"5708","endLine":810,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":813,"column":67,"nodeType":"5707","messageId":"5708","endLine":813,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":814,"column":78,"nodeType":"5707","messageId":"5708","endLine":814,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":862,"column":78,"nodeType":"5707","messageId":"5708","endLine":862,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":864,"column":78,"nodeType":"5707","messageId":"5708","endLine":864,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":866,"column":78,"nodeType":"5707","messageId":"5708","endLine":866,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":868,"column":78,"nodeType":"5707","messageId":"5708","endLine":868,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":876,"column":67,"nodeType":"5707","messageId":"5708","endLine":876,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":898,"column":67,"nodeType":"5707","messageId":"5708","endLine":898,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":899,"column":76,"nodeType":"5707","messageId":"5708","endLine":899,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":929,"column":78,"nodeType":"5707","messageId":"5708","endLine":929,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":931,"column":73,"nodeType":"5707","messageId":"5708","endLine":931,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":933,"column":78,"nodeType":"5707","messageId":"5708","endLine":933,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":935,"column":73,"nodeType":"5707","messageId":"5708","endLine":935,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":943,"column":67,"nodeType":"5707","messageId":"5708","endLine":943,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":964,"column":67,"nodeType":"5707","messageId":"5708","endLine":964,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":965,"column":75,"nodeType":"5707","messageId":"5708","endLine":965,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":968,"column":67,"nodeType":"5707","messageId":"5708","endLine":968,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":969,"column":75,"nodeType":"5707","messageId":"5708","endLine":969,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":1010,"column":78,"nodeType":"5707","messageId":"5708","endLine":1010,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1014,"column":74,"nodeType":"5707","messageId":"5708","endLine":1014,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":1016,"column":78,"nodeType":"5707","messageId":"5708","endLine":1016,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1020,"column":74,"nodeType":"5707","messageId":"5708","endLine":1020,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":1028,"column":67,"nodeType":"5707","messageId":"5708","endLine":1028,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":1040,"column":67,"nodeType":"5707","messageId":"5708","endLine":1040,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":1043,"column":76,"nodeType":"5707","messageId":"5708","endLine":1043,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1046,"column":67,"nodeType":"5707","messageId":"5708","endLine":1046,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":1049,"column":76,"nodeType":"5707","messageId":"5708","endLine":1049,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1057,"column":67,"nodeType":"5707","messageId":"5708","endLine":1057,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":1093,"column":67,"nodeType":"5707","messageId":"5708","endLine":1093,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":1096,"column":76,"nodeType":"5707","messageId":"5708","endLine":1096,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1099,"column":67,"nodeType":"5707","messageId":"5708","endLine":1099,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":1102,"column":76,"nodeType":"5707","messageId":"5708","endLine":1102,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1113,"column":67,"nodeType":"5707","messageId":"5708","endLine":1113,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":1116,"column":76,"nodeType":"5707","messageId":"5708","endLine":1116,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1119,"column":67,"nodeType":"5707","messageId":"5708","endLine":1119,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":1122,"column":76,"nodeType":"5707","messageId":"5708","endLine":1122,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5706","line":1152,"column":68,"nodeType":"5707","messageId":"5708","endLine":1152,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":1154,"column":70,"nodeType":"5707","messageId":"5708","endLine":1154,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":1157,"column":78,"nodeType":"5707","messageId":"5708","endLine":1157,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1159,"column":70,"nodeType":"5707","messageId":"5708","endLine":1159,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":1161,"column":78,"nodeType":"5707","messageId":"5708","endLine":1161,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1163,"column":70,"nodeType":"5707","messageId":"5708","endLine":1163,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":1170,"column":67,"nodeType":"5707","messageId":"5708","endLine":1170,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":1181,"column":68,"nodeType":"5707","messageId":"5708","endLine":1181,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":1183,"column":70,"nodeType":"5707","messageId":"5708","endLine":1183,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":1195,"column":67,"nodeType":"5707","messageId":"5708","endLine":1195,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":1196,"column":72,"nodeType":"5707","messageId":"5708","endLine":1196,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5721","line":1199,"column":67,"nodeType":"5707","messageId":"5708","endLine":1199,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":1200,"column":72,"nodeType":"5707","messageId":"5708","endLine":1200,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5721","line":1301,"column":67,"nodeType":"5707","messageId":"5708","endLine":1301,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":1351,"column":67,"nodeType":"5707","messageId":"5708","endLine":1351,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":1479,"column":67,"nodeType":"5707","messageId":"5708","endLine":1479,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":1646,"column":79,"nodeType":"5707","messageId":"5708","endLine":1646,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":1650,"column":78,"nodeType":"5707","messageId":"5708","endLine":1650,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1652,"column":76,"nodeType":"5707","messageId":"5708","endLine":1652,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1654,"column":78,"nodeType":"5707","messageId":"5708","endLine":1654,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1656,"column":74,"nodeType":"5707","messageId":"5708","endLine":1656,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":1658,"column":78,"nodeType":"5707","messageId":"5708","endLine":1658,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1660,"column":78,"nodeType":"5707","messageId":"5708","endLine":1660,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":1662,"column":78,"nodeType":"5707","messageId":"5708","endLine":1662,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1664,"column":73,"nodeType":"5707","messageId":"5708","endLine":1664,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":1666,"column":78,"nodeType":"5707","messageId":"5708","endLine":1666,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1670,"column":74,"nodeType":"5707","messageId":"5708","endLine":1670,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":1672,"column":78,"nodeType":"5707","messageId":"5708","endLine":1672,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1676,"column":74,"nodeType":"5707","messageId":"5708","endLine":1676,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":1678,"column":78,"nodeType":"5707","messageId":"5708","endLine":1678,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1680,"column":70,"nodeType":"5707","messageId":"5708","endLine":1680,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5706","line":1695,"column":55,"nodeType":"5707","messageId":"5708","endLine":1695,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5721","line":1696,"column":78,"nodeType":"5707","messageId":"5708","endLine":1696,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1698,"column":74,"nodeType":"5707","messageId":"5708","endLine":1698,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":1702,"column":55,"nodeType":"5707","messageId":"5708","endLine":1702,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5721","line":1703,"column":78,"nodeType":"5707","messageId":"5708","endLine":1703,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1705,"column":76,"nodeType":"5707","messageId":"5708","endLine":1705,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5706","line":1709,"column":55,"nodeType":"5707","messageId":"5708","endLine":1709,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5721","line":1710,"column":78,"nodeType":"5707","messageId":"5708","endLine":1710,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1712,"column":78,"nodeType":"5707","messageId":"5708","endLine":1712,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1716,"column":55,"nodeType":"5707","messageId":"5708","endLine":1716,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5721","line":1717,"column":78,"nodeType":"5707","messageId":"5708","endLine":1717,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1719,"column":73,"nodeType":"5707","messageId":"5708","endLine":1719,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5706","line":1725,"column":55,"nodeType":"5707","messageId":"5708","endLine":1725,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5721","line":1726,"column":78,"nodeType":"5707","messageId":"5708","endLine":1726,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1730,"column":74,"nodeType":"5707","messageId":"5708","endLine":1730,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":1736,"column":55,"nodeType":"5707","messageId":"5708","endLine":1736,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5721","line":1737,"column":78,"nodeType":"5707","messageId":"5708","endLine":1737,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1741,"column":74,"nodeType":"5707","messageId":"5708","endLine":1741,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":1745,"column":68,"nodeType":"5707","messageId":"5708","endLine":1745,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":1747,"column":70,"nodeType":"5707","messageId":"5708","endLine":1747,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":1750,"column":78,"nodeType":"5707","messageId":"5708","endLine":1750,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1752,"column":70,"nodeType":"5707","messageId":"5708","endLine":1752,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":1787,"column":53,"nodeType":"5707","messageId":"5708","endLine":1787,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5721","line":1835,"column":37,"nodeType":"5707","messageId":"5708","endLine":1835,"endColumn":39},{"ruleId":"5709","severity":1,"message":"5785","line":105,"column":8,"nodeType":"5711","endLine":105,"endColumn":42,"suggestions":"5787"},{"ruleId":"5693","severity":1,"message":"5788","line":107,"column":13,"nodeType":"5695","messageId":"5696","endLine":107,"endColumn":15},{"ruleId":"5705","severity":1,"message":"5706","line":169,"column":38,"nodeType":"5707","messageId":"5708","endLine":169,"endColumn":40},{"ruleId":"5705","severity":1,"message":"5706","line":170,"column":38,"nodeType":"5707","messageId":"5708","endLine":170,"endColumn":40},{"ruleId":"5705","severity":1,"message":"5706","line":176,"column":39,"nodeType":"5707","messageId":"5708","endLine":176,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":177,"column":39,"nodeType":"5707","messageId":"5708","endLine":177,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":188,"column":36,"nodeType":"5707","messageId":"5708","endLine":188,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":189,"column":36,"nodeType":"5707","messageId":"5708","endLine":189,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":198,"column":35,"nodeType":"5707","messageId":"5708","endLine":198,"endColumn":37},{"ruleId":"5705","severity":1,"message":"5706","line":199,"column":35,"nodeType":"5707","messageId":"5708","endLine":199,"endColumn":37},{"ruleId":"5705","severity":1,"message":"5706","line":207,"column":40,"nodeType":"5707","messageId":"5708","endLine":207,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":208,"column":40,"nodeType":"5707","messageId":"5708","endLine":208,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":215,"column":38,"nodeType":"5707","messageId":"5708","endLine":215,"endColumn":40},{"ruleId":"5705","severity":1,"message":"5706","line":216,"column":38,"nodeType":"5707","messageId":"5708","endLine":216,"endColumn":40},{"ruleId":"5705","severity":1,"message":"5706","line":221,"column":39,"nodeType":"5707","messageId":"5708","endLine":221,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":222,"column":39,"nodeType":"5707","messageId":"5708","endLine":222,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":231,"column":36,"nodeType":"5707","messageId":"5708","endLine":231,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":232,"column":36,"nodeType":"5707","messageId":"5708","endLine":232,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":239,"column":35,"nodeType":"5707","messageId":"5708","endLine":239,"endColumn":37},{"ruleId":"5705","severity":1,"message":"5706","line":240,"column":35,"nodeType":"5707","messageId":"5708","endLine":240,"endColumn":37},{"ruleId":"5705","severity":1,"message":"5706","line":247,"column":40,"nodeType":"5707","messageId":"5708","endLine":247,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":248,"column":40,"nodeType":"5707","messageId":"5708","endLine":248,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":257,"column":28,"nodeType":"5707","messageId":"5708","endLine":257,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":270,"column":30,"nodeType":"5707","messageId":"5708","endLine":270,"endColumn":32},{"ruleId":"5705","severity":1,"message":"5706","line":286,"column":36,"nodeType":"5707","messageId":"5708","endLine":286,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5721","line":321,"column":66,"nodeType":"5707","messageId":"5708","endLine":321,"endColumn":68},{"ruleId":"5705","severity":1,"message":"5706","line":394,"column":34,"nodeType":"5707","messageId":"5708","endLine":394,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5721","line":432,"column":34,"nodeType":"5707","messageId":"5708","endLine":432,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5721","line":492,"column":78,"nodeType":"5707","messageId":"5708","endLine":492,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":494,"column":74,"nodeType":"5707","messageId":"5708","endLine":494,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":496,"column":78,"nodeType":"5707","messageId":"5708","endLine":496,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":498,"column":74,"nodeType":"5707","messageId":"5708","endLine":498,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":506,"column":67,"nodeType":"5707","messageId":"5708","endLine":506,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":538,"column":67,"nodeType":"5707","messageId":"5708","endLine":538,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":539,"column":76,"nodeType":"5707","messageId":"5708","endLine":539,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":542,"column":67,"nodeType":"5707","messageId":"5708","endLine":542,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":543,"column":76,"nodeType":"5707","messageId":"5708","endLine":543,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":578,"column":78,"nodeType":"5707","messageId":"5708","endLine":578,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":580,"column":71,"nodeType":"5707","messageId":"5708","endLine":580,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5721","line":582,"column":78,"nodeType":"5707","messageId":"5708","endLine":582,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":584,"column":71,"nodeType":"5707","messageId":"5708","endLine":584,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5721","line":591,"column":67,"nodeType":"5707","messageId":"5708","endLine":591,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":612,"column":67,"nodeType":"5707","messageId":"5708","endLine":612,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":613,"column":74,"nodeType":"5707","messageId":"5708","endLine":613,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":616,"column":67,"nodeType":"5707","messageId":"5708","endLine":616,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":617,"column":73,"nodeType":"5707","messageId":"5708","endLine":617,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":673,"column":78,"nodeType":"5707","messageId":"5708","endLine":673,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":675,"column":71,"nodeType":"5707","messageId":"5708","endLine":675,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5721","line":677,"column":78,"nodeType":"5707","messageId":"5708","endLine":677,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":679,"column":71,"nodeType":"5707","messageId":"5708","endLine":679,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5721","line":686,"column":67,"nodeType":"5707","messageId":"5708","endLine":686,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":706,"column":67,"nodeType":"5707","messageId":"5708","endLine":706,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":707,"column":73,"nodeType":"5707","messageId":"5708","endLine":707,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":710,"column":67,"nodeType":"5707","messageId":"5708","endLine":710,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":711,"column":73,"nodeType":"5707","messageId":"5708","endLine":711,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":790,"column":78,"nodeType":"5707","messageId":"5708","endLine":790,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":792,"column":76,"nodeType":"5707","messageId":"5708","endLine":792,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":794,"column":78,"nodeType":"5707","messageId":"5708","endLine":794,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":796,"column":76,"nodeType":"5707","messageId":"5708","endLine":796,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":804,"column":67,"nodeType":"5707","messageId":"5708","endLine":804,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":825,"column":67,"nodeType":"5707","messageId":"5708","endLine":825,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":826,"column":78,"nodeType":"5707","messageId":"5708","endLine":826,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":829,"column":67,"nodeType":"5707","messageId":"5708","endLine":829,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":830,"column":78,"nodeType":"5707","messageId":"5708","endLine":830,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":925,"column":79,"nodeType":"5707","messageId":"5708","endLine":925,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5706","line":927,"column":75,"nodeType":"5707","messageId":"5708","endLine":927,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":932,"column":78,"nodeType":"5707","messageId":"5708","endLine":932,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":934,"column":72,"nodeType":"5707","messageId":"5708","endLine":934,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5721","line":935,"column":78,"nodeType":"5707","messageId":"5708","endLine":935,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":937,"column":71,"nodeType":"5707","messageId":"5708","endLine":937,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5721","line":938,"column":78,"nodeType":"5707","messageId":"5708","endLine":938,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":940,"column":76,"nodeType":"5707","messageId":"5708","endLine":940,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5706","line":944,"column":55,"nodeType":"5707","messageId":"5708","endLine":944,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5721","line":945,"column":78,"nodeType":"5707","messageId":"5708","endLine":945,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":947,"column":75,"nodeType":"5707","messageId":"5708","endLine":947,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5706","line":951,"column":55,"nodeType":"5707","messageId":"5708","endLine":951,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5721","line":952,"column":78,"nodeType":"5707","messageId":"5708","endLine":952,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":954,"column":72,"nodeType":"5707","messageId":"5708","endLine":954,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5706","line":958,"column":55,"nodeType":"5707","messageId":"5708","endLine":958,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5721","line":959,"column":78,"nodeType":"5707","messageId":"5708","endLine":959,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":961,"column":70,"nodeType":"5707","messageId":"5708","endLine":961,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5706","line":965,"column":55,"nodeType":"5707","messageId":"5708","endLine":965,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5721","line":966,"column":78,"nodeType":"5707","messageId":"5708","endLine":966,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":968,"column":75,"nodeType":"5707","messageId":"5708","endLine":968,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":1003,"column":53,"nodeType":"5707","messageId":"5708","endLine":1003,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5721","line":1051,"column":37,"nodeType":"5707","messageId":"5708","endLine":1051,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":88,"column":32,"nodeType":"5707","messageId":"5708","endLine":88,"endColumn":34},{"ruleId":"5709","severity":1,"message":"5785","line":113,"column":8,"nodeType":"5711","endLine":113,"endColumn":42,"suggestions":"5789"},{"ruleId":"5705","severity":1,"message":"5721","line":169,"column":66,"nodeType":"5707","messageId":"5708","endLine":169,"endColumn":68},{"ruleId":"5705","severity":1,"message":"5706","line":180,"column":28,"nodeType":"5707","messageId":"5708","endLine":180,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":211,"column":28,"nodeType":"5707","messageId":"5708","endLine":211,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":298,"column":34,"nodeType":"5707","messageId":"5708","endLine":298,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5721","line":336,"column":30,"nodeType":"5707","messageId":"5708","endLine":336,"endColumn":32},{"ruleId":"5705","severity":1,"message":"5721","line":365,"column":73,"nodeType":"5707","messageId":"5708","endLine":365,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5706","line":387,"column":47,"nodeType":"5707","messageId":"5708","endLine":387,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5721","line":420,"column":33,"nodeType":"5707","messageId":"5708","endLine":420,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5721","line":431,"column":52,"nodeType":"5707","messageId":"5708","endLine":431,"endColumn":54},{"ruleId":"5693","severity":1,"message":"5782","line":2,"column":5,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":15},{"ruleId":"5693","severity":1,"message":"5783","line":8,"column":5,"nodeType":"5695","messageId":"5696","endLine":8,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5790","line":9,"column":5,"nodeType":"5695","messageId":"5696","endLine":9,"endColumn":20},{"ruleId":"5709","severity":1,"message":"5785","line":99,"column":8,"nodeType":"5711","endLine":99,"endColumn":42,"suggestions":"5791"},{"ruleId":"5734","severity":1,"message":"5735","line":143,"column":22,"nodeType":"5695","messageId":"5736","endLine":143,"endColumn":23},{"ruleId":"5705","severity":1,"message":"5706","line":162,"column":28,"nodeType":"5707","messageId":"5708","endLine":162,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":198,"column":28,"nodeType":"5707","messageId":"5708","endLine":198,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":244,"column":62,"nodeType":"5707","messageId":"5708","endLine":244,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":305,"column":34,"nodeType":"5707","messageId":"5708","endLine":305,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5721","line":342,"column":34,"nodeType":"5707","messageId":"5708","endLine":342,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5721","line":374,"column":77,"nodeType":"5707","messageId":"5708","endLine":374,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":410,"column":77,"nodeType":"5707","messageId":"5708","endLine":410,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":447,"column":77,"nodeType":"5707","messageId":"5708","endLine":447,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5706","line":481,"column":51,"nodeType":"5707","messageId":"5708","endLine":481,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":484,"column":51,"nodeType":"5707","messageId":"5708","endLine":484,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":487,"column":51,"nodeType":"5707","messageId":"5708","endLine":487,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5721","line":521,"column":37,"nodeType":"5707","messageId":"5708","endLine":521,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5721","line":534,"column":45,"nodeType":"5707","messageId":"5708","endLine":534,"endColumn":47},{"ruleId":"5705","severity":1,"message":"5721","line":534,"column":61,"nodeType":"5707","messageId":"5708","endLine":534,"endColumn":63},{"ruleId":"5693","severity":1,"message":"5792","line":56,"column":12,"nodeType":"5695","messageId":"5696","endLine":56,"endColumn":23},{"ruleId":"5693","severity":1,"message":"5793","line":56,"column":25,"nodeType":"5695","messageId":"5696","endLine":56,"endColumn":39},{"ruleId":"5693","severity":1,"message":"5794","line":57,"column":12,"nodeType":"5695","messageId":"5696","endLine":57,"endColumn":16},{"ruleId":"5693","severity":1,"message":"5795","line":57,"column":18,"nodeType":"5695","messageId":"5696","endLine":57,"endColumn":25},{"ruleId":"5709","severity":1,"message":"5785","line":90,"column":8,"nodeType":"5711","endLine":90,"endColumn":42,"suggestions":"5796"},{"ruleId":"5770","severity":1,"message":"5771","line":96,"column":42,"nodeType":"5707","messageId":"5772","endLine":96,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":98,"column":32,"nodeType":"5707","messageId":"5708","endLine":98,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":155,"column":27,"nodeType":"5707","messageId":"5708","endLine":155,"endColumn":29},{"ruleId":"5705","severity":1,"message":"5706","line":167,"column":28,"nodeType":"5707","messageId":"5708","endLine":167,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":206,"column":28,"nodeType":"5707","messageId":"5708","endLine":206,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":246,"column":64,"nodeType":"5707","messageId":"5708","endLine":246,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5706","line":327,"column":34,"nodeType":"5707","messageId":"5708","endLine":327,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":353,"column":70,"nodeType":"5707","messageId":"5708","endLine":353,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":364,"column":34,"nodeType":"5707","messageId":"5708","endLine":364,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5721","line":393,"column":74,"nodeType":"5707","messageId":"5708","endLine":393,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":394,"column":62,"nodeType":"5707","messageId":"5708","endLine":394,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5721","line":395,"column":74,"nodeType":"5707","messageId":"5708","endLine":395,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":396,"column":62,"nodeType":"5707","messageId":"5708","endLine":396,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5721","line":400,"column":77,"nodeType":"5707","messageId":"5708","endLine":400,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":416,"column":78,"nodeType":"5707","messageId":"5708","endLine":416,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":418,"column":64,"nodeType":"5707","messageId":"5708","endLine":418,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5721","line":419,"column":76,"nodeType":"5707","messageId":"5708","endLine":419,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5706","line":421,"column":64,"nodeType":"5707","messageId":"5708","endLine":421,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5721","line":442,"column":74,"nodeType":"5707","messageId":"5708","endLine":442,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":443,"column":68,"nodeType":"5707","messageId":"5708","endLine":443,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":445,"column":74,"nodeType":"5707","messageId":"5708","endLine":445,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":446,"column":68,"nodeType":"5707","messageId":"5708","endLine":446,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":450,"column":77,"nodeType":"5707","messageId":"5708","endLine":450,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":466,"column":78,"nodeType":"5707","messageId":"5708","endLine":466,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":468,"column":70,"nodeType":"5707","messageId":"5708","endLine":468,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":470,"column":76,"nodeType":"5707","messageId":"5708","endLine":470,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5706","line":472,"column":70,"nodeType":"5707","messageId":"5708","endLine":472,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":504,"column":74,"nodeType":"5707","messageId":"5708","endLine":504,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":505,"column":75,"nodeType":"5707","messageId":"5708","endLine":505,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":507,"column":74,"nodeType":"5707","messageId":"5708","endLine":507,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":508,"column":75,"nodeType":"5707","messageId":"5708","endLine":508,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":513,"column":77,"nodeType":"5707","messageId":"5708","endLine":513,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":532,"column":78,"nodeType":"5707","messageId":"5708","endLine":532,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":534,"column":77,"nodeType":"5707","messageId":"5708","endLine":534,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":536,"column":76,"nodeType":"5707","messageId":"5708","endLine":536,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5706","line":538,"column":77,"nodeType":"5707","messageId":"5708","endLine":538,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":563,"column":77,"nodeType":"5707","messageId":"5708","endLine":563,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":595,"column":74,"nodeType":"5707","messageId":"5708","endLine":595,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":596,"column":70,"nodeType":"5707","messageId":"5708","endLine":596,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":598,"column":74,"nodeType":"5707","messageId":"5708","endLine":598,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":599,"column":70,"nodeType":"5707","messageId":"5708","endLine":599,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":603,"column":77,"nodeType":"5707","messageId":"5708","endLine":603,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":621,"column":78,"nodeType":"5707","messageId":"5708","endLine":621,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":623,"column":72,"nodeType":"5707","messageId":"5708","endLine":623,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5721","line":625,"column":76,"nodeType":"5707","messageId":"5708","endLine":625,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5706","line":627,"column":72,"nodeType":"5707","messageId":"5708","endLine":627,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5721","line":637,"column":75,"nodeType":"5707","messageId":"5708","endLine":637,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5706","line":639,"column":62,"nodeType":"5707","messageId":"5708","endLine":639,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5721","line":643,"column":74,"nodeType":"5707","messageId":"5708","endLine":643,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":644,"column":62,"nodeType":"5707","messageId":"5708","endLine":644,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":645,"column":78,"nodeType":"5707","messageId":"5708","endLine":645,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":647,"column":74,"nodeType":"5707","messageId":"5708","endLine":647,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":648,"column":68,"nodeType":"5707","messageId":"5708","endLine":648,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":650,"column":74,"nodeType":"5707","messageId":"5708","endLine":650,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":651,"column":68,"nodeType":"5707","messageId":"5708","endLine":651,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":652,"column":74,"nodeType":"5707","messageId":"5708","endLine":652,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":653,"column":75,"nodeType":"5707","messageId":"5708","endLine":653,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":655,"column":74,"nodeType":"5707","messageId":"5708","endLine":655,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":656,"column":75,"nodeType":"5707","messageId":"5708","endLine":656,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":658,"column":74,"nodeType":"5707","messageId":"5708","endLine":658,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":659,"column":70,"nodeType":"5707","messageId":"5708","endLine":659,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":661,"column":74,"nodeType":"5707","messageId":"5708","endLine":661,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":662,"column":70,"nodeType":"5707","messageId":"5708","endLine":662,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5706","line":665,"column":51,"nodeType":"5707","messageId":"5708","endLine":665,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":668,"column":51,"nodeType":"5707","messageId":"5708","endLine":668,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":671,"column":51,"nodeType":"5707","messageId":"5708","endLine":671,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":674,"column":51,"nodeType":"5707","messageId":"5708","endLine":674,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5721","line":705,"column":37,"nodeType":"5707","messageId":"5708","endLine":705,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5721","line":718,"column":56,"nodeType":"5707","messageId":"5708","endLine":718,"endColumn":58},{"ruleId":"5709","severity":1,"message":"5785","line":81,"column":8,"nodeType":"5711","endLine":81,"endColumn":42,"suggestions":"5797"},{"ruleId":"5770","severity":1,"message":"5771","line":86,"column":39,"nodeType":"5707","messageId":"5772","endLine":86,"endColumn":40},{"ruleId":"5705","severity":1,"message":"5706","line":88,"column":32,"nodeType":"5707","messageId":"5708","endLine":88,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":152,"column":37,"nodeType":"5707","messageId":"5708","endLine":152,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":155,"column":44,"nodeType":"5707","messageId":"5708","endLine":155,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":158,"column":44,"nodeType":"5707","messageId":"5708","endLine":158,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":161,"column":44,"nodeType":"5707","messageId":"5708","endLine":161,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":164,"column":44,"nodeType":"5707","messageId":"5708","endLine":164,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":167,"column":44,"nodeType":"5707","messageId":"5708","endLine":167,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":170,"column":44,"nodeType":"5707","messageId":"5708","endLine":170,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":173,"column":44,"nodeType":"5707","messageId":"5708","endLine":173,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":195,"column":28,"nodeType":"5707","messageId":"5708","endLine":195,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":217,"column":39,"nodeType":"5707","messageId":"5708","endLine":217,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":237,"column":28,"nodeType":"5707","messageId":"5708","endLine":237,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":277,"column":65,"nodeType":"5707","messageId":"5708","endLine":277,"endColumn":67},{"ruleId":"5705","severity":1,"message":"5706","line":358,"column":34,"nodeType":"5707","messageId":"5708","endLine":358,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":385,"column":65,"nodeType":"5707","messageId":"5708","endLine":385,"endColumn":67},{"ruleId":"5705","severity":1,"message":"5721","line":397,"column":34,"nodeType":"5707","messageId":"5708","endLine":397,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5721","line":423,"column":67,"nodeType":"5707","messageId":"5708","endLine":423,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":441,"column":67,"nodeType":"5707","messageId":"5708","endLine":441,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":479,"column":74,"nodeType":"5707","messageId":"5708","endLine":479,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":480,"column":62,"nodeType":"5707","messageId":"5708","endLine":480,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5721","line":481,"column":74,"nodeType":"5707","messageId":"5708","endLine":481,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":482,"column":62,"nodeType":"5707","messageId":"5708","endLine":482,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5721","line":486,"column":77,"nodeType":"5707","messageId":"5708","endLine":486,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":502,"column":78,"nodeType":"5707","messageId":"5708","endLine":502,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":504,"column":64,"nodeType":"5707","messageId":"5708","endLine":504,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5721","line":505,"column":76,"nodeType":"5707","messageId":"5708","endLine":505,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5706","line":507,"column":64,"nodeType":"5707","messageId":"5708","endLine":507,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5721","line":529,"column":74,"nodeType":"5707","messageId":"5708","endLine":529,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":530,"column":68,"nodeType":"5707","messageId":"5708","endLine":530,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":532,"column":74,"nodeType":"5707","messageId":"5708","endLine":532,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":533,"column":68,"nodeType":"5707","messageId":"5708","endLine":533,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":537,"column":77,"nodeType":"5707","messageId":"5708","endLine":537,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":554,"column":78,"nodeType":"5707","messageId":"5708","endLine":554,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":556,"column":70,"nodeType":"5707","messageId":"5708","endLine":556,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":558,"column":76,"nodeType":"5707","messageId":"5708","endLine":558,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5706","line":560,"column":70,"nodeType":"5707","messageId":"5708","endLine":560,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":595,"column":77,"nodeType":"5707","messageId":"5708","endLine":595,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":627,"column":77,"nodeType":"5707","messageId":"5708","endLine":627,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":656,"column":74,"nodeType":"5707","messageId":"5708","endLine":656,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":657,"column":68,"nodeType":"5707","messageId":"5708","endLine":657,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":659,"column":74,"nodeType":"5707","messageId":"5708","endLine":659,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":660,"column":68,"nodeType":"5707","messageId":"5708","endLine":660,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":664,"column":77,"nodeType":"5707","messageId":"5708","endLine":664,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":681,"column":78,"nodeType":"5707","messageId":"5708","endLine":681,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":683,"column":70,"nodeType":"5707","messageId":"5708","endLine":683,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":685,"column":76,"nodeType":"5707","messageId":"5708","endLine":685,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5706","line":687,"column":70,"nodeType":"5707","messageId":"5708","endLine":687,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":711,"column":77,"nodeType":"5707","messageId":"5708","endLine":711,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":742,"column":74,"nodeType":"5707","messageId":"5708","endLine":742,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":743,"column":71,"nodeType":"5707","messageId":"5708","endLine":743,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5721","line":745,"column":74,"nodeType":"5707","messageId":"5708","endLine":745,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":746,"column":71,"nodeType":"5707","messageId":"5708","endLine":746,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5721","line":750,"column":77,"nodeType":"5707","messageId":"5708","endLine":750,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":768,"column":78,"nodeType":"5707","messageId":"5708","endLine":768,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":770,"column":73,"nodeType":"5707","messageId":"5708","endLine":770,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":772,"column":76,"nodeType":"5707","messageId":"5708","endLine":772,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5706","line":774,"column":73,"nodeType":"5707","messageId":"5708","endLine":774,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":785,"column":75,"nodeType":"5707","messageId":"5708","endLine":785,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5706","line":787,"column":62,"nodeType":"5707","messageId":"5708","endLine":787,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5721","line":791,"column":74,"nodeType":"5707","messageId":"5708","endLine":791,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":792,"column":62,"nodeType":"5707","messageId":"5708","endLine":792,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":793,"column":78,"nodeType":"5707","messageId":"5708","endLine":793,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":795,"column":74,"nodeType":"5707","messageId":"5708","endLine":795,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":796,"column":66,"nodeType":"5707","messageId":"5708","endLine":796,"endColumn":68},{"ruleId":"5705","severity":1,"message":"5721","line":807,"column":74,"nodeType":"5707","messageId":"5708","endLine":807,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":808,"column":66,"nodeType":"5707","messageId":"5708","endLine":808,"endColumn":68},{"ruleId":"5705","severity":1,"message":"5721","line":809,"column":74,"nodeType":"5707","messageId":"5708","endLine":809,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":810,"column":68,"nodeType":"5707","messageId":"5708","endLine":810,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":812,"column":74,"nodeType":"5707","messageId":"5708","endLine":812,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":813,"column":68,"nodeType":"5707","messageId":"5708","endLine":813,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":814,"column":74,"nodeType":"5707","messageId":"5708","endLine":814,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":815,"column":68,"nodeType":"5707","messageId":"5708","endLine":815,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":817,"column":74,"nodeType":"5707","messageId":"5708","endLine":817,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":818,"column":68,"nodeType":"5707","messageId":"5708","endLine":818,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":819,"column":74,"nodeType":"5707","messageId":"5708","endLine":819,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":820,"column":71,"nodeType":"5707","messageId":"5708","endLine":820,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5721","line":822,"column":74,"nodeType":"5707","messageId":"5708","endLine":822,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":823,"column":71,"nodeType":"5707","messageId":"5708","endLine":823,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5706","line":829,"column":51,"nodeType":"5707","messageId":"5708","endLine":829,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":832,"column":51,"nodeType":"5707","messageId":"5708","endLine":832,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":835,"column":51,"nodeType":"5707","messageId":"5708","endLine":835,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5721","line":867,"column":37,"nodeType":"5707","messageId":"5708","endLine":867,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5721","line":881,"column":41,"nodeType":"5707","messageId":"5708","endLine":881,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":72,"column":32,"nodeType":"5707","messageId":"5708","endLine":72,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":94,"column":40,"nodeType":"5707","messageId":"5708","endLine":94,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":104,"column":23,"nodeType":"5707","messageId":"5708","endLine":104,"endColumn":25},{"ruleId":"5705","severity":1,"message":"5706","line":118,"column":40,"nodeType":"5707","messageId":"5708","endLine":118,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":120,"column":50,"nodeType":"5707","messageId":"5708","endLine":120,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":125,"column":50,"nodeType":"5707","messageId":"5708","endLine":125,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":145,"column":19,"nodeType":"5707","messageId":"5708","endLine":145,"endColumn":21},{"ruleId":"5705","severity":1,"message":"5721","line":147,"column":38,"nodeType":"5707","messageId":"5708","endLine":147,"endColumn":40},{"ruleId":"5705","severity":1,"message":"5721","line":150,"column":40,"nodeType":"5707","messageId":"5708","endLine":150,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":151,"column":27,"nodeType":"5707","messageId":"5708","endLine":151,"endColumn":29},{"ruleId":"5705","severity":1,"message":"5706","line":168,"column":36,"nodeType":"5707","messageId":"5708","endLine":168,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":183,"column":17,"nodeType":"5707","messageId":"5708","endLine":183,"endColumn":19},{"ruleId":"5705","severity":1,"message":"5706","line":190,"column":21,"nodeType":"5707","messageId":"5708","endLine":190,"endColumn":23},{"ruleId":"5705","severity":1,"message":"5706","line":201,"column":40,"nodeType":"5707","messageId":"5708","endLine":201,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5721","line":202,"column":27,"nodeType":"5707","messageId":"5708","endLine":202,"endColumn":29},{"ruleId":"5705","severity":1,"message":"5706","line":208,"column":40,"nodeType":"5707","messageId":"5708","endLine":208,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5721","line":209,"column":27,"nodeType":"5707","messageId":"5708","endLine":209,"endColumn":29},{"ruleId":"5705","severity":1,"message":"5706","line":213,"column":49,"nodeType":"5707","messageId":"5708","endLine":213,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":221,"column":32,"nodeType":"5707","messageId":"5708","endLine":221,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":236,"column":32,"nodeType":"5707","messageId":"5708","endLine":236,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":255,"column":29,"nodeType":"5707","messageId":"5708","endLine":255,"endColumn":31},{"ruleId":"5705","severity":1,"message":"5706","line":300,"column":45,"nodeType":"5707","messageId":"5708","endLine":300,"endColumn":47},{"ruleId":"5705","severity":1,"message":"5721","line":330,"column":37,"nodeType":"5707","messageId":"5708","endLine":330,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5721","line":353,"column":64,"nodeType":"5707","messageId":"5708","endLine":353,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5706","line":376,"column":64,"nodeType":"5707","messageId":"5708","endLine":376,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5706","line":397,"column":64,"nodeType":"5707","messageId":"5708","endLine":397,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5706","line":419,"column":64,"nodeType":"5707","messageId":"5708","endLine":419,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5706","line":459,"column":53,"nodeType":"5707","messageId":"5708","endLine":459,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":466,"column":46,"nodeType":"5707","messageId":"5708","endLine":466,"endColumn":48},{"ruleId":"5705","severity":1,"message":"5706","line":467,"column":45,"nodeType":"5707","messageId":"5708","endLine":467,"endColumn":47},{"ruleId":"5705","severity":1,"message":"5721","line":498,"column":44,"nodeType":"5707","messageId":"5708","endLine":498,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5721","line":498,"column":67,"nodeType":"5707","messageId":"5708","endLine":498,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":527,"column":51,"nodeType":"5707","messageId":"5708","endLine":527,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":36,"column":36,"nodeType":"5707","messageId":"5708","endLine":36,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":48,"column":8,"nodeType":"5711","endLine":48,"endColumn":17,"suggestions":"5798"},{"ruleId":"5705","severity":1,"message":"5706","line":116,"column":44,"nodeType":"5707","messageId":"5708","endLine":116,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":139,"column":45,"nodeType":"5707","messageId":"5708","endLine":139,"endColumn":47},{"ruleId":"5705","severity":1,"message":"5706","line":85,"column":40,"nodeType":"5707","messageId":"5708","endLine":85,"endColumn":42},{"ruleId":"5709","severity":1,"message":"5710","line":97,"column":8,"nodeType":"5711","endLine":97,"endColumn":17,"suggestions":"5799"},{"ruleId":"5705","severity":1,"message":"5706","line":120,"column":28,"nodeType":"5707","messageId":"5708","endLine":120,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":128,"column":32,"nodeType":"5707","messageId":"5708","endLine":128,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":146,"column":36,"nodeType":"5707","messageId":"5708","endLine":146,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":157,"column":8,"nodeType":"5711","endLine":157,"endColumn":17,"suggestions":"5800"},{"ruleId":"5705","severity":1,"message":"5706","line":180,"column":28,"nodeType":"5707","messageId":"5708","endLine":180,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":229,"column":40,"nodeType":"5707","messageId":"5708","endLine":229,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":232,"column":48,"nodeType":"5707","messageId":"5708","endLine":232,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":236,"column":40,"nodeType":"5707","messageId":"5708","endLine":236,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":241,"column":55,"nodeType":"5707","messageId":"5708","endLine":241,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5706","line":245,"column":40,"nodeType":"5707","messageId":"5708","endLine":245,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":254,"column":40,"nodeType":"5707","messageId":"5708","endLine":254,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5721","line":542,"column":31,"nodeType":"5707","messageId":"5708","endLine":542,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5706","line":597,"column":58,"nodeType":"5707","messageId":"5708","endLine":597,"endColumn":60},{"ruleId":"5693","severity":1,"message":"5801","line":27,"column":15,"nodeType":"5695","messageId":"5696","endLine":27,"endColumn":24},{"ruleId":"5770","severity":1,"message":"5771","line":33,"column":60,"nodeType":"5707","messageId":"5772","endLine":33,"endColumn":61},{"ruleId":"5705","severity":1,"message":"5706","line":35,"column":36,"nodeType":"5707","messageId":"5708","endLine":35,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":46,"column":8,"nodeType":"5711","endLine":46,"endColumn":10,"suggestions":"5802"},{"ruleId":"5709","severity":1,"message":"5710","line":51,"column":8,"nodeType":"5711","endLine":51,"endColumn":17,"suggestions":"5803"},{"ruleId":"5693","severity":1,"message":"5804","line":23,"column":12,"nodeType":"5695","messageId":"5696","endLine":23,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5805","line":23,"column":21,"nodeType":"5695","messageId":"5696","endLine":23,"endColumn":31},{"ruleId":"5770","severity":1,"message":"5771","line":34,"column":54,"nodeType":"5707","messageId":"5772","endLine":34,"endColumn":55},{"ruleId":"5709","severity":1,"message":"5710","line":47,"column":8,"nodeType":"5711","endLine":47,"endColumn":10,"suggestions":"5806"},{"ruleId":"5705","severity":1,"message":"5706","line":101,"column":39,"nodeType":"5707","messageId":"5708","endLine":101,"endColumn":41},{"ruleId":"5693","severity":1,"message":"5804","line":23,"column":12,"nodeType":"5695","messageId":"5696","endLine":23,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5805","line":23,"column":21,"nodeType":"5695","messageId":"5696","endLine":23,"endColumn":31},{"ruleId":"5770","severity":1,"message":"5771","line":34,"column":38,"nodeType":"5707","messageId":"5772","endLine":34,"endColumn":39},{"ruleId":"5709","severity":1,"message":"5710","line":47,"column":8,"nodeType":"5711","endLine":47,"endColumn":10,"suggestions":"5807"},{"ruleId":"5770","severity":1,"message":"5771","line":33,"column":48,"nodeType":"5707","messageId":"5772","endLine":33,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":35,"column":36,"nodeType":"5707","messageId":"5708","endLine":35,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":46,"column":8,"nodeType":"5711","endLine":46,"endColumn":10,"suggestions":"5808"},{"ruleId":"5693","severity":1,"message":"5804","line":23,"column":12,"nodeType":"5695","messageId":"5696","endLine":23,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5805","line":23,"column":21,"nodeType":"5695","messageId":"5696","endLine":23,"endColumn":31},{"ruleId":"5770","severity":1,"message":"5771","line":34,"column":38,"nodeType":"5707","messageId":"5772","endLine":34,"endColumn":39},{"ruleId":"5709","severity":1,"message":"5710","line":47,"column":8,"nodeType":"5711","endLine":47,"endColumn":10,"suggestions":"5809"},{"ruleId":"5693","severity":1,"message":"5804","line":67,"column":12,"nodeType":"5695","messageId":"5696","endLine":67,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5805","line":67,"column":21,"nodeType":"5695","messageId":"5696","endLine":67,"endColumn":31},{"ruleId":"5810","severity":1,"message":"5811","line":72,"column":44,"nodeType":"5695","messageId":"5812","endLine":72,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":84,"column":36,"nodeType":"5707","messageId":"5708","endLine":84,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":95,"column":8,"nodeType":"5711","endLine":95,"endColumn":17,"suggestions":"5813"},{"ruleId":"5705","severity":1,"message":"5706","line":110,"column":28,"nodeType":"5707","messageId":"5708","endLine":110,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":215,"column":51,"nodeType":"5707","messageId":"5708","endLine":215,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5721","line":216,"column":50,"nodeType":"5707","messageId":"5708","endLine":216,"endColumn":52},{"ruleId":"5770","severity":1,"message":"5771","line":33,"column":38,"nodeType":"5707","messageId":"5772","endLine":33,"endColumn":39},{"ruleId":"5709","severity":1,"message":"5710","line":46,"column":8,"nodeType":"5711","endLine":46,"endColumn":10,"suggestions":"5814"},{"ruleId":"5770","severity":1,"message":"5771","line":33,"column":48,"nodeType":"5707","messageId":"5772","endLine":33,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":35,"column":36,"nodeType":"5707","messageId":"5708","endLine":35,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":46,"column":8,"nodeType":"5711","endLine":46,"endColumn":10,"suggestions":"5815"},{"ruleId":"5705","severity":1,"message":"5706","line":83,"column":36,"nodeType":"5707","messageId":"5708","endLine":83,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":94,"column":8,"nodeType":"5711","endLine":94,"endColumn":17,"suggestions":"5816"},{"ruleId":"5705","severity":1,"message":"5706","line":108,"column":28,"nodeType":"5707","messageId":"5708","endLine":108,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":212,"column":51,"nodeType":"5707","messageId":"5708","endLine":212,"endColumn":53},{"ruleId":"5693","severity":1,"message":"5804","line":23,"column":12,"nodeType":"5695","messageId":"5696","endLine":23,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5805","line":23,"column":21,"nodeType":"5695","messageId":"5696","endLine":23,"endColumn":31},{"ruleId":"5770","severity":1,"message":"5771","line":34,"column":64,"nodeType":"5707","messageId":"5772","endLine":34,"endColumn":65},{"ruleId":"5709","severity":1,"message":"5710","line":50,"column":8,"nodeType":"5711","endLine":50,"endColumn":10,"suggestions":"5817"},{"ruleId":"5705","severity":1,"message":"5706","line":130,"column":34,"nodeType":"5707","messageId":"5708","endLine":130,"endColumn":36},{"ruleId":"5693","severity":1,"message":"5818","line":19,"column":8,"nodeType":"5695","messageId":"5696","endLine":19,"endColumn":16},{"ruleId":"5705","severity":1,"message":"5706","line":85,"column":36,"nodeType":"5707","messageId":"5708","endLine":85,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":96,"column":8,"nodeType":"5711","endLine":96,"endColumn":17,"suggestions":"5819"},{"ruleId":"5705","severity":1,"message":"5706","line":105,"column":28,"nodeType":"5707","messageId":"5708","endLine":105,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":198,"column":51,"nodeType":"5707","messageId":"5708","endLine":198,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":35,"column":36,"nodeType":"5707","messageId":"5708","endLine":35,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":46,"column":8,"nodeType":"5711","endLine":46,"endColumn":10,"suggestions":"5820"},{"ruleId":"5693","severity":1,"message":"5818","line":17,"column":8,"nodeType":"5695","messageId":"5696","endLine":17,"endColumn":16},{"ruleId":"5705","severity":1,"message":"5706","line":86,"column":36,"nodeType":"5707","messageId":"5708","endLine":86,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":97,"column":8,"nodeType":"5711","endLine":97,"endColumn":17,"suggestions":"5821"},{"ruleId":"5705","severity":1,"message":"5706","line":112,"column":28,"nodeType":"5707","messageId":"5708","endLine":112,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":197,"column":49,"nodeType":"5707","messageId":"5708","endLine":197,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5721","line":198,"column":46,"nodeType":"5707","messageId":"5708","endLine":198,"endColumn":48},{"ruleId":"5693","severity":1,"message":"5756","line":14,"column":5,"nodeType":"5695","messageId":"5696","endLine":14,"endColumn":13},{"ruleId":"5705","severity":1,"message":"5706","line":68,"column":36,"nodeType":"5707","messageId":"5708","endLine":68,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":79,"column":8,"nodeType":"5711","endLine":79,"endColumn":10,"suggestions":"5822"},{"ruleId":"5705","severity":1,"message":"5706","line":97,"column":32,"nodeType":"5707","messageId":"5708","endLine":97,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5721","line":143,"column":61,"nodeType":"5707","messageId":"5708","endLine":143,"endColumn":63},{"ruleId":"5705","severity":1,"message":"5721","line":152,"column":54,"nodeType":"5707","messageId":"5708","endLine":152,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5721","line":173,"column":56,"nodeType":"5707","messageId":"5708","endLine":173,"endColumn":58},{"ruleId":"5709","severity":1,"message":"5741","line":195,"column":8,"nodeType":"5711","endLine":195,"endColumn":20,"suggestions":"5823"},{"ruleId":"5705","severity":1,"message":"5706","line":235,"column":44,"nodeType":"5707","messageId":"5708","endLine":235,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":36,"column":36,"nodeType":"5707","messageId":"5708","endLine":36,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":34,"column":36,"nodeType":"5707","messageId":"5708","endLine":34,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":46,"column":8,"nodeType":"5711","endLine":46,"endColumn":17,"suggestions":"5824"},{"ruleId":"5709","severity":1,"message":"5710","line":46,"column":8,"nodeType":"5711","endLine":46,"endColumn":10,"suggestions":"5825"},{"ruleId":"5705","severity":1,"message":"5706","line":35,"column":36,"nodeType":"5707","messageId":"5708","endLine":35,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":46,"column":8,"nodeType":"5711","endLine":46,"endColumn":10,"suggestions":"5826"},{"ruleId":"5705","severity":1,"message":"5706","line":132,"column":49,"nodeType":"5707","messageId":"5708","endLine":132,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":133,"column":46,"nodeType":"5707","messageId":"5708","endLine":133,"endColumn":48},{"ruleId":"5705","severity":1,"message":"5706","line":33,"column":36,"nodeType":"5707","messageId":"5708","endLine":33,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":44,"column":8,"nodeType":"5711","endLine":44,"endColumn":10,"suggestions":"5827"},{"ruleId":"5705","severity":1,"message":"5706","line":130,"column":49,"nodeType":"5707","messageId":"5708","endLine":130,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":131,"column":49,"nodeType":"5707","messageId":"5708","endLine":131,"endColumn":51},{"ruleId":"5693","severity":1,"message":"5828","line":11,"column":10,"nodeType":"5695","messageId":"5696","endLine":11,"endColumn":12},{"ruleId":"5705","severity":1,"message":"5706","line":71,"column":27,"nodeType":"5707","messageId":"5708","endLine":71,"endColumn":29},{"ruleId":"5705","severity":1,"message":"5706","line":73,"column":34,"nodeType":"5707","messageId":"5708","endLine":73,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":75,"column":34,"nodeType":"5707","messageId":"5708","endLine":75,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":77,"column":34,"nodeType":"5707","messageId":"5708","endLine":77,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":79,"column":34,"nodeType":"5707","messageId":"5708","endLine":79,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":81,"column":34,"nodeType":"5707","messageId":"5708","endLine":81,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":83,"column":34,"nodeType":"5707","messageId":"5708","endLine":83,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":85,"column":34,"nodeType":"5707","messageId":"5708","endLine":85,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":87,"column":34,"nodeType":"5707","messageId":"5708","endLine":87,"endColumn":36},{"ruleId":"5709","severity":1,"message":"5710","line":93,"column":8,"nodeType":"5711","endLine":93,"endColumn":10,"suggestions":"5829"},{"ruleId":"5705","severity":1,"message":"5706","line":105,"column":33,"nodeType":"5707","messageId":"5708","endLine":105,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":110,"column":51,"nodeType":"5707","messageId":"5708","endLine":110,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":112,"column":58,"nodeType":"5707","messageId":"5708","endLine":112,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":114,"column":58,"nodeType":"5707","messageId":"5708","endLine":114,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":116,"column":58,"nodeType":"5707","messageId":"5708","endLine":116,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":118,"column":58,"nodeType":"5707","messageId":"5708","endLine":118,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":120,"column":58,"nodeType":"5707","messageId":"5708","endLine":120,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":122,"column":58,"nodeType":"5707","messageId":"5708","endLine":122,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":124,"column":58,"nodeType":"5707","messageId":"5708","endLine":124,"endColumn":60},{"ruleId":"5693","severity":1,"message":"5830","line":1,"column":55,"nodeType":"5695","messageId":"5696","endLine":1,"endColumn":63},{"ruleId":"5693","severity":1,"message":"5831","line":2,"column":8,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":16},{"ruleId":"5705","severity":1,"message":"5706","line":50,"column":24,"nodeType":"5707","messageId":"5708","endLine":50,"endColumn":26},{"ruleId":"5709","severity":1,"message":"5832","line":39,"column":8,"nodeType":"5711","endLine":39,"endColumn":10,"suggestions":"5833"},{"ruleId":"5705","severity":1,"message":"5706","line":55,"column":33,"nodeType":"5707","messageId":"5708","endLine":55,"endColumn":35},{"ruleId":"5722","severity":1,"message":"5723","line":100,"column":17,"nodeType":"5724","endLine":105,"endColumn":19},{"ruleId":"5705","severity":1,"message":"5706","line":121,"column":54,"nodeType":"5707","messageId":"5708","endLine":121,"endColumn":56},{"ruleId":"5709","severity":1,"message":"5834","line":47,"column":8,"nodeType":"5711","endLine":47,"endColumn":17,"suggestions":"5835"},{"ruleId":"5705","severity":1,"message":"5706","line":133,"column":31,"nodeType":"5707","messageId":"5708","endLine":133,"endColumn":33},{"ruleId":"5709","severity":1,"message":"5836","line":47,"column":8,"nodeType":"5711","endLine":47,"endColumn":17,"suggestions":"5837"},{"ruleId":"5705","severity":1,"message":"5706","line":128,"column":44,"nodeType":"5707","messageId":"5708","endLine":128,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":140,"column":44,"nodeType":"5707","messageId":"5708","endLine":140,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":152,"column":44,"nodeType":"5707","messageId":"5708","endLine":152,"endColumn":46},{"ruleId":"5770","severity":1,"message":"5771","line":32,"column":55,"nodeType":"5707","messageId":"5772","endLine":32,"endColumn":56},{"ruleId":"5709","severity":1,"message":"5838","line":47,"column":8,"nodeType":"5711","endLine":47,"endColumn":17,"suggestions":"5839"},{"ruleId":"5693","severity":1,"message":"5840","line":49,"column":11,"nodeType":"5695","messageId":"5696","endLine":49,"endColumn":22},{"ruleId":"5709","severity":1,"message":"5836","line":49,"column":8,"nodeType":"5711","endLine":49,"endColumn":17,"suggestions":"5841"},{"ruleId":"5705","severity":1,"message":"5706","line":60,"column":27,"nodeType":"5707","messageId":"5708","endLine":60,"endColumn":29},{"ruleId":"5705","severity":1,"message":"5706","line":132,"column":34,"nodeType":"5707","messageId":"5708","endLine":132,"endColumn":36},{"ruleId":"5709","severity":1,"message":"5838","line":47,"column":8,"nodeType":"5711","endLine":47,"endColumn":17,"suggestions":"5842"},{"ruleId":"5705","severity":1,"message":"5706","line":128,"column":44,"nodeType":"5707","messageId":"5708","endLine":128,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":140,"column":44,"nodeType":"5707","messageId":"5708","endLine":140,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":152,"column":44,"nodeType":"5707","messageId":"5708","endLine":152,"endColumn":46},{"ruleId":"5693","severity":1,"message":"5718","line":1,"column":27,"nodeType":"5695","messageId":"5696","endLine":1,"endColumn":36},{"ruleId":"5693","severity":1,"message":"5730","line":2,"column":26,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":30},{"ruleId":"5693","severity":1,"message":"5843","line":5,"column":8,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":12},{"ruleId":"5705","severity":1,"message":"5706","line":41,"column":28,"nodeType":"5707","messageId":"5708","endLine":41,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":79,"column":54,"nodeType":"5707","messageId":"5708","endLine":79,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":51,"column":32,"nodeType":"5707","messageId":"5708","endLine":51,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":53,"column":39,"nodeType":"5707","messageId":"5708","endLine":53,"endColumn":41},{"ruleId":"5709","severity":1,"message":"5844","line":62,"column":8,"nodeType":"5711","endLine":62,"endColumn":17,"suggestions":"5845"},{"ruleId":"5705","severity":1,"message":"5706","line":87,"column":28,"nodeType":"5707","messageId":"5708","endLine":87,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":99,"column":74,"nodeType":"5707","messageId":"5708","endLine":99,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":116,"column":44,"nodeType":"5707","messageId":"5708","endLine":116,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":125,"column":31,"nodeType":"5707","messageId":"5708","endLine":125,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5706","line":142,"column":28,"nodeType":"5707","messageId":"5708","endLine":142,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":150,"column":68,"nodeType":"5707","messageId":"5708","endLine":150,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":161,"column":44,"nodeType":"5707","messageId":"5708","endLine":161,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":185,"column":28,"nodeType":"5707","messageId":"5708","endLine":185,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":229,"column":65,"nodeType":"5707","messageId":"5708","endLine":229,"endColumn":67},{"ruleId":"5705","severity":1,"message":"5706","line":271,"column":54,"nodeType":"5707","messageId":"5708","endLine":271,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":273,"column":60,"nodeType":"5707","messageId":"5708","endLine":273,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":283,"column":61,"nodeType":"5707","messageId":"5708","endLine":283,"endColumn":63},{"ruleId":"5705","severity":1,"message":"5706","line":293,"column":54,"nodeType":"5707","messageId":"5708","endLine":293,"endColumn":56},{"ruleId":"5709","severity":1,"message":"5846","line":335,"column":8,"nodeType":"5711","endLine":335,"endColumn":23,"suggestions":"5847"},{"ruleId":"5693","severity":1,"message":"5755","line":6,"column":18,"nodeType":"5695","messageId":"5696","endLine":6,"endColumn":21},{"ruleId":"5705","severity":1,"message":"5706","line":39,"column":36,"nodeType":"5707","messageId":"5708","endLine":39,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":68,"column":36,"nodeType":"5707","messageId":"5708","endLine":68,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":134,"column":44,"nodeType":"5707","messageId":"5708","endLine":134,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":146,"column":44,"nodeType":"5707","messageId":"5708","endLine":146,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":158,"column":44,"nodeType":"5707","messageId":"5708","endLine":158,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":187,"column":53,"nodeType":"5707","messageId":"5708","endLine":187,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":37,"column":28,"nodeType":"5707","messageId":"5708","endLine":37,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":76,"column":63,"nodeType":"5707","messageId":"5708","endLine":76,"endColumn":65},{"ruleId":"5705","severity":1,"message":"5706","line":37,"column":28,"nodeType":"5707","messageId":"5708","endLine":37,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":76,"column":58,"nodeType":"5707","messageId":"5708","endLine":76,"endColumn":60},{"ruleId":"5709","severity":1,"message":"5848","line":52,"column":8,"nodeType":"5711","endLine":52,"endColumn":17,"suggestions":"5849"},{"ruleId":"5693","severity":1,"message":"5850","line":55,"column":11,"nodeType":"5695","messageId":"5696","endLine":55,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5706","line":92,"column":36,"nodeType":"5707","messageId":"5708","endLine":92,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":50,"column":39,"nodeType":"5707","messageId":"5708","endLine":50,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":88,"column":63,"nodeType":"5707","messageId":"5708","endLine":88,"endColumn":65},{"ruleId":"5705","severity":1,"message":"5721","line":78,"column":52,"nodeType":"5707","messageId":"5708","endLine":78,"endColumn":54},{"ruleId":"5705","severity":1,"message":"5706","line":88,"column":36,"nodeType":"5707","messageId":"5708","endLine":88,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5844","line":106,"column":8,"nodeType":"5711","endLine":106,"endColumn":10,"suggestions":"5851"},{"ruleId":"5709","severity":1,"message":"5710","line":127,"column":8,"nodeType":"5711","endLine":127,"endColumn":17,"suggestions":"5852"},{"ruleId":"5770","severity":1,"message":"5771","line":132,"column":53,"nodeType":"5707","messageId":"5772","endLine":132,"endColumn":54},{"ruleId":"5705","severity":1,"message":"5706","line":139,"column":40,"nodeType":"5707","messageId":"5708","endLine":139,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":144,"column":40,"nodeType":"5707","messageId":"5708","endLine":144,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":162,"column":33,"nodeType":"5707","messageId":"5708","endLine":162,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":164,"column":39,"nodeType":"5707","messageId":"5708","endLine":164,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":168,"column":39,"nodeType":"5707","messageId":"5708","endLine":168,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":183,"column":36,"nodeType":"5707","messageId":"5708","endLine":183,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":186,"column":40,"nodeType":"5707","messageId":"5708","endLine":186,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":194,"column":41,"nodeType":"5707","messageId":"5708","endLine":194,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":206,"column":33,"nodeType":"5707","messageId":"5708","endLine":206,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":223,"column":21,"nodeType":"5707","messageId":"5708","endLine":223,"endColumn":23},{"ruleId":"5705","severity":1,"message":"5706","line":226,"column":32,"nodeType":"5707","messageId":"5708","endLine":226,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":229,"column":66,"nodeType":"5707","messageId":"5708","endLine":229,"endColumn":68},{"ruleId":"5705","severity":1,"message":"5706","line":233,"column":42,"nodeType":"5707","messageId":"5708","endLine":233,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":234,"column":42,"nodeType":"5707","messageId":"5708","endLine":234,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":235,"column":26,"nodeType":"5707","messageId":"5708","endLine":235,"endColumn":28},{"ruleId":"5705","severity":1,"message":"5706","line":235,"column":40,"nodeType":"5707","messageId":"5708","endLine":235,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":250,"column":32,"nodeType":"5707","messageId":"5708","endLine":250,"endColumn":34},{"ruleId":"5693","severity":1,"message":"5853","line":263,"column":11,"nodeType":"5695","messageId":"5696","endLine":263,"endColumn":23},{"ruleId":"5705","severity":1,"message":"5706","line":270,"column":29,"nodeType":"5707","messageId":"5708","endLine":270,"endColumn":31},{"ruleId":"5705","severity":1,"message":"5706","line":292,"column":36,"nodeType":"5707","messageId":"5708","endLine":292,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":317,"column":36,"nodeType":"5707","messageId":"5708","endLine":317,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":342,"column":36,"nodeType":"5707","messageId":"5708","endLine":342,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5721","line":378,"column":60,"nodeType":"5707","messageId":"5708","endLine":378,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":395,"column":60,"nodeType":"5707","messageId":"5708","endLine":395,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":435,"column":57,"nodeType":"5707","messageId":"5708","endLine":435,"endColumn":59},{"ruleId":"5709","severity":1,"message":"5854","line":449,"column":8,"nodeType":"5711","endLine":449,"endColumn":27,"suggestions":"5855"},{"ruleId":"5709","severity":1,"message":"5856","line":449,"column":9,"nodeType":"5857","endLine":449,"endColumn":26},{"ruleId":"5705","severity":1,"message":"5721","line":494,"column":60,"nodeType":"5707","messageId":"5708","endLine":494,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":513,"column":60,"nodeType":"5707","messageId":"5708","endLine":513,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":554,"column":57,"nodeType":"5707","messageId":"5708","endLine":554,"endColumn":59},{"ruleId":"5709","severity":1,"message":"5858","line":568,"column":8,"nodeType":"5711","endLine":568,"endColumn":52,"suggestions":"5859"},{"ruleId":"5709","severity":1,"message":"5856","line":568,"column":9,"nodeType":"5857","endLine":568,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5706","line":781,"column":45,"nodeType":"5707","messageId":"5708","endLine":781,"endColumn":47},{"ruleId":"5705","severity":1,"message":"5706","line":782,"column":49,"nodeType":"5707","messageId":"5708","endLine":782,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":783,"column":52,"nodeType":"5707","messageId":"5708","endLine":783,"endColumn":54},{"ruleId":"5705","severity":1,"message":"5706","line":61,"column":36,"nodeType":"5707","messageId":"5708","endLine":61,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5739","line":75,"column":8,"nodeType":"5711","endLine":75,"endColumn":23,"suggestions":"5860"},{"ruleId":"5705","severity":1,"message":"5706","line":122,"column":36,"nodeType":"5707","messageId":"5708","endLine":122,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":134,"column":36,"nodeType":"5707","messageId":"5708","endLine":134,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":208,"column":58,"nodeType":"5707","messageId":"5708","endLine":208,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":219,"column":62,"nodeType":"5707","messageId":"5708","endLine":219,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":221,"column":68,"nodeType":"5707","messageId":"5708","endLine":221,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":235,"column":62,"nodeType":"5707","messageId":"5708","endLine":235,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":246,"column":67,"nodeType":"5707","messageId":"5708","endLine":246,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":254,"column":64,"nodeType":"5707","messageId":"5708","endLine":254,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5721","line":264,"column":65,"nodeType":"5707","messageId":"5708","endLine":264,"endColumn":67},{"ruleId":"5705","severity":1,"message":"5721","line":277,"column":68,"nodeType":"5707","messageId":"5708","endLine":277,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":286,"column":67,"nodeType":"5707","messageId":"5708","endLine":286,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":295,"column":70,"nodeType":"5707","messageId":"5708","endLine":295,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5721","line":302,"column":73,"nodeType":"5707","messageId":"5708","endLine":302,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":315,"column":71,"nodeType":"5707","messageId":"5708","endLine":315,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5721","line":326,"column":72,"nodeType":"5707","messageId":"5708","endLine":326,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5721","line":336,"column":71,"nodeType":"5707","messageId":"5708","endLine":336,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5721","line":346,"column":69,"nodeType":"5707","messageId":"5708","endLine":346,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5721","line":358,"column":74,"nodeType":"5707","messageId":"5708","endLine":358,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":368,"column":66,"nodeType":"5707","messageId":"5708","endLine":368,"endColumn":68},{"ruleId":"5705","severity":1,"message":"5721","line":377,"column":68,"nodeType":"5707","messageId":"5708","endLine":377,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":386,"column":72,"nodeType":"5707","messageId":"5708","endLine":386,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5721","line":396,"column":69,"nodeType":"5707","messageId":"5708","endLine":396,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5721","line":408,"column":69,"nodeType":"5707","messageId":"5708","endLine":408,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5721","line":417,"column":61,"nodeType":"5707","messageId":"5708","endLine":417,"endColumn":63},{"ruleId":"5705","severity":1,"message":"5721","line":426,"column":62,"nodeType":"5707","messageId":"5708","endLine":426,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5721","line":435,"column":67,"nodeType":"5707","messageId":"5708","endLine":435,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5721","line":444,"column":64,"nodeType":"5707","messageId":"5708","endLine":444,"endColumn":66},{"ruleId":"5709","severity":1,"message":"5741","line":457,"column":8,"nodeType":"5711","endLine":457,"endColumn":20,"suggestions":"5861"},{"ruleId":"5705","severity":1,"message":"5706","line":492,"column":47,"nodeType":"5707","messageId":"5708","endLine":492,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":29,"column":32,"nodeType":"5707","messageId":"5708","endLine":29,"endColumn":34},{"ruleId":"5709","severity":1,"message":"5838","line":38,"column":8,"nodeType":"5711","endLine":38,"endColumn":17,"suggestions":"5862"},{"ruleId":"5693","severity":1,"message":"5863","line":99,"column":12,"nodeType":"5695","messageId":"5696","endLine":99,"endColumn":22},{"ruleId":"5705","severity":1,"message":"5706","line":123,"column":43,"nodeType":"5707","messageId":"5708","endLine":123,"endColumn":45},{"ruleId":"5709","severity":1,"message":"5864","line":144,"column":8,"nodeType":"5711","endLine":144,"endColumn":17,"suggestions":"5865"},{"ruleId":"5705","severity":1,"message":"5706","line":154,"column":45,"nodeType":"5707","messageId":"5708","endLine":154,"endColumn":47},{"ruleId":"5705","severity":1,"message":"5706","line":155,"column":56,"nodeType":"5707","messageId":"5708","endLine":155,"endColumn":58},{"ruleId":"5709","severity":1,"message":"5836","line":161,"column":8,"nodeType":"5711","endLine":161,"endColumn":17,"suggestions":"5866"},{"ruleId":"5705","severity":1,"message":"5706","line":201,"column":50,"nodeType":"5707","messageId":"5708","endLine":201,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":289,"column":40,"nodeType":"5707","messageId":"5708","endLine":289,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":289,"column":68,"nodeType":"5707","messageId":"5708","endLine":289,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":293,"column":30,"nodeType":"5707","messageId":"5708","endLine":293,"endColumn":32},{"ruleId":"5705","severity":1,"message":"5706","line":295,"column":46,"nodeType":"5707","messageId":"5708","endLine":295,"endColumn":48},{"ruleId":"5705","severity":1,"message":"5706","line":336,"column":67,"nodeType":"5707","messageId":"5708","endLine":336,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":341,"column":40,"nodeType":"5707","messageId":"5708","endLine":341,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":350,"column":47,"nodeType":"5707","messageId":"5708","endLine":350,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":363,"column":34,"nodeType":"5707","messageId":"5708","endLine":363,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":374,"column":34,"nodeType":"5707","messageId":"5708","endLine":374,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":376,"column":46,"nodeType":"5707","messageId":"5708","endLine":376,"endColumn":48},{"ruleId":"5705","severity":1,"message":"5706","line":413,"column":67,"nodeType":"5707","messageId":"5708","endLine":413,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":421,"column":40,"nodeType":"5707","messageId":"5708","endLine":421,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":432,"column":47,"nodeType":"5707","messageId":"5708","endLine":432,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":474,"column":28,"nodeType":"5707","messageId":"5708","endLine":474,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":528,"column":43,"nodeType":"5707","messageId":"5708","endLine":528,"endColumn":45},{"ruleId":"5705","severity":1,"message":"5706","line":529,"column":42,"nodeType":"5707","messageId":"5708","endLine":529,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":530,"column":42,"nodeType":"5707","messageId":"5708","endLine":530,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":587,"column":73,"nodeType":"5707","messageId":"5708","endLine":587,"endColumn":75},{"ruleId":"5709","severity":1,"message":"5854","line":605,"column":8,"nodeType":"5711","endLine":605,"endColumn":26,"suggestions":"5867"},{"ruleId":"5709","severity":1,"message":"5856","line":605,"column":9,"nodeType":"5857","endLine":605,"endColumn":25},{"ruleId":"5705","severity":1,"message":"5706","line":638,"column":72,"nodeType":"5707","messageId":"5708","endLine":638,"endColumn":74},{"ruleId":"5868","severity":1,"message":"5869","line":697,"column":33,"nodeType":"5724","endLine":710,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":702,"column":75,"nodeType":"5707","messageId":"5708","endLine":702,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5706","line":745,"column":48,"nodeType":"5707","messageId":"5708","endLine":745,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":758,"column":48,"nodeType":"5707","messageId":"5708","endLine":758,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":809,"column":37,"nodeType":"5707","messageId":"5708","endLine":809,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":835,"column":40,"nodeType":"5707","messageId":"5708","endLine":835,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":836,"column":40,"nodeType":"5707","messageId":"5708","endLine":836,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":884,"column":48,"nodeType":"5707","messageId":"5708","endLine":884,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":960,"column":48,"nodeType":"5707","messageId":"5708","endLine":960,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":972,"column":48,"nodeType":"5707","messageId":"5708","endLine":972,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":984,"column":51,"nodeType":"5707","messageId":"5708","endLine":984,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":1024,"column":37,"nodeType":"5707","messageId":"5708","endLine":1024,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":1129,"column":69,"nodeType":"5707","messageId":"5708","endLine":1129,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5706","line":1147,"column":65,"nodeType":"5707","messageId":"5708","endLine":1147,"endColumn":67},{"ruleId":"5705","severity":1,"message":"5706","line":1173,"column":77,"nodeType":"5707","messageId":"5708","endLine":1173,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":1200,"column":77,"nodeType":"5707","messageId":"5708","endLine":1200,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5706","line":34,"column":36,"nodeType":"5707","messageId":"5708","endLine":34,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5844","line":45,"column":8,"nodeType":"5711","endLine":45,"endColumn":10,"suggestions":"5870"},{"ruleId":"5705","severity":1,"message":"5706","line":29,"column":32,"nodeType":"5707","messageId":"5708","endLine":29,"endColumn":34},{"ruleId":"5709","severity":1,"message":"5838","line":38,"column":8,"nodeType":"5711","endLine":38,"endColumn":17,"suggestions":"5871"},{"ruleId":"5770","severity":1,"message":"5771","line":39,"column":58,"nodeType":"5707","messageId":"5772","endLine":39,"endColumn":59},{"ruleId":"5709","severity":1,"message":"5872","line":52,"column":8,"nodeType":"5711","endLine":52,"endColumn":10,"suggestions":"5873"},{"ruleId":"5705","severity":1,"message":"5706","line":70,"column":43,"nodeType":"5707","messageId":"5708","endLine":70,"endColumn":45},{"ruleId":"5770","severity":1,"message":"5771","line":82,"column":54,"nodeType":"5707","messageId":"5772","endLine":82,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":88,"column":40,"nodeType":"5707","messageId":"5708","endLine":88,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":106,"column":33,"nodeType":"5707","messageId":"5708","endLine":106,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":108,"column":39,"nodeType":"5707","messageId":"5708","endLine":108,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":122,"column":36,"nodeType":"5707","messageId":"5708","endLine":122,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":125,"column":40,"nodeType":"5707","messageId":"5708","endLine":125,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":132,"column":41,"nodeType":"5707","messageId":"5708","endLine":132,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":146,"column":33,"nodeType":"5707","messageId":"5708","endLine":146,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":166,"column":33,"nodeType":"5707","messageId":"5708","endLine":166,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":170,"column":52,"nodeType":"5707","messageId":"5708","endLine":170,"endColumn":54},{"ruleId":"5705","severity":1,"message":"5706","line":171,"column":30,"nodeType":"5707","messageId":"5708","endLine":171,"endColumn":32},{"ruleId":"5705","severity":1,"message":"5706","line":177,"column":44,"nodeType":"5707","messageId":"5708","endLine":177,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5721","line":178,"column":32,"nodeType":"5707","messageId":"5708","endLine":178,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":183,"column":59,"nodeType":"5707","messageId":"5708","endLine":183,"endColumn":61},{"ruleId":"5705","severity":1,"message":"5721","line":192,"column":58,"nodeType":"5707","messageId":"5708","endLine":192,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":194,"column":40,"nodeType":"5707","messageId":"5708","endLine":194,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":206,"column":40,"nodeType":"5707","messageId":"5708","endLine":206,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":230,"column":29,"nodeType":"5707","messageId":"5708","endLine":230,"endColumn":31},{"ruleId":"5705","severity":1,"message":"5706","line":304,"column":57,"nodeType":"5707","messageId":"5708","endLine":304,"endColumn":59},{"ruleId":"5709","severity":1,"message":"5874","line":318,"column":8,"nodeType":"5711","endLine":318,"endColumn":32,"suggestions":"5875"},{"ruleId":"5709","severity":1,"message":"5856","line":318,"column":9,"nodeType":"5857","endLine":318,"endColumn":31},{"ruleId":"5705","severity":1,"message":"5706","line":403,"column":61,"nodeType":"5707","messageId":"5708","endLine":403,"endColumn":63},{"ruleId":"5709","severity":1,"message":"5876","line":445,"column":8,"nodeType":"5711","endLine":445,"endColumn":58,"suggestions":"5877"},{"ruleId":"5709","severity":1,"message":"5856","line":445,"column":9,"nodeType":"5857","endLine":445,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":495,"column":53,"nodeType":"5707","messageId":"5708","endLine":495,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":522,"column":37,"nodeType":"5707","messageId":"5708","endLine":522,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":523,"column":41,"nodeType":"5707","messageId":"5708","endLine":523,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":29,"column":32,"nodeType":"5707","messageId":"5708","endLine":29,"endColumn":34},{"ruleId":"5709","severity":1,"message":"5838","line":38,"column":8,"nodeType":"5711","endLine":38,"endColumn":17,"suggestions":"5878"},{"ruleId":"5693","severity":1,"message":"5879","line":33,"column":12,"nodeType":"5695","messageId":"5696","endLine":33,"endColumn":21},{"ruleId":"5693","severity":1,"message":"5880","line":33,"column":23,"nodeType":"5695","messageId":"5696","endLine":33,"endColumn":35},{"ruleId":"5709","severity":1,"message":"5881","line":60,"column":8,"nodeType":"5711","endLine":60,"endColumn":17,"suggestions":"5882"},{"ruleId":"5709","severity":1,"message":"5883","line":106,"column":8,"nodeType":"5711","endLine":106,"endColumn":28,"suggestions":"5884"},{"ruleId":"5705","severity":1,"message":"5706","line":330,"column":95,"nodeType":"5707","messageId":"5708","endLine":330,"endColumn":97},{"ruleId":"5705","severity":1,"message":"5706","line":29,"column":32,"nodeType":"5707","messageId":"5708","endLine":29,"endColumn":34},{"ruleId":"5709","severity":1,"message":"5838","line":38,"column":8,"nodeType":"5711","endLine":38,"endColumn":17,"suggestions":"5885"},{"ruleId":"5693","severity":1,"message":"5805","line":21,"column":21,"nodeType":"5695","messageId":"5696","endLine":21,"endColumn":31},{"ruleId":"5709","severity":1,"message":"5838","line":38,"column":8,"nodeType":"5711","endLine":38,"endColumn":17,"suggestions":"5886"},{"ruleId":"5770","severity":1,"message":"5771","line":28,"column":55,"nodeType":"5707","messageId":"5772","endLine":28,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":31,"column":59,"nodeType":"5707","messageId":"5708","endLine":31,"endColumn":61},{"ruleId":"5709","severity":1,"message":"5838","line":42,"column":8,"nodeType":"5711","endLine":42,"endColumn":10,"suggestions":"5887"},{"ruleId":"5693","severity":1,"message":"5804","line":22,"column":12,"nodeType":"5695","messageId":"5696","endLine":22,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5805","line":22,"column":21,"nodeType":"5695","messageId":"5696","endLine":22,"endColumn":31},{"ruleId":"5709","severity":1,"message":"5838","line":43,"column":8,"nodeType":"5711","endLine":43,"endColumn":10,"suggestions":"5888"},{"ruleId":"5705","severity":1,"message":"5706","line":80,"column":26,"nodeType":"5707","messageId":"5708","endLine":80,"endColumn":28},{"ruleId":"5705","severity":1,"message":"5706","line":90,"column":36,"nodeType":"5707","messageId":"5708","endLine":90,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":156,"column":34,"nodeType":"5707","messageId":"5708","endLine":156,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":157,"column":46,"nodeType":"5707","messageId":"5708","endLine":157,"endColumn":48},{"ruleId":"5705","severity":1,"message":"5706","line":159,"column":48,"nodeType":"5707","messageId":"5708","endLine":159,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":162,"column":48,"nodeType":"5707","messageId":"5708","endLine":162,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":175,"column":49,"nodeType":"5707","messageId":"5708","endLine":175,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":176,"column":47,"nodeType":"5707","messageId":"5708","endLine":176,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":278,"column":40,"nodeType":"5707","messageId":"5708","endLine":278,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":286,"column":43,"nodeType":"5707","messageId":"5708","endLine":286,"endColumn":45},{"ruleId":"5705","severity":1,"message":"5706","line":301,"column":56,"nodeType":"5707","messageId":"5708","endLine":301,"endColumn":58},{"ruleId":"5693","severity":1,"message":"5889","line":21,"column":19,"nodeType":"5695","messageId":"5696","endLine":21,"endColumn":25},{"ruleId":"5709","severity":1,"message":"5872","line":44,"column":6,"nodeType":"5711","endLine":44,"endColumn":15,"suggestions":"5890"},{"ruleId":"5705","severity":1,"message":"5706","line":139,"column":34,"nodeType":"5707","messageId":"5708","endLine":139,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":145,"column":34,"nodeType":"5707","messageId":"5708","endLine":145,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":158,"column":36,"nodeType":"5707","messageId":"5708","endLine":158,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":164,"column":36,"nodeType":"5707","messageId":"5708","endLine":164,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5891","line":176,"column":6,"nodeType":"5711","endLine":176,"endColumn":23,"suggestions":"5892"},{"ruleId":"5705","severity":1,"message":"5706","line":237,"column":34,"nodeType":"5707","messageId":"5708","endLine":237,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":243,"column":34,"nodeType":"5707","messageId":"5708","endLine":243,"endColumn":36},{"ruleId":"5705","severity":1,"message":"5706","line":257,"column":36,"nodeType":"5707","messageId":"5708","endLine":257,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":263,"column":36,"nodeType":"5707","messageId":"5708","endLine":263,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5893","line":275,"column":6,"nodeType":"5711","endLine":275,"endColumn":47,"suggestions":"5894"},{"ruleId":"5709","severity":1,"message":"5872","line":105,"column":8,"nodeType":"5711","endLine":105,"endColumn":17,"suggestions":"5895"},{"ruleId":"5705","severity":1,"message":"5706","line":169,"column":29,"nodeType":"5707","messageId":"5708","endLine":169,"endColumn":31},{"ruleId":"5709","severity":1,"message":"5896","line":311,"column":8,"nodeType":"5711","endLine":311,"endColumn":38,"suggestions":"5897"},{"ruleId":"5705","severity":1,"message":"5706","line":427,"column":44,"nodeType":"5707","messageId":"5708","endLine":427,"endColumn":46},{"ruleId":"5709","severity":1,"message":"5898","line":46,"column":8,"nodeType":"5711","endLine":46,"endColumn":10,"suggestions":"5899"},{"ruleId":"5705","severity":1,"message":"5706","line":84,"column":26,"nodeType":"5707","messageId":"5708","endLine":84,"endColumn":28},{"ruleId":"5705","severity":1,"message":"5706","line":94,"column":36,"nodeType":"5707","messageId":"5708","endLine":94,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":169,"column":63,"nodeType":"5707","messageId":"5708","endLine":169,"endColumn":65},{"ruleId":"5705","severity":1,"message":"5706","line":171,"column":68,"nodeType":"5707","messageId":"5708","endLine":171,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":173,"column":74,"nodeType":"5707","messageId":"5708","endLine":173,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":177,"column":74,"nodeType":"5707","messageId":"5708","endLine":177,"endColumn":76},{"ruleId":"5709","severity":1,"message":"5872","line":52,"column":8,"nodeType":"5711","endLine":52,"endColumn":10,"suggestions":"5900"},{"ruleId":"5770","severity":1,"message":"5771","line":57,"column":54,"nodeType":"5707","messageId":"5772","endLine":57,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":63,"column":40,"nodeType":"5707","messageId":"5708","endLine":63,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":66,"column":40,"nodeType":"5707","messageId":"5708","endLine":66,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5706","line":84,"column":33,"nodeType":"5707","messageId":"5708","endLine":84,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":108,"column":29,"nodeType":"5707","messageId":"5708","endLine":108,"endColumn":31},{"ruleId":"5705","severity":1,"message":"5721","line":178,"column":60,"nodeType":"5707","messageId":"5708","endLine":178,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":222,"column":57,"nodeType":"5707","messageId":"5708","endLine":222,"endColumn":59},{"ruleId":"5709","severity":1,"message":"5874","line":236,"column":8,"nodeType":"5711","endLine":236,"endColumn":32,"suggestions":"5901"},{"ruleId":"5709","severity":1,"message":"5856","line":236,"column":9,"nodeType":"5857","endLine":236,"endColumn":31},{"ruleId":"5705","severity":1,"message":"5721","line":278,"column":64,"nodeType":"5707","messageId":"5708","endLine":278,"endColumn":66},{"ruleId":"5705","severity":1,"message":"5706","line":327,"column":61,"nodeType":"5707","messageId":"5708","endLine":327,"endColumn":63},{"ruleId":"5709","severity":1,"message":"5902","line":342,"column":8,"nodeType":"5711","endLine":342,"endColumn":58,"suggestions":"5903"},{"ruleId":"5709","severity":1,"message":"5856","line":342,"column":9,"nodeType":"5857","endLine":342,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":417,"column":37,"nodeType":"5707","messageId":"5708","endLine":417,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":418,"column":41,"nodeType":"5707","messageId":"5708","endLine":418,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":419,"column":38,"nodeType":"5707","messageId":"5708","endLine":419,"endColumn":40},{"ruleId":"5693","severity":1,"message":"5904","line":14,"column":5,"nodeType":"5695","messageId":"5696","endLine":14,"endColumn":14},{"ruleId":"5709","severity":1,"message":"5872","line":51,"column":8,"nodeType":"5711","endLine":51,"endColumn":17,"suggestions":"5905"},{"ruleId":"5705","severity":1,"message":"5706","line":67,"column":33,"nodeType":"5707","messageId":"5708","endLine":67,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":85,"column":29,"nodeType":"5707","messageId":"5708","endLine":85,"endColumn":31},{"ruleId":"5705","severity":1,"message":"5706","line":94,"column":32,"nodeType":"5707","messageId":"5708","endLine":94,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":116,"column":33,"nodeType":"5707","messageId":"5708","endLine":116,"endColumn":35},{"ruleId":"5709","severity":1,"message":"5906","line":197,"column":8,"nodeType":"5711","endLine":197,"endColumn":25,"suggestions":"5907"},{"ruleId":"5709","severity":1,"message":"5908","line":289,"column":8,"nodeType":"5711","endLine":289,"endColumn":50,"suggestions":"5909"},{"ruleId":"5705","severity":1,"message":"5706","line":354,"column":37,"nodeType":"5707","messageId":"5708","endLine":354,"endColumn":39},{"ruleId":"5770","severity":1,"message":"5771","line":36,"column":45,"nodeType":"5707","messageId":"5772","endLine":36,"endColumn":46},{"ruleId":"5709","severity":1,"message":"5872","line":49,"column":6,"nodeType":"5711","endLine":49,"endColumn":15,"suggestions":"5910"},{"ruleId":"5705","severity":1,"message":"5706","line":62,"column":25,"nodeType":"5707","messageId":"5708","endLine":62,"endColumn":27},{"ruleId":"5705","severity":1,"message":"5706","line":86,"column":24,"nodeType":"5707","messageId":"5708","endLine":86,"endColumn":26},{"ruleId":"5705","severity":1,"message":"5706","line":99,"column":41,"nodeType":"5707","messageId":"5708","endLine":99,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":107,"column":24,"nodeType":"5707","messageId":"5708","endLine":107,"endColumn":26},{"ruleId":"5705","severity":1,"message":"5706","line":109,"column":33,"nodeType":"5707","messageId":"5708","endLine":109,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5721","line":151,"column":40,"nodeType":"5707","messageId":"5708","endLine":151,"endColumn":42},{"ruleId":"5709","severity":1,"message":"5906","line":190,"column":6,"nodeType":"5711","endLine":190,"endColumn":23,"suggestions":"5911"},{"ruleId":"5705","severity":1,"message":"5721","line":233,"column":40,"nodeType":"5707","messageId":"5708","endLine":233,"endColumn":42},{"ruleId":"5709","severity":1,"message":"5908","line":273,"column":6,"nodeType":"5711","endLine":273,"endColumn":47,"suggestions":"5912"},{"ruleId":"5705","severity":1,"message":"5706","line":322,"column":31,"nodeType":"5707","messageId":"5708","endLine":322,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5706","line":322,"column":55,"nodeType":"5707","messageId":"5708","endLine":322,"endColumn":57},{"ruleId":"5770","severity":1,"message":"5771","line":36,"column":55,"nodeType":"5707","messageId":"5772","endLine":36,"endColumn":56},{"ruleId":"5709","severity":1,"message":"5872","line":49,"column":8,"nodeType":"5711","endLine":49,"endColumn":17,"suggestions":"5913"},{"ruleId":"5705","severity":1,"message":"5706","line":61,"column":33,"nodeType":"5707","messageId":"5708","endLine":61,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":88,"column":32,"nodeType":"5707","messageId":"5708","endLine":88,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":101,"column":48,"nodeType":"5707","messageId":"5708","endLine":101,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":112,"column":32,"nodeType":"5707","messageId":"5708","endLine":112,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":114,"column":43,"nodeType":"5707","messageId":"5708","endLine":114,"endColumn":45},{"ruleId":"5705","severity":1,"message":"5721","line":158,"column":60,"nodeType":"5707","messageId":"5708","endLine":158,"endColumn":62},{"ruleId":"5709","severity":1,"message":"5906","line":197,"column":8,"nodeType":"5711","endLine":197,"endColumn":25,"suggestions":"5914"},{"ruleId":"5705","severity":1,"message":"5721","line":242,"column":60,"nodeType":"5707","messageId":"5708","endLine":242,"endColumn":62},{"ruleId":"5709","severity":1,"message":"5908","line":282,"column":8,"nodeType":"5711","endLine":282,"endColumn":50,"suggestions":"5915"},{"ruleId":"5705","severity":1,"message":"5706","line":338,"column":37,"nodeType":"5707","messageId":"5708","endLine":338,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":338,"column":60,"nodeType":"5707","messageId":"5708","endLine":338,"endColumn":62},{"ruleId":"5693","severity":1,"message":"5916","line":28,"column":22,"nodeType":"5695","messageId":"5696","endLine":28,"endColumn":35},{"ruleId":"5770","severity":1,"message":"5771","line":38,"column":45,"nodeType":"5707","messageId":"5772","endLine":38,"endColumn":46},{"ruleId":"5709","severity":1,"message":"5872","line":54,"column":6,"nodeType":"5711","endLine":54,"endColumn":15,"suggestions":"5917"},{"ruleId":"5705","severity":1,"message":"5706","line":65,"column":25,"nodeType":"5707","messageId":"5708","endLine":65,"endColumn":27},{"ruleId":"5705","severity":1,"message":"5706","line":67,"column":31,"nodeType":"5707","messageId":"5708","endLine":67,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5706","line":90,"column":24,"nodeType":"5707","messageId":"5708","endLine":90,"endColumn":26},{"ruleId":"5705","severity":1,"message":"5706","line":103,"column":23,"nodeType":"5707","messageId":"5708","endLine":103,"endColumn":25},{"ruleId":"5705","severity":1,"message":"5706","line":105,"column":49,"nodeType":"5707","messageId":"5708","endLine":105,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":112,"column":24,"nodeType":"5707","messageId":"5708","endLine":112,"endColumn":26},{"ruleId":"5705","severity":1,"message":"5721","line":151,"column":40,"nodeType":"5707","messageId":"5708","endLine":151,"endColumn":42},{"ruleId":"5709","severity":1,"message":"5906","line":191,"column":6,"nodeType":"5711","endLine":191,"endColumn":23,"suggestions":"5918"},{"ruleId":"5705","severity":1,"message":"5721","line":235,"column":40,"nodeType":"5707","messageId":"5708","endLine":235,"endColumn":42},{"ruleId":"5709","severity":1,"message":"5908","line":275,"column":6,"nodeType":"5711","endLine":275,"endColumn":46,"suggestions":"5919"},{"ruleId":"5693","severity":1,"message":"5920","line":2,"column":18,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":23},{"ruleId":"5705","severity":1,"message":"5706","line":98,"column":36,"nodeType":"5707","messageId":"5708","endLine":98,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":99,"column":36,"nodeType":"5707","messageId":"5708","endLine":99,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":110,"column":36,"nodeType":"5707","messageId":"5708","endLine":110,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":111,"column":36,"nodeType":"5707","messageId":"5708","endLine":111,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":154,"column":40,"nodeType":"5707","messageId":"5708","endLine":154,"endColumn":42},{"ruleId":"5770","severity":1,"message":"5771","line":181,"column":55,"nodeType":"5707","messageId":"5772","endLine":181,"endColumn":56},{"ruleId":"5709","severity":1,"message":"5872","line":197,"column":8,"nodeType":"5711","endLine":197,"endColumn":17,"suggestions":"5921"},{"ruleId":"5705","severity":1,"message":"5706","line":208,"column":33,"nodeType":"5707","messageId":"5708","endLine":208,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":213,"column":69,"nodeType":"5707","messageId":"5708","endLine":213,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5706","line":247,"column":36,"nodeType":"5707","messageId":"5708","endLine":247,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":248,"column":36,"nodeType":"5707","messageId":"5708","endLine":248,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":264,"column":32,"nodeType":"5707","messageId":"5708","endLine":264,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":280,"column":29,"nodeType":"5707","messageId":"5708","endLine":280,"endColumn":31},{"ruleId":"5705","severity":1,"message":"5706","line":283,"column":48,"nodeType":"5707","messageId":"5708","endLine":283,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":292,"column":32,"nodeType":"5707","messageId":"5708","endLine":292,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5721","line":334,"column":60,"nodeType":"5707","messageId":"5708","endLine":334,"endColumn":62},{"ruleId":"5709","severity":1,"message":"5906","line":374,"column":8,"nodeType":"5711","endLine":374,"endColumn":25,"suggestions":"5922"},{"ruleId":"5705","severity":1,"message":"5721","line":420,"column":60,"nodeType":"5707","messageId":"5708","endLine":420,"endColumn":62},{"ruleId":"5709","severity":1,"message":"5908","line":460,"column":8,"nodeType":"5711","endLine":460,"endColumn":49,"suggestions":"5923"},{"ruleId":"5705","severity":1,"message":"5706","line":540,"column":33,"nodeType":"5707","messageId":"5708","endLine":540,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":540,"column":55,"nodeType":"5707","messageId":"5708","endLine":540,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5706","line":591,"column":54,"nodeType":"5707","messageId":"5708","endLine":591,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":626,"column":54,"nodeType":"5707","messageId":"5708","endLine":626,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":658,"column":58,"nodeType":"5707","messageId":"5708","endLine":658,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":698,"column":54,"nodeType":"5707","messageId":"5708","endLine":698,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":724,"column":55,"nodeType":"5707","messageId":"5708","endLine":724,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5706","line":734,"column":62,"nodeType":"5707","messageId":"5708","endLine":734,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":741,"column":67,"nodeType":"5707","messageId":"5708","endLine":741,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":754,"column":58,"nodeType":"5707","messageId":"5708","endLine":754,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":761,"column":67,"nodeType":"5707","messageId":"5708","endLine":761,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":775,"column":37,"nodeType":"5707","messageId":"5708","endLine":775,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":782,"column":54,"nodeType":"5707","messageId":"5708","endLine":782,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":796,"column":50,"nodeType":"5707","messageId":"5708","endLine":796,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":816,"column":50,"nodeType":"5707","messageId":"5708","endLine":816,"endColumn":52},{"ruleId":"5693","severity":1,"message":"5924","line":72,"column":12,"nodeType":"5695","messageId":"5696","endLine":72,"endColumn":23},{"ruleId":"5693","severity":1,"message":"5925","line":72,"column":25,"nodeType":"5695","messageId":"5696","endLine":72,"endColumn":39},{"ruleId":"5693","severity":1,"message":"5926","line":76,"column":12,"nodeType":"5695","messageId":"5696","endLine":76,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5927","line":76,"column":21,"nodeType":"5695","messageId":"5696","endLine":76,"endColumn":31},{"ruleId":"5709","severity":1,"message":"5872","line":129,"column":8,"nodeType":"5711","endLine":129,"endColumn":17,"suggestions":"5928"},{"ruleId":"5705","severity":1,"message":"5706","line":143,"column":33,"nodeType":"5707","messageId":"5708","endLine":143,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":186,"column":36,"nodeType":"5707","messageId":"5708","endLine":186,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5906","line":274,"column":8,"nodeType":"5711","endLine":274,"endColumn":32,"suggestions":"5929"},{"ruleId":"5709","severity":1,"message":"5906","line":333,"column":8,"nodeType":"5711","endLine":333,"endColumn":42,"suggestions":"5930"},{"ruleId":"5705","severity":1,"message":"5706","line":365,"column":49,"nodeType":"5707","messageId":"5708","endLine":365,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":366,"column":49,"nodeType":"5707","messageId":"5708","endLine":366,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":378,"column":56,"nodeType":"5707","messageId":"5708","endLine":378,"endColumn":58},{"ruleId":"5705","severity":1,"message":"5706","line":379,"column":56,"nodeType":"5707","messageId":"5708","endLine":379,"endColumn":58},{"ruleId":"5705","severity":1,"message":"5706","line":390,"column":70,"nodeType":"5707","messageId":"5708","endLine":390,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5706","line":391,"column":70,"nodeType":"5707","messageId":"5708","endLine":391,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5706","line":403,"column":73,"nodeType":"5707","messageId":"5708","endLine":403,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5706","line":404,"column":73,"nodeType":"5707","messageId":"5708","endLine":404,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5706","line":416,"column":70,"nodeType":"5707","messageId":"5708","endLine":416,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5706","line":417,"column":70,"nodeType":"5707","messageId":"5708","endLine":417,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5706","line":429,"column":73,"nodeType":"5707","messageId":"5708","endLine":429,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5706","line":430,"column":73,"nodeType":"5707","messageId":"5708","endLine":430,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5706","line":442,"column":67,"nodeType":"5707","messageId":"5708","endLine":442,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":443,"column":67,"nodeType":"5707","messageId":"5708","endLine":443,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":454,"column":74,"nodeType":"5707","messageId":"5708","endLine":454,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":456,"column":74,"nodeType":"5707","messageId":"5708","endLine":456,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":467,"column":74,"nodeType":"5707","messageId":"5708","endLine":467,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":469,"column":74,"nodeType":"5707","messageId":"5708","endLine":469,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":476,"column":67,"nodeType":"5707","messageId":"5708","endLine":476,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":482,"column":69,"nodeType":"5707","messageId":"5708","endLine":482,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5706","line":483,"column":69,"nodeType":"5707","messageId":"5708","endLine":483,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5706","line":599,"column":48,"nodeType":"5707","messageId":"5708","endLine":599,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":599,"column":74,"nodeType":"5707","messageId":"5708","endLine":599,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5706","line":96,"column":39,"nodeType":"5707","messageId":"5708","endLine":96,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":103,"column":43,"nodeType":"5707","messageId":"5708","endLine":103,"endColumn":45},{"ruleId":"5705","severity":1,"message":"5706","line":110,"column":43,"nodeType":"5707","messageId":"5708","endLine":110,"endColumn":45},{"ruleId":"5705","severity":1,"message":"5706","line":117,"column":39,"nodeType":"5707","messageId":"5708","endLine":117,"endColumn":41},{"ruleId":"5709","severity":1,"message":"5931","line":177,"column":8,"nodeType":"5711","endLine":177,"endColumn":17,"suggestions":"5932"},{"ruleId":"5705","severity":1,"message":"5706","line":188,"column":33,"nodeType":"5707","messageId":"5708","endLine":188,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":215,"column":41,"nodeType":"5707","messageId":"5708","endLine":215,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":235,"column":32,"nodeType":"5707","messageId":"5708","endLine":235,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":255,"column":48,"nodeType":"5707","messageId":"5708","endLine":255,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":263,"column":32,"nodeType":"5707","messageId":"5708","endLine":263,"endColumn":34},{"ruleId":"5709","severity":1,"message":"5906","line":360,"column":8,"nodeType":"5711","endLine":360,"endColumn":32,"suggestions":"5933"},{"ruleId":"5709","severity":1,"message":"5908","line":439,"column":8,"nodeType":"5711","endLine":439,"endColumn":42,"suggestions":"5934"},{"ruleId":"5705","severity":1,"message":"5706","line":681,"column":71,"nodeType":"5707","messageId":"5708","endLine":681,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5706","line":744,"column":41,"nodeType":"5707","messageId":"5708","endLine":744,"endColumn":43},{"ruleId":"5709","severity":1,"message":"5872","line":51,"column":8,"nodeType":"5711","endLine":51,"endColumn":17,"suggestions":"5935"},{"ruleId":"5705","severity":1,"message":"5706","line":68,"column":33,"nodeType":"5707","messageId":"5708","endLine":68,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":86,"column":29,"nodeType":"5707","messageId":"5708","endLine":86,"endColumn":31},{"ruleId":"5705","severity":1,"message":"5706","line":99,"column":32,"nodeType":"5707","messageId":"5708","endLine":99,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":125,"column":33,"nodeType":"5707","messageId":"5708","endLine":125,"endColumn":35},{"ruleId":"5709","severity":1,"message":"5906","line":206,"column":8,"nodeType":"5711","endLine":206,"endColumn":32,"suggestions":"5936"},{"ruleId":"5709","severity":1,"message":"5908","line":296,"column":8,"nodeType":"5711","endLine":296,"endColumn":43,"suggestions":"5937"},{"ruleId":"5709","severity":1,"message":"5872","line":51,"column":8,"nodeType":"5711","endLine":51,"endColumn":17,"suggestions":"5938"},{"ruleId":"5705","severity":1,"message":"5706","line":68,"column":33,"nodeType":"5707","messageId":"5708","endLine":68,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":85,"column":29,"nodeType":"5707","messageId":"5708","endLine":85,"endColumn":31},{"ruleId":"5705","severity":1,"message":"5706","line":98,"column":32,"nodeType":"5707","messageId":"5708","endLine":98,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":124,"column":33,"nodeType":"5707","messageId":"5708","endLine":124,"endColumn":35},{"ruleId":"5709","severity":1,"message":"5906","line":206,"column":8,"nodeType":"5711","endLine":206,"endColumn":32,"suggestions":"5939"},{"ruleId":"5709","severity":1,"message":"5908","line":296,"column":8,"nodeType":"5711","endLine":296,"endColumn":43,"suggestions":"5940"},{"ruleId":"5709","severity":1,"message":"5881","line":53,"column":8,"nodeType":"5711","endLine":53,"endColumn":10,"suggestions":"5941"},{"ruleId":"5709","severity":1,"message":"5872","line":43,"column":8,"nodeType":"5711","endLine":43,"endColumn":10,"suggestions":"5942"},{"ruleId":"5693","severity":1,"message":"5943","line":5,"column":10,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":21},{"ruleId":"5709","severity":1,"message":"5838","line":38,"column":8,"nodeType":"5711","endLine":38,"endColumn":10,"suggestions":"5944"},{"ruleId":"5709","severity":1,"message":"5838","line":51,"column":8,"nodeType":"5711","endLine":51,"endColumn":10,"suggestions":"5945"},{"ruleId":"5693","severity":1,"message":"5754","line":8,"column":10,"nodeType":"5695","messageId":"5696","endLine":8,"endColumn":16},{"ruleId":"5709","severity":1,"message":"5946","line":53,"column":8,"nodeType":"5711","endLine":53,"endColumn":10,"suggestions":"5947"},{"ruleId":"5693","severity":1,"message":"5948","line":55,"column":11,"nodeType":"5695","messageId":"5696","endLine":55,"endColumn":25},{"ruleId":"5709","severity":1,"message":"5838","line":40,"column":10,"nodeType":"5711","endLine":40,"endColumn":12,"suggestions":"5949"},{"ruleId":"5693","severity":1,"message":"5756","line":14,"column":5,"nodeType":"5695","messageId":"5696","endLine":14,"endColumn":13},{"ruleId":"5705","severity":1,"message":"5706","line":68,"column":36,"nodeType":"5707","messageId":"5708","endLine":68,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":79,"column":8,"nodeType":"5711","endLine":79,"endColumn":10,"suggestions":"5950"},{"ruleId":"5705","severity":1,"message":"5706","line":97,"column":32,"nodeType":"5707","messageId":"5708","endLine":97,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5721","line":141,"column":61,"nodeType":"5707","messageId":"5708","endLine":141,"endColumn":63},{"ruleId":"5705","severity":1,"message":"5721","line":150,"column":54,"nodeType":"5707","messageId":"5708","endLine":150,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5721","line":171,"column":56,"nodeType":"5707","messageId":"5708","endLine":171,"endColumn":58},{"ruleId":"5709","severity":1,"message":"5741","line":193,"column":8,"nodeType":"5711","endLine":193,"endColumn":20,"suggestions":"5951"},{"ruleId":"5705","severity":1,"message":"5706","line":231,"column":44,"nodeType":"5707","messageId":"5708","endLine":231,"endColumn":46},{"ruleId":"5693","severity":1,"message":"5718","line":3,"column":27,"nodeType":"5695","messageId":"5696","endLine":3,"endColumn":36},{"ruleId":"5693","severity":1,"message":"5927","line":62,"column":21,"nodeType":"5695","messageId":"5696","endLine":62,"endColumn":31},{"ruleId":"5693","severity":1,"message":"5952","line":64,"column":21,"nodeType":"5695","messageId":"5696","endLine":64,"endColumn":31},{"ruleId":"5693","severity":1,"message":"5953","line":66,"column":13,"nodeType":"5695","messageId":"5696","endLine":66,"endColumn":22},{"ruleId":"5705","severity":1,"message":"5706","line":97,"column":37,"nodeType":"5707","messageId":"5708","endLine":97,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":99,"column":35,"nodeType":"5707","messageId":"5708","endLine":99,"endColumn":37},{"ruleId":"5705","severity":1,"message":"5706","line":101,"column":42,"nodeType":"5707","messageId":"5708","endLine":101,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":103,"column":42,"nodeType":"5707","messageId":"5708","endLine":103,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":105,"column":42,"nodeType":"5707","messageId":"5708","endLine":105,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":107,"column":42,"nodeType":"5707","messageId":"5708","endLine":107,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":109,"column":42,"nodeType":"5707","messageId":"5708","endLine":109,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":112,"column":44,"nodeType":"5707","messageId":"5708","endLine":112,"endColumn":46},{"ruleId":"5693","severity":1,"message":"5954","line":28,"column":12,"nodeType":"5695","messageId":"5696","endLine":28,"endColumn":16},{"ruleId":"5693","severity":1,"message":"5955","line":30,"column":12,"nodeType":"5695","messageId":"5696","endLine":30,"endColumn":23},{"ruleId":"5693","severity":1,"message":"5956","line":30,"column":25,"nodeType":"5695","messageId":"5696","endLine":30,"endColumn":39},{"ruleId":"5693","severity":1,"message":"5926","line":32,"column":12,"nodeType":"5695","messageId":"5696","endLine":32,"endColumn":19},{"ruleId":"5709","severity":1,"message":"5872","line":58,"column":8,"nodeType":"5711","endLine":58,"endColumn":17,"suggestions":"5957"},{"ruleId":"5705","severity":1,"message":"5706","line":116,"column":29,"nodeType":"5707","messageId":"5708","endLine":116,"endColumn":31},{"ruleId":"5705","severity":1,"message":"5706","line":212,"column":72,"nodeType":"5707","messageId":"5708","endLine":212,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5706","line":276,"column":68,"nodeType":"5707","messageId":"5708","endLine":276,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":304,"column":44,"nodeType":"5707","messageId":"5708","endLine":304,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5706","line":35,"column":36,"nodeType":"5707","messageId":"5708","endLine":35,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":46,"column":8,"nodeType":"5711","endLine":46,"endColumn":10,"suggestions":"5958"},{"ruleId":"5705","severity":1,"message":"5706","line":63,"column":36,"nodeType":"5707","messageId":"5708","endLine":63,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":64,"column":51,"nodeType":"5707","messageId":"5708","endLine":64,"endColumn":53},{"ruleId":"5709","severity":1,"message":"5710","line":78,"column":8,"nodeType":"5711","endLine":78,"endColumn":10,"suggestions":"5959"},{"ruleId":"5705","severity":1,"message":"5706","line":105,"column":28,"nodeType":"5707","messageId":"5708","endLine":105,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":146,"column":59,"nodeType":"5707","messageId":"5708","endLine":146,"endColumn":61},{"ruleId":"5709","severity":1,"message":"5741","line":164,"column":8,"nodeType":"5711","endLine":164,"endColumn":34,"suggestions":"5960"},{"ruleId":"5770","severity":1,"message":"5771","line":36,"column":38,"nodeType":"5707","messageId":"5772","endLine":36,"endColumn":39},{"ruleId":"5709","severity":1,"message":"5710","line":50,"column":8,"nodeType":"5711","endLine":50,"endColumn":17,"suggestions":"5961"},{"ruleId":"5693","severity":1,"message":"5924","line":74,"column":12,"nodeType":"5695","messageId":"5696","endLine":74,"endColumn":23},{"ruleId":"5693","severity":1,"message":"5925","line":74,"column":25,"nodeType":"5695","messageId":"5696","endLine":74,"endColumn":39},{"ruleId":"5693","severity":1,"message":"5962","line":79,"column":11,"nodeType":"5695","messageId":"5696","endLine":79,"endColumn":19},{"ruleId":"5770","severity":1,"message":"5771","line":87,"column":58,"nodeType":"5707","messageId":"5772","endLine":87,"endColumn":59},{"ruleId":"5709","severity":1,"message":"5872","line":100,"column":8,"nodeType":"5711","endLine":100,"endColumn":17,"suggestions":"5963"},{"ruleId":"5705","severity":1,"message":"5706","line":115,"column":33,"nodeType":"5707","messageId":"5708","endLine":115,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":146,"column":41,"nodeType":"5707","messageId":"5708","endLine":146,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":155,"column":36,"nodeType":"5707","messageId":"5708","endLine":155,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5706","line":209,"column":28,"nodeType":"5707","messageId":"5708","endLine":209,"endColumn":30},{"ruleId":"5709","severity":1,"message":"5906","line":277,"column":8,"nodeType":"5711","endLine":277,"endColumn":30,"suggestions":"5964"},{"ruleId":"5705","severity":1,"message":"5721","line":303,"column":60,"nodeType":"5707","messageId":"5708","endLine":303,"endColumn":62},{"ruleId":"5709","severity":1,"message":"5906","line":343,"column":8,"nodeType":"5711","endLine":343,"endColumn":50,"suggestions":"5965"},{"ruleId":"5705","severity":1,"message":"5706","line":380,"column":39,"nodeType":"5707","messageId":"5708","endLine":380,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5706","line":417,"column":47,"nodeType":"5707","messageId":"5708","endLine":417,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":418,"column":50,"nodeType":"5707","messageId":"5708","endLine":418,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":419,"column":47,"nodeType":"5707","messageId":"5708","endLine":419,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":420,"column":55,"nodeType":"5707","messageId":"5708","endLine":420,"endColumn":57},{"ruleId":"5705","severity":1,"message":"5706","line":421,"column":46,"nodeType":"5707","messageId":"5708","endLine":421,"endColumn":48},{"ruleId":"5705","severity":1,"message":"5706","line":497,"column":37,"nodeType":"5707","messageId":"5708","endLine":497,"endColumn":39},{"ruleId":"5693","severity":1,"message":"5754","line":4,"column":5,"nodeType":"5695","messageId":"5696","endLine":4,"endColumn":11},{"ruleId":"5693","severity":1,"message":"5966","line":28,"column":7,"nodeType":"5695","messageId":"5696","endLine":28,"endColumn":22},{"ruleId":"5709","severity":1,"message":"5872","line":95,"column":8,"nodeType":"5711","endLine":95,"endColumn":17,"suggestions":"5967"},{"ruleId":"5705","severity":1,"message":"5706","line":99,"column":32,"nodeType":"5707","messageId":"5708","endLine":99,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":132,"column":28,"nodeType":"5707","messageId":"5708","endLine":132,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":135,"column":26,"nodeType":"5707","messageId":"5708","endLine":135,"endColumn":28},{"ruleId":"5705","severity":1,"message":"5706","line":163,"column":43,"nodeType":"5707","messageId":"5708","endLine":163,"endColumn":45},{"ruleId":"5709","severity":1,"message":"5968","line":276,"column":8,"nodeType":"5711","endLine":276,"endColumn":29,"suggestions":"5969"},{"ruleId":"5705","severity":1,"message":"5706","line":36,"column":36,"nodeType":"5707","messageId":"5708","endLine":36,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":48,"column":8,"nodeType":"5711","endLine":48,"endColumn":17,"suggestions":"5970"},{"ruleId":"5693","severity":1,"message":"5971","line":55,"column":11,"nodeType":"5695","messageId":"5696","endLine":55,"endColumn":29},{"ruleId":"5693","severity":1,"message":"5718","line":1,"column":17,"nodeType":"5695","messageId":"5696","endLine":1,"endColumn":26},{"ruleId":"5693","severity":1,"message":"5972","line":18,"column":10,"nodeType":"5695","messageId":"5696","endLine":18,"endColumn":12},{"ruleId":"5693","severity":1,"message":"5828","line":18,"column":18,"nodeType":"5695","messageId":"5696","endLine":18,"endColumn":20},{"ruleId":"5693","severity":1,"message":"5973","line":19,"column":27,"nodeType":"5695","messageId":"5696","endLine":19,"endColumn":47},{"ruleId":"5705","severity":1,"message":"5706","line":80,"column":31,"nodeType":"5707","messageId":"5708","endLine":80,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5706","line":91,"column":42,"nodeType":"5707","messageId":"5708","endLine":91,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":94,"column":42,"nodeType":"5707","messageId":"5708","endLine":94,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":95,"column":42,"nodeType":"5707","messageId":"5708","endLine":95,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":107,"column":32,"nodeType":"5707","messageId":"5708","endLine":107,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":111,"column":41,"nodeType":"5707","messageId":"5708","endLine":111,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5706","line":116,"column":48,"nodeType":"5707","messageId":"5708","endLine":116,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5706","line":151,"column":28,"nodeType":"5707","messageId":"5708","endLine":151,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":256,"column":51,"nodeType":"5707","messageId":"5708","endLine":256,"endColumn":53},{"ruleId":"5705","severity":1,"message":"5706","line":260,"column":68,"nodeType":"5707","messageId":"5708","endLine":260,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":261,"column":62,"nodeType":"5707","messageId":"5708","endLine":261,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":269,"column":53,"nodeType":"5707","messageId":"5708","endLine":269,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":273,"column":68,"nodeType":"5707","messageId":"5708","endLine":273,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":274,"column":62,"nodeType":"5707","messageId":"5708","endLine":274,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":282,"column":53,"nodeType":"5707","messageId":"5708","endLine":282,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":286,"column":68,"nodeType":"5707","messageId":"5708","endLine":286,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":287,"column":62,"nodeType":"5707","messageId":"5708","endLine":287,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":295,"column":53,"nodeType":"5707","messageId":"5708","endLine":295,"endColumn":55},{"ruleId":"5705","severity":1,"message":"5706","line":299,"column":68,"nodeType":"5707","messageId":"5708","endLine":299,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":300,"column":62,"nodeType":"5707","messageId":"5708","endLine":300,"endColumn":64},{"ruleId":"5705","severity":1,"message":"5706","line":436,"column":42,"nodeType":"5707","messageId":"5708","endLine":436,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5706","line":454,"column":49,"nodeType":"5707","messageId":"5708","endLine":454,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5706","line":455,"column":50,"nodeType":"5707","messageId":"5708","endLine":455,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":456,"column":57,"nodeType":"5707","messageId":"5708","endLine":456,"endColumn":59},{"ruleId":"5705","severity":1,"message":"5706","line":457,"column":50,"nodeType":"5707","messageId":"5708","endLine":457,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":458,"column":58,"nodeType":"5707","messageId":"5708","endLine":458,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":459,"column":50,"nodeType":"5707","messageId":"5708","endLine":459,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":460,"column":54,"nodeType":"5707","messageId":"5708","endLine":460,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":461,"column":50,"nodeType":"5707","messageId":"5708","endLine":461,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":462,"column":59,"nodeType":"5707","messageId":"5708","endLine":462,"endColumn":61},{"ruleId":"5705","severity":1,"message":"5706","line":463,"column":50,"nodeType":"5707","messageId":"5708","endLine":463,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":464,"column":58,"nodeType":"5707","messageId":"5708","endLine":464,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":465,"column":50,"nodeType":"5707","messageId":"5708","endLine":465,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":466,"column":54,"nodeType":"5707","messageId":"5708","endLine":466,"endColumn":56},{"ruleId":"5705","severity":1,"message":"5706","line":467,"column":50,"nodeType":"5707","messageId":"5708","endLine":467,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":468,"column":59,"nodeType":"5707","messageId":"5708","endLine":468,"endColumn":61},{"ruleId":"5705","severity":1,"message":"5706","line":469,"column":50,"nodeType":"5707","messageId":"5708","endLine":469,"endColumn":52},{"ruleId":"5705","severity":1,"message":"5706","line":470,"column":59,"nodeType":"5707","messageId":"5708","endLine":470,"endColumn":61},{"ruleId":"5705","severity":1,"message":"5706","line":489,"column":77,"nodeType":"5707","messageId":"5708","endLine":489,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5706","line":491,"column":76,"nodeType":"5707","messageId":"5708","endLine":491,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5706","line":517,"column":68,"nodeType":"5707","messageId":"5708","endLine":517,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":519,"column":105,"nodeType":"5707","messageId":"5708","endLine":519,"endColumn":107},{"ruleId":"5705","severity":1,"message":"5706","line":521,"column":63,"nodeType":"5707","messageId":"5708","endLine":521,"endColumn":65},{"ruleId":"5705","severity":1,"message":"5706","line":522,"column":67,"nodeType":"5707","messageId":"5708","endLine":522,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":524,"column":105,"nodeType":"5707","messageId":"5708","endLine":524,"endColumn":107},{"ruleId":"5705","severity":1,"message":"5706","line":526,"column":68,"nodeType":"5707","messageId":"5708","endLine":526,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":528,"column":68,"nodeType":"5707","messageId":"5708","endLine":528,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":530,"column":68,"nodeType":"5707","messageId":"5708","endLine":530,"endColumn":70},{"ruleId":"5709","severity":1,"message":"5838","line":38,"column":8,"nodeType":"5711","endLine":38,"endColumn":10,"suggestions":"5974"},{"ruleId":"5705","severity":1,"message":"5706","line":36,"column":36,"nodeType":"5707","messageId":"5708","endLine":36,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":48,"column":8,"nodeType":"5711","endLine":48,"endColumn":17,"suggestions":"5975"},{"ruleId":"5705","severity":1,"message":"5706","line":58,"column":28,"nodeType":"5707","messageId":"5708","endLine":58,"endColumn":30},{"ruleId":"5693","severity":1,"message":"5783","line":5,"column":5,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5976","line":20,"column":7,"nodeType":"5695","messageId":"5696","endLine":20,"endColumn":17},{"ruleId":"5693","severity":1,"message":"5698","line":25,"column":7,"nodeType":"5695","messageId":"5696","endLine":25,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5783","line":5,"column":5,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5976","line":20,"column":7,"nodeType":"5695","messageId":"5696","endLine":20,"endColumn":17},{"ruleId":"5693","severity":1,"message":"5698","line":25,"column":7,"nodeType":"5695","messageId":"5696","endLine":25,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5783","line":5,"column":5,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5976","line":20,"column":7,"nodeType":"5695","messageId":"5696","endLine":20,"endColumn":17},{"ruleId":"5693","severity":1,"message":"5698","line":25,"column":7,"nodeType":"5695","messageId":"5696","endLine":25,"endColumn":19},{"ruleId":"5705","severity":1,"message":"5706","line":69,"column":79,"nodeType":"5707","messageId":"5708","endLine":69,"endColumn":81},{"ruleId":"5693","severity":1,"message":"5783","line":5,"column":5,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5976","line":20,"column":7,"nodeType":"5695","messageId":"5696","endLine":20,"endColumn":17},{"ruleId":"5693","severity":1,"message":"5698","line":25,"column":7,"nodeType":"5695","messageId":"5696","endLine":25,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5754","line":2,"column":5,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":11},{"ruleId":"5693","severity":1,"message":"5783","line":5,"column":5,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5977","line":15,"column":7,"nodeType":"5695","messageId":"5696","endLine":15,"endColumn":14},{"ruleId":"5705","severity":1,"message":"5706","line":29,"column":57,"nodeType":"5707","messageId":"5708","endLine":29,"endColumn":59},{"ruleId":"5705","severity":1,"message":"5706","line":31,"column":56,"nodeType":"5707","messageId":"5708","endLine":31,"endColumn":58},{"ruleId":"5705","severity":1,"message":"5706","line":33,"column":56,"nodeType":"5707","messageId":"5708","endLine":33,"endColumn":58},{"ruleId":"5705","severity":1,"message":"5706","line":61,"column":79,"nodeType":"5707","messageId":"5708","endLine":61,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5706","line":77,"column":28,"nodeType":"5707","messageId":"5708","endLine":77,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":81,"column":88,"nodeType":"5707","messageId":"5708","endLine":81,"endColumn":90},{"ruleId":"5705","severity":1,"message":"5706","line":98,"column":82,"nodeType":"5707","messageId":"5708","endLine":98,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5706","line":111,"column":81,"nodeType":"5707","messageId":"5708","endLine":111,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5706","line":197,"column":85,"nodeType":"5707","messageId":"5708","endLine":197,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5706","line":214,"column":83,"nodeType":"5707","messageId":"5708","endLine":214,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5706","line":227,"column":80,"nodeType":"5707","messageId":"5708","endLine":227,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":240,"column":74,"nodeType":"5707","messageId":"5708","endLine":240,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":252,"column":75,"nodeType":"5707","messageId":"5708","endLine":252,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":263,"column":75,"nodeType":"5707","messageId":"5708","endLine":263,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":274,"column":73,"nodeType":"5707","messageId":"5708","endLine":274,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":285,"column":73,"nodeType":"5707","messageId":"5708","endLine":285,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":309,"column":77,"nodeType":"5707","messageId":"5708","endLine":309,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":320,"column":76,"nodeType":"5707","messageId":"5708","endLine":320,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":335,"column":83,"nodeType":"5707","messageId":"5708","endLine":335,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":348,"column":85,"nodeType":"5707","messageId":"5708","endLine":348,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5721","line":365,"column":91,"nodeType":"5707","messageId":"5708","endLine":365,"endColumn":93},{"ruleId":"5705","severity":1,"message":"5721","line":382,"column":89,"nodeType":"5707","messageId":"5708","endLine":382,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":399,"column":76,"nodeType":"5707","messageId":"5708","endLine":399,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":410,"column":81,"nodeType":"5707","messageId":"5708","endLine":410,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":423,"column":80,"nodeType":"5707","messageId":"5708","endLine":423,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":436,"column":76,"nodeType":"5707","messageId":"5708","endLine":436,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":447,"column":75,"nodeType":"5707","messageId":"5708","endLine":447,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":462,"column":76,"nodeType":"5707","messageId":"5708","endLine":462,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":473,"column":80,"nodeType":"5707","messageId":"5708","endLine":473,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":486,"column":86,"nodeType":"5707","messageId":"5708","endLine":486,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":503,"column":81,"nodeType":"5707","messageId":"5708","endLine":503,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":516,"column":79,"nodeType":"5707","messageId":"5708","endLine":516,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":529,"column":78,"nodeType":"5707","messageId":"5708","endLine":529,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":542,"column":78,"nodeType":"5707","messageId":"5708","endLine":542,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":555,"column":80,"nodeType":"5707","messageId":"5708","endLine":555,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":568,"column":83,"nodeType":"5707","messageId":"5708","endLine":568,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":582,"column":134,"nodeType":"5707","messageId":"5708","endLine":582,"endColumn":136},{"ruleId":"5705","severity":1,"message":"5721","line":600,"column":89,"nodeType":"5707","messageId":"5708","endLine":600,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":617,"column":84,"nodeType":"5707","messageId":"5708","endLine":617,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":630,"column":82,"nodeType":"5707","messageId":"5708","endLine":630,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":643,"column":79,"nodeType":"5707","messageId":"5708","endLine":643,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":656,"column":84,"nodeType":"5707","messageId":"5708","endLine":656,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":673,"column":84,"nodeType":"5707","messageId":"5708","endLine":673,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":687,"column":86,"nodeType":"5707","messageId":"5708","endLine":687,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":704,"column":87,"nodeType":"5707","messageId":"5708","endLine":704,"endColumn":89},{"ruleId":"5705","severity":1,"message":"5721","line":721,"column":79,"nodeType":"5707","messageId":"5708","endLine":721,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":734,"column":86,"nodeType":"5707","messageId":"5708","endLine":734,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":751,"column":82,"nodeType":"5707","messageId":"5708","endLine":751,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":764,"column":86,"nodeType":"5707","messageId":"5708","endLine":764,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":781,"column":92,"nodeType":"5707","messageId":"5708","endLine":781,"endColumn":94},{"ruleId":"5705","severity":1,"message":"5721","line":798,"column":86,"nodeType":"5707","messageId":"5708","endLine":798,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":815,"column":80,"nodeType":"5707","messageId":"5708","endLine":815,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":828,"column":78,"nodeType":"5707","messageId":"5708","endLine":828,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":841,"column":76,"nodeType":"5707","messageId":"5708","endLine":841,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":865,"column":78,"nodeType":"5707","messageId":"5708","endLine":865,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":879,"column":31,"nodeType":"5707","messageId":"5708","endLine":879,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5721","line":883,"column":88,"nodeType":"5707","messageId":"5708","endLine":883,"endColumn":90},{"ruleId":"5705","severity":1,"message":"5706","line":900,"column":82,"nodeType":"5707","messageId":"5708","endLine":900,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5706","line":913,"column":81,"nodeType":"5707","messageId":"5708","endLine":913,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5706","line":926,"column":71,"nodeType":"5707","messageId":"5708","endLine":926,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5706","line":927,"column":70,"nodeType":"5707","messageId":"5708","endLine":927,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5706","line":943,"column":68,"nodeType":"5707","messageId":"5708","endLine":943,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":944,"column":67,"nodeType":"5707","messageId":"5708","endLine":944,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":956,"column":70,"nodeType":"5707","messageId":"5708","endLine":956,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5706","line":957,"column":69,"nodeType":"5707","messageId":"5708","endLine":957,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5706","line":974,"column":72,"nodeType":"5707","messageId":"5708","endLine":974,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5706","line":975,"column":71,"nodeType":"5707","messageId":"5708","endLine":975,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5706","line":991,"column":69,"nodeType":"5707","messageId":"5708","endLine":991,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5706","line":992,"column":68,"nodeType":"5707","messageId":"5708","endLine":992,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":1004,"column":85,"nodeType":"5707","messageId":"5708","endLine":1004,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5706","line":1021,"column":83,"nodeType":"5707","messageId":"5708","endLine":1021,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5706","line":1034,"column":80,"nodeType":"5707","messageId":"5708","endLine":1034,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":1047,"column":74,"nodeType":"5707","messageId":"5708","endLine":1047,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":1059,"column":75,"nodeType":"5707","messageId":"5708","endLine":1059,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":1070,"column":75,"nodeType":"5707","messageId":"5708","endLine":1070,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":1081,"column":73,"nodeType":"5707","messageId":"5708","endLine":1081,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":1092,"column":73,"nodeType":"5707","messageId":"5708","endLine":1092,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":1116,"column":77,"nodeType":"5707","messageId":"5708","endLine":1116,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":1127,"column":76,"nodeType":"5707","messageId":"5708","endLine":1127,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1141,"column":83,"nodeType":"5707","messageId":"5708","endLine":1141,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":1154,"column":85,"nodeType":"5707","messageId":"5708","endLine":1154,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5721","line":1171,"column":91,"nodeType":"5707","messageId":"5708","endLine":1171,"endColumn":93},{"ruleId":"5705","severity":1,"message":"5721","line":1188,"column":89,"nodeType":"5707","messageId":"5708","endLine":1188,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":1205,"column":76,"nodeType":"5707","messageId":"5708","endLine":1205,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1216,"column":81,"nodeType":"5707","messageId":"5708","endLine":1216,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":1229,"column":80,"nodeType":"5707","messageId":"5708","endLine":1229,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":1242,"column":76,"nodeType":"5707","messageId":"5708","endLine":1242,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1253,"column":75,"nodeType":"5707","messageId":"5708","endLine":1253,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":1268,"column":76,"nodeType":"5707","messageId":"5708","endLine":1268,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1279,"column":80,"nodeType":"5707","messageId":"5708","endLine":1279,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":1292,"column":86,"nodeType":"5707","messageId":"5708","endLine":1292,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":1310,"column":81,"nodeType":"5707","messageId":"5708","endLine":1310,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":1323,"column":79,"nodeType":"5707","messageId":"5708","endLine":1323,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":1336,"column":78,"nodeType":"5707","messageId":"5708","endLine":1336,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":1349,"column":78,"nodeType":"5707","messageId":"5708","endLine":1349,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":1362,"column":80,"nodeType":"5707","messageId":"5708","endLine":1362,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":1375,"column":83,"nodeType":"5707","messageId":"5708","endLine":1375,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":1388,"column":134,"nodeType":"5707","messageId":"5708","endLine":1388,"endColumn":136},{"ruleId":"5705","severity":1,"message":"5721","line":1406,"column":89,"nodeType":"5707","messageId":"5708","endLine":1406,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":1423,"column":84,"nodeType":"5707","messageId":"5708","endLine":1423,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":1436,"column":82,"nodeType":"5707","messageId":"5708","endLine":1436,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":1449,"column":79,"nodeType":"5707","messageId":"5708","endLine":1449,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":1462,"column":84,"nodeType":"5707","messageId":"5708","endLine":1462,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":1478,"column":86,"nodeType":"5707","messageId":"5708","endLine":1478,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":1495,"column":84,"nodeType":"5707","messageId":"5708","endLine":1495,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":1508,"column":87,"nodeType":"5707","messageId":"5708","endLine":1508,"endColumn":89},{"ruleId":"5705","severity":1,"message":"5721","line":1525,"column":79,"nodeType":"5707","messageId":"5708","endLine":1525,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":1538,"column":86,"nodeType":"5707","messageId":"5708","endLine":1538,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":1555,"column":82,"nodeType":"5707","messageId":"5708","endLine":1555,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":1568,"column":86,"nodeType":"5707","messageId":"5708","endLine":1568,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":1585,"column":92,"nodeType":"5707","messageId":"5708","endLine":1585,"endColumn":94},{"ruleId":"5705","severity":1,"message":"5721","line":1602,"column":86,"nodeType":"5707","messageId":"5708","endLine":1602,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":1619,"column":80,"nodeType":"5707","messageId":"5708","endLine":1619,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":1632,"column":78,"nodeType":"5707","messageId":"5708","endLine":1632,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":1645,"column":76,"nodeType":"5707","messageId":"5708","endLine":1645,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1669,"column":78,"nodeType":"5707","messageId":"5708","endLine":1669,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1683,"column":31,"nodeType":"5707","messageId":"5708","endLine":1683,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5721","line":1687,"column":88,"nodeType":"5707","messageId":"5708","endLine":1687,"endColumn":90},{"ruleId":"5705","severity":1,"message":"5706","line":1704,"column":82,"nodeType":"5707","messageId":"5708","endLine":1704,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5706","line":1717,"column":81,"nodeType":"5707","messageId":"5708","endLine":1717,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5706","line":1730,"column":71,"nodeType":"5707","messageId":"5708","endLine":1730,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5706","line":1731,"column":70,"nodeType":"5707","messageId":"5708","endLine":1731,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5706","line":1747,"column":68,"nodeType":"5707","messageId":"5708","endLine":1747,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5706","line":1748,"column":67,"nodeType":"5707","messageId":"5708","endLine":1748,"endColumn":69},{"ruleId":"5705","severity":1,"message":"5706","line":1760,"column":70,"nodeType":"5707","messageId":"5708","endLine":1760,"endColumn":72},{"ruleId":"5705","severity":1,"message":"5706","line":1761,"column":69,"nodeType":"5707","messageId":"5708","endLine":1761,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5706","line":1778,"column":72,"nodeType":"5707","messageId":"5708","endLine":1778,"endColumn":74},{"ruleId":"5705","severity":1,"message":"5706","line":1779,"column":71,"nodeType":"5707","messageId":"5708","endLine":1779,"endColumn":73},{"ruleId":"5705","severity":1,"message":"5706","line":1795,"column":69,"nodeType":"5707","messageId":"5708","endLine":1795,"endColumn":71},{"ruleId":"5705","severity":1,"message":"5706","line":1796,"column":68,"nodeType":"5707","messageId":"5708","endLine":1796,"endColumn":70},{"ruleId":"5705","severity":1,"message":"5721","line":1808,"column":85,"nodeType":"5707","messageId":"5708","endLine":1808,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5706","line":1825,"column":83,"nodeType":"5707","messageId":"5708","endLine":1825,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5706","line":1838,"column":80,"nodeType":"5707","messageId":"5708","endLine":1838,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":1851,"column":74,"nodeType":"5707","messageId":"5708","endLine":1851,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":1863,"column":75,"nodeType":"5707","messageId":"5708","endLine":1863,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":1874,"column":75,"nodeType":"5707","messageId":"5708","endLine":1874,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":1885,"column":73,"nodeType":"5707","messageId":"5708","endLine":1885,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":1896,"column":73,"nodeType":"5707","messageId":"5708","endLine":1896,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":1920,"column":77,"nodeType":"5707","messageId":"5708","endLine":1920,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":1931,"column":76,"nodeType":"5707","messageId":"5708","endLine":1931,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1942,"column":76,"nodeType":"5707","messageId":"5708","endLine":1942,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1956,"column":83,"nodeType":"5707","messageId":"5708","endLine":1956,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":1969,"column":85,"nodeType":"5707","messageId":"5708","endLine":1969,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5721","line":1986,"column":91,"nodeType":"5707","messageId":"5708","endLine":1986,"endColumn":93},{"ruleId":"5705","severity":1,"message":"5721","line":2003,"column":89,"nodeType":"5707","messageId":"5708","endLine":2003,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":2020,"column":76,"nodeType":"5707","messageId":"5708","endLine":2020,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2031,"column":81,"nodeType":"5707","messageId":"5708","endLine":2031,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":2044,"column":80,"nodeType":"5707","messageId":"5708","endLine":2044,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":2057,"column":75,"nodeType":"5707","messageId":"5708","endLine":2057,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":2071,"column":76,"nodeType":"5707","messageId":"5708","endLine":2071,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2082,"column":80,"nodeType":"5707","messageId":"5708","endLine":2082,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":2095,"column":86,"nodeType":"5707","messageId":"5708","endLine":2095,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2112,"column":81,"nodeType":"5707","messageId":"5708","endLine":2112,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":2125,"column":79,"nodeType":"5707","messageId":"5708","endLine":2125,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":2138,"column":78,"nodeType":"5707","messageId":"5708","endLine":2138,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":2151,"column":78,"nodeType":"5707","messageId":"5708","endLine":2151,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":2164,"column":80,"nodeType":"5707","messageId":"5708","endLine":2164,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":2177,"column":83,"nodeType":"5707","messageId":"5708","endLine":2177,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":2191,"column":134,"nodeType":"5707","messageId":"5708","endLine":2191,"endColumn":136},{"ruleId":"5705","severity":1,"message":"5721","line":2209,"column":89,"nodeType":"5707","messageId":"5708","endLine":2209,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":2226,"column":84,"nodeType":"5707","messageId":"5708","endLine":2226,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":2239,"column":82,"nodeType":"5707","messageId":"5708","endLine":2239,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":2252,"column":79,"nodeType":"5707","messageId":"5708","endLine":2252,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":2265,"column":84,"nodeType":"5707","messageId":"5708","endLine":2265,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":2281,"column":86,"nodeType":"5707","messageId":"5708","endLine":2281,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2298,"column":84,"nodeType":"5707","messageId":"5708","endLine":2298,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":2311,"column":87,"nodeType":"5707","messageId":"5708","endLine":2311,"endColumn":89},{"ruleId":"5705","severity":1,"message":"5721","line":2328,"column":79,"nodeType":"5707","messageId":"5708","endLine":2328,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":2341,"column":86,"nodeType":"5707","messageId":"5708","endLine":2341,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2358,"column":82,"nodeType":"5707","messageId":"5708","endLine":2358,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":2371,"column":86,"nodeType":"5707","messageId":"5708","endLine":2371,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2388,"column":92,"nodeType":"5707","messageId":"5708","endLine":2388,"endColumn":94},{"ruleId":"5705","severity":1,"message":"5721","line":2405,"column":86,"nodeType":"5707","messageId":"5708","endLine":2405,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2422,"column":80,"nodeType":"5707","messageId":"5708","endLine":2422,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":2435,"column":78,"nodeType":"5707","messageId":"5708","endLine":2435,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":2448,"column":76,"nodeType":"5707","messageId":"5708","endLine":2448,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2473,"column":78,"nodeType":"5707","messageId":"5708","endLine":2473,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":2487,"column":31,"nodeType":"5707","messageId":"5708","endLine":2487,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5721","line":2491,"column":88,"nodeType":"5707","messageId":"5708","endLine":2491,"endColumn":90},{"ruleId":"5705","severity":1,"message":"5706","line":2508,"column":82,"nodeType":"5707","messageId":"5708","endLine":2508,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5706","line":2521,"column":81,"nodeType":"5707","messageId":"5708","endLine":2521,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5706","line":2607,"column":85,"nodeType":"5707","messageId":"5708","endLine":2607,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5706","line":2624,"column":83,"nodeType":"5707","messageId":"5708","endLine":2624,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5706","line":2637,"column":80,"nodeType":"5707","messageId":"5708","endLine":2637,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5706","line":2639,"column":79,"nodeType":"5707","messageId":"5708","endLine":2639,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":2652,"column":74,"nodeType":"5707","messageId":"5708","endLine":2652,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":2664,"column":75,"nodeType":"5707","messageId":"5708","endLine":2664,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":2675,"column":75,"nodeType":"5707","messageId":"5708","endLine":2675,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":2686,"column":73,"nodeType":"5707","messageId":"5708","endLine":2686,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":2697,"column":73,"nodeType":"5707","messageId":"5708","endLine":2697,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":2721,"column":77,"nodeType":"5707","messageId":"5708","endLine":2721,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":2732,"column":76,"nodeType":"5707","messageId":"5708","endLine":2732,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2746,"column":83,"nodeType":"5707","messageId":"5708","endLine":2746,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":2759,"column":85,"nodeType":"5707","messageId":"5708","endLine":2759,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5721","line":2776,"column":91,"nodeType":"5707","messageId":"5708","endLine":2776,"endColumn":93},{"ruleId":"5705","severity":1,"message":"5721","line":2793,"column":89,"nodeType":"5707","messageId":"5708","endLine":2793,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":2810,"column":76,"nodeType":"5707","messageId":"5708","endLine":2810,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2821,"column":81,"nodeType":"5707","messageId":"5708","endLine":2821,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":2834,"column":80,"nodeType":"5707","messageId":"5708","endLine":2834,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":2847,"column":76,"nodeType":"5707","messageId":"5708","endLine":2847,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2858,"column":75,"nodeType":"5707","messageId":"5708","endLine":2858,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":2872,"column":76,"nodeType":"5707","messageId":"5708","endLine":2872,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2883,"column":80,"nodeType":"5707","messageId":"5708","endLine":2883,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":2896,"column":86,"nodeType":"5707","messageId":"5708","endLine":2896,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2913,"column":84,"nodeType":"5707","messageId":"5708","endLine":2913,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":2926,"column":79,"nodeType":"5707","messageId":"5708","endLine":2926,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":2939,"column":78,"nodeType":"5707","messageId":"5708","endLine":2939,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":2952,"column":78,"nodeType":"5707","messageId":"5708","endLine":2952,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":2965,"column":80,"nodeType":"5707","messageId":"5708","endLine":2965,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":2978,"column":83,"nodeType":"5707","messageId":"5708","endLine":2978,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":2991,"column":134,"nodeType":"5707","messageId":"5708","endLine":2991,"endColumn":136},{"ruleId":"5705","severity":1,"message":"5721","line":3009,"column":89,"nodeType":"5707","messageId":"5708","endLine":3009,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":3026,"column":84,"nodeType":"5707","messageId":"5708","endLine":3026,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":3040,"column":82,"nodeType":"5707","messageId":"5708","endLine":3040,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":3053,"column":79,"nodeType":"5707","messageId":"5708","endLine":3053,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":3066,"column":84,"nodeType":"5707","messageId":"5708","endLine":3066,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":3083,"column":86,"nodeType":"5707","messageId":"5708","endLine":3083,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":3100,"column":87,"nodeType":"5707","messageId":"5708","endLine":3100,"endColumn":89},{"ruleId":"5705","severity":1,"message":"5721","line":3117,"column":81,"nodeType":"5707","messageId":"5708","endLine":3117,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":3130,"column":79,"nodeType":"5707","messageId":"5708","endLine":3130,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":3143,"column":86,"nodeType":"5707","messageId":"5708","endLine":3143,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":3160,"column":82,"nodeType":"5707","messageId":"5708","endLine":3160,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":3173,"column":86,"nodeType":"5707","messageId":"5708","endLine":3173,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":3190,"column":92,"nodeType":"5707","messageId":"5708","endLine":3190,"endColumn":94},{"ruleId":"5705","severity":1,"message":"5721","line":3207,"column":86,"nodeType":"5707","messageId":"5708","endLine":3207,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":3225,"column":80,"nodeType":"5707","messageId":"5708","endLine":3225,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":3238,"column":78,"nodeType":"5707","messageId":"5708","endLine":3238,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":3251,"column":76,"nodeType":"5707","messageId":"5708","endLine":3251,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":3275,"column":78,"nodeType":"5707","messageId":"5708","endLine":3275,"endColumn":80},{"ruleId":"5693","severity":1,"message":"5783","line":5,"column":5,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5976","line":20,"column":7,"nodeType":"5695","messageId":"5696","endLine":20,"endColumn":17},{"ruleId":"5693","severity":1,"message":"5698","line":25,"column":7,"nodeType":"5695","messageId":"5696","endLine":25,"endColumn":19},{"ruleId":"5705","severity":1,"message":"5706","line":74,"column":35,"nodeType":"5707","messageId":"5708","endLine":74,"endColumn":37},{"ruleId":"5693","severity":1,"message":"5978","line":28,"column":12,"nodeType":"5695","messageId":"5696","endLine":28,"endColumn":17},{"ruleId":"5693","severity":1,"message":"5979","line":31,"column":11,"nodeType":"5695","messageId":"5696","endLine":31,"endColumn":23},{"ruleId":"5705","severity":1,"message":"5706","line":77,"column":39,"nodeType":"5707","messageId":"5708","endLine":77,"endColumn":41},{"ruleId":"5693","severity":1,"message":"5783","line":5,"column":5,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5976","line":20,"column":7,"nodeType":"5695","messageId":"5696","endLine":20,"endColumn":17},{"ruleId":"5693","severity":1,"message":"5698","line":25,"column":7,"nodeType":"5695","messageId":"5696","endLine":25,"endColumn":19},{"ruleId":"5705","severity":1,"message":"5706","line":69,"column":79,"nodeType":"5707","messageId":"5708","endLine":69,"endColumn":81},{"ruleId":"5693","severity":1,"message":"5783","line":5,"column":5,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5976","line":20,"column":7,"nodeType":"5695","messageId":"5696","endLine":20,"endColumn":17},{"ruleId":"5693","severity":1,"message":"5698","line":25,"column":7,"nodeType":"5695","messageId":"5696","endLine":25,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5783","line":5,"column":5,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5976","line":20,"column":7,"nodeType":"5695","messageId":"5696","endLine":20,"endColumn":17},{"ruleId":"5693","severity":1,"message":"5698","line":25,"column":7,"nodeType":"5695","messageId":"5696","endLine":25,"endColumn":19},{"ruleId":"5705","severity":1,"message":"5706","line":44,"column":31,"nodeType":"5707","messageId":"5708","endLine":44,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5706","line":45,"column":30,"nodeType":"5707","messageId":"5708","endLine":45,"endColumn":32},{"ruleId":"5705","severity":1,"message":"5706","line":46,"column":30,"nodeType":"5707","messageId":"5708","endLine":46,"endColumn":32},{"ruleId":"5705","severity":1,"message":"5706","line":73,"column":79,"nodeType":"5707","messageId":"5708","endLine":73,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5706","line":89,"column":28,"nodeType":"5707","messageId":"5708","endLine":89,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5721","line":91,"column":88,"nodeType":"5707","messageId":"5708","endLine":91,"endColumn":90},{"ruleId":"5705","severity":1,"message":"5721","line":108,"column":82,"nodeType":"5707","messageId":"5708","endLine":108,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":121,"column":81,"nodeType":"5707","messageId":"5708","endLine":121,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":207,"column":85,"nodeType":"5707","messageId":"5708","endLine":207,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5721","line":224,"column":83,"nodeType":"5707","messageId":"5708","endLine":224,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":250,"column":74,"nodeType":"5707","messageId":"5708","endLine":250,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":262,"column":75,"nodeType":"5707","messageId":"5708","endLine":262,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":273,"column":75,"nodeType":"5707","messageId":"5708","endLine":273,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":284,"column":73,"nodeType":"5707","messageId":"5708","endLine":284,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":295,"column":73,"nodeType":"5707","messageId":"5708","endLine":295,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":319,"column":77,"nodeType":"5707","messageId":"5708","endLine":319,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":330,"column":76,"nodeType":"5707","messageId":"5708","endLine":330,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":341,"column":83,"nodeType":"5707","messageId":"5708","endLine":341,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":354,"column":86,"nodeType":"5707","messageId":"5708","endLine":354,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":371,"column":76,"nodeType":"5707","messageId":"5708","endLine":371,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":382,"column":80,"nodeType":"5707","messageId":"5708","endLine":382,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":395,"column":86,"nodeType":"5707","messageId":"5708","endLine":395,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":412,"column":84,"nodeType":"5707","messageId":"5708","endLine":412,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":425,"column":85,"nodeType":"5707","messageId":"5708","endLine":425,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5721","line":442,"column":91,"nodeType":"5707","messageId":"5708","endLine":442,"endColumn":93},{"ruleId":"5705","severity":1,"message":"5721","line":459,"column":89,"nodeType":"5707","messageId":"5708","endLine":459,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":476,"column":76,"nodeType":"5707","messageId":"5708","endLine":476,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":487,"column":87,"nodeType":"5707","messageId":"5708","endLine":487,"endColumn":89},{"ruleId":"5705","severity":1,"message":"5721","line":504,"column":81,"nodeType":"5707","messageId":"5708","endLine":504,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":517,"column":79,"nodeType":"5707","messageId":"5708","endLine":517,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":530,"column":86,"nodeType":"5707","messageId":"5708","endLine":530,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":547,"column":82,"nodeType":"5707","messageId":"5708","endLine":547,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":560,"column":86,"nodeType":"5707","messageId":"5708","endLine":560,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":578,"column":79,"nodeType":"5707","messageId":"5708","endLine":578,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":591,"column":78,"nodeType":"5707","messageId":"5708","endLine":591,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":604,"column":78,"nodeType":"5707","messageId":"5708","endLine":604,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":617,"column":80,"nodeType":"5707","messageId":"5708","endLine":617,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":630,"column":83,"nodeType":"5707","messageId":"5708","endLine":630,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":643,"column":81,"nodeType":"5707","messageId":"5708","endLine":643,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":656,"column":134,"nodeType":"5707","messageId":"5708","endLine":656,"endColumn":136},{"ruleId":"5705","severity":1,"message":"5721","line":674,"column":89,"nodeType":"5707","messageId":"5708","endLine":674,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":691,"column":84,"nodeType":"5707","messageId":"5708","endLine":691,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":704,"column":80,"nodeType":"5707","messageId":"5708","endLine":704,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":717,"column":92,"nodeType":"5707","messageId":"5708","endLine":717,"endColumn":94},{"ruleId":"5705","severity":1,"message":"5721","line":734,"column":86,"nodeType":"5707","messageId":"5708","endLine":734,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":751,"column":76,"nodeType":"5707","messageId":"5708","endLine":751,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":762,"column":80,"nodeType":"5707","messageId":"5708","endLine":762,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":775,"column":78,"nodeType":"5707","messageId":"5708","endLine":775,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":788,"column":76,"nodeType":"5707","messageId":"5708","endLine":788,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":799,"column":75,"nodeType":"5707","messageId":"5708","endLine":799,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":810,"column":82,"nodeType":"5707","messageId":"5708","endLine":810,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":823,"column":79,"nodeType":"5707","messageId":"5708","endLine":823,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":849,"column":84,"nodeType":"5707","messageId":"5708","endLine":849,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":862,"column":78,"nodeType":"5707","messageId":"5708","endLine":862,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":876,"column":31,"nodeType":"5707","messageId":"5708","endLine":876,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5721","line":878,"column":88,"nodeType":"5707","messageId":"5708","endLine":878,"endColumn":90},{"ruleId":"5705","severity":1,"message":"5721","line":895,"column":82,"nodeType":"5707","messageId":"5708","endLine":895,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":908,"column":81,"nodeType":"5707","messageId":"5708","endLine":908,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":999,"column":85,"nodeType":"5707","messageId":"5708","endLine":999,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5721","line":1016,"column":83,"nodeType":"5707","messageId":"5708","endLine":1016,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":1042,"column":74,"nodeType":"5707","messageId":"5708","endLine":1042,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":1054,"column":75,"nodeType":"5707","messageId":"5708","endLine":1054,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":1065,"column":75,"nodeType":"5707","messageId":"5708","endLine":1065,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":1076,"column":73,"nodeType":"5707","messageId":"5708","endLine":1076,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":1087,"column":73,"nodeType":"5707","messageId":"5708","endLine":1087,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":1111,"column":77,"nodeType":"5707","messageId":"5708","endLine":1111,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":1122,"column":76,"nodeType":"5707","messageId":"5708","endLine":1122,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1133,"column":83,"nodeType":"5707","messageId":"5708","endLine":1133,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":1146,"column":86,"nodeType":"5707","messageId":"5708","endLine":1146,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":1163,"column":76,"nodeType":"5707","messageId":"5708","endLine":1163,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1174,"column":80,"nodeType":"5707","messageId":"5708","endLine":1174,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":1187,"column":86,"nodeType":"5707","messageId":"5708","endLine":1187,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":1204,"column":84,"nodeType":"5707","messageId":"5708","endLine":1204,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":1217,"column":85,"nodeType":"5707","messageId":"5708","endLine":1217,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5721","line":1234,"column":91,"nodeType":"5707","messageId":"5708","endLine":1234,"endColumn":93},{"ruleId":"5705","severity":1,"message":"5721","line":1251,"column":89,"nodeType":"5707","messageId":"5708","endLine":1251,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":1268,"column":76,"nodeType":"5707","messageId":"5708","endLine":1268,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1279,"column":87,"nodeType":"5707","messageId":"5708","endLine":1279,"endColumn":89},{"ruleId":"5705","severity":1,"message":"5721","line":1296,"column":81,"nodeType":"5707","messageId":"5708","endLine":1296,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":1309,"column":79,"nodeType":"5707","messageId":"5708","endLine":1309,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":1322,"column":86,"nodeType":"5707","messageId":"5708","endLine":1322,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":1339,"column":82,"nodeType":"5707","messageId":"5708","endLine":1339,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":1352,"column":86,"nodeType":"5707","messageId":"5708","endLine":1352,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":1370,"column":79,"nodeType":"5707","messageId":"5708","endLine":1370,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":1383,"column":78,"nodeType":"5707","messageId":"5708","endLine":1383,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":1396,"column":78,"nodeType":"5707","messageId":"5708","endLine":1396,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":1409,"column":80,"nodeType":"5707","messageId":"5708","endLine":1409,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":1422,"column":83,"nodeType":"5707","messageId":"5708","endLine":1422,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":1435,"column":81,"nodeType":"5707","messageId":"5708","endLine":1435,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":1448,"column":134,"nodeType":"5707","messageId":"5708","endLine":1448,"endColumn":136},{"ruleId":"5705","severity":1,"message":"5721","line":1466,"column":89,"nodeType":"5707","messageId":"5708","endLine":1466,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":1483,"column":84,"nodeType":"5707","messageId":"5708","endLine":1483,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":1496,"column":80,"nodeType":"5707","messageId":"5708","endLine":1496,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":1509,"column":92,"nodeType":"5707","messageId":"5708","endLine":1509,"endColumn":94},{"ruleId":"5705","severity":1,"message":"5721","line":1526,"column":86,"nodeType":"5707","messageId":"5708","endLine":1526,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":1543,"column":76,"nodeType":"5707","messageId":"5708","endLine":1543,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1554,"column":80,"nodeType":"5707","messageId":"5708","endLine":1554,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":1567,"column":78,"nodeType":"5707","messageId":"5708","endLine":1567,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":1580,"column":76,"nodeType":"5707","messageId":"5708","endLine":1580,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1591,"column":75,"nodeType":"5707","messageId":"5708","endLine":1591,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":1602,"column":82,"nodeType":"5707","messageId":"5708","endLine":1602,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":1615,"column":79,"nodeType":"5707","messageId":"5708","endLine":1615,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":1641,"column":84,"nodeType":"5707","messageId":"5708","endLine":1641,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":1654,"column":78,"nodeType":"5707","messageId":"5708","endLine":1654,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":1668,"column":31,"nodeType":"5707","messageId":"5708","endLine":1668,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5721","line":1670,"column":88,"nodeType":"5707","messageId":"5708","endLine":1670,"endColumn":90},{"ruleId":"5705","severity":1,"message":"5721","line":1687,"column":82,"nodeType":"5707","messageId":"5708","endLine":1687,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":1700,"column":81,"nodeType":"5707","messageId":"5708","endLine":1700,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":1791,"column":85,"nodeType":"5707","messageId":"5708","endLine":1791,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5721","line":1808,"column":83,"nodeType":"5707","messageId":"5708","endLine":1808,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":1834,"column":74,"nodeType":"5707","messageId":"5708","endLine":1834,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":1846,"column":75,"nodeType":"5707","messageId":"5708","endLine":1846,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":1857,"column":75,"nodeType":"5707","messageId":"5708","endLine":1857,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":1868,"column":73,"nodeType":"5707","messageId":"5708","endLine":1868,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":1879,"column":73,"nodeType":"5707","messageId":"5708","endLine":1879,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":1903,"column":77,"nodeType":"5707","messageId":"5708","endLine":1903,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":1914,"column":76,"nodeType":"5707","messageId":"5708","endLine":1914,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1925,"column":83,"nodeType":"5707","messageId":"5708","endLine":1925,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":1938,"column":86,"nodeType":"5707","messageId":"5708","endLine":1938,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":1955,"column":76,"nodeType":"5707","messageId":"5708","endLine":1955,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":1966,"column":80,"nodeType":"5707","messageId":"5708","endLine":1966,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":1979,"column":86,"nodeType":"5707","messageId":"5708","endLine":1979,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":1996,"column":84,"nodeType":"5707","messageId":"5708","endLine":1996,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":2009,"column":85,"nodeType":"5707","messageId":"5708","endLine":2009,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5721","line":2026,"column":91,"nodeType":"5707","messageId":"5708","endLine":2026,"endColumn":93},{"ruleId":"5705","severity":1,"message":"5721","line":2043,"column":89,"nodeType":"5707","messageId":"5708","endLine":2043,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":2060,"column":76,"nodeType":"5707","messageId":"5708","endLine":2060,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2071,"column":87,"nodeType":"5707","messageId":"5708","endLine":2071,"endColumn":89},{"ruleId":"5705","severity":1,"message":"5721","line":2088,"column":81,"nodeType":"5707","messageId":"5708","endLine":2088,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":2101,"column":79,"nodeType":"5707","messageId":"5708","endLine":2101,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":2114,"column":86,"nodeType":"5707","messageId":"5708","endLine":2114,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2131,"column":82,"nodeType":"5707","messageId":"5708","endLine":2131,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":2144,"column":86,"nodeType":"5707","messageId":"5708","endLine":2144,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2162,"column":79,"nodeType":"5707","messageId":"5708","endLine":2162,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":2175,"column":78,"nodeType":"5707","messageId":"5708","endLine":2175,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":2188,"column":78,"nodeType":"5707","messageId":"5708","endLine":2188,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":2201,"column":80,"nodeType":"5707","messageId":"5708","endLine":2201,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":2214,"column":83,"nodeType":"5707","messageId":"5708","endLine":2214,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":2227,"column":81,"nodeType":"5707","messageId":"5708","endLine":2227,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":2240,"column":134,"nodeType":"5707","messageId":"5708","endLine":2240,"endColumn":136},{"ruleId":"5705","severity":1,"message":"5721","line":2258,"column":89,"nodeType":"5707","messageId":"5708","endLine":2258,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":2275,"column":84,"nodeType":"5707","messageId":"5708","endLine":2275,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":2288,"column":80,"nodeType":"5707","messageId":"5708","endLine":2288,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":2301,"column":92,"nodeType":"5707","messageId":"5708","endLine":2301,"endColumn":94},{"ruleId":"5705","severity":1,"message":"5721","line":2318,"column":86,"nodeType":"5707","messageId":"5708","endLine":2318,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2335,"column":76,"nodeType":"5707","messageId":"5708","endLine":2335,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2346,"column":80,"nodeType":"5707","messageId":"5708","endLine":2346,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":2359,"column":78,"nodeType":"5707","messageId":"5708","endLine":2359,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":2372,"column":76,"nodeType":"5707","messageId":"5708","endLine":2372,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2383,"column":75,"nodeType":"5707","messageId":"5708","endLine":2383,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":2394,"column":82,"nodeType":"5707","messageId":"5708","endLine":2394,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":2407,"column":79,"nodeType":"5707","messageId":"5708","endLine":2407,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":2433,"column":84,"nodeType":"5707","messageId":"5708","endLine":2433,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":2446,"column":78,"nodeType":"5707","messageId":"5708","endLine":2446,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5706","line":2460,"column":31,"nodeType":"5707","messageId":"5708","endLine":2460,"endColumn":33},{"ruleId":"5705","severity":1,"message":"5721","line":2462,"column":88,"nodeType":"5707","messageId":"5708","endLine":2462,"endColumn":90},{"ruleId":"5705","severity":1,"message":"5721","line":2479,"column":82,"nodeType":"5707","messageId":"5708","endLine":2479,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":2492,"column":81,"nodeType":"5707","messageId":"5708","endLine":2492,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":2578,"column":85,"nodeType":"5707","messageId":"5708","endLine":2578,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5721","line":2595,"column":83,"nodeType":"5707","messageId":"5708","endLine":2595,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5706","line":2608,"column":80,"nodeType":"5707","messageId":"5708","endLine":2608,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5706","line":2610,"column":79,"nodeType":"5707","messageId":"5708","endLine":2610,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":2623,"column":74,"nodeType":"5707","messageId":"5708","endLine":2623,"endColumn":76},{"ruleId":"5705","severity":1,"message":"5721","line":2635,"column":75,"nodeType":"5707","messageId":"5708","endLine":2635,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":2646,"column":75,"nodeType":"5707","messageId":"5708","endLine":2646,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":2657,"column":73,"nodeType":"5707","messageId":"5708","endLine":2657,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":2668,"column":73,"nodeType":"5707","messageId":"5708","endLine":2668,"endColumn":75},{"ruleId":"5705","severity":1,"message":"5721","line":2692,"column":77,"nodeType":"5707","messageId":"5708","endLine":2692,"endColumn":79},{"ruleId":"5705","severity":1,"message":"5721","line":2703,"column":76,"nodeType":"5707","messageId":"5708","endLine":2703,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2714,"column":83,"nodeType":"5707","messageId":"5708","endLine":2714,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":2727,"column":86,"nodeType":"5707","messageId":"5708","endLine":2727,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2744,"column":76,"nodeType":"5707","messageId":"5708","endLine":2744,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2755,"column":80,"nodeType":"5707","messageId":"5708","endLine":2755,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":2768,"column":86,"nodeType":"5707","messageId":"5708","endLine":2768,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2785,"column":84,"nodeType":"5707","messageId":"5708","endLine":2785,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":2798,"column":85,"nodeType":"5707","messageId":"5708","endLine":2798,"endColumn":87},{"ruleId":"5705","severity":1,"message":"5721","line":2815,"column":91,"nodeType":"5707","messageId":"5708","endLine":2815,"endColumn":93},{"ruleId":"5705","severity":1,"message":"5721","line":2832,"column":89,"nodeType":"5707","messageId":"5708","endLine":2832,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":2849,"column":76,"nodeType":"5707","messageId":"5708","endLine":2849,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":2860,"column":87,"nodeType":"5707","messageId":"5708","endLine":2860,"endColumn":89},{"ruleId":"5705","severity":1,"message":"5721","line":2877,"column":81,"nodeType":"5707","messageId":"5708","endLine":2877,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":2890,"column":79,"nodeType":"5707","messageId":"5708","endLine":2890,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":2903,"column":86,"nodeType":"5707","messageId":"5708","endLine":2903,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2920,"column":82,"nodeType":"5707","messageId":"5708","endLine":2920,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":2933,"column":86,"nodeType":"5707","messageId":"5708","endLine":2933,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":2951,"column":79,"nodeType":"5707","messageId":"5708","endLine":2951,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":2964,"column":78,"nodeType":"5707","messageId":"5708","endLine":2964,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":2977,"column":78,"nodeType":"5707","messageId":"5708","endLine":2977,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":2990,"column":80,"nodeType":"5707","messageId":"5708","endLine":2990,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":3003,"column":83,"nodeType":"5707","messageId":"5708","endLine":3003,"endColumn":85},{"ruleId":"5705","severity":1,"message":"5721","line":3016,"column":81,"nodeType":"5707","messageId":"5708","endLine":3016,"endColumn":83},{"ruleId":"5705","severity":1,"message":"5721","line":3029,"column":134,"nodeType":"5707","messageId":"5708","endLine":3029,"endColumn":136},{"ruleId":"5705","severity":1,"message":"5721","line":3047,"column":89,"nodeType":"5707","messageId":"5708","endLine":3047,"endColumn":91},{"ruleId":"5705","severity":1,"message":"5721","line":3064,"column":84,"nodeType":"5707","messageId":"5708","endLine":3064,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":3077,"column":80,"nodeType":"5707","messageId":"5708","endLine":3077,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":3090,"column":92,"nodeType":"5707","messageId":"5708","endLine":3090,"endColumn":94},{"ruleId":"5705","severity":1,"message":"5721","line":3107,"column":86,"nodeType":"5707","messageId":"5708","endLine":3107,"endColumn":88},{"ruleId":"5705","severity":1,"message":"5721","line":3124,"column":76,"nodeType":"5707","messageId":"5708","endLine":3124,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":3135,"column":80,"nodeType":"5707","messageId":"5708","endLine":3135,"endColumn":82},{"ruleId":"5705","severity":1,"message":"5721","line":3148,"column":78,"nodeType":"5707","messageId":"5708","endLine":3148,"endColumn":80},{"ruleId":"5705","severity":1,"message":"5721","line":3161,"column":76,"nodeType":"5707","messageId":"5708","endLine":3161,"endColumn":78},{"ruleId":"5705","severity":1,"message":"5721","line":3172,"column":75,"nodeType":"5707","messageId":"5708","endLine":3172,"endColumn":77},{"ruleId":"5705","severity":1,"message":"5721","line":3183,"column":82,"nodeType":"5707","messageId":"5708","endLine":3183,"endColumn":84},{"ruleId":"5705","severity":1,"message":"5721","line":3196,"column":79,"nodeType":"5707","messageId":"5708","endLine":3196,"endColumn":81},{"ruleId":"5705","severity":1,"message":"5721","line":3222,"column":84,"nodeType":"5707","messageId":"5708","endLine":3222,"endColumn":86},{"ruleId":"5705","severity":1,"message":"5721","line":3235,"column":78,"nodeType":"5707","messageId":"5708","endLine":3235,"endColumn":80},{"ruleId":"5693","severity":1,"message":"5783","line":5,"column":5,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5976","line":20,"column":7,"nodeType":"5695","messageId":"5696","endLine":20,"endColumn":17},{"ruleId":"5693","severity":1,"message":"5698","line":25,"column":7,"nodeType":"5695","messageId":"5696","endLine":25,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5783","line":5,"column":5,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5976","line":20,"column":7,"nodeType":"5695","messageId":"5696","endLine":20,"endColumn":17},{"ruleId":"5693","severity":1,"message":"5698","line":25,"column":7,"nodeType":"5695","messageId":"5696","endLine":25,"endColumn":19},{"ruleId":"5693","severity":1,"message":"5783","line":5,"column":5,"nodeType":"5695","messageId":"5696","endLine":5,"endColumn":9},{"ruleId":"5693","severity":1,"message":"5976","line":20,"column":7,"nodeType":"5695","messageId":"5696","endLine":20,"endColumn":17},{"ruleId":"5693","severity":1,"message":"5698","line":25,"column":7,"nodeType":"5695","messageId":"5696","endLine":25,"endColumn":19},{"ruleId":"5705","severity":1,"message":"5706","line":37,"column":28,"nodeType":"5707","messageId":"5708","endLine":37,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":75,"column":60,"nodeType":"5707","messageId":"5708","endLine":75,"endColumn":62},{"ruleId":"5705","severity":1,"message":"5706","line":81,"column":35,"nodeType":"5707","messageId":"5708","endLine":81,"endColumn":37},{"ruleId":"5709","severity":1,"message":"5872","line":51,"column":8,"nodeType":"5711","endLine":51,"endColumn":17,"suggestions":"5980"},{"ruleId":"5705","severity":1,"message":"5706","line":68,"column":33,"nodeType":"5707","messageId":"5708","endLine":68,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":86,"column":29,"nodeType":"5707","messageId":"5708","endLine":86,"endColumn":31},{"ruleId":"5705","severity":1,"message":"5706","line":98,"column":32,"nodeType":"5707","messageId":"5708","endLine":98,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":124,"column":33,"nodeType":"5707","messageId":"5708","endLine":124,"endColumn":35},{"ruleId":"5709","severity":1,"message":"5906","line":215,"column":8,"nodeType":"5711","endLine":215,"endColumn":25,"suggestions":"5981"},{"ruleId":"5709","severity":1,"message":"5908","line":316,"column":8,"nodeType":"5711","endLine":316,"endColumn":50,"suggestions":"5982"},{"ruleId":"5709","severity":1,"message":"5838","line":38,"column":8,"nodeType":"5711","endLine":38,"endColumn":10,"suggestions":"5983"},{"ruleId":"5770","severity":1,"message":"5771","line":33,"column":48,"nodeType":"5707","messageId":"5772","endLine":33,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":35,"column":36,"nodeType":"5707","messageId":"5708","endLine":35,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":46,"column":8,"nodeType":"5711","endLine":46,"endColumn":10,"suggestions":"5984"},{"ruleId":"5693","severity":1,"message":"5818","line":20,"column":8,"nodeType":"5695","messageId":"5696","endLine":20,"endColumn":16},{"ruleId":"5705","severity":1,"message":"5706","line":89,"column":36,"nodeType":"5707","messageId":"5708","endLine":89,"endColumn":38},{"ruleId":"5709","severity":1,"message":"5710","line":100,"column":8,"nodeType":"5711","endLine":100,"endColumn":17,"suggestions":"5985"},{"ruleId":"5705","severity":1,"message":"5706","line":120,"column":32,"nodeType":"5707","messageId":"5708","endLine":120,"endColumn":34},{"ruleId":"5770","severity":1,"message":"5771","line":157,"column":48,"nodeType":"5707","messageId":"5772","endLine":157,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5706","line":159,"column":36,"nodeType":"5707","messageId":"5708","endLine":159,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5721","line":255,"column":51,"nodeType":"5707","messageId":"5708","endLine":255,"endColumn":53},{"ruleId":"5770","severity":1,"message":"5771","line":49,"column":55,"nodeType":"5707","messageId":"5772","endLine":49,"endColumn":56},{"ruleId":"5709","severity":1,"message":"5872","line":62,"column":8,"nodeType":"5711","endLine":62,"endColumn":17,"suggestions":"5986"},{"ruleId":"5705","severity":1,"message":"5706","line":72,"column":38,"nodeType":"5707","messageId":"5708","endLine":72,"endColumn":40},{"ruleId":"5709","severity":1,"message":"5838","line":92,"column":8,"nodeType":"5711","endLine":92,"endColumn":18,"suggestions":"5987"},{"ruleId":"5705","severity":1,"message":"5706","line":104,"column":33,"nodeType":"5707","messageId":"5708","endLine":104,"endColumn":35},{"ruleId":"5705","severity":1,"message":"5706","line":131,"column":32,"nodeType":"5707","messageId":"5708","endLine":131,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":147,"column":37,"nodeType":"5707","messageId":"5708","endLine":147,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":148,"column":37,"nodeType":"5707","messageId":"5708","endLine":148,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":149,"column":37,"nodeType":"5707","messageId":"5708","endLine":149,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":150,"column":37,"nodeType":"5707","messageId":"5708","endLine":150,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":155,"column":52,"nodeType":"5707","messageId":"5708","endLine":155,"endColumn":54},{"ruleId":"5705","severity":1,"message":"5706","line":166,"column":36,"nodeType":"5707","messageId":"5708","endLine":166,"endColumn":38},{"ruleId":"5705","severity":1,"message":"5721","line":213,"column":60,"nodeType":"5707","messageId":"5708","endLine":213,"endColumn":62},{"ruleId":"5709","severity":1,"message":"5906","line":252,"column":8,"nodeType":"5711","endLine":252,"endColumn":25,"suggestions":"5988"},{"ruleId":"5705","severity":1,"message":"5721","line":297,"column":60,"nodeType":"5707","messageId":"5708","endLine":297,"endColumn":62},{"ruleId":"5709","severity":1,"message":"5908","line":337,"column":8,"nodeType":"5711","endLine":337,"endColumn":50,"suggestions":"5989"},{"ruleId":"5705","severity":1,"message":"5706","line":412,"column":37,"nodeType":"5707","messageId":"5708","endLine":412,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5706","line":412,"column":60,"nodeType":"5707","messageId":"5708","endLine":412,"endColumn":62},{"ruleId":"5709","severity":1,"message":"5710","line":55,"column":8,"nodeType":"5711","endLine":55,"endColumn":17,"suggestions":"5990"},{"ruleId":"5693","severity":1,"message":"5991","line":12,"column":10,"nodeType":"5695","messageId":"5696","endLine":12,"endColumn":22},{"ruleId":"5693","severity":1,"message":"5992","line":28,"column":12,"nodeType":"5695","messageId":"5696","endLine":28,"endColumn":25},{"ruleId":"5709","severity":1,"message":"5993","line":50,"column":8,"nodeType":"5711","endLine":50,"endColumn":10,"suggestions":"5994"},{"ruleId":"5705","severity":1,"message":"5706","line":56,"column":28,"nodeType":"5707","messageId":"5708","endLine":56,"endColumn":30},{"ruleId":"5705","severity":1,"message":"5706","line":136,"column":57,"nodeType":"5707","messageId":"5708","endLine":136,"endColumn":59},{"ruleId":"5705","severity":1,"message":"5706","line":137,"column":58,"nodeType":"5707","messageId":"5708","endLine":137,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":138,"column":56,"nodeType":"5707","messageId":"5708","endLine":138,"endColumn":58},{"ruleId":"5693","severity":1,"message":"5991","line":11,"column":10,"nodeType":"5695","messageId":"5696","endLine":11,"endColumn":22},{"ruleId":"5705","severity":1,"message":"5706","line":62,"column":32,"nodeType":"5707","messageId":"5708","endLine":62,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5706","line":98,"column":58,"nodeType":"5707","messageId":"5708","endLine":98,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":127,"column":58,"nodeType":"5707","messageId":"5708","endLine":127,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":156,"column":58,"nodeType":"5707","messageId":"5708","endLine":156,"endColumn":60},{"ruleId":"5705","severity":1,"message":"5706","line":185,"column":58,"nodeType":"5707","messageId":"5708","endLine":185,"endColumn":60},{"ruleId":"5693","severity":1,"message":"5718","line":2,"column":27,"nodeType":"5695","messageId":"5696","endLine":2,"endColumn":36},{"ruleId":"5693","severity":1,"message":"5756","line":10,"column":3,"nodeType":"5695","messageId":"5696","endLine":10,"endColumn":11},{"ruleId":"5693","severity":1,"message":"5790","line":17,"column":3,"nodeType":"5695","messageId":"5696","endLine":17,"endColumn":18},{"ruleId":"5709","severity":1,"message":"5995","line":99,"column":27,"nodeType":"5695","endLine":99,"endColumn":34},{"ruleId":"5705","severity":1,"message":"5721","line":138,"column":37,"nodeType":"5707","messageId":"5708","endLine":138,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5721","line":169,"column":40,"nodeType":"5707","messageId":"5708","endLine":169,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5721","line":178,"column":45,"nodeType":"5707","messageId":"5708","endLine":178,"endColumn":47},{"ruleId":"5709","severity":1,"message":"5995","line":204,"column":30,"nodeType":"5695","endLine":204,"endColumn":37},{"ruleId":"5705","severity":1,"message":"5721","line":277,"column":37,"nodeType":"5707","messageId":"5708","endLine":277,"endColumn":39},{"ruleId":"5705","severity":1,"message":"5721","line":295,"column":40,"nodeType":"5707","messageId":"5708","endLine":295,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5721","line":316,"column":39,"nodeType":"5707","messageId":"5708","endLine":316,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5721","line":326,"column":41,"nodeType":"5707","messageId":"5708","endLine":326,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5721","line":337,"column":47,"nodeType":"5707","messageId":"5708","endLine":337,"endColumn":49},{"ruleId":"5705","severity":1,"message":"5721","line":350,"column":40,"nodeType":"5707","messageId":"5708","endLine":350,"endColumn":42},{"ruleId":"5705","severity":1,"message":"5721","line":361,"column":42,"nodeType":"5707","messageId":"5708","endLine":361,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5721","line":377,"column":45,"nodeType":"5707","messageId":"5708","endLine":377,"endColumn":47},{"ruleId":"5705","severity":1,"message":"5721","line":388,"column":48,"nodeType":"5707","messageId":"5708","endLine":388,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5721","line":399,"column":49,"nodeType":"5707","messageId":"5708","endLine":399,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5721","line":408,"column":48,"nodeType":"5707","messageId":"5708","endLine":408,"endColumn":50},{"ruleId":"5705","severity":1,"message":"5721","line":417,"column":46,"nodeType":"5707","messageId":"5708","endLine":417,"endColumn":48},{"ruleId":"5705","severity":1,"message":"5721","line":428,"column":43,"nodeType":"5707","messageId":"5708","endLine":428,"endColumn":45},{"ruleId":"5705","severity":1,"message":"5721","line":438,"column":45,"nodeType":"5707","messageId":"5708","endLine":438,"endColumn":47},{"ruleId":"5705","severity":1,"message":"5721","line":447,"column":49,"nodeType":"5707","messageId":"5708","endLine":447,"endColumn":51},{"ruleId":"5705","severity":1,"message":"5721","line":456,"column":46,"nodeType":"5707","messageId":"5708","endLine":456,"endColumn":48},{"ruleId":"5705","severity":1,"message":"5721","line":467,"column":39,"nodeType":"5707","messageId":"5708","endLine":467,"endColumn":41},{"ruleId":"5705","severity":1,"message":"5721","line":477,"column":44,"nodeType":"5707","messageId":"5708","endLine":477,"endColumn":46},{"ruleId":"5705","severity":1,"message":"5721","line":486,"column":41,"nodeType":"5707","messageId":"5708","endLine":486,"endColumn":43},{"ruleId":"5705","severity":1,"message":"5721","line":496,"column":42,"nodeType":"5707","messageId":"5708","endLine":496,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5721","line":506,"column":46,"nodeType":"5707","messageId":"5708","endLine":506,"endColumn":48},{"ruleId":"5705","severity":1,"message":"5721","line":515,"column":42,"nodeType":"5707","messageId":"5708","endLine":515,"endColumn":44},{"ruleId":"5705","severity":1,"message":"5721","line":524,"column":43,"nodeType":"5707","messageId":"5708","endLine":524,"endColumn":45},{"ruleId":"5709","severity":1,"message":"5838","line":38,"column":8,"nodeType":"5711","endLine":38,"endColumn":10,"suggestions":"5996"},"no-native-reassign",["5997"],"no-negated-in-lhs",["5998"],"no-unused-vars","'sessionRoutes' is defined but never used.","Identifier","unusedVar","'Span' is defined but never used.","'StyledButton' is assigned a value but never used.","'createUserWithEmailAndPassword' is assigned a value but never used.","'signInWithGoogle' is assigned a value but never used.","'handleGoogleRegister' is assigned a value but never used.","'signInWithEmailAndPassword' is assigned a value but never used.",["5997"],["5998"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["5999"],"'SecondarySidebarToggle' is defined but never used.",["5997"],["5998"],"'palette' is assigned a value but never used.","'generateRandomId' is defined but never used.","'useEffect' is defined but never used.","'shouldOpenEditorDialog' is assigned a value but never used.","'handleDialogClose' is assigned a value but never used.","Expected '!==' and instead saw '!='.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'editFetchData', 'open', and 'reset'. Either include them or remove the dependency array. If 'open' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["6000"],"React Hook useEffect has missing dependencies: 'editFetchData', 'open', 'profile', and 'reset'. Either include them or remove the dependency array. If 'open' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["6001"],["6002"],"'Grid' is defined but never used.",["6003"],["6004"],["6005"],"no-redeclare","'i' is already defined.","redeclared",["6006"],"'setSearch' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'navigate' and 'rowsPerPage'. Either include them or remove the dependency array.",["6007"],"React Hook useMemo has an unnecessary dependency: 'item'. Either exclude it or remove the dependency array.",["6008"],"'useMemo' is defined but never used.",["6009"],["6010"],["6011"],["6012"],"'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.",["6013"],["6014"],["6015"],"'Button' is defined but never used.","'Box' is defined but never used.","'MenuItem' is defined but never used.","'TextField' is defined but never used.",["6016"],"'searchOrders' is assigned a value but never used.",["6017"],["6018"],"React Hook useMemo has missing dependencies: 'handleClick', 'handleSelectAll', and 'label'. Either include them or remove the dependency array.",["6019"],["6020"],["6021"],["6022"],["6023"],["6024"],["6025"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat",["6026"],["6027"],["6028"],["6029"],"'label' is assigned a value but never used.",["6030"],"'userList' is assigned a value but never used.","'setUserList' is assigned a value but never used.",["6031"],"'IconButton' is defined but never used.","'Icon' is defined but never used.","'Card' is defined but never used.","React Hook useEffect has a missing dependency: 'pagination.size'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setItem' needs the current value of 'pagination.size'.",["6032"],["6033"],"'aa' is assigned a value but never used.",["6034"],"'TablePagination' is defined but never used.",["6035"],"'rowsPerPage' is assigned a value but never used.","'setRowsPerPage' is assigned a value but never used.","'page' is assigned a value but never used.","'setPage' is assigned a value but never used.",["6036"],["6037"],["6038"],["6039"],["6040"],"'fetchData' is assigned a value but never used.",["6041"],["6042"],"'isAlive' is assigned a value but never used.","'setIsAlive' is assigned a value but never used.",["6043"],["6044"],["6045"],["6046"],"no-use-before-define","'refresh' was used before it was defined.","usedBeforeDefined",["6047"],["6048"],["6049"],["6050"],["6051"],"'Checkbox' is defined but never used.",["6052"],["6053"],["6054"],["6055"],["6056"],["6057"],["6058"],["6059"],["6060"],"'H4' is defined but never used.",["6061"],"'useState' is defined but never used.","'firebase' is defined but never used.","React Hook useEffect has missing dependencies: 'editFetchData', 'open', and 'productImage'. Either include them or remove the dependency array. If 'open' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["6062"],"React Hook useEffect has a missing dependency: 'username'. Either include it or remove the dependency array.",["6063"],"React Hook useEffect has a missing dependency: 'bagId'. Either include it or remove the dependency array.",["6064"],"React Hook useEffect has a missing dependency: 'trayId'. Either include it or remove the dependency array.",["6065"],"'handleClick' is assigned a value but never used.",["6066"],["6067"],"'Swal' is defined but never used.","React Hook useEffect has missing dependencies: 'bagId' and 'navigate'. Either include them or remove the dependency array.",["6068"],"React Hook useMemo has missing dependencies: 'handleClick' and 'handleSelectAll'. Either include them or remove the dependency array.",["6069"],"React Hook useEffect has a missing dependency: 'isCheck'. Either include it or remove the dependency array.",["6070"],"'handelAssignForSorting' is assigned a value but never used.",["6071"],["6072"],"'handelDelete' is assigned a value but never used.","React Hook useMemo has a missing dependency: 'bagData'. Either include it or remove the dependency array.",["6073"],"React Hook useMemo has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.","ChainExpression","React Hook useMemo has missing dependencies: 'bagData' and 'handelAwbn'. Either include them or remove the dependency array.",["6074"],["6075"],["6076"],["6077"],"'textBoxDis' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'bagId', 'navigate', and 'user_name1'. Either include them or remove the dependency array.",["6078"],["6079"],["6080"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["6081"],["6082"],"React Hook useEffect has missing dependencies: 'navigate' and 'trayId'. Either include them or remove the dependency array.",["6083"],"React Hook useMemo has a missing dependency: 'employeeData'. Either include it or remove the dependency array.",["6084"],"React Hook useMemo has missing dependencies: 'employeeData', 'handelAwbn', and 'handelDelete'. Either include them or remove the dependency array.",["6085"],["6086"],"'whtTrayId' is assigned a value but never used.","'setWhtTrayId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'isCheck', 'muic', and 'navigate'. Either include them or remove the dependency array.",["6087"],"React Hook useEffect has missing dependencies: 'handeTrayGet', 'isCheck', and 'navigate'. Either include them or remove the dependency array.",["6088"],["6089"],["6090"],["6091"],["6092"],"'sortId' is assigned a value but never used.",["6093"],"React Hook useMemo has missing dependencies: 'trayData?.limit', 'trayData?.prefix', and 'trayData?.type_taxanomy'. Either include them or remove the dependency array.",["6094"],"React Hook useMemo has missing dependencies: 'handelUic', 'trayData?.limit', 'trayData?.prefix', and 'trayData?.type_taxanomy'. Either include them or remove the dependency array.",["6095"],["6096"],"React Hook useMemo has missing dependencies: 'handelAwbn' and 'handelViewItem'. Either include them or remove the dependency array.",["6097"],"React Hook useEffect has missing dependencies: 'mmtTrayId' and 'navigate'. Either include them or remove the dependency array.",["6098"],["6099"],["6100"],"React Hook useMemo has missing dependencies: 'employeeData' and 'handelAwbn'. Either include them or remove the dependency array.",["6101"],"'Container' is defined but never used.",["6102"],"React Hook useMemo has a missing dependency: 'trayData?.limit'. Either include it or remove the dependency array.",["6103"],"React Hook useMemo has missing dependencies: 'handelUic' and 'trayData?.limit'. Either include them or remove the dependency array.",["6104"],["6105"],["6106"],["6107"],["6108"],["6109"],["6110"],"'setResDataUic' is assigned a value but never used.",["6111"],["6112"],["6113"],"'alpha' is defined but never used.",["6114"],["6115"],["6116"],"'description' is assigned a value but never used.","'setDescription' is assigned a value but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.",["6117"],["6118"],["6119"],"React Hook useEffect has missing dependencies: 'navigate', 'trayId', and 'user_name1'. Either include them or remove the dependency array.",["6120"],["6121"],["6122"],["6123"],["6124"],["6125"],["6126"],["6127"],["6128"],["6129"],["6130"],"'useNavigate' is defined but never used.",["6131"],["6132"],"React Hook useEffect has missing dependencies: 'muic', 'navigate', and 'trayId'. Either include them or remove the dependency array.",["6133"],"'handelViewTray' is assigned a value but never used.",["6134"],["6135"],["6136"],"'setMessage' is assigned a value but never used.","'LoginPrxo' is assigned a value but never used.","'open' is assigned a value but never used.","'itemDetails' is assigned a value but never used.","'setItemDetails' is assigned a value but never used.",["6137"],["6138"],["6139"],["6140"],["6141"],"'inputRef' is assigned a value but never used.",["6142"],["6143"],["6144"],"'BootstrapDialog' is assigned a value but never used.",["6145"],"React Hook useMemo has missing dependencies: 'trayData?.wht?.code' and 'trayData?.wht?.temp_array'. Either include them or remove the dependency array.",["6146"],["6147"],"'handelViewTrayItem' is assigned a value but never used.","'H1' is defined but never used.","'axiosSuperAdminPrexo' is defined but never used.",["6148"],["6149"],"'ContentBox' is assigned a value but never used.","'FlexBox' is assigned a value but never used.","'value' is assigned a value but never used.","'handleChange' is assigned a value but never used.",["6150"],["6151"],["6152"],["6153"],["6154"],["6155"],["6156"],["6157"],["6158"],["6159"],["6160"],"'axiosMisUser' is defined but never used.","'auditUserName' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array. You can also do a functional update 'setState(s => ...)' if you only need 'state' in the 'setState' call.",["6161"],"React Hook useMemo does nothing when called with only one argument. Did you forget to pass an array of dependencies?",["6162"],"no-global-assign","no-unsafe-negation",{"desc":"6163","fix":"6164"},{"desc":"6165","fix":"6166"},{"desc":"6167","fix":"6168"},{"desc":"6165","fix":"6169"},{"desc":"6165","fix":"6170"},{"desc":"6165","fix":"6171"},{"desc":"6165","fix":"6172"},{"desc":"6165","fix":"6173"},{"desc":"6174","fix":"6175"},{"desc":"6176","fix":"6177"},{"desc":"6178","fix":"6179"},{"desc":"6180","fix":"6181"},{"desc":"6176","fix":"6182"},{"desc":"6178","fix":"6183"},{"desc":"6184","fix":"6185"},{"desc":"6186","fix":"6187"},{"desc":"6176","fix":"6188"},{"desc":"6186","fix":"6189"},{"desc":"6176","fix":"6190"},{"desc":"6186","fix":"6191"},{"desc":"6192","fix":"6193"},{"desc":"6186","fix":"6194"},{"desc":"6192","fix":"6195"},{"desc":"6186","fix":"6196"},{"desc":"6192","fix":"6197"},{"desc":"6186","fix":"6198"},{"desc":"6192","fix":"6199"},{"desc":"6200","fix":"6201"},{"desc":"6200","fix":"6202"},{"desc":"6200","fix":"6203"},{"desc":"6200","fix":"6204"},{"desc":"6200","fix":"6205"},{"desc":"6200","fix":"6206"},{"desc":"6207","fix":"6208"},{"desc":"6207","fix":"6209"},{"desc":"6207","fix":"6210"},{"desc":"6207","fix":"6211"},{"desc":"6207","fix":"6212"},{"desc":"6207","fix":"6213"},{"desc":"6200","fix":"6214"},{"desc":"6200","fix":"6215"},{"desc":"6200","fix":"6216"},{"desc":"6217","fix":"6218"},{"desc":"6200","fix":"6219"},{"desc":"6217","fix":"6220"},{"desc":"6217","fix":"6221"},{"desc":"6217","fix":"6222"},{"desc":"6217","fix":"6223"},{"desc":"6178","fix":"6224"},{"desc":"6217","fix":"6225"},{"desc":"6217","fix":"6226"},{"desc":"6200","fix":"6227"},{"desc":"6217","fix":"6228"},{"desc":"6178","fix":"6229"},{"desc":"6217","fix":"6230"},{"desc":"6178","fix":"6231"},{"desc":"6217","fix":"6232"},{"desc":"6176","fix":"6233"},{"desc":"6200","fix":"6234"},{"desc":"6217","fix":"6235"},{"desc":"6217","fix":"6236"},{"desc":"6217","fix":"6237"},{"desc":"6217","fix":"6238"},{"desc":"6239","fix":"6240"},{"desc":"6241","fix":"6242"},{"desc":"6243","fix":"6244"},{"desc":"6245","fix":"6246"},{"desc":"6243","fix":"6247"},{"desc":"6245","fix":"6248"},{"desc":"6249","fix":"6250"},{"desc":"6251","fix":"6252"},{"desc":"6253","fix":"6254"},{"desc":"6255","fix":"6256"},{"desc":"6257","fix":"6258"},{"desc":"6259","fix":"6260"},{"desc":"6261","fix":"6262"},{"desc":"6174","fix":"6263"},{"desc":"6176","fix":"6264"},{"desc":"6245","fix":"6265"},{"desc":"6266","fix":"6267"},{"desc":"6268","fix":"6269"},{"desc":"6259","fix":"6270"},{"desc":"6255","fix":"6271"},{"desc":"6245","fix":"6272"},{"desc":"6273","fix":"6274"},{"desc":"6275","fix":"6276"},{"desc":"6277","fix":"6278"},{"desc":"6245","fix":"6279"},{"desc":"6280","fix":"6281"},{"desc":"6282","fix":"6283"},{"desc":"6245","fix":"6284"},{"desc":"6245","fix":"6285"},{"desc":"6286","fix":"6287"},{"desc":"6286","fix":"6288"},{"desc":"6289","fix":"6290"},{"desc":"6291","fix":"6292"},{"desc":"6293","fix":"6294"},{"desc":"6289","fix":"6295"},{"desc":"6296","fix":"6297"},{"desc":"6298","fix":"6299"},{"desc":"6273","fix":"6300"},{"desc":"6275","fix":"6301"},{"desc":"6302","fix":"6303"},{"desc":"6289","fix":"6304"},{"desc":"6305","fix":"6306"},{"desc":"6307","fix":"6308"},{"desc":"6289","fix":"6309"},{"desc":"6305","fix":"6310"},{"desc":"6311","fix":"6312"},{"desc":"6289","fix":"6313"},{"desc":"6305","fix":"6314"},{"desc":"6311","fix":"6315"},{"desc":"6289","fix":"6316"},{"desc":"6305","fix":"6317"},{"desc":"6318","fix":"6319"},{"desc":"6289","fix":"6320"},{"desc":"6305","fix":"6321"},{"desc":"6318","fix":"6322"},{"desc":"6289","fix":"6323"},{"desc":"6324","fix":"6325"},{"desc":"6326","fix":"6327"},{"desc":"6328","fix":"6329"},{"desc":"6324","fix":"6330"},{"desc":"6331","fix":"6332"},{"desc":"6289","fix":"6333"},{"desc":"6324","fix":"6334"},{"desc":"6335","fix":"6336"},{"desc":"6289","fix":"6337"},{"desc":"6324","fix":"6338"},{"desc":"6335","fix":"6339"},{"desc":"6340","fix":"6341"},{"desc":"6273","fix":"6342"},{"desc":"6286","fix":"6343"},{"desc":"6286","fix":"6344"},{"desc":"6345","fix":"6346"},{"desc":"6286","fix":"6347"},{"desc":"6217","fix":"6348"},{"desc":"6176","fix":"6349"},{"desc":"6289","fix":"6350"},{"desc":"6217","fix":"6351"},{"desc":"6217","fix":"6352"},{"desc":"6353","fix":"6354"},{"desc":"6200","fix":"6355"},{"desc":"6289","fix":"6356"},{"desc":"6357","fix":"6358"},{"desc":"6359","fix":"6360"},{"desc":"6289","fix":"6361"},{"desc":"6362","fix":"6363"},{"desc":"6200","fix":"6364"},{"desc":"6286","fix":"6365"},{"desc":"6200","fix":"6366"},{"desc":"6289","fix":"6367"},{"desc":"6305","fix":"6368"},{"desc":"6307","fix":"6369"},{"desc":"6286","fix":"6370"},{"desc":"6217","fix":"6371"},{"desc":"6200","fix":"6372"},{"desc":"6289","fix":"6373"},{"desc":"6374","fix":"6375"},{"desc":"6305","fix":"6376"},{"desc":"6311","fix":"6377"},{"desc":"6200","fix":"6378"},{"desc":"6379","fix":"6380"},{"desc":"6286","fix":"6381"},"Update the dependencies array to be: [navigate, pathname, previouseRoute]",{"range":"6382","text":"6383"},"Update the dependencies array to be: [editFetchData, open, reset]",{"range":"6384","text":"6385"},"Update the dependencies array to be: [editFetchData, open, profile, reset]",{"range":"6386","text":"6387"},{"range":"6388","text":"6385"},{"range":"6389","text":"6385"},{"range":"6390","text":"6385"},{"range":"6391","text":"6385"},{"range":"6392","text":"6385"},"Update the dependencies array to be: [refresh, page, rowsPerPage, navigate]",{"range":"6393","text":"6394"},"Update the dependencies array to be: [data]",{"range":"6395","text":"6396"},"Update the dependencies array to be: [navigate, refresh]",{"range":"6397","text":"6398"},"Update the dependencies array to be: [navigate, page, refresh, rowsPerPage]",{"range":"6399","text":"6400"},{"range":"6401","text":"6396"},{"range":"6402","text":"6398"},"Update the dependencies array to be: [isAlive, navigate, page, rowsPerPage]",{"range":"6403","text":"6404"},"Update the dependencies array to be: [page, isAlive, rowsPerPage, navigate]",{"range":"6405","text":"6406"},{"range":"6407","text":"6396"},{"range":"6408","text":"6406"},{"range":"6409","text":"6396"},{"range":"6410","text":"6406"},"Update the dependencies array to be: [data, handleClick, handleSelectAll, isCheck, item.length, label]",{"range":"6411","text":"6412"},{"range":"6413","text":"6406"},{"range":"6414","text":"6412"},{"range":"6415","text":"6406"},{"range":"6416","text":"6412"},{"range":"6417","text":"6406"},{"range":"6418","text":"6412"},"Update the dependencies array to be: [isAlive, navigate]",{"range":"6419","text":"6420"},{"range":"6421","text":"6420"},{"range":"6422","text":"6420"},{"range":"6423","text":"6420"},{"range":"6424","text":"6420"},{"range":"6425","text":"6420"},"Update the dependencies array to be: [pagination.page, pagination.item, pagination.size]",{"range":"6426","text":"6427"},{"range":"6428","text":"6427"},{"range":"6429","text":"6427"},{"range":"6430","text":"6427"},{"range":"6431","text":"6427"},{"range":"6432","text":"6427"},{"range":"6433","text":"6420"},{"range":"6434","text":"6420"},{"range":"6435","text":"6420"},"Update the dependencies array to be: [navigate]",{"range":"6436","text":"6437"},{"range":"6438","text":"6420"},{"range":"6439","text":"6437"},{"range":"6440","text":"6437"},{"range":"6441","text":"6437"},{"range":"6442","text":"6437"},{"range":"6443","text":"6398"},{"range":"6444","text":"6437"},{"range":"6445","text":"6437"},{"range":"6446","text":"6420"},{"range":"6447","text":"6437"},{"range":"6448","text":"6398"},{"range":"6449","text":"6437"},{"range":"6450","text":"6398"},{"range":"6451","text":"6437"},{"range":"6452","text":"6396"},{"range":"6453","text":"6420"},{"range":"6454","text":"6437"},{"range":"6455","text":"6437"},{"range":"6456","text":"6437"},{"range":"6457","text":"6437"},"Update the dependencies array to be: [editFetchData, open, productImage]",{"range":"6458","text":"6459"},"Update the dependencies array to be: [isAlive, username]",{"range":"6460","text":"6461"},"Update the dependencies array to be: [bagId, isAlive]",{"range":"6462","text":"6463"},"Update the dependencies array to be: [isAlive, trayId]",{"range":"6464","text":"6465"},{"range":"6466","text":"6463"},{"range":"6467","text":"6465"},"Update the dependencies array to be: [bagId, isAlive, navigate]",{"range":"6468","text":"6469"},"Update the dependencies array to be: [handleClick, handleSelectAll, isCheck, item]",{"range":"6470","text":"6471"},"Update the dependencies array to be: [isAlive, isCheck]",{"range":"6472","text":"6473"},"Update the dependencies array to be: [bagId, navigate]",{"range":"6474","text":"6475"},"Update the dependencies array to be: [bagData, navigate]",{"range":"6476","text":"6477"},"Update the dependencies array to be: [bagData]",{"range":"6478","text":"6479"},"Update the dependencies array to be: [textBoxDis, awbn, bagData, handelAwbn]",{"range":"6480","text":"6481"},{"range":"6482","text":"6394"},{"range":"6483","text":"6396"},{"range":"6484","text":"6465"},"Update the dependencies array to be: [bagId, navigate, refresh, user_name1]",{"range":"6485","text":"6486"},"Update the dependencies array to be: [bagData, bagId]",{"range":"6487","text":"6488"},{"range":"6489","text":"6479"},{"range":"6490","text":"6475"},{"range":"6491","text":"6465"},"Update the dependencies array to be: [navigate, trayId]",{"range":"6492","text":"6493"},"Update the dependencies array to be: [employeeData]",{"range":"6494","text":"6495"},"Update the dependencies array to be: [textDisable, awbn, employeeData, handelAwbn, handelDelete]",{"range":"6496","text":"6497"},{"range":"6498","text":"6465"},"Update the dependencies array to be: [isCheck, muic, navigate, refresh]",{"range":"6499","text":"6500"},"Update the dependencies array to be: [refresh, clubModel, isCheck, handeTrayGet, navigate]",{"range":"6501","text":"6502"},{"range":"6503","text":"6465"},{"range":"6504","text":"6465"},"Update the dependencies array to be: [trayId]",{"range":"6505","text":"6506"},{"range":"6507","text":"6506"},"Update the dependencies array to be: [navigate, refresh, trayId]",{"range":"6508","text":"6509"},"Update the dependencies array to be: [trayData?.items, trayData?.limit, trayData?.prefix, trayData?.type_taxanomy]",{"range":"6510","text":"6511"},"Update the dependencies array to be: [textDisable, uic, trayData.actual_items, trayData?.limit, trayData?.type_taxanomy, trayData?.prefix, handelUic]",{"range":"6512","text":"6513"},{"range":"6514","text":"6509"},"Update the dependencies array to be: [textDisable, awbn, tray?.wht, handelAwbn, handelViewItem]",{"range":"6515","text":"6516"},"Update the dependencies array to be: [mmtTrayId, navigate]",{"range":"6517","text":"6518"},{"range":"6519","text":"6493"},{"range":"6520","text":"6495"},"Update the dependencies array to be: [textDisable, awbn, employeeData, handelAwbn]",{"range":"6521","text":"6522"},{"range":"6523","text":"6509"},"Update the dependencies array to be: [trayData?.items, trayData?.limit]",{"range":"6524","text":"6525"},"Update the dependencies array to be: [textDisable, uic, trayData?.actual_items, trayData?.limit, handelUic]",{"range":"6526","text":"6527"},{"range":"6528","text":"6509"},{"range":"6529","text":"6525"},"Update the dependencies array to be: [textDisable, uic, trayData.actual_items, trayData?.limit, handelUic]",{"range":"6530","text":"6531"},{"range":"6532","text":"6509"},{"range":"6533","text":"6525"},{"range":"6534","text":"6531"},{"range":"6535","text":"6509"},{"range":"6536","text":"6525"},"Update the dependencies array to be: [textBoxDis, uic, trayData.actual_items, trayData?.limit, handelUic]",{"range":"6537","text":"6538"},{"range":"6539","text":"6509"},{"range":"6540","text":"6525"},{"range":"6541","text":"6538"},{"range":"6542","text":"6509"},"Update the dependencies array to be: [trayData?.actual_items, trayData?.limit]",{"range":"6543","text":"6544"},"Update the dependencies array to be: [trayData.temp_array, trayData?.limit]",{"range":"6545","text":"6546"},"Update the dependencies array to be: [navigate, refresh, trayId, user_name1]",{"range":"6547","text":"6548"},{"range":"6549","text":"6544"},"Update the dependencies array to be: [textBoxDis, uic, trayData.items, trayData?.limit, handelUic]",{"range":"6550","text":"6551"},{"range":"6552","text":"6509"},{"range":"6553","text":"6544"},"Update the dependencies array to be: [textDisable, uic, trayData?.items, trayData?.limit, handelUic]",{"range":"6554","text":"6555"},{"range":"6556","text":"6509"},{"range":"6557","text":"6544"},{"range":"6558","text":"6555"},"Update the dependencies array to be: [isCheck, muic, navigate]",{"range":"6559","text":"6560"},{"range":"6561","text":"6493"},{"range":"6562","text":"6506"},{"range":"6563","text":"6506"},"Update the dependencies array to be: [muic, navigate, trayId]",{"range":"6564","text":"6565"},{"range":"6566","text":"6506"},{"range":"6567","text":"6437"},{"range":"6568","text":"6396"},{"range":"6569","text":"6509"},{"range":"6570","text":"6437"},{"range":"6571","text":"6437"},"Update the dependencies array to be: [data, tableMessage]",{"range":"6572","text":"6573"},{"range":"6574","text":"6420"},{"range":"6575","text":"6509"},"Update the dependencies array to be: [trayData?.limit, trayData?.temp_array]",{"range":"6576","text":"6577"},"Update the dependencies array to be: [trayData.actual_items, trayData?.limit]",{"range":"6578","text":"6579"},{"range":"6580","text":"6509"},"Update the dependencies array to be: [trayData?.otherTray, trayData?.wht?.code, trayData?.wht?.temp_array]",{"range":"6581","text":"6582"},{"range":"6583","text":"6420"},{"range":"6584","text":"6506"},{"range":"6585","text":"6420"},{"range":"6586","text":"6509"},{"range":"6587","text":"6525"},{"range":"6588","text":"6527"},{"range":"6589","text":"6506"},{"range":"6590","text":"6437"},{"range":"6591","text":"6420"},{"range":"6592","text":"6509"},"Update the dependencies array to be: [trayData, trayId]",{"range":"6593","text":"6594"},{"range":"6595","text":"6525"},{"range":"6596","text":"6531"},{"range":"6597","text":"6420"},"Update the dependencies array to be: [state]",{"range":"6598","text":"6599"},{"range":"6600","text":"6506"},[3296,3322],"[navigate, pathname, previouseRoute]",[1013,1015],"[editFetchData, open, reset]",[1831,1833],"[editFetchData, open, profile, reset]",[1689,1691],[1033,1035],[1453,1455],[1722,1724],[1996,1998],[1938,1953],"[refresh, page, rowsPerPage, navigate]",[22106,22118],"[data]",[1978,1987],"[navigate, refresh]",[2429,2444],"[navigate, page, refresh, rowsPerPage]",[10448,10460],[1955,1964],[2704,2719],"[isAlive, navigate, page, rowsPerPage]",[2175,2190],"[page, isAlive, rowsPerPage, navigate]",[14797,14809],[2188,2203],[14757,14769],[2370,2385],[23598,23619],"[data, handleClick, handleSelectAll, isCheck, item.length, label]",[2213,2227],[22240,22261],[2369,2384],[21807,21828],[2370,2385],[21810,21831],[1858,1867],"[isAlive, navigate]",[1854,1863],[1852,1861],[1908,1917],[3086,3095],[3178,3187],[2563,2597],"[pagination.page, pagination.item, pagination.size]",[2813,2847],[3138,3172],[2636,2670],[2511,2545],[2306,2340],[1558,1567],[2990,2999],[5100,5109],[1505,1507],"[navigate]",[1720,1729],[1562,1564],[1569,1571],[1527,1529],[1562,1564],[2953,2962],[1501,1503],[1522,1524],[2895,2904],[1702,1704],[2945,2954],[1458,1460],[2941,2950],[2305,2307],[7530,7542],[1508,1517],[1508,1510],[1449,1451],[1407,1409],[3075,3077],[1023,1025],"[editFetchData, open, productImage]",[1436,1445],"[isAlive, username]",[1381,1390],"[bagId, isAlive]",[1474,1483],"[isAlive, trayId]",[1543,1552],[1383,1392],[1860,1869],"[bagId, isAlive, navigate]",[13290,13305],"[handleClick, handleSelectAll, isCheck, item]",[1686,1695],"[isAlive, isCheck]",[3550,3552],"[bagId, navigate]",[4214,4223],"[bagData, navigate]",[16600,16619],"[bagData]",[21744,21788],"[textBoxDis, awbn, bagData, handelAwbn]",[2194,2209],[21123,21135],[1168,1177],[5052,5061],"[bagId, navigate, refresh, user_name1]",[5644,5653],"[bagData, bagId]",[25669,25687],[1331,1333],[1171,1180],[1776,1778],"[navigate, trayId]",[12526,12550],"[employeeData]",[18742,18792],"[textDisable, awbn, employeeData, handelAwbn, handelDelete]",[1171,1180],[1952,1961],"[isCheck, muic, navigate, refresh]",[3652,3672],"[refresh, clubModel, isCheck, handeTrayGet, navigate]",[1171,1180],[1139,1148],[1371,1373],"[trayId]",[1407,1409],[1261,1270],"[navigate, refresh, trayId]",[5418,5435],"[trayData?.items, trayData?.limit, trayData?.prefix, trayData?.type_taxanomy]",[8632,8673],"[textDisable, uic, trayData.actual_items, trayData?.limit, trayData?.type_taxanomy, trayData?.prefix, handelUic]",[3365,3374],[11361,11391],"[textDisable, awbn, tray?.wht, handelAwbn, handelViewItem]",[1506,1508],"[mmtTrayId, navigate]",[1732,1734],[9160,9184],[13953,14003],"[textDisable, awbn, employeeData, handelAwbn]",[1666,1675],[7354,7371],"[trayData?.items, trayData?.limit]",[11178,11220],"[textDisable, uic, trayData?.actual_items, trayData?.limit, handelUic]",[1457,1466],[5625,5642],[8191,8232],"[textDisable, uic, trayData.actual_items, trayData?.limit, handelUic]",[1568,1577],[7172,7189],[10873,10915],[1610,1619],[5736,5753],[8371,8411],"[textBoxDis, uic, trayData.actual_items, trayData?.limit, handelUic]",[6885,6894],[13538,13555],[17312,17353],[4152,4161],[9868,9892],"[trayData?.actual_items, trayData?.limit]",[12407,12441],"[trayData.temp_array, trayData?.limit]",[5985,5994],"[navigate, refresh, trayId, user_name1]",[12689,12713],[16138,16172],"[textBoxDis, uic, trayData.items, trayData?.limit, handelUic]",[1654,1663],[7518,7542],[11284,11319],"[textDisable, uic, trayData?.items, trayData?.limit, handelUic]",[1649,1658],[7588,7612],[11290,11325],[1648,1650],"[isCheck, muic, navigate]",[1326,1328],[1092,1094],[1699,1701],[1801,1803],"[muic, navigate, trayId]",[1162,1164],[2303,2305],[7522,7534],[1964,1973],[1463,1465],[2369,2371],[5716,5742],"[data, tableMessage]",[1660,1669],[3164,3173],[9456,9478],"[trayData?.limit, trayData?.temp_array]",[12317,12359],"[trayData.actual_items, trayData?.limit]",[2942,2951],[11473,11494],"[trayData?.otherTray, trayData?.wht?.code, trayData?.wht?.temp_array]",[1571,1580],[1149,1151],[1578,1587],[1651,1660],[7966,7983],[12061,12103],[1152,1154],[1524,1526],[3140,3149],[2019,2028],[3287,3297],"[trayData, trayId]",[9322,9339],[13004,13046],[1725,1734],[1509,1511],"[state]",[1149,1151]]